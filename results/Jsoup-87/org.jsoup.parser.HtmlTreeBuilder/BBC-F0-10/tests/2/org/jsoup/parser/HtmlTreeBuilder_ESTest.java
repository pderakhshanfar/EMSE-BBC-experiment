/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 22:01:11 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.HtmlTreeBuilderState;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.XmlTreeBuilder;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(",F:Sp{/2j!PKY2.x8");
      Document document1 = document0.clone();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document1, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("tale", "6$MHc.J1wsP1-<6,");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("listing", document0, "figure");
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      CDataNode cDataNode0 = new CDataNode("ReB!");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("figure", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "zM@(>dwVd|2hF81`", attributes0);
      htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
      htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("figure");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("olgro[Zup", "olgro[Zup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("olgro[Zup", document0, "olgro[Zup");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("olgro[Zup", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "YV-8)f|", attributes0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("colgroup");
      Element element0 = new Element(tag0, "colgroup");
      parser0.parseFragmentInput("l4ER:9(t!E", element0, "colgroup");
      String[] stringArray0 = new String[2];
      htmlTreeBuilder0.insertStartTag("l4ER:9(t!E");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("colgroup", document0, "RF#coT4~$~");
      htmlTreeBuilder0.insert(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("td");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "td", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("B`Ir");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "thead", attributes0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("38f{z5&{_!?:}", pseudoTextElement0, "thead");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterFrameset;
      htmlTreeBuilder0.error(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = new Document("colgroup");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Elements elements0 = document0.getElementsByAttributeValueEnding("colgroup", "style");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTableText;
      htmlTreeBuilder0.transition(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("isindex", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "P`m7Z3", attributes0);
      htmlTreeBuilder0.setHeadElement(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.newPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("fk", "fk");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = parser0.parseFragmentInput("LWs", document0, "D4J.3");
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Elements elements0 = document0.getElementsContainingOwnText("/cNv|4");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Element element0 = new Element("th");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parseFragment("}6Us.7t~+", element0, "}6Us.7t~+", parser0);
      String string0 = htmlTreeBuilder0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      parser1.parseFragmentInput("EndTag", document0, "EndTag");
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("ul");
      Element element0 = new Element(tag0, "ul");
      parser0.parseFragmentInput("coro5`p", element0, "coro5`p");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertTrue(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("ul");
      Element element0 = new Element(tag0, "ul");
      parser0.parseFragmentInput("coro5`p", element0, "coro5`p");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals("ul", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("colgroup", "colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("colgroup", document0, "colgroup");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Document document1 = (Document)htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals("colgroup", document1.location());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.CData token_CData0 = new Token.CData("{J\"R%\"7H6?e~b:,yIN");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTableBody;
      boolean boolean0 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("colro/");
      Element element0 = new Element(tag0, "colgro5`p");
      parser0.parseFragmentInput("colgro5`p", element0, "colgro5`p");
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.Doctype token_Doctype0 = tokeniser0.doctypePending;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InCell;
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0, htmlTreeBuilderState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("colgroup", "colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("colgroup", document0, "colgroup");
      Token.EOF token_EOF0 = new Token.EOF();
      boolean boolean0 = htmlTreeBuilder0.process(token_EOF0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(":containsOwn");
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      parser0.parseFragmentInput(":containsOwn", document0, ":containsOwn");
      Token.Doctype token_Doctype0 = new Token.Doctype();
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("coro5`p", (Element) null, "org.jsoup.select.StructuralEvaluator$Has", parser0);
      htmlTreeBuilder0.push((Element) null);
      Element element0 = htmlTreeBuilder0.pop();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("colgroup", (Element) null, "thead", parser0);
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals("thead", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Tag tag0 = Tag.valueOf("S+n/-z J");
      CDataNode cDataNode0 = new CDataNode("blockquote");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tbody", attributes0);
      htmlTreeBuilder0.parseFragment("`?5jX", pseudoTextElement0, "org.jsoup.select.Evaluator$AttributeWithValueMatching", parser0);
      htmlTreeBuilder0.push(pseudoTextElement0);
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.originalState();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ":EiSuPX)n", attributes0);
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("thead", pseudoTextElement0, "EndTag", parser0);
      htmlTreeBuilder0.originalState();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ":EiSuPX)n", attributes0);
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("thead", pseudoTextElement0, "thead", parser0);
      htmlTreeBuilder0.push(pseudoTextElement0);
      boolean boolean0 = htmlTreeBuilder0.onStack(pseudoTextElement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("Kcolgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = parser0.parseFragmentInput("Kcolgroup", document0, "Kcolgroup");
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.onStack(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("colgroup", document0, "RF#coT4~$~");
      document0.appendTo(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals("colgroup", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "thead", attributes0);
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("thead", pseudoTextElement0, "`drg", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("thead", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tbody", attributes0);
      boolean boolean0 = htmlTreeBuilder0.isSpecial(pseudoTextElement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = parser0.parseFragmentInput("colgroup", document0, "RF#coT4~$~");
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("colro/");
      Element element0 = new Element(tag0, "colgro5`p");
      List<Node> list0 = parser0.parseFragmentInput("colgro5`p", element0, "colgro5`p");
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgrouJp");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("colgrouJp", document0, "colgrouJp");
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFosterInserts(true);
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Element element0 = new Element("ul");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("ul", element0, ")b&*c(y4", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.push(element0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(")b&*c(y4", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertEquals(0, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("colgroup");
      Element element0 = new Element(tag0, "ETb9>");
      parser0.parseFragmentInput("J,\"4hqu", element0, "usxE");
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      CDataNode cDataNode0 = new CDataNode("ETb9>");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("usxE", attributes0);
      Element element1 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(0, element1.siblingIndex());
      assertEquals("usxE", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("param");
      Element element0 = new Element(tag0, "U");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = parser0.parseFragmentInput("n4^{BH", element0, "coro5`p");
      assertEquals(1, list0.size());
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("Z:[@@`%T(e:Fk", attributes0);
      Element element1 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals("coro5`p", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parseFragment("th", (Element) null, "ul", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("\tJNvRP`hi1S0k`SD");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("ul", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals("ul", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("olgro", "olgro");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = parser0.parseFragmentInput("olgro", document0, "olgro");
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.processStartTag("olgro");
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("olgro", attributes0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("olgro[Zup", "olgro[Zup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("olgro[Zup", document0, "olgro[Zup");
      Attributes attributes0 = new Attributes();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("html", attributes0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertTrue(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = new Document("V6eq_F&dBI");
      List<Node> list0 = parser0.parseFragmentInput("l4ER:9(t!E", document0, "l4ER:9(t!E");
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("html");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("colgroup", "colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("colgroup", document0, "colgroup");
      assertEquals(1, document0.childNodeSize());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("colgroup", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "YV-8)f|", attributes0);
      htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
      htmlTreeBuilder0.reconstructFormattingElements();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "colgroup";
      stringArray0[1] = "template";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = Parser.parseBodyFragmentRelaxed("I$l_Aag.aZ(", "I$l_Aag.aZ(");
      List<Node> list0 = parser0.parseFragmentInput("I$l_Aag.aZ(", document0, "AF");
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, list0.size());
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "AF";
      stringArray0[2] = "af";
      stringArray0[3] = "thead";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "thead", attributes0);
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("thead", pseudoTextElement0, "`dag", parser0);
      htmlTreeBuilder0.push(pseudoTextElement0);
      boolean boolean0 = htmlTreeBuilder0.inScope("table");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("olgro[Zup", "olgro[Zup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("olgro[Zup", document0, "olgro[Zup");
      boolean boolean0 = htmlTreeBuilder0.inScope("dwjV3F&AYV+L}E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("*=", (Element) null, "*=", parser0);
      assertEquals(1, list0.size());
      
      Element element0 = new Element("c");
      htmlTreeBuilder0.push(element0);
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("c");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ":EiSuPX)n", attributes0);
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("thead", pseudoTextElement0, "thead", parser0);
      htmlTreeBuilder0.push(pseudoTextElement0);
      Element element0 = htmlTreeBuilder0.aboveOnStack(pseudoTextElement0);
      htmlTreeBuilder0.push(element0);
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("table");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      parser0.parseInput("org.jsoup.select.Evaluator$MatchText", "org.jsoup.select.Evaluator$MatchText");
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("body");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = parser1.parseInput(" 0", "org.jsoup.select.Evaluator$MatchText");
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("_B8^t~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("colgro5`p");
      Element element0 = new Element(tag0, "colgro5`p");
      parser0.parseFragmentInput("tr?/z`", element0, "6I&3i%dz3S[Twe'X&%n");
      htmlTreeBuilder0.popStackToClose("colgro5`p");
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("Q>Rt$YehNg=G", (Element) null, "Q>Rt$YehNg=G");
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      parser0.parseFragmentInput("EndTag", document0, "EndTag");
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      parser1.parseFragmentInput("E0$dTag", document0, "=d$,DM$5p:L@TQm[?p");
      Element element0 = htmlTreeBuilder0.currentElement();
      element0.append("style");
      assertEquals(3, element0.childNodeSize());
      
      Element element1 = htmlTreeBuilder0.getHeadElement();
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("f_Z7&=R!cX'zp -L-", "f_Z7&=R!cX'zp -L-");
      document0.title("[OU}lrjUP1eI");
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ":EiSuPX)n", attributes0);
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("thead", pseudoTextElement0, "?`obC^lK+K]", parser0);
      Element element0 = htmlTreeBuilder0.getFromStack(";");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("link", "tale");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("tale", document0, "tale");
      htmlTreeBuilder0.insertStartTag("tale");
      Element element0 = htmlTreeBuilder0.getFromStack("tale");
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "thead", attributes0);
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("thead", pseudoTextElement0, "`dag", parser0);
      htmlTreeBuilder0.push(pseudoTextElement0);
      Element element0 = htmlTreeBuilder0.getFromStack("table");
      assertSame(element0, pseudoTextElement0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("colgro5`p");
      Element element0 = new Element(tag0, "ol");
      parser0.parseFragmentInput("YV-8)f|", element0, "colgro5`p");
      Element element1 = htmlTreeBuilder0.getFromStack("html");
      assertNotNull(element1);
      assertEquals(1, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("replacementChar", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "replacementChar", attributes0);
      htmlTreeBuilder0.setFormElement(formElement0);
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertFalse(formElement1.isBlock());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("tab`e", "tab`e");
      document0.empty();
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals("tab`e", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("=e*\"s", parseSettings0);
      Element element0 = new Element(tag0, "WJrbGCHTcd_&!");
      parser0.parseFragmentInput("`P'o'", element0, "WJrbGCHTcd_&!");
      Document document0 = htmlTreeBuilder0.getDocument();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("noframes", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "thed", attributes0);
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      parser0.parseFragmentInput("noframes", pseudoTextElement0, "noframes");
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("noframes", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("", "");
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "thead", attributes0);
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("thead", pseudoTextElement0, "`drg", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("table");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = Parser.parseBodyFragment("coro5`p", "coro5`p");
      parser0.parseFragmentInput("coro5`p", document0, "coro5`p");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Document document1 = (Document)htmlTreeBuilder0.getActiveFormattingElement("#document");
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.framesetOk(true);
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("td", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "td", attributes0);
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("td", pseudoTextElement0, "H_a&s]ocl:/k'mSa.s", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.processStartTag("tt");
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("tt");
      assertEquals("H_a&s]ocl:/k'mSa.s", element0.baseUri());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("D%$;", (Element) null, "tr", parser0);
      htmlTreeBuilder0.push((Element) null);
      Element element0 = htmlTreeBuilder0.aboveOnStack((Element) null);
      assertNotNull(element0);
      
      htmlTreeBuilder0.push(element0);
      htmlTreeBuilder0.aboveOnStack(element0);
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("RF#coT4~$~");
      Element element0 = new Element(tag0, "RF#coT4~$~");
      List<Node> list0 = parser0.parseFragmentInput("colgroup", element0, "RF#coT4~$~");
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.push(element0);
      htmlTreeBuilder0.insertOnStackAfter(element0, document0);
      Element element1 = htmlTreeBuilder0.aboveOnStack(document0);
      assertNotNull(element1);
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.resetInsertionMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("D%$;", (Element) null, "tr", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeLastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("z|5Z");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("head", "-MXF\"a)uS?R+");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.reconstructFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("#ysyyKWSNGls&;i'", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "#ysyyKWSNGls&;i'", attributes0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.push(formElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      Token.EndTag token_EndTag0 = tokeniser0.endPending;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.BeforeHead;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EndTag0, htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("tb");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tb", attributes0);
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("tb", pseudoTextElement0, "tb", parser0);
      htmlTreeBuilder0.popStackToClose("td");
      CharacterReader characterReader0 = new CharacterReader(": %JQ0cxJ&\"P");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("td", attributes0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterHead;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_StartTag1, htmlTreeBuilderState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.CData token_CData0 = new Token.CData("object");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Initial;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Doctype token_Doctype0 = new Token.Doctype();
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_Doctype0.type = token_TokenType0;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InSelectInTable;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Doctype0, htmlTreeBuilderState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Comment token_Comment0 = new Token.Comment();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("4xVz`8e?5z_X*Y'/K", "4xVz`8e?5z_X*Y'/K");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("4xVz`8e?5z_X*Y'/K", document0, "4xVz`8e?5z_X*Y'/K");
      StringReader stringReader0 = new StringReader("fieldset");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 2501);
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Token.Tag token_Tag0 = token_StartTag0.name((String) null);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Tag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "thead", attributes0);
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("thead", pseudoTextElement0, "`dag", parser0);
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.Character token_Character0 = tokeniser0.charPending;
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_Character0.type = token_TokenType0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Character0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Character cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose("`P'o'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToBefore((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = Parser.parseBodyFragmentRelaxed("=e*\"s", "=e*\"s");
      parser0.parseFragmentInput("74[A2Mmi[{Ek;", document0, "h6");
      htmlTreeBuilder0.popStackToClose("= t7|&<Q\"\"C#1MzF_n");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment((String) null, (Element) null, (String) null, (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgro5`p");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("", document0, (String) null, parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("B`Ir", "B`Ir");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.onStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.lastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isSpecial((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("B`Ir");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("colgroup");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("tgy", "org.jsoup.parser.CharacterReader");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("^xw?Q&,b`7@J\"_]R", "q[");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ":EiSuPX)n", attributes0);
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("thead", pseudoTextElement0, "`dag", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("!XLap+hu#:}w{r@CKV>", attributes0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      CharacterReader characterReader0 = new CharacterReader("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 0);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      CDataNode cDataNode0 = new CDataNode("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(",W32\"g><2MrPr%", attributes0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Token.Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("U7&!!ak8");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("pRSrA\u0006-k[<RtH/vf", "pRSrA\u0006-k[<RtH/vf");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("pRSrA\u0006-k[<RtH/vf", document0, "pRSrA\u0006-k[<RtH/vf");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("td");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(stringReader0, "td", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "colgroup", parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope(" 0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inButtonScope("colgroup");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getFromStack((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getActiveFormattingElement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.generateImpliedEndTags("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterBody;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("selected", "selected");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("m~EAG.yH%Q;", (Element) null, "BL_rPV9&nCJmek(");
      htmlTreeBuilder0.processStartTag("BL_rPV9&nCJmek(");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("div", (Element) null, "div");
      htmlTreeBuilder0.popStackToBefore("div");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      parser0.parseFragmentInput("E0$dTag", document0, "=d$,DM$5p:L@TQm[?p");
      htmlTreeBuilder0.popStackToClose("?Mh9Ve");
      Element element0 = htmlTreeBuilder0.insertStartTag("=d$,DM$5p:L@TQm[?p");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("", "vO^");
      htmlTreeBuilder0.processStartTag("style");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("", "");
      htmlTreeBuilder0.processStartTag("script");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("iframe", parseSettings0);
      Element element0 = new Element(tag0, "");
      parser1.parseFragmentInput("=e*\"s", element0, "WJrbGCHTcd_&!");
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("=e*\"s");
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("colgroup", "colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("colgroup", document0, "colgroup");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("template");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("Kcolgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("Z`Smh.CNgY;rr>5\"!e", document0, "v/{`Nf %`%u$ %1");
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("ul");
      Element element0 = new Element(tag0, "ul");
      parser0.parseFragmentInput("coro5`p", element0, "coro5`p");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(element0);
      assertFalse(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("Kcolgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("Z`Smh.CNgY;rr>5\"!e", document0, "v/{`Nf %`%u$ %1");
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("colgroup", document0, "colgroup");
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("<a>e", "<a>e");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("<a>e", document0, "<a>e");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("olgro[Zup", "olgro[Zup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("olgro[Zup", document0, "olgro[Zup");
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      boolean boolean0 = htmlTreeBuilder0.processStartTag("tLp!VSn*D(v.g(F<j");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("coro5`p");
      Element element0 = new Element(tag0, "M|lW");
      parser0.parseFragmentInput("coro5`p", element0, "noscript");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertFalse(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("ul");
      Element element0 = new Element(tag0, "ul");
      parser0.parseFragmentInput("coro5`p", element0, "coro5`p");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("colgroup", "colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("colgroup", document0, "colgroup");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("colgroup", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "YV-8)f|", attributes0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("colgroup", document0, "RF#coT4~$~");
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("rt");
      CDataNode cDataNode0 = new CDataNode("kV/ISc*b61YV(aG7zm");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "~z}?", attributes0);
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("rt", pseudoTextElement0, "frameset", parser0);
      htmlTreeBuilder0.push(pseudoTextElement0);
      htmlTreeBuilder0.generateImpliedEndTags("o");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("option");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "option", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("option", pseudoTextElement0, ":prev*%s", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.push(pseudoTextElement0);
      boolean boolean0 = htmlTreeBuilder0.inSelectScope(":prev*%s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "thead", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("thead", pseudoTextElement0, "`dag", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.push(pseudoTextElement0);
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("table");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      parser1.parseFragmentInput("E0$dTag", document0, "=d$,DM$5p:L@TQm[?p");
      htmlTreeBuilder0.popStackToClose("?Mh9Ve");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("=d$,DM$5p:L@TQm[?p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("colgroup", "colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("colgroup", document0, "colgroup");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("colgroup", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "YV-8)f|", attributes0);
      htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
      htmlTreeBuilder0.reconstructFormattingElements();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "colgroup";
      stringArray0[2] = "template";
      boolean boolean0 = htmlTreeBuilder0.inScope("Q'2D\"'74U%", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      parser1.parseInput(" 0", "org.jsoup.select.Evaluator$MatchText");
      boolean boolean0 = htmlTreeBuilder0.inTableScope(" 0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("colgroup", document0, "RF#coT4~$~");
      htmlTreeBuilder0.popStackToBefore("input");
      String[] stringArray0 = new String[4];
      boolean boolean0 = htmlTreeBuilder0.inScope("Unexpected token [%s] when in state [%s]", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("frameset");
      Element element0 = new Element(tag0, "coro5`p");
      List<Node> list0 = parser0.parseFragmentInput("aside", element0, "coro5`p");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      parser1.parseInput("colgroup", "select");
      Element element0 = htmlTreeBuilder0.getHeadElement();
      List<Node> list0 = parser1.parseFragmentInput("select", element0, "input");
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("caption", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("plaintext");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tagname", attributes0);
      List<Node> list0 = parser0.parseFragmentInput("$Lx1", pseudoTextElement0, "plaintext");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("tfoot");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "49Q1W_nM\" ?#Q", attributes0);
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("hrup", pseudoTextElement0, "~FPI6/uV;", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("thead", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tbody", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("selected", pseudoTextElement0, "tbody");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("tbody", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "vtvody", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("", pseudoTextElement0, "thead", parser0);
      assertTrue(list0.isEmpty());
      
      htmlTreeBuilder0.push(pseudoTextElement0);
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(pseudoTextElement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("tr");
      Element element0 = new Element(tag0, "tr");
      List<Node> list0 = parser0.parseFragmentInput("&G\"YZAHvS", element0, "7ZUJS");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Element element0 = new Element("th");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parseFragment("}6Us.7t~+", element0, "}6Us.7t~+", parser0);
      htmlTreeBuilder0.push(element0);
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("select");
      Element element0 = new Element(tag0, "select");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("math", element0, "tr");
      CDataNode cDataNode0 = new CDataNode("kcolgroup");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "<3:a0$9R`MQ$", attributes0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
      assertEquals(0, pseudoTextElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("\"H@#LQ6ep<!~u", "org.jsoup.parser.HtmlTreeBuilder");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("colgroup", document0, "RF#coT4~$~");
      htmlTreeBuilder0.push((Element) null);
      htmlTreeBuilder0.replaceOnStack((Element) null, document0);
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = parser1.parseInput("colgroup", "select");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("colgroup", document0, "colgroup");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "thead", attributes0);
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("thead", pseudoTextElement0, "`dag", parser0);
      htmlTreeBuilder0.push(pseudoTextElement0);
      Element element0 = htmlTreeBuilder0.aboveOnStack(pseudoTextElement0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("colgroup", document0, "e*+*$C)3");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack((Element) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("Q>Rt$YehNg=G", (Element) null, "Q>Rt$YehNg=G");
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Tag tag0 = Tag.valueOf("table");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "thead", attributes0);
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parseFragment(">a}#(+j~g3\"O", pseudoTextElement0, "Yfqia/t#pN87!m$", parser0);
      htmlTreeBuilder0.push(pseudoTextElement0);
      boolean boolean0 = htmlTreeBuilder0.processStartTag("thead");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = new Document("V6eq_F&dBI");
      parser0.parseFragmentInput("l4ER:9(t!E", document0, "l4ER:9(t!E");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "V6eq_F&dBI";
      stringArray0[1] = "html";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("colgroup", document0, "colgroup");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "colgroup";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = parser0.parseFragmentInput("colgroup", document0, "RF#coT4~$~");
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("olgro[Zup", "olgro[Zup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("olgro[Zup", document0, "olgro[Zup");
      CDataNode cDataNode0 = new CDataNode("olgro[Zup");
      htmlTreeBuilder0.insertInFosterParent(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("rfsint", "rfsint");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("rfsint", document0, "rfsint");
      boolean boolean0 = htmlTreeBuilder0.processStartTag("isindex");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = parser0.parseFragmentInput("colgroup", document0, "e*+*$C)3");
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.insertStartTag("fieldset");
      boolean boolean0 = htmlTreeBuilder0.inScope("fieldset", (String[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      parser1.parseInput(" 0", "org.jsoup.select.Evaluator$MatchText");
      Token.Comment token_Comment0 = new Token.Comment();
      htmlTreeBuilder0.insert(token_Comment0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("colgroup");
      Element element0 = new Element(tag0, "fj");
      parser0.parseFragmentInput("option", element0, "width must be > 0");
      Token.CData token_CData0 = new Token.CData("header");
      htmlTreeBuilder0.insert(token_CData0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("olgro[Zup", "olgro[Zup");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("olgro[Zup", document0, "olgro[Zup");
      Attributes attributes0 = new Attributes();
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      token_StartTag0.nameAttr("plaintext", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, true);
      assertEquals("olgro[Zup", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      List<Node> list0 = Parser.parseFragment("<uli />", (Element) null, "<uli />");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Element element0 = new Element("ul");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("<ul />", element0, "<ul />");
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.setTrackErrors(394);
      Tag tag0 = Tag.valueOf("colgroup");
      Element element0 = new Element(tag0, "colgroup");
      List<Node> list0 = parser0.parseFragmentInput("colgroup", element0, "colgroup");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("{UXJgi9@Fvn!c,3B4^A");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "          ", attributes0);
      List<Node> list0 = parser0.parseFragmentInput("nav", formElement0, "Q>Rt$YehNg=G");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Tag tag0 = Tag.valueOf("plaintext");
      Element element0 = new Element(tag0, " n]0,_tlbQ:V");
      List<Node> list0 = parser0.parseFragmentInput("colgroup", element0, "plaintext");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("noscript", parseSettings0);
      Element element0 = new Element(tag0, "ul");
      List<Node> list0 = parser0.parseFragmentInput("org.jsoup.select.Collector$FirstFinder", element0, "noscript");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Element element0 = new Element("script");
      List<Node> list0 = Parser.parseFragment("RZ++9\":bi;JV*B", element0, "ta_ble");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Element element0 = new Element("noframes");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parseFragment("`dag", element0, "embed", parser0);
      htmlTreeBuilder0.push(element0);
      htmlTreeBuilder0.popStackToBefore("noframes");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      Element element0 = new Element("title");
      List<Node> list0 = parser0.parseFragmentInput("isindex", element0, "dd");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inTableScope("l4ER:9(t!E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Comment token_Comment0 = new Token.Comment();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      boolean boolean0 = htmlTreeBuilder0.isSpecial(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("colro/");
      Element element0 = new Element(tag0, "colgro5`p");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("table");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput(":nth-child(%d)", (Element) null, "pubSysKey");
      htmlTreeBuilder0.popStackToClose("f73@");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "thead", attributes0);
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("thead", pseudoTextElement0, "`dag", parser0);
      htmlTreeBuilder0.push(pseudoTextElement0);
      boolean boolean0 = htmlTreeBuilder0.processStartTag("]P7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope("table");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(" 0", "org.jsoup.select.Evaluator$MatchText");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("Q'2D\"'74U%", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }
}
