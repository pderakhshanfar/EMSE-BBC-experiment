/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:53:22 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.HtmlTreeBuilderState;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.XmlTreeBuilder;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8HM-PfbCQHs'xwp%", "v8HM-PfbCQHs'xwp%");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      parser1.parseFragmentInput("v8HM-PfbCQHs'xwp%", document0, "v8HM-PfbCQHs'xwp%");
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("frame");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("fieldset", "fieldset");
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals("fieldset", document0.location());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("~g`0Ot]OD^tM1");
      Parser parser0 = Parser.htmlParser();
      Document document0 = Document.createShell("7tWm9=(*C\"ru");
      Document document1 = htmlTreeBuilder0.parse(stringReader0, "7tWm9=(*C\"ru", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8HM-PfbCQHs'xwp%", "v8HM-PfbCQHs'xwp%");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      parser1.parseFragmentInput("v8HM-PfbCQHs'xwp%", document0, "v8HM-PfbCQHs'xwp%");
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      Document document1 = Document.createShell("r\"wc?&{-");
      htmlTreeBuilder0.replaceOnStack(document0, document1);
      assertFalse(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.insertOnStackAfter(document0, (Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("~g`0Ot]OD^tM1");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "7tWm9=(*C\"ru", parser0);
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("center");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("org.jsoup.select.Selector", element0, "-6R#>vcIu*sg)k_2r9", parser0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InFrameset;
      htmlTreeBuilder0.error(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("X}^a");
      Element element0 = new Element(tag0, "");
      Elements elements0 = element0.getElementsByIndexEquals(100);
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Text;
      htmlTreeBuilder0.transition(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.newPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.framesetOk(false);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("X}^a");
      Element element0 = new Element(tag0, "");
      Elements elements0 = element0.getElementsByIndexEquals(100);
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      String string0 = htmlTreeBuilder0.toString();
      assertEquals("TreeBuilder{currentToken=null, state=null, currentElement=null}", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = Document.createShell("7tWm9=(*C\"ru");
      parser0.parseFragmentInput("ZYAj@-0}pyQ0\"@Amq", document0, "'&-t38ueT$!V");
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("Wn#-Ly", "Wn#-Ly");
      Element element0 = document0.head();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("%P%<I> kYrn", (Element) null, "BeforeHtml", parser0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNotNull(element0);
      assertEquals(1, element0.siblingIndex());
      assertEquals("BeforeHtml", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("BeforeAttributeValue");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("BeforeAttributeValue", attributes0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InSelectInTable;
      boolean boolean0 = htmlTreeBuilder0.process(token_StartTag1, htmlTreeBuilderState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8HM-PfbCQHs'xwp%", "v8HM-PfbCQHs'xwp%");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      parser1.parseFragmentInput("+S:<OP/|dH&^L]", document0, "v8HM-PfbCQHs'xwp%");
      Token.Doctype token_Doctype0 = new Token.Doctype();
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("vr-{PbCHs2#'%", "vr-{PbCHs2#'%");
      Elements elements0 = document0.getElementsByAttributeValueNot("vr-{PbCHs2#'%", "vr-{PbCHs2#'%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.push((Element) null);
      Element element0 = htmlTreeBuilder0.pop();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.push(document0);
      Element element0 = htmlTreeBuilder0.pop();
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      parser0.parseInput("BeforeAttributeValue", "fieldset");
      htmlTreeBuilder0.insertStartTag("script");
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.originalState();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("tfoot");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("tfoot", element0, "tfoot", parser0);
      htmlTreeBuilder0.originalState();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("thead", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "thead", attributes0);
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("thead", pseudoTextElement0, "thead", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.onStack(pseudoTextElement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      parser0.parseInput("BeforeAttributeValue", "fieldset");
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8HM-PfbCQHs'xwp%", "v8HM-PfbCQHs'xwp%");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      parser1.parseFragmentInput("v8HM-PfbCQHs'xwp%", document0, "v8HM-PfbCQHs'xwp%");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("%P%<I> kYrn", (Element) null, "%P%<I> kYrn", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("%P%<I> kYrn", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("body", parseSettings0);
      Element element0 = new Element(tag0, ">'Opu%F1Cf46U v");
      boolean boolean0 = htmlTreeBuilder0.isSpecial(element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("g", "g");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("wbr", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "wbr", attributes0);
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("45A)Bk`NhQ", pseudoTextElement0, "ul", parser0);
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("", (Element) null, "table", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("[oKaom-N~.NX");
      assertEquals("table", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("vLMabU@m^C");
      Attributes attributes0 = new Attributes();
      Parser parser0 = Parser.xmlParser();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "vLMabU@m^C", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("Y5hVbnJ<<Pp;", pseudoTextElement0, "Y5hVbnJ<<Pp;", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.insert(pseudoTextElement0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("}2u)N0Hjp]oP)N7&K", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      boolean boolean0 = htmlTreeBuilder0.inTableScope("GM0ld9>$SQGiYM.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("optgroup");
      htmlTreeBuilder0.parse(stringReader0, "optgroup", parser0);
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.nameAttr("optgroup", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      htmlTreeBuilder0.push(element0);
      assertEquals(1, element0.siblingIndex());
      
      String[] stringArray0 = new String[5];
      stringArray0[2] = "optgroup";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[3];
      Document document0 = Parser.parseBodyFragmentRelaxed("", "/Y,?.2[6i-ONE*f");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment(":F2':O~ADeK%x-)", document0, "method", parser0);
      assertEquals(1, list0.size());
      
      stringArray0[1] = "Dl+-[";
      stringArray0[2] = "DZ";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("9/j9qz+gvW1Bfrml i", (Element) null, ">Sd[", parser0);
      String[] stringArray0 = new String[3];
      boolean boolean0 = htmlTreeBuilder0.inScope("body", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8`-{PfbCHs2x#b%", "v8`-{PfbCHs2x#b%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8`-{PfbCHs2x#b%", "v8`-{PfbCHs2x#b%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      Tag tag0 = Tag.valueOf("v8`-{PfbCHs2x#b%");
      CDataNode cDataNode0 = new CDataNode("v8`-{PfbCHs2x#b%");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "v8`-{PfbCHs2x#b%", attributes0);
      htmlTreeBuilder0.push(formElement0);
      boolean boolean0 = htmlTreeBuilder0.inScope("v8`-{PfbCHs2x#b%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("X}^a");
      Element element0 = new Element(tag0, "p");
      Elements elements0 = element0.getElementsByIndexEquals(100);
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      boolean boolean0 = htmlTreeBuilder0.inScope("R``rnX{L'fLJ.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("vLMabU@m^C");
      Attributes attributes0 = new Attributes();
      Parser parser0 = Parser.xmlParser();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "vLMabU@m^C", attributes0);
      htmlTreeBuilder0.parseFragment("~:,%x=,q;b&*4c", pseudoTextElement0, "", parser0);
      htmlTreeBuilder0.insert(pseudoTextElement0);
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("vLMabU@m^C");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("v8`-{PfbCHs2x#b%", "v8`-{PfbCHs2x#b%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8`-{PfbCHs2x#b%", "v8`-{PfbCHs2x#b%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      Tag tag0 = Tag.valueOf("v8`-{PfbCHs2x#b%");
      CDataNode cDataNode0 = new CDataNode("v8`-{PfbCHs2x#b%");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "v8`-{PfbCHs2x#b%", attributes0);
      htmlTreeBuilder0.push(formElement0);
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("v8`-{PfbCHs2x#b%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = Document.createShell("7tWm9=(*C\"ru");
      parser0.parseFragmentInput("ZYAj@-0}pyQ0\"@Amq", document0, "'&-t38ueT$!V");
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("RawtextEndTagName", "RawtextEndTagName");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("RawtextEndTagName", document0, "href", parser0);
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Element element0 = new Element("4IS'N:?:<(m$");
      Element element1 = element0.html("4IS'N:?:<(m$");
      element1.appendChild(element0);
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setHeadElement(element1);
      assertEquals(1, element1.siblingIndex());
      
      Element element2 = htmlTreeBuilder0.getHeadElement();
      assertEquals(2, element2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Element element0 = new Element("4IS'N:?:<(m$");
      Element element1 = element0.html("4IS'N:?:<(m$");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setHeadElement(element1);
      assertEquals(1, element0.childNodeSize());
      
      Element element2 = htmlTreeBuilder0.getHeadElement();
      assertEquals(1, element2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("%P%<I> kYrn", (Element) null, "%P%<I> kYrn", parser0);
      Element element0 = htmlTreeBuilder0.getFromStack("l");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("%<I> kYrU", (Element) null, "%<I> kYrU", parser0);
      Element element0 = htmlTreeBuilder0.getFromStack("i");
      assertNotNull(element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("v8`-{PfbCHs2x#b%", "v8`-{PfbCHs2x#b%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8`-{PfbCHs2x#b%", "v8`-{PfbCHs2x#b%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      Tag tag0 = Tag.valueOf("v8`-{PfbCHs2x#b%");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "v8`-{PfbCHs2x#b%", attributes0);
      htmlTreeBuilder0.push(formElement0);
      Element element0 = htmlTreeBuilder0.getFromStack("v8`-{PfbCHs2x#b%");
      assertFalse(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("v8H--.bCQH]#s'x0p%", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "c<", attributes0);
      htmlTreeBuilder0.parseFragment("v8H--.bCQH]#s'x0p%", formElement0, "O$nYo", parser0);
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertFalse(formElement1.hasParent());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("%m/%<I> kRr^bn", (Element) null, "%m/%<I> kRr^bn", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.tagName = "table";
      htmlTreeBuilder0.insertForm(token_StartTag0, true);
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("", "");
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals(2, document0.siblingIndex());
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals(2, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("org.jsoup.parser.HtmlTreeBuilder");
      htmlTreeBuilder0.doc = document0;
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals(0, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(":");
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      List<Node> list0 = parser0.parseFragmentInput(":", document0, "+S:<OP/|dH&^L]");
      assertEquals(1, list0.size());
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("+S:<OP/|dH&^L]", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("", "");
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("Ov%<I>CkYrn", (Element) null, "M0!.y?", parser0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("i");
      assertNotNull(element0);
      assertEquals("M0!.y?", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      StringReader stringReader0 = new StringReader("q!aJ?AP]@C@^Sh-Xwl");
      htmlTreeBuilder0.initialiseParse(stringReader0, "aTRb7TXw", parser0);
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("v8`-{PfbCHs2x#b%", "v8`-{PfbCHs2x#b%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8`-{PfbCHs2x#b%", "v8`-{PfbCHs2x#b%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.push((Element) null);
      htmlTreeBuilder0.push(document0);
      Element element0 = htmlTreeBuilder0.aboveOnStack(document0);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.push(document0);
      Element element0 = htmlTreeBuilder0.aboveOnStack(document0);
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("v8`-{PfbCHs2x#b%", "v8`-{PfbCHs2x#b%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8`-{PfbCHs2x#b%", "v8`-{PfbCHs2x#b%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      Tag tag0 = Tag.valueOf("v8`-{PfbCHs2x#b%");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "v8`-{PfbCHs2x#b%", attributes0);
      htmlTreeBuilder0.push(formElement0);
      htmlTreeBuilder0.push(document0);
      Element element0 = htmlTreeBuilder0.aboveOnStack(document0);
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.insertInFosterParent(document0);
      // Undeclared exception!
      htmlTreeBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.resetInsertionMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("vLMabU@m^C");
      Attributes attributes0 = new Attributes();
      Parser parser0 = Parser.xmlParser();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "vLMabU@m^C", attributes0);
      htmlTreeBuilder0.parseFragment("Y5hVbnJ<<Pp;", pseudoTextElement0, "Y5hVbnJ<<Pp;", parser0);
      Document document0 = new Document("}2u)N0Hjp]oP)N7&K");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeLastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromStack((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.reconstructFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Doctype token_Doctype0 = new Token.Doctype();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InBody;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Doctype0, htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("Ov%<I>CkYrn", (Element) null, "Ov%<I>CkYrn", parser0);
      htmlTreeBuilder0.popStackToClose("Ov%<I>CkYrn");
      Token.EOF token_EOF0 = new Token.EOF();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterHead;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EOF0, htmlTreeBuilderState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      Token.Character token_Character0 = tokeniser0.charPending;
      token_Character0.data("o5bmpJ2II2Qt`gfL7");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Initial;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Character0, htmlTreeBuilderState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Doctype token_Doctype0 = new Token.Doctype();
      Token token0 = token_Doctype0.reset();
      Token.TokenType token_TokenType0 = Token.TokenType.StartTag;
      token0.type = token_TokenType0;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InBody;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token0, htmlTreeBuilderState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.EndTag token_EndTag0 = new Token.EndTag();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EndTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("X}^a");
      Element element0 = new Element(tag0, "");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("X}^a", element0, "script", parser0);
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token token0 = tokeniser0.read();
      Token.TokenType token_TokenType0 = Token.TokenType.StartTag;
      token0.type = token_TokenType0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose("noscript");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToBefore("|]nR~+fep");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("P&}Kdt", parseSettings0);
      Parser parser0 = Parser.xmlParser();
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "{c:gJ+J@'$4.", attributes0);
      htmlTreeBuilder0.parseFragment("tCyR", pseudoTextElement0, "v$pa9oMev1HY07-{7tw", parser0);
      htmlTreeBuilder0.pop();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("th", "th");
      document0.appendChild(document0);
      Parser parser0 = Parser.xmlParser();
      // Undeclared exception!
      htmlTreeBuilder0.parseFragment("template", document0, "template", parser0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment((String) null, document0, "v8H-PfbCQHs'xwp%", parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("fieldset");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "fieldset", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("X}^a", document0, (String) null, parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(")\"J!xF5?p98#");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.onStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.lastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isSpecial((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("~g`0Ot]OD^tM1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("KNW'[89i8=", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "KNW'[89i8=", attributes0);
      Parser parser0 = Parser.xmlParser();
      CDataNode cDataNode0 = new CDataNode("KNW'[89i8=");
      htmlTreeBuilder0.parseFragment("ul", pseudoTextElement0, "yb,>c>rH[%J}X1UB7", parser0);
      Element element0 = htmlTreeBuilder0.currentElement();
      htmlTreeBuilder0.removeFromStack(element0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(cDataNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("X}^a");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "45A)Bk`NhQ", attributes0);
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("fieldset", pseudoTextElement0, ">Sd[", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm((Token.StartTag) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("iframe", attributes0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Character token_Character0 = new Token.Character();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("rg.soup.Aarser.Token$Doctype", "rg.soup.Aarser.Token$Doctype");
      Element element0 = document0.appendElement("rg.soup.Aarser.Token$Doctype");
      Elements elements0 = document0.getElementsByAttributeValueNot("rg.soup.Aarser.Token$Doctype", "rg.soup.Aarser.Token$Doctype");
      document0.empty();
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("h6");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "h6", attributes0);
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("h6", pseudoTextElement0, "thead", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1614);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "z", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1485);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "TreeBuilder{currentToken=null, state=null, currentElement=null}", parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inTableScope("(5gwY}Hbj7Q1uUP+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("col");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("Q#l{af{t|qYg", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getFromStack("#*)JY#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getActiveFormattingElement("          ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InHeadNoscript;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("X}^a");
      Element element0 = new Element(tag0, "");
      Elements elements0 = element0.getElementsByIndexEquals(100);
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("", "qE0gb`4{u84U$}h");
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("script", attributes0);
      htmlTreeBuilder0.insert(token_StartTag0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InHeadNoscript;
      Token.EOF token_EOF0 = new Token.EOF();
      boolean boolean0 = htmlTreeBuilder0.process(token_EOF0, htmlTreeBuilderState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("center");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("center", element0, "center", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("center");
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8HM-PfbCQHs'xwp%", "v8HM-PfbCQHs'xwp%");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      parser1.parseFragmentInput("v8HM-PfbCQHs'xwp%", document0, "v8HM-PfbCQHs'xwp%");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("frame");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(":");
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      parser0.parseFragmentInput(":", document0, "+S:<OP/|dH&^L]");
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("orsize", "orsize");
      parser1.parseFragmentInput("!MYHApF", document0, "pre");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("orsize", "orsize");
      parser1.parseFragmentInput("!MYHApF", document0, "pre");
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("org.jsoup.select.Selector$SelectorParseException", "org.jsoup.select.Selector$SelectorParseException");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Tag tag0 = Tag.valueOf("org.jsoup.select.Selector$SelectorParseException");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Selector$SelectorParseException", attributes0);
      htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("th", "ScriptDataDoubleEscapedDash");
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("g", "g");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("%P%<I> kYrn", (Element) null, "%P%<I> kYrn", parser0);
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("%P%<I> kYrn", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, true);
      assertEquals(0, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.doc;
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("%P%<I> kYrn", (Element) null, "%P%<I> kYrn", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8HM-PfbCQHs'xwp%", "v8HM-PfbCQHs'xwp%");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      parser1.parseFragmentInput("v8HM-PfbCQHs'xwp%", document0, "v8HM-PfbCQHs'xwp%");
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("Bpz55m%G-$<}VJlp{4", document0, "Bpz55m%G-$<}VJlp{4", parser0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("X}^a");
      Element element0 = new Element(tag0, "X}^a");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("X}^a", element0, "X}^a", parser0);
      htmlTreeBuilder0.generateImpliedEndTags("X}^a");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("vLMabU@m^C");
      Attributes attributes0 = new Attributes();
      Parser parser0 = Parser.xmlParser();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "vLMabU@m^C", attributes0);
      htmlTreeBuilder0.parseFragment("vLMabU@m^C", pseudoTextElement0, "vLMabU@m^C", parser0);
      htmlTreeBuilder0.insert(pseudoTextElement0);
      htmlTreeBuilder0.generateImpliedEndTags("vLMabU@m^C");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.generateImpliedEndTags("X}^a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("optgroup");
      htmlTreeBuilder0.parse(stringReader0, "optgroup", parser0);
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.nameAttr("optgroup", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      htmlTreeBuilder0.push(element0);
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("optgroup");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("X}^a");
      Element element0 = new Element(tag0, "p");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("X}^a", element0, "script", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("X}^a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.popStackToBefore("v8H-PfbCQHs'xwp%");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("v8H-PfbCQHs'xwp%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8r-{PfbCHs2x#b%", "v8r-{PfbCHs2x#b%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8r-{PfbCHs2x#b%", "v8r-{PfbCHs2x#b%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      Tag tag0 = Tag.valueOf("v8r-{PfbCHs2x#b%");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "v8r-{PfbCHs2x#b%", attributes0);
      htmlTreeBuilder0.push(formElement0);
      String[] stringArray0 = new String[5];
      stringArray0[2] = "v8r-{PfbCHs2x#b%";
      boolean boolean0 = htmlTreeBuilder0.inScope("5%c77HgfW~zCRN$_", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      parser0.parseInput("fieldset", "fieldset");
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("r\"wc?&{-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("X}^a");
      Element element0 = new Element(tag0, "X}^a");
      Elements elements0 = element0.getElementsByIndexEquals(100);
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("X}^a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("fieldset", "fieldset");
      htmlTreeBuilder0.push(document0);
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("address", "address");
      Elements elements0 = document0.getElementsByAttributeValueNot("address", "address");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.clearStackToTableRowContext();
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("frameset");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "frameset", attributes0);
      List<Node> list0 = Parser.parseFragment("v8H-PfbCQHs'xwp%", (Element) pseudoTextElement0, "address");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("%P%<I> kYrn", (Element) null, "%P%<I> kYrn", parser0);
      Element element0 = htmlTreeBuilder0.getHeadElement();
      element0.html("%P%<I> kYrn");
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("colgroup", parseSettings0);
      Parser parser0 = Parser.xmlParser();
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "fieldset", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("aside", pseudoTextElement0, "fieldset", parser0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("tbody", parseSettings0);
      Element element0 = new Element(tag0, "v8H--.bCQH]#s'x0p%");
      List<Node> list0 = Parser.parseFragment("org.jsoup.select.StructuralEvaluator$ImmediateParent", element0, "$d`~ye%hfHf,)RO?dRL");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("tr", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ".4a?Q!{yH%6", attributes0);
      List<Node> list0 = Parser.parseFragment(".4a?Q!{yH%6", (Element) pseudoTextElement0, "th");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Tag tag0 = Tag.valueOf("th");
      Element element0 = new Element(tag0, "th");
      element0.html("th");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("td", parseSettings0);
      Parser parser0 = Parser.xmlParser();
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "td", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment(":|'+ke}3!DBCc;<r", pseudoTextElement0, "r\"wc?&{-", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("select");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("RawtextEndTagName", element0, "href", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("yW=mw\"P4?qfOLADO", "yW=mw\"P4?qfOLADO");
      Elements elements0 = document0.parents();
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      parser0.parseInput("fieldset", "fieldset");
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, (Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      Document document1 = Document.createShell("r\"wc?&{-");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document1, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("addreAs", "addreAs");
      Elements elements0 = document0.getElementsByAttributeValueNot("addreAs", "addreAs");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.insertOnStackAfter(document0, document0);
      Element element0 = htmlTreeBuilder0.aboveOnStack(document0);
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("vLMabU@m^C", parseSettings0);
      Attributes attributes0 = new Attributes();
      Parser parser0 = Parser.xmlParser();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "45A)Bk`NhQ", attributes0);
      htmlTreeBuilder0.parseFragment("Y5hVbnJ<<Pp;", pseudoTextElement0, "45A)Bk`NhQ", parser0);
      Document document0 = new Document("}2u)N0Hjp]oP)N7&K");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, pseudoTextElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(":");
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      parser0.parseFragmentInput(":", document0, "+S:<OP/|dH&^L]");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("v8`-{PfbCHs2x#b%", "v8`-{PfbCHs2x#b%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8`-{PfbCHs2x#b%", "v8`-{PfbCHs2x#b%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("noframes", "noframes");
      Elements elements0 = document0.getElementsByAttributeValueNot("noframes", "noframes");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("9/j9qz+gvW1Bfrml i", (Element) null, ">Sd[", parser0);
      htmlTreeBuilder0.popStackToBefore("html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("center");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("org.jsoup.select.Selector", element0, "-6R#>vcIu*sg)k_2r9", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.popStackToBefore("yOd9]");
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "#document";
      stringArray0[1] = "v8H-PfbCQHs'xwp%";
      stringArray0[3] = "v8H-PfbCQHs'xwp%";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell(":");
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      parser0.parseFragmentInput(":", document0, "+S:<OP/|dH&^L]");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+S:<OP/|dH&^L]";
      stringArray0[1] = ":";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("%P%<I> kYrn", (Element) null, "%P%<I> kYrn", parser0);
      htmlTreeBuilder0.popStackToClose("body");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("noframes", "noframes");
      Elements elements0 = document0.getElementsByAttributeValueNot("noframes", "noframes");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      Element element0 = htmlTreeBuilder0.getFromStack("html");
      assertNotNull(element0);
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("addreAs", "addreAs");
      Elements elements0 = document0.getElementsByAttributeValueNot("addreAs", "addreAs");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      boolean boolean0 = htmlTreeBuilder0.onStack(document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("v8H-PfbCQHs'xwp%", document0, "v8H-PfbCQHs'xwp%", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("fieldset", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, true);
      assertTrue(formElement0.isBlock());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("v8H-PfbCQHs'xwp%", document0, "v8H-PfbCQHs'xwp%", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("fieldset", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals("v8H-PfbCQHs'xwp%", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      Token.Comment token_Comment0 = new Token.Comment();
      htmlTreeBuilder0.insert(token_Comment0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("%m/%<I> kRr^bn", (Element) null, "%m/%<I> kRr^bn", parser0);
      htmlTreeBuilder0.setFosterInserts(true);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.tagName = "ble";
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      assertEquals(2, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      parser1.parseInput("h1", "h1");
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      CDataNode cDataNode0 = new CDataNode(":lt(%d)");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("style", attributes0);
      htmlTreeBuilder0.insert(token_StartTag1);
      Token.Character token_Character0 = tokeniser0.charPending;
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("v8H--.bCQH]#s'x0p%");
      Elements elements0 = document0.getElementsByAttributeValueNot("v8H--.bCQH]#s'x0p%", "v8H--.bCQH]#s'x0p%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      Token.CData token_CData0 = new Token.CData("figcaption");
      htmlTreeBuilder0.insert(token_CData0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("vLMabU@m^C");
      Attributes attributes0 = new Attributes();
      Parser parser0 = Parser.xmlParser();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "vLMabU@m^C", attributes0);
      htmlTreeBuilder0.parseFragment("vLMabU@m^C", pseudoTextElement0, "vLMabU@m^C", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.nameAttr("}2u)N0Hjp]oP)N7&K", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, false);
      assertTrue(formElement0.hasParent());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("%m/%<I> kRr^bn", (Element) null, "%m/%<I> kRr^bn", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.tagName = "table";
      token_StartTag0.selfClosing = true;
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("%P%<I> kYrn", (Element) null, "%P%<I> kYrn", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.tagName = "N";
      token_StartTag0.selfClosing = true;
      Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("table", parseSettings0);
      Parser parser0 = Parser.xmlParser();
      Attributes attributes0 = new Attributes();
      parser0.setTrackErrors(100);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "table", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("}Kdt", pseudoTextElement0, "EndTagOpen", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("caption", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("%7zs");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "caption", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("%7zs", formElement0, "D", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("plaintext", (ParseSettings) null);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "plaintext", attributes0);
      List<Node> list0 = Parser.parseFragment("plaintext", (Element) pseudoTextElement0, "plaintext");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("noscript", (ParseSettings) null);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "T<U%", attributes0);
      List<Node> list0 = Parser.parseFragment("template", (Element) pseudoTextElement0, "SYSTEM");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("script", parseSettings0);
      Element element0 = new Element(tag0, "script");
      element0.html("eYx");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Tag tag0 = Tag.valueOf("iframe");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "p", attributes0);
      List<Node> list0 = Parser.parseFragment("fieldset", (Element) pseudoTextElement0, "&7-}kdt");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Element element0 = new Element("title");
      element0.html("title");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Comment token_Comment0 = new Token.Comment();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("vLMabU@m^C");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "vLMabU@m^C", attributes0);
      boolean boolean0 = htmlTreeBuilder0.isSpecial(pseudoTextElement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.push(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFosterInserts(true);
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("}2u)N0Hjp]oP)N7&K");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("g", "g");
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inButtonScope("v8HM-PfbCQHs'xwp%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Element element0 = new Element("tfoot");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("tfoot", element0, "tfoot", parser0);
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("tfoot", attributes0);
      htmlTreeBuilder0.insert(token_StartTag1);
      boolean boolean0 = htmlTreeBuilder0.process(token_StartTag1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("TagOpen", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "r\"wc?&{-", attributes0);
      htmlTreeBuilder0.setFormElement(formElement0);
      assertFalse(formElement0.isBlock());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("v8H-PfbCQHs'xwp%", "v8H-PfbCQHs'xwp%");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope("X}^a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.getDocument();
      htmlTreeBuilder0.parseFragment("O`0P%<I> kYrn", document0, "i", parser0);
      htmlTreeBuilder0.inTableScope("i");
  }
}
