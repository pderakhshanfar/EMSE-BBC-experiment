/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 05:20:23 GMT 2021
 */

package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TarArchiveEntry_ESTest extends TarArchiveEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("nj>ZksM", (byte)114, true);
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("nj>ZksM", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isSparse());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      File file0 = MockFile.createTempFile("}Z!WmysB", "os.name");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, "{NUL}");
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertEquals("{NUL}", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Major device number is out of range: ", (byte)0, false);
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertEquals("Major device number is out of range: ", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)120);
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)123);
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isLink());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" exceeds maximum signed long", (byte)75);
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertTrue(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(" exceeds maximum signed long", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" exceeds maximum signed long", (byte)75);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals(" exceeds maximum signed long", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("a-sN4$#", (byte)122);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("a-sN4$#", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isSparse());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertEquals("/", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("yc|XWPMa|Kyw8K</", (byte)109, false);
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockFile mockFile0 = new MockFile("iw!;|+x");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.setDevMinor(0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("iw!;|+x", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("yc|XWPMa|Kyw8K</", (byte)109, false);
      tarArchiveEntry0.setDevMajor(0);
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals("yc|XWPMa|Kyw8K</", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("a-sN4$#", false);
      tarArchiveEntry0.setSize(0L);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("a-sN4$#", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Major device number is out of range: ", (byte)0, false);
      assertFalse(tarArchiveEntry0.isSparse());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      tarArchiveEntry0.fillStarSparseData(map0);
      tarArchiveEntry0.isStarSparse();
      assertEquals("Major device number is out of range: ", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile("mI", "org.apache.commons.compress.archivers.zip.NioZipEncoding");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry("org.apache.commons.compress.archivers.zip.NioZipEncoding", (byte)72, true);
      boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry1);
      assertFalse(tarArchiveEntry1.isPaxHeader());
      assertFalse(tarArchiveEntry1.isBlockDevice());
      assertEquals(0L, tarArchiveEntry1.getSize());
      assertFalse(tarArchiveEntry1.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry1.getMode());
      assertFalse(tarArchiveEntry1.isLink());
      assertFalse(tarArchiveEntry1.isGNULongNameEntry());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry1.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry1.getLongGroupId());
      assertEquals("experiment/mI/org.apache.commons.compress.archivers.zip.NioZipEncoding", tarArchiveEntry0.getName());
      assertEquals("org.apache.commons.compress.archivers.zip.NioZipEncoding", tarArchiveEntry1.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      tarArchiveEntry0.setNames("//tmp", "//tmp");
      tarArchiveEntry0.getUserName();
      assertEquals("//tmp", tarArchiveEntry0.getGroupName());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockFile mockFile0 = new MockFile("d50`6f6Ubjv=r]r;\"'", "+");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.setUserId((long) (byte)53);
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals(53, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      tarArchiveEntry0.setUserId((-635L));
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals((-635L), tarArchiveEntry0.getLongUserId());
      assertEquals((-635), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Major device number is out of range: ", (byte)0, false);
      assertEquals(0L, tarArchiveEntry0.getSize());
      
      tarArchiveEntry0.setSize(1L);
      long long0 = tarArchiveEntry0.getSize();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ustar\u0000", false);
      String string0 = tarArchiveEntry0.getName();
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("ustar\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("UTF-8");
      tarArchiveEntry0.setMode((-1075));
      int int0 = tarArchiveEntry0.getMode();
      assertEquals((-1075), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("yc|XWPMa|Kyw8K</", (byte)109, false);
      tarArchiveEntry0.setUserId((long) (byte)109);
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals(109, tarArchiveEntry0.getUserId());
      assertEquals(109L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("hapR4#k}O~t6", (byte) (-34));
      tarArchiveEntry0.setGroupId(230);
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals(230L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("#~I]cR&a^sY-ufwl>", (byte)85);
      tarArchiveEntry0.setGroupId((-3223L));
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals((-3223), tarArchiveEntry0.getGroupId());
      assertEquals((-3223L), long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockFile mockFile0 = new MockFile("mI", "org.apache.commons.compress.archivers.zip.NioZipEncoding");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.setLinkName(" byte binary number");
      tarArchiveEntry0.getLinkName();
      assertEquals(" byte binary number", tarArchiveEntry0.getLinkName());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SCHILY.realsize", false);
      tarArchiveEntry0.setNames((String) null, (String) null);
      String string0 = tarArchiveEntry0.getGroupName();
      assertEquals("SCHILY.realsize", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertNull(string0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" exceeds maximum signed long", (byte)75);
      tarArchiveEntry0.setNames("*p-{~RDZbYUhS5Yo,A", "*p-{~RDZbYUhS5Yo,A");
      tarArchiveEntry0.getGroupName();
      assertEquals("*p-{~RDZbYUhS5Yo,A", tarArchiveEntry0.getGroupName());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/?*~", (byte)84);
      tarArchiveEntry0.setGroupId((long) (byte)84);
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals(84, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("G");
      tarArchiveEntry0.setGroupId((-2674L));
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals((-2674), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H?{");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.getFile();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("H?{", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/3V8/..nY*", "/3V8/..nY*");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/3V8/..nY*/3V8/..nY*");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/3V8/..nY*");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.getFile();
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("3V8/..nY*/3V8/..nY*", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("}o}N?2tJgJ|&w&4V", (byte)49);
      tarArchiveEntry0.setDevMinor(26);
      int int0 = tarArchiveEntry0.getDevMinor();
      assertEquals(26, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.commons.compress.utils.Charsets", false);
      TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry("|7jYG7X$W", false);
      boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
      assertEquals(33188, tarArchiveEntry1.getMode());
      assertEquals(0, tarArchiveEntry1.getDevMinor());
      assertEquals(0L, tarArchiveEntry1.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("yc|XWPMa|Kyw8K</", (byte)109, false);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(83);
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0).when(zipEncoding0).encode(anyString());
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader((byte[]) null, zipEncoding0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("G9", (byte)102);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0, (ZipEncoding) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-78));
      byte[] byteArray0 = new byte[5];
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0).when(zipEncoding0).encode(anyString());
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0, zipEncoding0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)6, true);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFile mockFile0 = new MockFile("mI", "org.apache.commons.compress.archivers.zip.NioZipEncoding");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("bcXW8U3iR;HLe_%rz", true);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader(byteArray0, (ZipEncoding) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("yc|XWPMa|Kyw8K</", (byte)109, true);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(";X#n^WHD", (byte)109, false);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillStarSparseData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("windowslinux", (byte)109);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse1xData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse0xData(map0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("IBM850", (byte)50);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse0xData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null, (ZipEncoding) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, (byte)72, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, (byte)108);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((File) null, "/G9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/", (byte)84);
      boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("YXgJDh]_(#DJE'", (byte)83);
      boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
      assertEquals("YXgJDh]_(#DJE'", tarArchiveEntry0.getName());
      assertTrue(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("IBM850", (byte)50);
      boolean boolean0 = tarArchiveEntry0.isGNUSparse();
      assertEquals("IBM850", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertTrue(tarArchiveEntry0.isSymbolicLink());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "Major device number is out of range: ");
      mockFile0.mkdirs();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.getFile();
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals("Major device number is out of range: /", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isFIFO());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Major device number is out of range: ", (byte)0, false);
      tarArchiveEntry0.isPaxGNUSparse();
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("Major device number is out of range: ", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("#~I]cR&a^sY-ufwl>", (byte)52);
      tarArchiveEntry0.setUserId((-2809L));
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals((-2809), tarArchiveEntry0.getUserId());
      assertEquals((-2809L), long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)120);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("IBM850", false);
      tarArchiveEntry0.equals(tarArchiveEntry0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("IBM850", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Major device number is out of range: ", (byte)52);
      tarArchiveEntry0.isStarSparse();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("Major device number is out of range: ", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)123);
      tarArchiveEntry0.setGroupName("");
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("6)lm", (byte)52);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader((byte[]) null, (ZipEncoding) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SCHILY.realsize");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("SCHILY.realsize", "org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillStarSparseData(hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/3V8/..nY*", "/3V8/..nY*");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.getDirectoryEntries();
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("3V8/..nY*/3V8/..nY*", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("iw!;|+x", (byte)120);
      tarArchiveEntry0.getDirectoryEntries();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("iw!;|+x", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isPaxHeader());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ibm850", (byte)74, false);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      tarArchiveEntry0.fillStarSparseData(map0);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertTrue(tarArchiveEntry0.isStarSparse());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("+bm850", (byte)83);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertTrue(boolean0);
      assertEquals("+bm850", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SCHILY.realsize", (byte)54);
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertEquals("SCHILY.realsize", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertTrue(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Major device number is out of range: ", (byte)52);
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertFalse(boolean0);
      assertEquals("Major device number is out of range: ", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Major device number is out of range: ", (byte)52);
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertEquals("Major device number is out of range: ", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("0", (byte)51);
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertEquals("0", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("#~I]cR&a^sY-ufwl>", (byte)52);
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertTrue(tarArchiveEntry0.isBlockDevice());
      assertEquals("#~I]cR&a^sY-ufwl>", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("=", (byte)49, false);
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("=", tarArchiveEntry0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("IBM850", (byte)50);
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("IBM850", tarArchiveEntry0.getName());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.commons.compress.utils.Charsets", false);
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertEquals("org.apache.commons.compress.utils.Charsets", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("yc|XWPMa|Kyw8K</", (byte)109, false);
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ustar\u0000", false);
      tarArchiveEntry0.isFile();
      assertEquals("ustar\u0000", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Major device number is out of range: ", (byte)0, false);
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertTrue(boolean0);
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals("Major device number is out of range: ", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      File file0 = MockFile.createTempFile("ibm850", "i|m85G");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, ")v$MbClF7P>2#_K0CY");
      tarArchiveEntry0.isFile();
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(")v$MbClF7P>2#_K0CY", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00", (byte) (-100));
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("00", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("yc|XWPMa|Kyw8K</", (byte)109, false);
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertTrue(boolean0);
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ibm850", (byte)53, false);
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("ibm850", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      File file0 = MockFile.createTempFile("ibm850", "i|m85G");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, ")v$MbClF7P>2#_K0CY");
      tarArchiveEntry0.isDirectory();
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(")v$MbClF7P>2#_K0CY", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SCHILY.realsize", false);
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("SCHILY.realsize", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isLink());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Q/5;k/6Hu!%\"I", (byte)103);
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertTrue(boolean0);
      assertEquals("Q/5;k/6Hu!%\"I", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("iw!;|+x", (byte)120);
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertEquals("iw!;|+x", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("k8<]Ex6VD+", (byte)88);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals("k8<]Ex6VD+", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("MG!8~kx)/", (byte)120);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertTrue(boolean0);
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("iw!;|+x", (byte)120);
      tarArchiveEntry0.isGNULongNameEntry();
      assertEquals("iw!;|+x", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isPaxHeader());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("*p-{~RDZbYUhS5Yo,A", (byte)75);
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertEquals("*p-{~RDZbYUhS5Yo,A", tarArchiveEntry0.getName());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Major device number is out of range: ", (byte)52);
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertTrue(tarArchiveEntry0.isBlockDevice());
      assertFalse(boolean0);
      assertEquals("Major device number is out of range: ", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)83, false);
      boolean boolean0 = tarArchiveEntry0.isGNUSparse();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("rRND/7:xu1`c", false);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDevMinor((-55675502));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minor device number is out of range: -55675502
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("UTF-8");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDevMajor((-1075));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Major device number is out of range: -1075
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      tarArchiveEntry0.setDevMajor(504);
      int int0 = tarArchiveEntry0.getDevMajor();
      assertEquals(504, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00", (byte) (-24), false);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setSize((-2674L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size is out of range: -2674
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("IBM850", (byte)50);
      boolean boolean0 = tarArchiveEntry0.equals((Object) "IBM850");
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("IBM850", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertTrue(tarArchiveEntry0.isSymbolicLink());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("hapR4#k}O~t6", (byte) (-34));
      boolean boolean0 = tarArchiveEntry0.equals((Object) null);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("hapR4#k}O~t6", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      tarArchiveEntry0.getDirectoryEntries();
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFile mockFile0 = new MockFile("knI*[7Q%?J99H");
      MockFile.createTempFile("knI*[7Q%?J99H", "SCHILY.realsize", (File) mockFile0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "e/");
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("e/", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("w*@rgO)v=H}", (byte)76);
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertTrue(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("w*@rgO)v=H}", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ibm850");
      tarArchiveEntry0.getFile();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("ibm850", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      Date date0 = tarArchiveEntry0.getLastModifiedDate();
      tarArchiveEntry0.setModTime(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)123);
      tarArchiveEntry0.setModTime((long) (byte)123);
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("#~I]cR&a^sY-ufwl>", (byte)52);
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals("#~I]cR&a^sY-ufwl>", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Major device number is out of range: ", (byte)52);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse1xData(map0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SCHILY.realsize", false);
      String string0 = tarArchiveEntry0.getGroupName();
      assertEquals("SCHILY.realsize", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      File file0 = MockFile.createTempFile("ibm850", "%LBaP}i*rt");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("tmp/ibm8500%LBaP}i*rt", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("=d3yid4q*");
      int int0 = tarArchiveEntry0.getDevMinor();
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("=d3yid4q*", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      tarArchiveEntry0.equals((Object) tarArchiveEntry0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0, (ZipEncoding) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)120);
      tarArchiveEntry0.setIds((byte)120, (byte)120);
      assertEquals(120L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile("k2'zKbc/J\"fLc.CLhb");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "k2'zKbc/J\"fLc.CLhb");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setModTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("=d3yid4q*");
      String string0 = tarArchiveEntry0.getLinkName();
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("=d3yid4q*", tarArchiveEntry0.getName());
      assertEquals("", string0);
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ustar\u0000", false);
      long long0 = tarArchiveEntry0.getRealSize();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("ustar\u0000", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, long0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File file0 = MockFile.createTempFile("ibm850", "%LBaP}i*rt");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      tarArchiveEntry0.isExtended();
      assertEquals("tmp/ibm8500%LBaP}i*rt", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Major device number is out of range: ", (byte)52);
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertTrue(tarArchiveEntry0.isBlockDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("Major device number is out of range: ", tarArchiveEntry0.getName());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/?*~", (byte)84);
      int int0 = tarArchiveEntry0.getGroupId();
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0, int0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("?*~", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)123);
      tarArchiveEntry0.hashCode();
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SCHILY.realsize", false);
      tarArchiveEntry0.isCheckSumOK();
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("SCHILY.realsize", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Major device number is out of range: ", (byte)52);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      int int0 = tarArchiveEntry0.getDevMajor();
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ibm850");
      Date date0 = tarArchiveEntry0.getModTime();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("ibm850", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("yc|XWPMa|Kyw8K</", (byte)109, true);
      tarArchiveEntry0.setName("yc|XWPMa|Kyw8K</");
      assertEquals("yc|XWPMa|Kyw8K</", tarArchiveEntry0.getName());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00", (byte) (-100));
      tarArchiveEntry0.setNames((String) null, "/0");
      tarArchiveEntry0.getUserName();
      assertEquals("/0", tarArchiveEntry0.getGroupName());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00", (byte) (-100));
      tarArchiveEntry0.setUserName("sc8wK-WYbe#hk%");
      assertEquals("sc8wK-WYbe#hk%", tarArchiveEntry0.getUserName());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("=d3yid4q*");
      tarArchiveEntry0.setLinkName((String) null);
      String string0 = tarArchiveEntry0.getLinkName();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("=d3yid4q*", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertNull(string0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/", (byte)84);
      String string0 = tarArchiveEntry0.getName();
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", string0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SCHILY.realsize", (byte)54);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertTrue(tarArchiveEntry0.isFIFO());
      assertFalse(boolean0);
      assertEquals("SCHILY.realsize", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockFile mockFile0 = new MockFile("knI*[7Q%?J99H");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "e/");
      tarArchiveEntry0.setUserId(85);
      assertEquals(85, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SCHILY.realsize", false);
      int int0 = tarArchiveEntry0.getMode();
      assertEquals(33188, int0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("SCHILY.realsize", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("iw!;|+x", (byte)120);
      long long0 = tarArchiveEntry0.getSize();
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, long0);
      assertTrue(tarArchiveEntry0.isPaxHeader());
      assertEquals("iw!;|+x", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00", (byte) (-100));
      String string0 = tarArchiveEntry0.getUserName();
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("00", tarArchiveEntry0.getName());
      assertEquals("", string0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }
}
