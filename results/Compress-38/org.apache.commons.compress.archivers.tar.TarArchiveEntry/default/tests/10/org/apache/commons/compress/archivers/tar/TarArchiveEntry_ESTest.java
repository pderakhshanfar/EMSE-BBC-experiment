/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 06:02:46 GMT 2020
 */

package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.ByteBuffer;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TarArchiveEntry_ESTest extends TarArchiveEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)82);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("JN<kzM}dCR4;(\"3I_");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("JN<kzM}dCR4;(\"3I_", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isLink());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("JN<kzM}dCR4;(\"3I_", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00");
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("00", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("00", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SV,U:", (byte)57, false);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SV,U:", (byte)57, false);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-112));
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("x``4Zg}LaNB<?");
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("x``4Zg}LaNB<?", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("x``4Zg}LaNB<?", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Bt5q6USvr>8", (byte)113, false);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("Bt5q6USvr>8", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("Bt5q6USvr>8", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" is too large for ", (byte)125);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(" is too large for ", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(" is too large for ", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("QU", (byte)78, true);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("QU", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("QU", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(":I5cOrlC0FO]:", (byte)81, false);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(":I5cOrlC0FO]:", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(":I5cOrlC0FO]:", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("A", (byte)88);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertTrue(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals("A", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertTrue(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals("A", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("windows/");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("windows/", tarArchiveEntry0.getName());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setDevMinor(0);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("windows/", tarArchiveEntry0.getName());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" K>un'[I+yF6[8dK@T", (byte)0);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(" K>un'[I+yF6[8dK@T", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setDevMajor((byte)0);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(" K>un'[I+yF6[8dK@T", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SV,U:", (byte)57, false);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setSize(0L);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)82);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setModTime((long) (byte)82);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isSparse());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "ustar\u0000");
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals("ustar\u0000/", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertNotNull(tarArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File file0 = MockFile.createTempFile("GNU.sparse.name", (String) null);
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("GNU.sparse.name0.tmp", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/GNU.sparse.name0.tmp", file0.toString());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, "UiWb=elD^k\"*1");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("GNU.sparse.name0.tmp", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/GNU.sparse.name0.tmp", file0.toString());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals("UiWb=elD^k\"*1", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.hashCode();
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("GNU.sparse.name0.tmp", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/GNU.sparse.name0.tmp", file0.toString());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals("UiWb=elD^k\"*1", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" is too large for ", (byte)125);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals(" is too large for ", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertNotNull(tarArchiveEntry0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      tarArchiveEntry0.fillStarSparseData(hashMap0);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertTrue(tarArchiveEntry0.isStarSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals(" is too large for ", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      boolean boolean0 = tarArchiveEntry0.isStarSparse();
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertTrue(tarArchiveEntry0.isStarSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals(" is too large for ", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("kA_i-");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("kA_i-", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertNotNull(tarArchiveEntry0);
      
      TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry("s", false);
      assertFalse(tarArchiveEntry1.equals((Object)tarArchiveEntry0));
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(0, tarArchiveEntry1.getGroupId());
      assertTrue(tarArchiveEntry1.isFile());
      assertFalse(tarArchiveEntry1.isLink());
      assertEquals("", tarArchiveEntry1.getUserName());
      assertFalse(tarArchiveEntry1.isSparse());
      assertFalse(tarArchiveEntry1.isGNULongNameEntry());
      assertFalse(tarArchiveEntry1.isCharacterDevice());
      assertFalse(tarArchiveEntry1.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry1.isGNUSparse());
      assertEquals("", tarArchiveEntry1.getLinkName());
      assertEquals("s", tarArchiveEntry1.getName());
      assertFalse(tarArchiveEntry1.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry1.getRealSize());
      assertEquals(33188, tarArchiveEntry1.getMode());
      assertFalse(tarArchiveEntry1.isPaxGNUSparse());
      assertFalse(tarArchiveEntry1.isCheckSumOK());
      assertEquals(0, tarArchiveEntry1.getDevMajor());
      assertFalse(tarArchiveEntry1.isBlockDevice());
      assertFalse(tarArchiveEntry1.isPaxHeader());
      assertEquals(0, tarArchiveEntry1.getUserId());
      assertEquals(0L, tarArchiveEntry1.getSize());
      assertFalse(tarArchiveEntry1.isDirectory());
      assertEquals("", tarArchiveEntry1.getGroupName());
      assertFalse(tarArchiveEntry1.isStarSparse());
      assertEquals(0, tarArchiveEntry1.getDevMinor());
      assertEquals(0L, tarArchiveEntry1.getLongUserId());
      assertFalse(tarArchiveEntry1.isExtended());
      assertEquals(0L, tarArchiveEntry1.getLongGroupId());
      assertFalse(tarArchiveEntry1.isOldGNUSparse());
      assertFalse(tarArchiveEntry1.isSymbolicLink());
      assertFalse(tarArchiveEntry1.isFIFO());
      assertNotNull(tarArchiveEntry1);
      
      boolean boolean0 = tarArchiveEntry1.isDescendent(tarArchiveEntry0);
      assertFalse(tarArchiveEntry0.equals((Object)tarArchiveEntry1));
      assertFalse(tarArchiveEntry1.equals((Object)tarArchiveEntry0));
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("kA_i-", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry1.getGroupId());
      assertTrue(tarArchiveEntry1.isFile());
      assertFalse(tarArchiveEntry1.isLink());
      assertEquals("", tarArchiveEntry1.getUserName());
      assertFalse(tarArchiveEntry1.isSparse());
      assertFalse(tarArchiveEntry1.isGNULongNameEntry());
      assertFalse(tarArchiveEntry1.isCharacterDevice());
      assertFalse(tarArchiveEntry1.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry1.isGNUSparse());
      assertEquals("", tarArchiveEntry1.getLinkName());
      assertEquals("s", tarArchiveEntry1.getName());
      assertFalse(tarArchiveEntry1.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry1.getRealSize());
      assertEquals(33188, tarArchiveEntry1.getMode());
      assertFalse(tarArchiveEntry1.isPaxGNUSparse());
      assertFalse(tarArchiveEntry1.isCheckSumOK());
      assertEquals(0, tarArchiveEntry1.getDevMajor());
      assertFalse(tarArchiveEntry1.isBlockDevice());
      assertFalse(tarArchiveEntry1.isPaxHeader());
      assertEquals(0, tarArchiveEntry1.getUserId());
      assertEquals(0L, tarArchiveEntry1.getSize());
      assertFalse(tarArchiveEntry1.isDirectory());
      assertEquals("", tarArchiveEntry1.getGroupName());
      assertFalse(tarArchiveEntry1.isStarSparse());
      assertEquals(0, tarArchiveEntry1.getDevMinor());
      assertEquals(0L, tarArchiveEntry1.getLongUserId());
      assertFalse(tarArchiveEntry1.isExtended());
      assertEquals(0L, tarArchiveEntry1.getLongGroupId());
      assertFalse(tarArchiveEntry1.isOldGNUSparse());
      assertFalse(tarArchiveEntry1.isSymbolicLink());
      assertFalse(tarArchiveEntry1.isFIFO());
      assertFalse(boolean0);
      assertNotSame(tarArchiveEntry0, tarArchiveEntry1);
      assertNotSame(tarArchiveEntry1, tarArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("wndows", true);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("wndows", tarArchiveEntry0.getName());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setNames("oN|I0", "wndows");
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals("wndows", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("oN|I0", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("wndows", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isDirectory());
      
      String string0 = tarArchiveEntry0.getUserName();
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals("wndows", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("oN|I0", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("wndows", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertNotNull(string0);
      assertEquals("oN|I0", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("wndows", true);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals("wndows", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setUserId((-129144205));
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals("wndows", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals((-129144205), tarArchiveEntry0.getUserId());
      assertEquals((-129144205L), tarArchiveEntry0.getLongUserId());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals("wndows", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals((-129144205), tarArchiveEntry0.getUserId());
      assertEquals((-129144205L), tarArchiveEntry0.getLongUserId());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals((-129144205), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)82);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertNotNull(tarArchiveEntry0);
      
      String string0 = tarArchiveEntry0.getName();
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00");
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("00", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isExtended());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setMode((-1323));
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals((-1323), tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("00", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isExtended());
      
      int int0 = tarArchiveEntry0.getMode();
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals((-1323), tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("00", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals((-1323), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"");
      assertNotNull(mockFile0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "\"");
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("\"", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals("\"", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals("\"", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setUserId(52L);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("\"", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals("\"", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(52, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals("\"", tarArchiveEntry0.getName());
      assertEquals(52L, tarArchiveEntry0.getLongUserId());
      
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("\"", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals("\"", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(52, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals("\"", tarArchiveEntry0.getName());
      assertEquals(52L, tarArchiveEntry0.getLongUserId());
      assertEquals(52L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("47>VY'", true);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("47>VY'", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setUserId((-22583480));
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals((-22583480L), tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals((-22583480), tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("47>VY'", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals((-22583480L), tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals((-22583480), tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("47>VY'", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals((-22583480L), long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SV,U:", (byte)57, false);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setGroupId((long) (byte)57);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals(57L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(57, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getUserName());
      
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals(57L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(57, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(57L, long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3p:yY[#sn<d^*C");
      assertNotNull(mockFile0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("3p:yY[#sn<d^*C", mockFile0.toString());
      assertEquals("3p:yY[#sn<d^*C", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals("3p:yY[#sn<d^*C", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setGroupId((-1704));
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("3p:yY[#sn<d^*C", mockFile0.toString());
      assertEquals("3p:yY[#sn<d^*C", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals((-1704), tarArchiveEntry0.getGroupId());
      assertEquals((-1704L), tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals("3p:yY[#sn<d^*C", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("3p:yY[#sn<d^*C", mockFile0.toString());
      assertEquals("3p:yY[#sn<d^*C", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals((-1704), tarArchiveEntry0.getGroupId());
      assertEquals((-1704L), tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals("3p:yY[#sn<d^*C", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals((-1704L), long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("c", (byte)99, false);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("c", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setLinkName("SV,U:");
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("SV,U:", tarArchiveEntry0.getLinkName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("c", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      
      String string0 = tarArchiveEntry0.getLinkName();
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("SV,U:", tarArchiveEntry0.getLinkName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("c", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertNotNull(string0);
      assertEquals("SV,U:", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)82);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setNames(", ", "00");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("00", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(", ", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      
      String string0 = tarArchiveEntry0.getGroupName();
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("00", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(", ", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertNotNull(string0);
      assertEquals("00", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("-&/");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("-&/", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setGroupId(8589934591L);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("-&/", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals((-1), tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(8589934591L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("-&/", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals((-1), tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(8589934591L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Bt5q6USvr>8");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("Bt5q6USvr>8", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertNotNull(tarArchiveEntry0);
      
      File file0 = tarArchiveEntry0.getFile();
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("Bt5q6USvr>8", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("/", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertNotNull(tarArchiveEntry0);
      
      File file0 = tarArchiveEntry0.getFile();
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("/", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("", file0.getName());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      assertSame(mockFile0, file0);
      assertSame(file0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = MockFile.createTempFile("GNU.sparse.name", (String) null);
      assertEquals("GNU.sparse.name0.tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/GNU.sparse.name0.tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, "UiWb=elD^k\"*1");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals("GNU.sparse.name0.tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/GNU.sparse.name0.tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("UiWb=elD^k\"*1", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertNotNull(tarArchiveEntry0);
      
      File file1 = tarArchiveEntry0.getFile();
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals("GNU.sparse.name0.tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/GNU.sparse.name0.tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("UiWb=elD^k\"*1", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isFile());
      assertTrue(file1.exists());
      assertEquals(0L, file1.length());
      assertTrue(file1.canRead());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/tmp/GNU.sparse.name0.tmp", file1.toString());
      assertTrue(file1.canExecute());
      assertEquals("GNU.sparse.name0.tmp", file1.getName());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canWrite());
      assertEquals("/tmp", file1.getParent());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertNotNull(file1);
      assertSame(file0, file1);
      assertSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SV,U:", (byte)57, false);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setDevMinor(1279);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(1279, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      
      int int0 = tarArchiveEntry0.getDevMinor();
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(1279, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(1279, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SV,U:", (byte)57, false);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setDevMajor((byte)57);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(57, tarArchiveEntry0.getDevMajor());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      
      int int0 = tarArchiveEntry0.getDevMajor();
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(57, tarArchiveEntry0.getDevMajor());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(57, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("0\u0000");
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("0\u0000", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertNotNull(tarArchiveEntry0);
      
      TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry("GNU.sparse.size", (byte)95);
      assertFalse(tarArchiveEntry1.equals((Object)tarArchiveEntry0));
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry1.isGNULongNameEntry());
      assertFalse(tarArchiveEntry1.isLink());
      assertFalse(tarArchiveEntry1.isOldGNUSparse());
      assertFalse(tarArchiveEntry1.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry1.isBlockDevice());
      assertFalse(tarArchiveEntry1.isDirectory());
      assertTrue(tarArchiveEntry1.isFile());
      assertFalse(tarArchiveEntry1.isCharacterDevice());
      assertFalse(tarArchiveEntry1.isExtended());
      assertFalse(tarArchiveEntry1.isSparse());
      assertFalse(tarArchiveEntry1.isGNUSparse());
      assertFalse(tarArchiveEntry1.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry1.getLinkName());
      assertEquals(0, tarArchiveEntry1.getDevMinor());
      assertFalse(tarArchiveEntry1.isStarSparse());
      assertEquals(0L, tarArchiveEntry1.getRealSize());
      assertFalse(tarArchiveEntry1.isPaxGNUSparse());
      assertEquals(0L, tarArchiveEntry1.getLongGroupId());
      assertEquals(0, tarArchiveEntry1.getDevMajor());
      assertEquals(33188, tarArchiveEntry1.getMode());
      assertFalse(tarArchiveEntry1.isCheckSumOK());
      assertFalse(tarArchiveEntry1.isSymbolicLink());
      assertFalse(tarArchiveEntry1.isFIFO());
      assertEquals(0L, tarArchiveEntry1.getLongUserId());
      assertEquals(0L, tarArchiveEntry1.getSize());
      assertFalse(tarArchiveEntry1.isPaxHeader());
      assertEquals(0, tarArchiveEntry1.getGroupId());
      assertEquals("", tarArchiveEntry1.getGroupName());
      assertEquals(0, tarArchiveEntry1.getUserId());
      assertEquals("GNU.sparse.size", tarArchiveEntry1.getName());
      assertEquals("", tarArchiveEntry1.getUserName());
      assertNotNull(tarArchiveEntry1);
      
      boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
      assertFalse(tarArchiveEntry0.equals((Object)tarArchiveEntry1));
      assertFalse(tarArchiveEntry1.equals((Object)tarArchiveEntry0));
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("0\u0000", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry1.isGNULongNameEntry());
      assertFalse(tarArchiveEntry1.isLink());
      assertFalse(tarArchiveEntry1.isOldGNUSparse());
      assertFalse(tarArchiveEntry1.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry1.isBlockDevice());
      assertFalse(tarArchiveEntry1.isDirectory());
      assertTrue(tarArchiveEntry1.isFile());
      assertFalse(tarArchiveEntry1.isCharacterDevice());
      assertFalse(tarArchiveEntry1.isExtended());
      assertFalse(tarArchiveEntry1.isSparse());
      assertFalse(tarArchiveEntry1.isGNUSparse());
      assertFalse(tarArchiveEntry1.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry1.getLinkName());
      assertEquals(0, tarArchiveEntry1.getDevMinor());
      assertFalse(tarArchiveEntry1.isStarSparse());
      assertEquals(0L, tarArchiveEntry1.getRealSize());
      assertFalse(tarArchiveEntry1.isPaxGNUSparse());
      assertEquals(0L, tarArchiveEntry1.getLongGroupId());
      assertEquals(0, tarArchiveEntry1.getDevMajor());
      assertEquals(33188, tarArchiveEntry1.getMode());
      assertFalse(tarArchiveEntry1.isCheckSumOK());
      assertFalse(tarArchiveEntry1.isSymbolicLink());
      assertFalse(tarArchiveEntry1.isFIFO());
      assertEquals(0L, tarArchiveEntry1.getLongUserId());
      assertEquals(0L, tarArchiveEntry1.getSize());
      assertFalse(tarArchiveEntry1.isPaxHeader());
      assertEquals(0, tarArchiveEntry1.getGroupId());
      assertEquals("", tarArchiveEntry1.getGroupName());
      assertEquals(0, tarArchiveEntry1.getUserId());
      assertEquals("GNU.sparse.size", tarArchiveEntry1.getName());
      assertEquals("", tarArchiveEntry1.getUserName());
      assertFalse(boolean0);
      assertNotSame(tarArchiveEntry0, tarArchiveEntry1);
      assertNotSame(tarArchiveEntry1, tarArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/3!3B(d(N1-3tm=", (byte) (-113));
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("3!3B(d(N1-3tm=", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertNotNull(tarArchiveEntry0);
      
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(10);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(10, byteBuffer0.capacity());
      assertEquals(10, byteBuffer0.remaining());
      assertEquals(10, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=10 cap=10]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertNotNull(byteBuffer0);
      
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0).when(zipEncoding0).encode(anyString());
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0, zipEncoding0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("00", tarArchiveEntry0.getName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertNotNull(tarArchiveEntry0);
      
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader((byte[]) null, (ZipEncoding) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)82);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertNotNull(tarArchiveEntry0);
      
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((byte)82);
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(82, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=82 cap=82]", byteBuffer0.toString());
      assertEquals(82, byteBuffer0.limit());
      assertEquals(82, byteBuffer0.capacity());
      assertNotNull(byteBuffer0);
      
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0).when(zipEncoding0).encode(anyString());
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0, zipEncoding0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/ygwM%qISW{<Q:}@");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals("ygwM%qISW{<Q:}@", tarArchiveEntry0.getName());
      assertNotNull(tarArchiveEntry0);
      
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("os.name");
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("os.name", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertNotNull(tarArchiveEntry0);
      
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("/", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertNotNull(tarArchiveEntry0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader(byteArray0, (ZipEncoding) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("QU/", (byte)119);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals("QU/", tarArchiveEntry0.getName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertNotNull(tarArchiveEntry0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/4f1;iw7");
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("4f1;iw7", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertNotNull(tarArchiveEntry0);
      
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillStarSparseData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("QU/");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("QU/", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertNotNull(tarArchiveEntry0);
      
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse1xData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CP850");
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("CP850", tarArchiveEntry0.getName());
      assertNotNull(tarArchiveEntry0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse0xData(hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("0");
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("0", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertNotNull(tarArchiveEntry0);
      
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse0xData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0, (ZipEncoding) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, (byte)120, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, (byte) (-100));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" z~8(d0j2=>0", true);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(" z~8(d0j2=>0", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(" z~8(d0j2=>0", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("3p:yY[#sn<d^*C", (byte)83);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertTrue(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("3p:yY[#sn<d^*C", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertTrue(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertTrue(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertTrue(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("3p:yY[#sn<d^*C", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertTrue(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertTrue(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("6?po!(!jQtwFbp5xBG.", (byte)49, true);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("6?po!(!jQtwFbp5xBG.", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isGNUSparse();
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("6?po!(!jQtwFbp5xBG.", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "^:iL78X1?$^;ZVqVi=W");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("^:iL78X1?$^;ZVqVi=W/", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertNotNull(tarArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SV,U:", (byte)57, false);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isPaxGNUSparse();
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("QU");
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("QU", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertNotNull(tarArchiveEntry0);
      
      Date date0 = tarArchiveEntry0.getModTime();
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("QU", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      tarArchiveEntry0.setModTime(date0);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("QU", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00/");
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("00/", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertNotNull(tarArchiveEntry0);
      
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.commons.compress.archivers.tar.TarArchiveEntry", (byte)47);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals("org.apache.commons.compress.archivers.tar.TarArchiveEntry", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertNotNull(tarArchiveEntry0);
      
      String string0 = tarArchiveEntry0.getName();
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals("org.apache.commons.compress.archivers.tar.TarArchiveEntry", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertNotNull(string0);
      assertEquals("org.apache.commons.compress.archivers.tar.TarArchiveEntry", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("QU", (byte)78, true);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("QU", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setGroupId((long) (byte)78);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals(78, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("QU", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(78L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getSize());
      
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals(78, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("QU", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(78L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(78, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("X");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("X", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setUserName("_t");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("_t", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("X", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)82);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isStarSparse();
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("windows/");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("windows/", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setGroupName("windows/");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals("windows/", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("windows/", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isBlockDevice());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("\"", (byte) (-27));
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals("\"", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertNotNull(tarArchiveEntry0);
      
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader((byte[]) null, (ZipEncoding) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile("tar\u0000");
      assertNotNull(mockFile0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "tar\u0000");
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("tar\u0000", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("tar\u0000", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals("tar\u0000", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertNotNull(tarArchiveEntry0);
      
      TarArchiveEntry[] tarArchiveEntryArray0 = tarArchiveEntry0.getDirectoryEntries();
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("tar\u0000", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("tar\u0000", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals("tar\u0000", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertNotNull(tarArchiveEntryArray0);
      assertEquals(0, tarArchiveEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("windows/", (byte)56);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("windows/", tarArchiveEntry0.getName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertNotNull(tarArchiveEntry0);
      
      TarArchiveEntry[] tarArchiveEntryArray0 = tarArchiveEntry0.getDirectoryEntries();
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("windows/", tarArchiveEntry0.getName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertNotNull(tarArchiveEntryArray0);
      assertEquals(0, tarArchiveEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(":I5cOrlC0FO]:", (byte)81, false);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(":I5cOrlC0FO]:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertNotNull(tarArchiveEntry0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      tarArchiveEntry0.fillStarSparseData(map0);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertTrue(tarArchiveEntry0.isFile());
      assertTrue(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(":I5cOrlC0FO]:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertTrue(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertTrue(tarArchiveEntry0.isFile());
      assertTrue(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(":I5cOrlC0FO]:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertTrue(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00");
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("00", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("00", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("'", (byte)52, true);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertTrue(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("'", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertTrue(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("'", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("windows/");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("windows/", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isLink());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("windows/", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)51, true);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertTrue(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertTrue(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isSparse());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("windows/");
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("windows/", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertNotNull(tarArchiveEntry0);
      
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("windows/", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("6?po!(!jQtwFbp5xBG.", (byte)49, true);
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("6?po!(!jQtwFbp5xBG.", tarArchiveEntry0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "\"");
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertEquals("\"", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("(re%fqhDo-*", (byte)50);
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertTrue(boolean0);
      assertEquals("(re%fqhDo-*", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("V,&6j.]}KaH");
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertEquals("V,&6j.]}KaH", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("windows/");
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("0\u0000");
      tarArchiveEntry0.isFile();
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("0\u0000", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("\u0000", (byte)0);
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(boolean0);
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("\u0000", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "\"");
      tarArchiveEntry0.isFile();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("\"", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("windows/", (byte)56);
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(boolean0);
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("windows/");
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      tarArchiveEntry0.isDirectory();
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.commons.compress.archivers.zip.NioZipEncoding", (byte)103, false);
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("org.apache.commons.compress.archivers.zip.NioZipEncoding", tarArchiveEntry0.getName());
      assertTrue(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)88);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("6?p(!jQtwFbp5xBG.", (byte)49, true);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertTrue(tarArchiveEntry0.isLink());
      assertEquals("6?p(!jQtwFbp5xBG.", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("~ 6", (byte)120);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("~ 6", tarArchiveEntry0.getName());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("F", (byte)76);
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("F", tarArchiveEntry0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-112));
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)75, true);
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertTrue(boolean0);
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("windows/");
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("UTF-16BE", (byte)83, false);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals("UTF-16BE", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("kyww]on");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDevMinor((-133988296));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minor device number is out of range: -133988296
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDevMajor((-1166));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Major device number is out of range: -1166
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("6?po!(!jQtwFbp5xBG.");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setSize((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size is out of range: -1
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SV,U:", (byte)57, false);
      tarArchiveEntry0.setSize((byte)57);
      long long0 = tarArchiveEntry0.getSize();
      assertEquals(57L, long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("JN<kzM}dCR4;(\"3I_");
      boolean boolean0 = tarArchiveEntry0.equals((Object) tarArchiveEntry0);
      assertEquals("JN<kzM}dCR4;(\"3I_", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("windows/");
      tarArchiveEntry0.equals((Object) "windows/");
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("w&V'Z", (byte)57);
      tarArchiveEntry0.equals((Object) null);
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("w&V'Z", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      tarArchiveEntry0.getDirectoryEntries();
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "C/");
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals("C/", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.setUserId(9564);
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals(9564, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "\"");
      tarArchiveEntry0.getFile();
      assertEquals("\"", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00");
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, long0);
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("00", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "\"");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse1xData(map0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("wndows", (byte)82);
      String string0 = tarArchiveEntry0.getGroupName();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", string0);
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("wndows", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("windows", false);
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, int0);
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("windows", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SV,U:", (byte)57, false);
      int int0 = tarArchiveEntry0.getDevMinor();
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0, int0);
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("0\u0000");
      tarArchiveEntry0.equals(tarArchiveEntry0);
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("0\u0000", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null, (ZipEncoding) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("B850");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setModTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("wndows", true);
      String string0 = tarArchiveEntry0.getLinkName();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("wndows", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", string0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SV,U:", (byte)57, false);
      long long0 = tarArchiveEntry0.getRealSize();
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("SV,U:", tarArchiveEntry0.getName());
      assertEquals(0L, long0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("1}RaeCS{I1r");
      tarArchiveEntry0.isExtended();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("1}RaeCS{I1r", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("wndows", true);
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("wndows", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, long0);
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SCHILY.realsize", false);
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals(0, int0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("SCHILY.realsize", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/c");
      boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("c", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "\"");
      tarArchiveEntry0.isCheckSumOK();
      assertEquals("\"", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("N0ZfDpk,P9y>((", (byte) (-124));
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("windows/");
      int int0 = tarArchiveEntry0.getDevMajor();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("windows/");
      Date date0 = tarArchiveEntry0.getLastModifiedDate();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("F");
      tarArchiveEntry0.setName("F");
      assertEquals("F", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("wndows", (byte)82);
      tarArchiveEntry0.setNames((String) null, (String) null);
      String string0 = tarArchiveEntry0.getGroupName();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertNull(string0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("wndows", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("c>5z{^GR");
      tarArchiveEntry0.setIds(44, 44);
      assertEquals(44L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("windows", false);
      int int0 = tarArchiveEntry0.getMode();
      assertEquals(33188, int0);
      assertEquals("windows", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("netware");
      long long0 = tarArchiveEntry0.getSize();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, long0);
      assertEquals("netware", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("wndows", true);
      String string0 = tarArchiveEntry0.getUserName();
      assertEquals("", string0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("wndows", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }
}
