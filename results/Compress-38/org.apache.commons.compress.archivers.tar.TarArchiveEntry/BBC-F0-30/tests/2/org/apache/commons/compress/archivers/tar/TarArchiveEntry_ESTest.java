/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 05:12:34 GMT 2021
 */

package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.ByteBuffer;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TarArchiveEntry_ESTest extends TarArchiveEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AHld);", (byte)92);
      tarArchiveEntry0.isFIFO();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ibm437", (byte)39);
      tarArchiveEntry0.isBlockDevice();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("){:`bqM]H&");
      tarArchiveEntry0.isCharacterDevice();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)115);
      tarArchiveEntry0.isLink();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GloJ}:]5)l", (byte)49, false);
      tarArchiveEntry0.isSymbolicLink();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("zT9h$t]HBukV{wq+u", (byte)119);
      tarArchiveEntry0.isGlobalPaxHeader();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ";-Q~esjOCi@3");
      tarArchiveEntry0.isPaxHeader();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CF85", (byte)127);
      tarArchiveEntry0.isPaxHeader();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("%", true);
      tarArchiveEntry0.isGNULongNameEntry();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CF85", (byte)127);
      tarArchiveEntry0.isGNULongLinkEntry();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(":q`;?dk", true);
      tarArchiveEntry0.setDevMinor(0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("02rP2NroEQ_W<_x+LPH", false);
      tarArchiveEntry0.setDevMajor((byte)0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("UTF-16LE", (byte)8, true);
      tarArchiveEntry0.setSize(0L);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "ustar ");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("GNU.sparse.realsize", "00");
      tarArchiveEntry0.fillGNUSparse1xData(hashMap0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding", "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      tarArchiveEntry0.fillStarSparseData(hashMap0);
      tarArchiveEntry0.isStarSparse();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding", "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      tarArchiveEntry0.setName("BDVe&");
      TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0);
      boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry1);
      assertEquals("BDVe&", tarArchiveEntry0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CP850", (byte)53, false);
      tarArchiveEntry0.setUserName("CP850");
      tarArchiveEntry0.getUserName();
      assertEquals("CP850", tarArchiveEntry0.getUserName());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("02rP2NroEQ_W<_x+LPH", (byte)92);
      tarArchiveEntry0.setIds(31, 16877);
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals(31L, tarArchiveEntry0.getLongUserId());
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(":q`;?dk", true);
      String string0 = tarArchiveEntry0.getName();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(":q`;?dk", string0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/", (byte) (-41));
      tarArchiveEntry0.setMode((byte) (-41));
      int int0 = tarArchiveEntry0.getMode();
      assertEquals((-41), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CP850", (byte)53, false);
      tarArchiveEntry0.setIds(33188, (-2407));
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals((-2407L), tarArchiveEntry0.getLongGroupId());
      assertEquals(33188L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("3", (byte)53, false);
      tarArchiveEntry0.setIds(1214, 1214);
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals(1214, tarArchiveEntry0.getUserId());
      assertEquals(1214L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("){:`bqM]H&");
      tarArchiveEntry0.setLinkName((String) null);
      String string0 = tarArchiveEntry0.getLinkName();
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("){:`bqM]H&", tarArchiveEntry0.getName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("4H^l)9=", (byte)101, false);
      tarArchiveEntry0.setLinkName("00");
      tarArchiveEntry0.getLinkName();
      assertEquals("00", tarArchiveEntry0.getLinkName());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" ", (byte)84);
      tarArchiveEntry0.setIds((byte)84, (byte)84);
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals(84L, tarArchiveEntry0.getLongGroupId());
      assertEquals(84, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Z)7)'k/^En:\"}");
      tarArchiveEntry0.getFile();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("Z)7)'k/^En:\"}", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = MockFile.createTempFile("4j=l1WO]6L&c", "windows");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/4j=l1WO]6L&c0windows");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, "h)D-b>`YE=r");
      tarArchiveEntry0.getFile();
      assertEquals("h)D-b>`YE=r", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      System.setCurrentTimeMillis((-2119L));
      File file0 = MockFile.createTempFile("4j=l1WO]6L&c", "windows");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, "h)D-b>`YE=r");
      tarArchiveEntry0.getFile();
      assertEquals("h)D-b>`YE=r", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile("tovb.#'GO2=LFzDa9t&");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.getFile();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("tovb.#'GO2=LFzDa9t&", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/", "/");
      mockFile0.setExecutable(false);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "02rP2oEQ_?<x+LPH/");
      tarArchiveEntry0.getFile();
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("02rP2oEQ_?<x+LPH/", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFIFO());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CP850", (byte)96);
      tarArchiveEntry0.setDevMinor((byte)96);
      int int0 = tarArchiveEntry0.getDevMinor();
      assertEquals(96, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("U2#o-#h4", true);
      tarArchiveEntry0.setDevMajor(50);
      int int0 = tarArchiveEntry0.getDevMajor();
      assertEquals(50, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("02rP2NroEQ_W<_x+LPH", false);
      TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry("/l0(KY^nUTrOdZ(/", (byte) (-41), false);
      boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
      assertEquals("l0(KY^nUTrOdZ(/", tarArchiveEntry1.getName());
      assertEquals(0, tarArchiveEntry1.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry1.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(16877, tarArchiveEntry1.getMode());
      assertFalse(tarArchiveEntry1.isCharacterDevice());
      assertFalse(tarArchiveEntry1.isSparse());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CP8550", (byte)120, false);
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(31);
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0).when(zipEncoding0).encode(anyString());
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0, zipEncoding0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("02rP2NrtoEQ_W<_x+LPH", (byte)0, false);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0, (ZipEncoding) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)0, false);
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0).when(zipEncoding0).encode(anyString());
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0, zipEncoding0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("02rP2NroEQ_W<_x+LPH", false);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "02rP2NroEQ_W<_x+LPH/");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setModTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CP850", (byte)53, false);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader(byteArray0, (ZipEncoding) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("<A|XzB7+{*", true);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding", "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillStarSparseData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding", "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse1xData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/tmp/org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding0org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding", (byte)84);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse0xData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null, (ZipEncoding) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, (byte)53, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, (byte)72);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "02rP2oEQ_?<x+LPH/");
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals("02rP2oEQ_?<x+LPH/", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CP850", (byte)120, false);
      tarArchiveEntry0.isOldGNUSparse();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("CP850", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertTrue(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/02rP2NroEQ_W<_x+LPH", (byte)83);
      boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
      assertEquals("02rP2NroEQ_W<_x+LPH", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("//experiment/&CSrX`SE=H '#i)l85/&CSrX`SE=H '#i)l85", (byte)83, false);
      boolean boolean0 = tarArchiveEntry0.isGNUSparse();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("experiment/&CSrX`SE=H '#i)l85/&CSrX`SE=H '#i)l85", tarArchiveEntry0.getName());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ibm850");
      tarArchiveEntry0.setUserId((-59432204));
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals((-59432204), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("h)^Vv8-d(c,4\"I/?I", false);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", true);
      String string0 = tarArchiveEntry0.getName();
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", string0);
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.setGroupId((-290L));
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals((-290L), tarArchiveEntry0.getLongGroupId());
      assertEquals((-290), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ";-Q~esjOCi@3");
      tarArchiveEntry0.setGroupId((int) (byte)92);
      assertEquals(92, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GloJ}:]5)l", (byte)49, false);
      tarArchiveEntry0.setGroupName("GloJ}:]5)l");
      tarArchiveEntry0.getGroupName();
      assertEquals("GloJ}:]5)l", tarArchiveEntry0.getGroupName());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("iwbm437", (byte)39);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader((byte[]) null, (ZipEncoding) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("$G0?y?8r#KA/b*FF");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("SCHILY.realsize", "$G0?y?8r#KA/b*FF");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillStarSparseData(hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"$G0?y?8r#KA/b*FF\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding", "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      tarArchiveEntry0.getDirectoryEntries();
      assertEquals("tmp/org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding0org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("02rP2NroEQ_W<_x+LPH", (byte)92);
      tarArchiveEntry0.getDirectoryEntries();
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("02rP2NroEQ_W<_x+LPH", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("02rP2NroEQ_W<_x+LPH");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      tarArchiveEntry0.fillStarSparseData(hashMap0);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertTrue(tarArchiveEntry0.isStarSparse());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("02rP2NroEQ_W<_x+LPH");
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("02rP2NroEQ_W<_x+LPH", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isLink());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("4Z?A =NN-=o`&HZX", (byte)54, false);
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertEquals("4Z?A =NN-=o`&HZX", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CP850", (byte)53, false);
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertTrue(tarArchiveEntry0.isDirectory());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("CP850", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("^PhJ{{Yeqh<Tu\"", (byte)52);
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertTrue(boolean0);
      assertEquals("^PhJ{{Yeqh<Tu\"", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CP850", (byte)53, false);
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertEquals("CP850", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)51);
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GlcJ}:]5):", (byte)49);
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("GlcJ}:]5):", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("C5m0");
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("C5m0", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("3DOw9![Y=x?", (byte)50);
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("3DOw9![Y=x?", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CP850", (byte)120, false);
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(tarArchiveEntry0.isPaxHeader());
      assertEquals("CP850", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" will not fit in octal number buffer of length /", (byte) (-8));
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGNUSparse());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("%", true);
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("%", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)0, false);
      tarArchiveEntry0.isFile();
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals("", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding", "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      tarArchiveEntry0.isFile();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("tmp/org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding0org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CP850", (byte)53, false);
      tarArchiveEntry0.isFile();
      assertTrue(tarArchiveEntry0.isDirectory());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("CP850", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/", (byte)92, true);
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertFalse(tarArchiveEntry0.isLink());
      assertTrue(boolean0);
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("d`2|XdKFtMD/", true);
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertTrue(boolean0);
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding", "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      tarArchiveEntry0.isDirectory();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("tmp/org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding0org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/6", (byte)103);
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertEquals("6", tarArchiveEntry0.getName());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("02rP2NroEQ_W<_x+LPH", (byte)92);
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("02rP2NroEQ_W<_x+LPH", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ceJ1h:ioU", (byte)88, true);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertTrue(boolean0);
      assertEquals("ceJ1h:ioU", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CP850", (byte)120, false);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals("CP850", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("f'R^=$Uh#et6nDrv", (byte)76);
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertTrue(boolean0);
      assertEquals("f'R^=$Uh#et6nDrv", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("02rP2NroEQ_W<_x+LPH", (byte)92);
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("02rP2NroEQ_W<_x+LPH", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/f'R^=$Uh#et6nDrv", (byte)75);
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("f'R^=$Uh#et6nDrv", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GlcJ}:]5):", (byte)49);
      tarArchiveEntry0.isGNULongLinkEntry();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("GlcJ}:]5):", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("30", (byte) (-118));
      boolean boolean0 = tarArchiveEntry0.isGNUSparse();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("30", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)83, true);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile("tovb.#'GO2=LFzDa9t&");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDevMinor((-52));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minor device number is out of range: -52
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("^", false);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDevMajor((-819));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Major device number is out of range: -819
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CP850", (byte)53, false);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setSize((-395L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size is out of range: -395
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "02rP2oEQ_?<x+LPH/");
      tarArchiveEntry0.setSize(7L);
      long long0 = tarArchiveEntry0.getSize();
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockFile mockFile0 = new MockFile("CP850", "Mi%=TY<\"$l");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.equals((Object) tarArchiveEntry0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("experiment/CP850/Mi%=TY<\"$l", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", true);
      boolean boolean0 = tarArchiveEntry0.equals((Object) "");
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CP850", (byte)53, false);
      boolean boolean0 = tarArchiveEntry0.equals((Object) null);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("CP850", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFile mockFile0 = new MockFile("CP850", "Mi%=TY<\"$l");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.setModTime((long) 1000);
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("experiment/CP850/Mi%=TY<\"$l", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("30", (byte) (-118));
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("30", tarArchiveEntry0.getName());
      assertEquals(0L, long0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse1xData(hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipEncodingHelper");
      String string0 = tarArchiveEntry0.getGroupName();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipEncodingHelper", tarArchiveEntry0.getName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ibm850");
      int int0 = tarArchiveEntry0.getUserId();
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("ibm850", tarArchiveEntry0.getName());
      assertEquals(0, int0);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CP850", (byte)53, false);
      int int0 = tarArchiveEntry0.getDevMinor();
      assertEquals(0, int0);
      assertEquals("CP850", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("s~ZC3", (byte)24, true);
      tarArchiveEntry0.equals(tarArchiveEntry0);
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("s~ZC3", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0, (ZipEncoding) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("4H^l)9=", (byte)101, false);
      Date date0 = tarArchiveEntry0.getLastModifiedDate();
      tarArchiveEntry0.setModTime(date0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("4H^l)9=", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("){:`bqM]H&");
      String string0 = tarArchiveEntry0.getLinkName();
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("", string0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("){:`bqM]H&", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("02rP2NroEQ_W<_x+LPH", (byte)92);
      long long0 = tarArchiveEntry0.getRealSize();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("02rP2NroEQ_W<_x+LPH", tarArchiveEntry0.getName());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("d`2|XdKFtMD/", true);
      tarArchiveEntry0.isExtended();
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("C5m0");
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals(0L, long0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("C5m0", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, int0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding", "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry0);
      assertTrue(boolean0);
      assertEquals("tmp/org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding0org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("02rP2NroEQ_W<_x+LPH", (byte)92);
      tarArchiveEntry0.hashCode();
      assertEquals("02rP2NroEQ_W<_x+LPH", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding", "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      tarArchiveEntry0.isCheckSumOK();
      assertEquals("tmp/org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding0org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", true);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ibm850");
      int int0 = tarArchiveEntry0.getDevMajor();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("ibm850", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, int0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/02rP2NroEQ_W<_x+LPH", (byte)83);
      Date date0 = tarArchiveEntry0.getModTime();
      assertEquals("02rP2NroEQ_W<_x+LPH", tarArchiveEntry0.getName());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertTrue(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/", "/");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "02rP2oEQ_?<x+LPH/");
      tarArchiveEntry0.getDirectoryEntries();
      assertEquals("02rP2oEQ_?<x+LPH/", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("f'R^=$Uh#et6nDrv", (byte)76);
      tarArchiveEntry0.isPaxGNUSparse();
      assertEquals("f'R^=$Uh#et6nDrv", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipEncodingHelper");
      tarArchiveEntry0.setNames((String) null, (String) null);
      String string0 = tarArchiveEntry0.getGroupName();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipEncodingHelper", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertNull(string0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("JD<>Y>;G0$z", true);
      tarArchiveEntry0.setUserName((String) null);
      String string0 = tarArchiveEntry0.getUserName();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertNull(string0);
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("JD<>Y>;G0$z", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipEncodingHelper");
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipEncodingHelper", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CP850", (byte)120, false);
      tarArchiveEntry0.isStarSparse();
      assertEquals("CP850", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertTrue(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("C5m0");
      tarArchiveEntry0.setIds((-1337), (-3121));
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals((-1337L), tarArchiveEntry0.getLongUserId());
      assertEquals((-3121L), long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("30", (byte) (-118));
      tarArchiveEntry0.setUserId((long) (byte) (-118));
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals((-118), tarArchiveEntry0.getUserId());
      assertEquals((-118L), long0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("CP850", (byte)53, false);
      int int0 = tarArchiveEntry0.getMode();
      assertEquals("CP850", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertEquals(33188, int0);
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "02rP2oEQ_?<x+LPH/");
      long long0 = tarArchiveEntry0.getSize();
      assertEquals(0L, long0);
      assertEquals("02rP2oEQ_?<x+LPH/", tarArchiveEntry0.getName());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("JD<>Y>;G0$z", true);
      String string0 = tarArchiveEntry0.getUserName();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("JD<>Y>;G0$z", tarArchiveEntry0.getName());
      assertEquals("", string0);
  }
}
