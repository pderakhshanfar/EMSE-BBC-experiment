/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 17:22:59 GMT 2021
 */

package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.ByteBuffer;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TarArchiveEntry_ESTest extends TarArchiveEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      tarArchiveEntry0.isFIFO();
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFile mockFile0 = new MockFile("m");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "m");
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("m", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Minor device number is out of range: ");
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("Minor device number is out of range: ", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("BqDeD~tNN", (byte)100, false);
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("BqDeD~tNN", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("pgeREz`0ZMtAK", (byte)83, true);
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("pgeREz`0ZMtAK", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("tware", (byte) (-75));
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("tware", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertTrue(boolean0);
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Y2VY*u>]'<)Gy", (byte)102);
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("Y2VY*u>]'<)Gy", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("At offset ", (byte)122, true);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("At offset ", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)84, false);
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNUSparse());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("pgeREz`0ZMtAK", (byte)83, true);
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("pgeREz`0ZMtAK", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertTrue(tarArchiveEntry0.isSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("R#1>D=&$8f3Noq}Gt", (byte) (-92));
      tarArchiveEntry0.setDevMinor(0);
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("R#1>D=&$8f3Noq}Gt", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("tware", (byte) (-75));
      tarArchiveEntry0.setSize(0L);
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("tware", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFile mockFile0 = new MockFile("UTF8");
      mockFile0.mkdirs();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/q#");
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("q#/", tarArchiveEntry0.getName());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-45), true);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      tarArchiveEntry0.fillStarSparseData(map0);
      boolean boolean0 = tarArchiveEntry0.isStarSparse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("#-zl+W)J", (byte)0, true);
      TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry("tar\u0000", (byte)0, true);
      boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry1);
      assertFalse(tarArchiveEntry1.isSymbolicLink());
      assertFalse(tarArchiveEntry1.isFIFO());
      assertEquals(33188, tarArchiveEntry1.getMode());
      assertFalse(tarArchiveEntry1.isPaxHeader());
      assertFalse(tarArchiveEntry1.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry1.isDirectory());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry1.getUserId());
      assertFalse(tarArchiveEntry1.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry1.getDevMinor());
      assertEquals(0, tarArchiveEntry1.getDevMajor());
      assertEquals(0, tarArchiveEntry1.getGroupId());
      assertFalse(tarArchiveEntry1.isBlockDevice());
      assertFalse(tarArchiveEntry1.isLink());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Ty8L!k42Z?p%Ep56bjo", false);
      tarArchiveEntry0.setUserName("Ty8L!k42Z?p%Ep56bjo");
      tarArchiveEntry0.getUserName();
      assertEquals("Ty8L!k42Z?p%Ep56bjo", tarArchiveEntry0.getUserName());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" BQ37;Ut/");
      tarArchiveEntry0.setIds(2023, 1139);
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals(1139, tarArchiveEntry0.getGroupId());
      assertEquals(2023, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" m)sWs (re at leaW4/");
      tarArchiveEntry0.setUserId((-1L));
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals((-1L), tarArchiveEntry0.getLongUserId());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockFile mockFile0 = new MockFile("|~LU=6`LFm`");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/p)=7l|EA$^0obUyB");
      String string0 = tarArchiveEntry0.getName();
      assertEquals("p)=7l|EA$^0obUyB", string0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile("27a1*~);(3PZn_G,", "27a1*~);(3PZn_G,");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.setMode(0);
      int int0 = tarArchiveEntry0.getMode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("&OlpUU94i(D@");
      tarArchiveEntry0.setMode((-2951));
      int int0 = tarArchiveEntry0.getMode();
      assertEquals((-2951), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockFile mockFile0 = new MockFile("|~LU=6`LFm`");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/p)=7l|EA$^0obUyB");
      tarArchiveEntry0.setIds(2145, (-2050));
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals((-2050L), tarArchiveEntry0.getLongGroupId());
      assertEquals(2145L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      tarArchiveEntry0.setIds((-52), 30);
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals((-52), tarArchiveEntry0.getUserId());
      assertEquals((-52L), long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      tarArchiveEntry0.setGroupId(1511);
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals(1511, tarArchiveEntry0.getGroupId());
      assertEquals(1511L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      File file0 = MockFile.createTempFile("ibm850", "~;2TvHX%%YL#uRHA");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      tarArchiveEntry0.setGroupId((-54L));
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals((-54), tarArchiveEntry0.getGroupId());
      assertEquals((-54L), long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("UQ80");
      tarArchiveEntry0.setLinkName("jA");
      tarArchiveEntry0.getLinkName();
      assertEquals("jA", tarArchiveEntry0.getLinkName());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/z!9(Er[*.", (byte) (-61));
      tarArchiveEntry0.setGroupName((String) null);
      String string0 = tarArchiveEntry0.getGroupName();
      assertNull(string0);
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("z!9(Er[*.", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = MockFile.createTempFile("ibm850", "~;2TvHX%%YL#uRHA");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      tarArchiveEntry0.setGroupName("ibm850");
      tarArchiveEntry0.getGroupName();
      assertEquals("ibm850", tarArchiveEntry0.getGroupName());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/00");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/00");
      tarArchiveEntry0.setGroupId((long) (byte) (-97));
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals((-97L), tarArchiveEntry0.getLongGroupId());
      assertEquals((-97), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00");
      tarArchiveEntry0.getFile();
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("00", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      File file0 = MockFile.createTempFile("ibm850", "~;2TvHX%%YL#uRHA");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/ibm8500~;2TvHX%%YL#uRHA");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "uKoiRu2Hds");
      tarArchiveEntry0.getFile();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("tmp/ibm8500~;2TvHX%%YL#uRHA", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      System.setCurrentTimeMillis((-2903L));
      MockFile mockFile0 = new MockFile("UEd/~m");
      File file0 = MockFile.createTempFile("cvdjLf_N@K^~/W.o`", "U", (File) mockFile0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, "U");
      tarArchiveEntry0.getFile();
      assertEquals("U", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".tSjSYHoQ)6", ".tSjSYHoQ)6");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.getFile();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("experiment/.tSjSYHoQ)6/.tSjSYHoQ)6", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      tarArchiveEntry0.getFile();
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Minor device number is out of range: ", (byte) (-97), false);
      tarArchiveEntry0.setDevMinor(53);
      int int0 = tarArchiveEntry0.getDevMinor();
      assertEquals(53, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)84, false);
      tarArchiveEntry0.setDevMajor((byte)84);
      int int0 = tarArchiveEntry0.getDevMajor();
      assertEquals(84, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SC9:fy!Ug3!bG,", true);
      MockFile mockFile0 = new MockFile("", "6O|t.eE;V|W*");
      TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(mockFile0);
      boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry1.getDevMinor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry1.getDevMajor());
      assertEquals("6O|t.eE;V|W*", tarArchiveEntry1.getName());
      assertEquals("SC9:fy!Ug3!bG,", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry1.getLongUserId());
      assertEquals(0, tarArchiveEntry1.getGroupId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)103);
      byte[] byteArray0 = new byte[7];
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(31);
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0).when(zipEncoding0).encode(anyString());
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0, zipEncoding0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("netware", (byte) (-75), false);
      byte[] byteArray0 = new byte[2];
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null).when(zipEncoding0).encode(anyString());
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0, zipEncoding0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("netware", (byte) (-75), false);
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0).when(zipEncoding0).encode(anyString());
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0, zipEncoding0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockFile mockFile0 = new MockFile("n`^");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)84, true);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setModTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(">5?OH<*QK=Prv>r}-");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader((byte[]) null, (ZipEncoding) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00");
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("tware", (byte) (-75));
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillStarSparseData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("At offset ", (byte)122, true);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse1xData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockFile mockFile0 = new MockFile("27a1*~);(3PZn_G,", "27a1*~);(3PZn_G,");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse0xData(map0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("6A,xF,Xl#HtrqBUk4/");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse0xData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      File file0 = MockFile.createTempFile("q#", "q#");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, "q#");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.equals((TarArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0, (ZipEncoding) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, (byte)0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, (byte)51);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "Size is out of range: ");
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/SCHILY.realsize", false);
      boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("SCHILY.realsize", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("(m+_NLZH_+2\":&", (byte)83);
      boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
      assertTrue(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("(m+_NLZH_+2\":&", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)84, false);
      boolean boolean0 = tarArchiveEntry0.isGNUSparse();
      assertFalse(boolean0);
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockFile mockFile0 = new MockFile("UTF8");
      mockFile0.mkdirs();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      assertEquals("UTF8/", tarArchiveEntry0.getName());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      File file0 = MockFile.createTempFile("ibm850", "~;2TvHX%%YL#uRHA");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      tarArchiveEntry0.isPaxGNUSparse();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("tmp/ibm8500~;2TvHX%%YL#uRHA", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-lWi");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "-lWi");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      String string0 = tarArchiveEntry0.getName();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", string0);
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Y2VOY*ud>]'<)Gy", (byte)102);
      tarArchiveEntry0.setGroupId((long) (byte)102);
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals(102L, tarArchiveEntry0.getLongGroupId());
      assertEquals(102, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("I.z!7}#bJZ", (byte)12);
      tarArchiveEntry0.isStarSparse();
      assertEquals("I.z!7}#bJZ", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("q#");
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader(byteArray0, (ZipEncoding) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("SCHILY.realsize", "SCHILY.realsize");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("\"pYjM*ZVL)XF_Jxz", (byte)72, true);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillStarSparseData(hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"SCHILY.realsize\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile("At offset ");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.getDirectoryEntries();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("At offset ", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)84, false);
      tarArchiveEntry0.getDirectoryEntries();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("I4{>bL-:SAQ$8", (byte)84, false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      tarArchiveEntry0.fillStarSparseData(hashMap0);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertTrue(tarArchiveEntry0.isStarSparse());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("I4{>bL-:SAQ$8", (byte)83, false);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertTrue(boolean0);
      assertEquals("I4{>bL-:SAQ$8", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("%", (byte)54, false);
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertTrue(boolean0);
      assertEquals("%", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("IBM850", (byte)75, true);
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertTrue(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("IBM850", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Size is out of range: /", (byte)52);
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals("Size is out of range: /", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("IBM850", (byte)75, true);
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("IBM850", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ibm850", (byte)51);
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("ibm850", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("/", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("%XVQ*gGw^1V'{6", (byte)49);
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("%XVQ*gGw^1V'{6", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/z!9(Er[*.", (byte) (-61));
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("z!9(Er[*.", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" m)sWs (Ye at leaW4/", (byte)50);
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertTrue(tarArchiveEntry0.isDirectory());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("pgeREz`0ZMtAK");
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("pgeREz`0ZMtAK", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("6A,xF,Xl#HtrqBUk4/", (byte)1, true);
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("pgeREz`0ZMtAK", (byte)83, true);
      tarArchiveEntry0.isFile();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("pgeREz`0ZMtAK", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("#-zl+W)J", (byte)0, true);
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertTrue(boolean0);
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("#-zl+W)J", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/00");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/00");
      tarArchiveEntry0.isFile();
      assertEquals("00", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GJR|?", false);
      tarArchiveEntry0.isFile();
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("GJR|?", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("&LS5]p/", (byte)19, false);
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertTrue(boolean0);
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("pgeREz`0ZMtAK/", false);
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertTrue(boolean0);
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals("pgeREz`0ZMtAK/", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      tarArchiveEntry0.isDirectory();
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)103);
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertTrue(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Pp(geREz`0ZMtAK", (byte)105);
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("Pp(geREz`0ZMtAK", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)88, false);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getName());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(boolean0);
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(">", (byte)120, false);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals(">", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockFile mockFile0 = new MockFile("At offset ");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("At offset ", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("IBM850", (byte)75, true);
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertEquals("IBM850", tarArchiveEntry0.getName());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/GJR|?", (byte)70, false);
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("GJR|?", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)83);
      boolean boolean0 = tarArchiveEntry0.isGNUSparse();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFile mockFile0 = new MockFile("At offset ");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDevMinor((-214));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minor device number is out of range: -214
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Minor device number is out of range: ");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDevMajor((-1780));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Major device number is out of range: -1780
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)0, false);
      tarArchiveEntry0.setDevMajor((byte)0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setSize((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size is out of range: -1
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("!qvCpBo'cV`0P", true);
      tarArchiveEntry0.setSize(1525L);
      long long0 = tarArchiveEntry0.getSize();
      assertEquals(1525L, long0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/SCHILY.realsize", false);
      tarArchiveEntry0.equals((Object) "/SCHILY.realsize");
      assertEquals("SCHILY.realsize", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isLink());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockFile mockFile0 = new MockFile("m");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "m");
      boolean boolean0 = tarArchiveEntry0.equals((Object) tarArchiveEntry0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("m", tarArchiveEntry0.getName());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("q#");
      boolean boolean0 = tarArchiveEntry0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("q#", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "netware/");
      assertEquals("netware/", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      tarArchiveEntry0.getDirectoryEntries();
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("m", (byte)76, false);
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertEquals("m", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockFile mockFile0 = new MockFile("duz7Tt1d'gH,d>F|/");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "duz7Tt1d'gH,d>F|/");
      tarArchiveEntry0.getFile();
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("duz7Tt1d'gH,d>F|/", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFile mockFile0 = new MockFile("27a1*~);(3PZn_G,", "27a1*~);(3PZn_G,");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      Date date0 = tarArchiveEntry0.getLastModifiedDate();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals("experiment/27a1*~);(3PZn_G,/27a1*~);(3PZn_G,", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("!qvCpBo'cV`0P", true);
      tarArchiveEntry0.setModTime(531L);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("!qvCpBo'cV`0P", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(0L, long0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("At offset ", (byte)122, true);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse1xData(map0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/z!9(Er[*.", (byte) (-61));
      String string0 = tarArchiveEntry0.getGroupName();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("z!9(Er[*.", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("E>18PT^$*KpXO]~", (byte)61, false);
      int int0 = tarArchiveEntry0.getUserId();
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("E>18PT^$*KpXO]~", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, int0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockFile mockFile0 = new MockFile("27a1*~);(3PZn_G,", "27a1*~);(3PZn_G,");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      int int0 = tarArchiveEntry0.getDevMinor();
      assertEquals(0, int0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("experiment/27a1*~);(3PZn_G,/27a1*~);(3PZn_G,", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/GJR|?", (byte)70, false);
      tarArchiveEntry0.equals(tarArchiveEntry0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("GJR|?", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null, (ZipEncoding) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("E>18PT^$*KpXO]~", (byte)61, false);
      MockDate mockDate0 = new MockDate(108, 108, 31);
      tarArchiveEntry0.setModTime((Date) mockDate0);
      assertEquals("E>18PT^$*KpXO]~", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("UEd/~m");
      String string0 = tarArchiveEntry0.getLinkName();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("UEd/~m", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("", string0);
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)84, false);
      long long0 = tarArchiveEntry0.getRealSize();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0L, long0);
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockFile mockFile0 = new MockFile("UTF8");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.isExtended();
      assertEquals("UTF8", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0L, long0);
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)84, false);
      int int0 = tarArchiveEntry0.getGroupId();
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, int0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      File file0 = MockFile.createTempFile("ibm850", "~;2TvHX%%YL#uRHA");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("tmp/ibm8500~;2TvHX%%YL#uRHA", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("R#1>D=&$8f3Noq}Gt", (byte) (-92));
      tarArchiveEntry0.hashCode();
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("R#1>D=&$8f3Noq}Gt", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Ty8L!k42Z?p%Ep56bjo", false);
      tarArchiveEntry0.isCheckSumOK();
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("Ty8L!k42Z?p%Ep56bjo", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)84, false);
      int int0 = tarArchiveEntry0.getDevMajor();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, int0);
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isSparse());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("At offset ", (byte)122, true);
      Date date0 = tarArchiveEntry0.getModTime();
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("At offset ", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isSparse());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/00");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/00");
      tarArchiveEntry0.setName("/00");
      assertEquals("00", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00");
      tarArchiveEntry0.setNames("00", "B3");
      assertEquals("00", tarArchiveEntry0.getUserName());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("BqDeD~tNN", (byte)100, false);
      tarArchiveEntry0.setUserName((String) null);
      String string0 = tarArchiveEntry0.getUserName();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("BqDeD~tNN", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertNull(string0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("UEd/~m");
      tarArchiveEntry0.setLinkName((String) null);
      String string0 = tarArchiveEntry0.getLinkName();
      assertEquals("UEd/~m", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("I4{>bL-:SAQ$8", (byte)84, false);
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertEquals("I4{>bL-:SAQ$8", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNUSparse());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("pgeREz`0ZMtAK/", false);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)83);
      tarArchiveEntry0.setUserId(201);
      assertEquals(201L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockFile mockFile0 = new MockFile("27a1*~);(3PZn_G,", "27a1*~);(3PZn_G,");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      int int0 = tarArchiveEntry0.getMode();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("experiment/27a1*~);(3PZn_G,/27a1*~);(3PZn_G,", tarArchiveEntry0.getName());
      assertEquals(33188, int0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("!qvCpBo'cV`0P", true);
      long long0 = tarArchiveEntry0.getSize();
      assertEquals("!qvCpBo'cV`0P", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, long0);
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("%", (byte)54, false);
      String string0 = tarArchiveEntry0.getUserName();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isFIFO());
      assertEquals("%", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", string0);
  }
}
