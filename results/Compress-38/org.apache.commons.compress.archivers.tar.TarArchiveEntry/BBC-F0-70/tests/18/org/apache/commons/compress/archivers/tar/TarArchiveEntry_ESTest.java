/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 04:18:05 GMT 2021
 */

package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TarArchiveEntry_ESTest extends TarArchiveEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Yt\"*fs'6T=<", (byte)88, true);
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(boolean0);
      assertEquals("Yt\"*fs'6T=<", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("wn/n Gsv?+1hq{s~i", (byte)32, true);
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("wn/n Gsv?+1hq{s~i", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Yt\"*fs'6T=<", (byte)88, true);
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isPaxHeader());
      assertEquals("Yt\"*fs'6T=<", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("US-ASCM4");
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertEquals("US-ASCM4", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("IBM850", (byte)120, false);
      tarArchiveEntry0.isFile();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("IBM850", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isPaxHeader());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Yt\"*fs'6T=<", (byte)122, true);
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("Yt\"*fs'6T=<", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFIFO());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("]0", (byte)123, true);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("]0", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("US-ASCII");
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertEquals("US-ASCII", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("US-ASCII");
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("US-ASCII", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isLink());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Mms$1j!*zmd_$;wds?", (byte)117, false);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("Mms$1j!*zmd_$;wds?", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockFile mockFile0 = new MockFile("rQm7q\"cT", "rQm7q\"cT");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "rQm7q\"cT");
      tarArchiveEntry0.setDevMinor((byte)0);
      assertEquals("rQm7q\"cT", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      File file0 = MockFile.createTempFile("IBM850", "IBM850");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, "user.name");
      tarArchiveEntry0.setDevMajor(0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("user.name", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ustar ", true);
      tarArchiveEntry0.setSize(0L);
      assertEquals("ustar ", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isLink());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile("//tmp/XI|@]Z!l&yhxq,40;c\"vlytDgO5Rp%3", "/Aoxyg6");
      MockFile.createTempFile("7vh/", "!J&SHVm", (File) mockFile0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "$");
      assertEquals("$/", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("}>,j+", (byte) (-5), true);
      tarArchiveEntry0.fillStarSparseData(hashMap0);
      boolean boolean0 = tarArchiveEntry0.isStarSparse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Mms$1j!*zmd_$;wds?", (byte) (-54));
      File file0 = MockFile.createTempFile("kp5>#NQD9N+&Hd", (String) null);
      TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0);
      boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry1);
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry1.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry1.getLongGroupId());
      assertEquals("Mms$1j!*zmd_$;wds?", tarArchiveEntry0.getName());
      assertEquals("tmp/kp5>#NQD9N+&Hd0.tmp", tarArchiveEntry1.getName());
      assertEquals(0L, tarArchiveEntry1.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("s4030f?C'T<&Lg-Ha]", (byte)85, true);
      tarArchiveEntry0.setUserName("C");
      tarArchiveEntry0.getUserName();
      assertEquals("C", tarArchiveEntry0.getUserName());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", false);
      tarArchiveEntry0.setIds(120, 2);
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals(2L, tarArchiveEntry0.getLongGroupId());
      assertEquals(120, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("qckF(8%9An=eRX@", true);
      tarArchiveEntry0.setUserId((-328L));
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals((-328L), tarArchiveEntry0.getLongUserId());
      assertEquals((-328), int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Yt\"*fs'6T=<", (byte)88, true);
      tarArchiveEntry0.setSize(2230L);
      long long0 = tarArchiveEntry0.getSize();
      assertEquals(2230L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(")&ohZD3P.q", true);
      String string0 = tarArchiveEntry0.getName();
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(")&ohZD3P.q", string0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("//experiment/Size is out of ange: /Size is out of ange: ", (byte) (-109), true);
      tarArchiveEntry0.setMode((byte) (-109));
      int int0 = tarArchiveEntry0.getMode();
      assertEquals((-109), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("t{X62tXY", false);
      tarArchiveEntry0.setIds(766, 766);
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals(766L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("At offset ", (byte) (-92));
      tarArchiveEntry0.setUserId((long) (byte) (-92));
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals((-92L), long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/ \u0000", (byte)82);
      tarArchiveEntry0.setGroupId((int) (byte)82);
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals(82L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Length ", true);
      tarArchiveEntry0.setLinkName((String) null);
      String string0 = tarArchiveEntry0.getLinkName();
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isLink());
      assertNull(string0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("Length ", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00");
      tarArchiveEntry0.setLinkName("m)1kqz/0}!");
      tarArchiveEntry0.getLinkName();
      assertEquals("m)1kqz/0}!", tarArchiveEntry0.getLinkName());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Major device number is out of range: ", (byte) (-51), false);
      tarArchiveEntry0.setNames("Major device number is out of range: ", "ZxN|W6{jGL;wNx#");
      tarArchiveEntry0.getGroupName();
      assertEquals("ZxN|W6{jGL;wNx#", tarArchiveEntry0.getGroupName());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("U}BPyErc&", true);
      tarArchiveEntry0.setIds(33188, 33188);
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals(33188L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      tarArchiveEntry0.setGroupId((-323L));
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals((-323L), tarArchiveEntry0.getLongGroupId());
      assertEquals((-323), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/IBM8500IBM850");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "E$hWh?C-l3*uL=");
      File file0 = MockFile.createTempFile("IBM850", "IBM850");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, "user.name");
      tarArchiveEntry0.getFile();
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("user.name", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".#E=z}hlz`y42e", ".#E=z}hlz`y42e");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.getFile();
      assertEquals("experiment/.#E=z}hlz`y42e/.#E=z}hlz`y42e", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.getFile();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("//experiment/Size is out of ange: /Size is out of ange: ", (byte)109, true);
      tarArchiveEntry0.setDevMinor(544);
      int int0 = tarArchiveEntry0.getDevMinor();
      assertEquals(544, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("QGaJ6NwY#L 2q($a");
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      
      tarArchiveEntry0.setDevMajor(1);
      int int0 = tarArchiveEntry0.getDevMajor();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Yt\"*fs'6T=<", (byte)88, true);
      TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry("$", false);
      boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
      assertFalse(tarArchiveEntry1.isDirectory());
      assertEquals(0L, tarArchiveEntry1.getLongGroupId());
      assertEquals(0L, tarArchiveEntry1.getSize());
      assertFalse(boolean0);
      assertTrue(tarArchiveEntry0.isPaxHeader());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry1.getUserId());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\u0000");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.setUserId(0L);
      mockFile0.setReadable(false);
      tarArchiveEntry0.isSparse();
      tarArchiveEntry0.isBlockDevice();
      tarArchiveEntry0.getGroupName();
      tarArchiveEntry0.getFile();
      tarArchiveEntry0.setUserName("");
      tarArchiveEntry0.isBlockDevice();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)127;
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)71;
      byte byte1 = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      mockFile0.setReadable(false);
      tarArchiveEntry0.setModTime(1000L);
      byteArray0[3] = (byte) (-28);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((byte)127);
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0, (ByteBuffer) null).when(zipEncoding0).encode(anyString());
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0, zipEncoding0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(")&ohZD3P.q", true);
      byte[] byteArray0 = new byte[4];
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ")&ohZD3P.q");
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0).when(zipEncoding0).encode(anyString());
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0, zipEncoding0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" \u0000");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("!8=.kuOI", (byte)1);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setModTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("kdg{[9IjB", (byte)76, true);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader((byte[]) null, (ZipEncoding) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("WGRtHfV]/qV;~H`", false);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      File file0 = MockFile.createTempFile("IBM850", "IBM850");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, "user.name");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.isDescendent((TarArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFile mockFile0 = new MockFile("2tJ");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillStarSparseData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("US-ASCII");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse1xData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("US-ASCM4");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse0xData(map0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("lkWyoSe29_3", false);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse0xData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("US-ASCM4/", false);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.equals((TarArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null, (ZipEncoding) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, (byte)77, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, (byte)81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(")&ohZD3P.q", true);
      boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(")&ohZD3P.q", tarArchiveEntry0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("o6", (byte)83);
      boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("o6", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/6H|gU7eb@l]FOlWph");
      boolean boolean0 = tarArchiveEntry0.isGNUSparse();
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("6H|gU7eb@l]FOlWph", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockFile mockFile0 = new MockFile("//tmp/XI|@]Z!l&yhxq,40;c\"vlytDgO5Rp%3", "/Aoxyg6");
      MockFile.createTempFile("7vh/", "!J&SHVm", (File) mockFile0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "Cp437");
      assertEquals("Cp437/", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(".");
      tarArchiveEntry0.isPaxGNUSparse();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(".", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFile mockFile0 = new MockFile("L;c!2Nns!$MJWV", "s4030f?C'T<&Lg-Ha]");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.setUserId((-1592));
      assertEquals((-1592L), tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)0, false);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)48);
      String string0 = tarArchiveEntry0.getName();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Yt\"*fs'6T=<", (byte)88, true);
      tarArchiveEntry0.equals(tarArchiveEntry0);
      assertEquals("Yt\"*fs'6T=<", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isPaxHeader());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      File file0 = MockFile.createTempFile("ustar ", "IBM850");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, "IBM850");
      tarArchiveEntry0.isStarSparse();
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("IBM850", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      File file0 = MockFile.createTempFile("ustar ", "IBM850");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, "IBM850");
      byte[] byteArray0 = new byte[6];
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader(byteArray0, zipEncoding0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("SCHILY.realsize");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("SCHILY.realsize", "x4_EzJ-#g <`HC");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillStarSparseData(hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"x4_EzJ-#g <`HC\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H!wECub}QP^&a?", "(#UQ`'Y43~\"iU");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "UTF-16BE");
      tarArchiveEntry0.getDirectoryEntries();
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("UTF-16BE", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("~Gz%;:sx8@;XT7^[)m", (byte)117);
      tarArchiveEntry0.getDirectoryEntries();
      assertEquals("~Gz%;:sx8@;XT7^[)m", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      File file0 = MockFile.createTempFile("windows", "windows");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      assertFalse(tarArchiveEntry0.isSparse());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      tarArchiveEntry0.fillStarSparseData(hashMap0);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Et(*[", (byte)83);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertEquals("Et(*[", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Q0", (byte)54, true);
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertTrue(boolean0);
      assertEquals("/Q0", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ll:-,@:");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("Ll:-,@:", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)52);
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("0", (byte)51);
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals("0", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      tarArchiveEntry0.isCharacterDevice();
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFile mockFile0 = new MockFile("L;c!2Nns!$MJWV", "s4030f?C'T<&Lg-Ha]");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("experiment/L;c!2Nns!$MJWV/s4030f?C'T<&Lg-Ha]", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/\u0000", (byte)50, false);
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("\u0000", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GNU.sparse.realsize", (byte)79, false);
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("GNU.sparse.realsize", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isPaxHeader());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("s4030f?C'T<&Lg-Ha]/", (byte)1);
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/US-ASCII", (byte) (-86), true);
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertEquals("/US-ASCII", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertTrue(boolean0);
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)0, false);
      tarArchiveEntry0.isFile();
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isPaxHeader());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      tarArchiveEntry0.isFile();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("J9'*m>o{I");
      tarArchiveEntry0.isFile();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("J9'*m>o{I", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("\"/", (byte)82);
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" i  K}/", true);
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFile());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      tarArchiveEntry0.isDirectory();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/00", (byte)103);
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("00", tarArchiveEntry0.getName());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Mms$1j!*zmd_$;wds?", (byte) (-54));
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("Mms$1j!*zmd_$;wds?", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isGNUSparse());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Yt\"*fs'6T=<", (byte)88, true);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("Yt\"*fs'6T=<", tarArchiveEntry0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockFile mockFile0 = new MockFile("2tJ");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals("2tJ", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("IBM850", (byte)120, false);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals("IBM850", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)76);
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Yt\"*fs'6T=<", (byte)88, true);
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertTrue(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("Yt\"*fs'6T=<", tarArchiveEntry0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/ \u0000", (byte)75);
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(" \u0000", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("s4030f?C'T<&Lg-Ha]", (byte)85, true);
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertFalse(boolean0);
      assertEquals("s4030f?C'T<&Lg-Ha]", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("$slpG'", (byte)83, false);
      boolean boolean0 = tarArchiveEntry0.isGNUSparse();
      assertEquals("$slpG'", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("^MhnCjY]F", (byte) (-127), true);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDevMinor((byte) (-127));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minor device number is out of range: -127
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("US-ASCII");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDevMajor((-6254807));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Major device number is out of range: -6254807
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFile mockFile0 = new MockFile("L;c!2Nns!$MJWV", "s4030f?C'T<&Lg-Ha]");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setSize((-1592));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size is out of range: -1592
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Mms$1j!*zmd_$;wds?", (byte) (-54));
      tarArchiveEntry0.equals((Object) "W+&_");
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("Mms$1j!*zmd_$;wds?", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("00");
      tarArchiveEntry0.equals((Object) null);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("00", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/Aoxyg6", "!J&SHVm");
      MockFile.createTempFile("rz9{s[asIfWz8YsX", "Ney?8liy3", (File) mockFile0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/7vh/");
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("7vh/", tarArchiveEntry0.getName());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      TarArchiveEntry[] tarArchiveEntryArray0 = tarArchiveEntry0.getDirectoryEntries();
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(2, tarArchiveEntryArray0.length);
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("./", (byte)49);
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals("./", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("~Gz%;:sx8@;XT7^[)m", (byte)117);
      tarArchiveEntry0.getFile();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals("~Gz%;:sx8@;XT7^[)m", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockFile mockFile0 = new MockFile("L;c!2Nns!$MJWV", "s4030f?C'T<&Lg-Ha]");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      Date date0 = tarArchiveEntry0.getLastModifiedDate();
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals("experiment/L;c!2Nns!$MJWV/s4030f?C'T<&Lg-Ha]", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("t{X62tXY", false);
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals(0L, long0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("t{X62tXY", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(",ieW.DKpJ8.\"G~0{ru", (byte)1);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse1xData(map0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      File file0 = MockFile.createTempFile("ustar ", "IBM850");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, "IBM850");
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, int0);
      assertEquals("IBM850", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockFile mockFile0 = new MockFile("L;c!2Nns!$MJWV", "s4030f?C'T<&Lg-Ha]");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      int int0 = tarArchiveEntry0.getDevMinor();
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("experiment/L;c!2Nns!$MJWV/s4030f?C'T<&Lg-Ha]", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, int0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Yt\"*fs'6T=<", (byte)88, true);
      boolean boolean0 = tarArchiveEntry0.equals((Object) tarArchiveEntry0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("Yt\"*fs'6T=<", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isPaxHeader());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0, (ZipEncoding) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("J9'*m>o{I");
      MockDate mockDate0 = new MockDate((-3683L));
      tarArchiveEntry0.setModTime((Date) mockDate0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("J9'*m>o{I", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Length ", true);
      String string0 = tarArchiveEntry0.getLinkName();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("Length ", tarArchiveEntry0.getName());
      assertEquals("", string0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("t", (byte)118, false);
      long long0 = tarArchiveEntry0.getRealSize();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("t", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, long0);
      assertFalse(tarArchiveEntry0.isLink());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("J9'*m>o{I");
      tarArchiveEntry0.isExtended();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("J9'*m>o{I", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/6H|gU7eb@l]FOlWph");
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("6H|gU7eb@l]FOlWph", tarArchiveEntry0.getName());
      assertEquals(0L, long0);
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("U}BPyErc&", true);
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("U}BPyErc&", tarArchiveEntry0.getName());
      assertEquals(0, int0);
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Mms$1j!*zmd_$;wds?", (byte) (-54));
      tarArchiveEntry0.isDescendent(tarArchiveEntry0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("Mms$1j!*zmd_$;wds?", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      tarArchiveEntry0.hashCode();
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("U-AC4");
      tarArchiveEntry0.isCheckSumOK();
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("U-AC4", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MockFile mockFile0 = new MockFile("rQm7q\"cT", "rQm7q\"cT");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "rQm7q\"cT");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("QGaJ6NwY#L 2q($a");
      int int0 = tarArchiveEntry0.getDevMajor();
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, int0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("QGaJ6NwY#L 2q($a", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("$slpG'", (byte)83, false);
      Date date0 = tarArchiveEntry0.getModTime();
      assertEquals("$slpG'", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertTrue(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(".");
      tarArchiveEntry0.setName(".");
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(".", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isLink());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GNU.sparse.realsize", (byte)79, false);
      tarArchiveEntry0.setGroupName("././@LongLink");
      assertEquals("././@LongLink", tarArchiveEntry0.getGroupName());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("g0B0");
      tarArchiveEntry0.setUserName((String) null);
      String string0 = tarArchiveEntry0.getUserName();
      assertEquals("g0B0", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertNull(string0);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("g0B0");
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("g0B0", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/6H|gU7eb@l]FOlWph");
      tarArchiveEntry0.setIds((-1734), (-568));
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals((-1734L), tarArchiveEntry0.getLongUserId());
      assertEquals((-568L), long0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".#E=z}hlz`y42e", ".#E=z}hlz`y42e");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      int int0 = tarArchiveEntry0.getMode();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("experiment/.#E=z}hlz`y42e/.#E=z}hlz`y42e", tarArchiveEntry0.getName());
      assertEquals(33188, int0);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("US-ASCM4");
      long long0 = tarArchiveEntry0.getSize();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, long0);
      assertEquals("US-ASCM4", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("g0B0");
      String string0 = tarArchiveEntry0.getUserName();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", string0);
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("g0B0", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
  }
}
