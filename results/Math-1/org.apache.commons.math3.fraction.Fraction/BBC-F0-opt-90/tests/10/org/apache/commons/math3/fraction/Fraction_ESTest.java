/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:04:24 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1251), 1224);
      String string0 = fraction0.toString();
      assertEquals("-139 / 136", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147483645), (-2147483645));
      Fraction fraction1 = fraction0.divide(921);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.0010857764F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2426, 370);
      Fraction fraction1 = fraction0.negate();
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertEquals((-1213), fraction1.getNumerator());
      assertEquals(6.556756756756757, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, 100.0, 248);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1251), 1224);
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals(207, fraction2.getNumerator());
      assertEquals((-139), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction((-127));
      Fraction fraction1 = fraction0.ONE_FIFTH.subtract((-127));
      assertEquals(12720.0, fraction1.percentageValue(), 0.01);
      assertEquals((-127), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1));
      Fraction fraction1 = fraction0.subtract((-1));
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.THREE_QUARTERS.divide((-1743));
      double double0 = fraction1.percentageValue();
      assertEquals((-0.04302925989672978), double0, 0.01);
      assertEquals((-1), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2406), 1);
      Fraction fraction1 = fraction0.negate();
      assertEquals(2406, fraction1.getNumerator());
      assertEquals((-2406), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = new Fraction(703.228643558, 5);
      Fraction fraction1 = fraction0.TWO.subtract(5);
      Fraction fraction2 = fraction0.ONE.multiply(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(70325.0, fraction0.percentageValue(), 0.01);
      assertEquals((-3.0F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE_FIFTH.reciprocal();
      Fraction fraction2 = fraction0.ONE_FIFTH.multiply(fraction1);
      assertEquals(5.0F, fraction1.floatValue(), 0.01F);
      assertTrue(fraction2.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1251), 1224);
      Fraction fraction1 = fraction0.ONE.multiply((-1251));
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1251), fraction1.getNumerator());
      assertEquals((-1.0220588F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3999));
      Fraction fraction1 = fraction0.multiply(0);
      assertEquals((-3999), fraction0.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((-3999), fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.ONE_HALF.multiply(3972);
      assertEquals(1986.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1986, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      long long0 = fraction0.longValue();
      assertEquals(40.0, fraction0.percentageValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      long long0 = fraction0.longValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2, (-4141));
      int int0 = fraction0.intValue();
      assertEquals(4141, fraction0.getDenominator());
      assertEquals((-0.04829751267809708), fraction0.percentageValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = new Fraction((-127));
      int int0 = fraction0.intValue();
      assertEquals((-127), int0);
      assertEquals((-127), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1));
      int int0 = fraction0.getNumerator();
      assertEquals((-1), int0);
      assertEquals((-100.0), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2, (-4141));
      float float0 = fraction0.floatValue();
      assertEquals((-4.8297513E-4F), float0, 0.01F);
      assertEquals(4141, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = new Fraction(144, (-3332));
      double double0 = fraction0.doubleValue();
      assertEquals((-36), fraction0.getNumerator());
      assertEquals((-0.04321728691476591), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2, (-4141));
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals((-1035.25F), fraction2.floatValue(), 0.01F);
      assertEquals(4141, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.TWO.divide(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(4.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2, (-4141));
      Fraction fraction1 = fraction0.ONE_THIRD.subtract(2089);
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals((-2), fraction0.getNumerator());
      assertEquals(4324584L, fraction2.longValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2, (-4141));
      Fraction fraction1 = fraction0.ZERO.divide((-4141));
      assertEquals((-0.04829751267809708), fraction0.percentageValue(), 0.01);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(4141, fraction0.getDenominator());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2, (-4141));
      Fraction fraction1 = fraction0.ONE_THIRD.subtract(2089);
      Fraction fraction2 = fraction1.divide(2);
      assertEquals((-3133), fraction2.getNumerator());
      assertEquals((-4.829751267809708E-4), fraction0.doubleValue(), 0.01);
      assertEquals((-1044), fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.getReducedFraction(2031, 2);
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(2031, fraction2.getNumerator());
      assertEquals(101550.0, fraction2.percentageValue(), 0.01);
      assertSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      Fraction fraction2 = fraction1.add((-1));
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.add(37);
      assertEquals(186, fraction1.getNumerator());
      assertEquals(37.2, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.add((-1));
      assertEquals((-3), fraction1.getNumerator());
      assertEquals((-60.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.abs();
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.add((-142));
      Fraction fraction2 = fraction1.abs();
      assertEquals(141.8F, fraction2.floatValue(), 0.01F);
      assertEquals((-14180.000000000002), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.ONE_THIRD.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.ONE.subtract(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.TWO.multiply(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.divide(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.add(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.ONE_THIRD.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1251), 1224);
      Fraction fraction1 = fraction0.THREE_FIFTHS.multiply(fraction0);
      assertEquals((-139), fraction0.getNumerator());
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-0.6132353F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.THREE_QUARTERS.divide((-2270));
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals((-0.03303964757709251), fraction1.percentageValue(), 0.01);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals((-3), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction((-127));
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte)2, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, 331);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/331, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = new Fraction(144, (-3332));
      Fraction fraction1 = fraction0.add((-3332));
      assertEquals((-2775592), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-555), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -555/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      double double0 = fraction0.doubleValue();
      assertEquals(2.0, double0, 0.01);
      assertEquals(2, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      String string0 = fraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      String string0 = fraction0.toString();
      assertEquals("1 / 0", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1702));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1,702, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(952, Integer.MIN_VALUE);
      assertEquals(268435456, fraction0.getDenominator());
      assertEquals((-4.433095455169678E-5), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(497, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 497/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-2118850531));
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-276), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -276/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction1.negate();
      // Undeclared exception!
      try { 
        fraction0.divide(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      // Undeclared exception!
      try { 
        fraction1.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        fraction0.MINUS_ONE.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.add(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 2,147,483,648
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.ONE_FIFTH.subtract(fraction0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      assertEquals(2, fraction1.getDenominator());
      assertEquals((-0.5), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, 223);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/223, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2426, 370);
      Fraction fraction1 = fraction0.MINUS_ONE.subtract(370);
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals(655.6756756756757, fraction0.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertFalse(boolean0);
      assertEquals((-371), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      boolean boolean0 = fraction0.equals("q?N");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147483645), (-2147483645));
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(1, fraction0.getDenominator());
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.getReducedFraction((-2930), (-2173));
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
      assertEquals(1.3483663138518178, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      Fraction fraction1 = fraction0.divide(2);
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(331, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 331/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
      try { 
        fraction0.subtract(1747);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = new Fraction(703.228643558, 5);
      Fraction fraction1 = fraction0.TWO.subtract(5);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
      assertEquals((-3), fraction1.intValue());
      assertEquals(703.25F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(22.53316208, (-1107), 2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 22.533 to fraction after 2 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.0, 2441);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MAX_VALUE);
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) 1281, 3066);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1,281 to fraction (9,223,372,036,854,774,528/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      double double0 = fraction0.percentageValue();
      assertEquals(2, fraction0.getNumerator());
      assertEquals(200.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      float float0 = fraction0.floatValue();
      assertEquals(0.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      int int0 = fraction0.getNumerator();
      assertEquals(2, int0);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      fraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      int int0 = fraction0.intValue();
      assertEquals(2, int0);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3999));
      long long0 = fraction0.longValue();
      assertEquals((-3999), fraction0.getNumerator());
      assertEquals((-3999L), long0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      assertEquals(9223372036854775807L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction0.ONE_HALF.add(fraction1);
      assertEquals(50.0, fraction2.percentageValue(), 0.01);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      FractionField fractionField0 = fraction0.ONE_FIFTH.getField();
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals(200.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.TWO_FIFTHS.add((-2147483646));
      Fraction fraction2 = fraction1.abs();
      assertEquals(4.294967272E8, fraction2.doubleValue(), 0.01);
      assertEquals((-4.294967272E10), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      Fraction fraction1 = fraction0.multiply(2);
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction fraction3 = fraction2.add(fraction1);
      boolean boolean0 = fraction3.equals(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertFalse(fraction3.equals((Object)fraction1));
      assertTrue(boolean0);
      assertEquals((-2L), fraction2.longValue());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction1, fraction0);
  }
}
