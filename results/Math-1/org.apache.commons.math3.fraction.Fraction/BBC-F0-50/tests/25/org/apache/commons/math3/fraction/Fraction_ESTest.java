/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 05:40:27 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.add((-2145062584));
      String string0 = fraction1.toString();
      assertEquals("-2135378324 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.MINUS_ONE;
      Fraction fraction2 = fraction0.ONE.divide(fraction1);
      assertTrue(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction0.abs();
      Fraction fraction3 = fraction1.divide(201);
      Fraction fraction4 = fraction2.subtract(fraction3);
      Fraction fraction5 = fraction1.multiply(fraction4);
      assertEquals(1072, fraction5.getDenominator());
      assertEquals((-0.2798507462686567), fraction5.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.add((-2145062584));
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals((-2135378328), fraction2.getNumerator());
      assertEquals((-427075664), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(31);
      fraction1.hashCode();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte)31, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ONE;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.multiply(919);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(919, fraction1.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(22975.0, fraction1.percentageValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MAX_VALUE);
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.divide((-500));
      Fraction fraction2 = fraction1.add((-2145062584));
      Fraction fraction3 = fraction0.subtract(fraction2);
      assertEquals(625, fraction1.getDenominator());
      assertEquals(1014910.6384, fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.add((-2145062584));
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(2135378328, fraction2.getNumerator());
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.subtract(2);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction((-851), (-851));
      Fraction fraction1 = fraction0.subtract((-1220));
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1221, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.THREE_FIFTHS.subtract(1);
      assertEquals((-2), fraction1.getNumerator());
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction(1199);
      Fraction fraction1 = fraction0.ZERO.subtract(165);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-165.0), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.multiply(31);
      Fraction fraction2 = fraction1.reciprocal();
      assertEquals(4, fraction2.getNumerator());
      assertEquals(23L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(4, fraction1.getDenominator());
      assertEquals(125.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(203, 203);
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((short) (-1), fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.TWO.add(Integer.MIN_VALUE);
      double double0 = fraction1.percentageValue();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2.147483646E11), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-558));
      Fraction fraction1 = fraction0.negate();
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.negate();
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-0.8), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = new Fraction(242);
      Fraction fraction1 = fraction0.negate();
      assertEquals((-242), fraction1.getNumerator());
      assertEquals(242, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.divide((-500));
      Fraction fraction2 = fraction1.add((-2145062584));
      Fraction fraction3 = fraction2.divide(fraction0);
      fraction3.multiply(fraction0);
      assertEquals((-1.268637298E8), fraction3.percentageValue(), 0.01);
      assertEquals(625, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.add((-2145062584));
      Fraction fraction2 = fraction1.divide(fraction0);
      Fraction fraction3 = fraction2.multiply(fraction0);
      assertEquals((-533844581L), fraction2.longValue());
      assertEquals((-4.270756648E8), fraction3.doubleValue(), 0.01);
      assertEquals((byte) (-80), fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.ZERO.multiply(116);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = new Fraction((-0.1666666567325592));
      Fraction fraction1 = fraction0.ONE_QUARTER.multiply(3);
      assertEquals(6, fraction0.getDenominator());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(75.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(203, 203);
      long long0 = fraction0.longValue();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.add((-2145062584));
      long long0 = fraction1.longValue();
      assertEquals((-4.270756648E8), fraction1.doubleValue(), 0.01);
      assertEquals((-2135378324), fraction1.getNumerator());
      assertEquals((-427075664L), long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.intValue();
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      int int0 = fraction0.intValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 559096421);
      assertEquals((-384.09897959264526), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      Fraction fraction2 = fraction0.ONE_FIFTH.subtract(fraction1);
      int int0 = fraction2.getNumerator();
      assertEquals(0, int0);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = new Fraction(242);
      Fraction fraction1 = fraction0.ONE.subtract(fraction0);
      int int0 = fraction1.getNumerator();
      assertEquals((-241), int0);
      assertEquals((byte)15, fraction1.byteValue());
      assertEquals(242, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      float float0 = fraction0.floatValue();
      assertEquals(0.8F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.divide((-500));
      float float0 = fraction1.floatValue();
      assertEquals((-0.0016F), float0, 0.01F);
      assertEquals(625, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      double double0 = fraction0.doubleValue();
      assertEquals(0.8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction(5.2240336371356666E-9);
      Fraction fraction1 = fraction0.add((-1));
      Fraction fraction2 = fraction1.divide((-1));
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((-1), fraction1.getNumerator());
      assertEquals(100.0, fraction2.percentageValue(), 0.01);
      assertEquals((-1), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = new Fraction((-851));
      Fraction fraction1 = fraction0.divide(716);
      assertEquals(716, fraction1.getDenominator());
      assertEquals((-118.85474860335195), fraction1.percentageValue(), 0.01);
      assertEquals((-851.0), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction((-543.352));
      Fraction fraction1 = fraction0.ONE.add(fraction0);
      assertEquals((-54235.2), fraction1.percentageValue(), 0.01);
      assertEquals(125, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = new Fraction(152);
      Fraction fraction1 = fraction0.TWO.add(fraction0);
      assertEquals(154, fraction1.intValue());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.add(Integer.MAX_VALUE);
      double double0 = fraction1.doubleValue();
      assertEquals((-0.25), double0, 0.01);
      assertEquals((-1), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = new Fraction((-634321774), (-3558));
      Fraction fraction1 = fraction0.abs();
      assertEquals(178280.4311410905, fraction1.doubleValue(), 0.01);
      assertEquals(317160887, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(31);
      Fraction fraction2 = fraction1.abs();
      assertEquals(31.0F, fraction2.floatValue(), 0.01F);
      assertEquals((byte)31, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction(100);
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
      try { 
        fraction0.subtract((-3992));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = new Fraction((-634321774), (-3558));
      // Undeclared exception!
      try { 
        fraction0.multiply(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
      try { 
        fraction0.multiply((-3992));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -3,992/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        fraction0.divide(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -1/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 3317);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/3,317, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction0.add(31);
      Fraction fraction3 = fraction1.multiply(fraction2);
      assertEquals(31, fraction2.getNumerator());
      assertEquals(2325.0, fraction3.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      Fraction fraction1 = fraction0.ONE.negate();
      String string0 = fraction1.toString();
      assertEquals("-1", string0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      String string0 = fraction0.toString();
      assertEquals("4 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2147483646));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,646, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(1055, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 1,055/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-558));
      Fraction fraction1 = fraction0.add(0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.MINUS_ONE.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      Fraction fraction1 = Fraction.TWO_THIRDS;
      Fraction fraction2 = fraction0.ONE_FIFTH.divide(fraction1);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(3, fraction2.getNumerator());
      assertEquals(0.3, fraction2.doubleValue(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = new Fraction(519, 519);
      // Undeclared exception!
      try { 
        fraction0.ONE_QUARTER.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2121294822), (-2475));
      Fraction fraction1 = Fraction.getReducedFraction((-93), 3289);
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 211,422,390,901
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.getReducedFraction((-407), (-407));
      Fraction fraction2 = fraction1.add(fraction0);
      assertSame(fraction2, fraction1);
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3678), (-3678));
      Fraction fraction1 = Fraction.ONE_QUARTER;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-407), (-407));
      Fraction fraction1 = fraction0.add(fraction0);
      Fraction fraction2 = Fraction.TWO;
      boolean boolean0 = fraction1.equals(fraction2);
      assertTrue(boolean0);
      assertFalse(fraction2.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = new Fraction(886.91, 886.91, (-1));
      Fraction fraction1 = new Fraction(5.2240336371356666E-9);
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.getDenominator());
      assertFalse(boolean0);
      assertEquals((byte)118, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(27484, 27484);
      boolean boolean0 = fraction0.equals(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertTrue(boolean0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction1.divide(201);
      int int0 = fraction0.compareTo(fraction2);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(0.3731343283582089, fraction2.percentageValue(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(76, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 76/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.03534186666661299, 0.0018003812792812823, (-2381));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.035 to fraction after -2,381 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(100.0, 2388);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 100 to fraction (-99/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(125, (-989), (-989));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 125 to fraction (9,223,372,036,854,775,684/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = new Fraction((-543.352), (-989));
      assertEquals((byte) (-32), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      double double0 = fraction0.percentageValue();
      assertEquals(33.33333333333333, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = new Fraction(886.91, 886.91, (-1));
      int int0 = fraction0.getNumerator();
      assertEquals(886, int0);
      assertEquals(886.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = new Fraction(886.91, 886.91, (-1));
      int int0 = fraction0.intValue();
      assertEquals(886, int0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      Fraction fraction1 = fraction0.ONE_FIFTH.divide(fraction0);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(0, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      long long0 = fraction0.longValue();
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      fraction0.getField();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.divide((-1020));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add((-407));
      Fraction fraction2 = fraction1.abs();
      assertEquals(40700.0, fraction2.percentageValue(), 0.01);
      assertEquals((-407.0), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      int int0 = fraction0.getDenominator();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      Fraction fraction1 = fraction0.ONE_QUARTER.multiply((-3496));
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((-87400.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction1, fraction0);
  }
}
