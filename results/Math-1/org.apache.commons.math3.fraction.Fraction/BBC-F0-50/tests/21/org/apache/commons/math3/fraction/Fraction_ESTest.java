/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 05:10:23 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = new Fraction(289, 289);
      Fraction fraction1 = fraction0.TWO_FIFTHS.multiply(2);
      Fraction fraction2 = fraction1.MINUS_ONE.subtract(fraction1);
      String string0 = fraction2.toString();
      assertEquals("-9 / 5", string0);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-805), 629);
      Fraction fraction1 = fraction0.ONE_QUARTER.divide(fraction0);
      assertEquals((-805), fraction0.getNumerator());
      assertEquals((-0.1953416149068323), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = fraction0.TWO_QUARTERS.subtract(fraction1);
      boolean boolean0 = fraction0.equals(fraction2);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      assertEquals(16.666666666666664, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction(289, 289);
      Fraction fraction1 = fraction0.TWO_FIFTHS.multiply(2);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = new Fraction(1411.5707, 5);
      Fraction fraction1 = fraction0.subtract(5);
      assertEquals(1406.5, fraction1.doubleValue(), 0.01);
      assertEquals(2, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.multiply(Integer.MIN_VALUE);
      Fraction fraction2 = fraction1.subtract(Integer.MIN_VALUE);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-805), 629);
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction1.reciprocal();
      assertEquals(629, fraction0.getDenominator());
      assertEquals((-629), fraction1.getNumerator());
      assertEquals((-1.2798092209856915), fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2251), 1);
      double double0 = fraction0.percentageValue();
      assertEquals((-2251), fraction0.getNumerator());
      assertEquals((-225100.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction(2097);
      Fraction fraction1 = fraction0.ZERO.negate();
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(2097.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.negate();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.negate();
      assertEquals((-0.3333333333333333), fraction1.doubleValue(), 0.01);
      assertEquals((-1), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction(262, 262);
      Fraction fraction1 = fraction0.TWO.subtract(1676);
      Fraction fraction2 = fraction1.abs();
      Fraction fraction3 = fraction2.negate();
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1674), fraction3.intValue());
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((-1674L), fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1141));
      Fraction fraction1 = fraction0.MINUS_ONE.multiply(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1141, fraction1.intValue());
      assertEquals((-114100.0), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction(289, 289);
      Fraction fraction1 = fraction0.subtract(289);
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals((-28800.0), fraction2.percentageValue(), 0.01);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.multiply(0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = new Fraction(289, 289);
      long long0 = fraction0.longValue();
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      long long0 = fraction0.longValue();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      int int0 = fraction0.intValue();
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-805), 629);
      int int0 = fraction0.intValue();
      assertEquals((-1.2798092209856915), fraction0.doubleValue(), 0.01);
      assertEquals(629, fraction0.getDenominator());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = new Fraction(9.326686267741024E-8, 3);
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2173), 6663);
      int int0 = fraction0.getNumerator();
      assertEquals((-2173), int0);
      assertEquals((-0.32612938F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.TWO_QUARTERS.multiply((-713));
      float float0 = fraction1.floatValue();
      assertEquals((-713), fraction1.getNumerator());
      assertEquals((-356.5F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2251), 1);
      double double0 = fraction0.doubleValue();
      assertEquals((-2251.0), double0, 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.add((-28));
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals((-45.666668F), fraction2.floatValue(), 0.01F);
      assertEquals((-137), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.add(104);
      Fraction fraction2 = fraction1.divide(1);
      assertEquals(104, fraction1.getNumerator());
      assertEquals(104, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = new Fraction(2278.92132570897, 2278.92132570897, 171);
      Fraction fraction1 = fraction0.divide((-1406));
      assertEquals((-1139), fraction1.getNumerator());
      assertEquals((-162.0199146514936), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.TWO_THIRDS.add(fraction0);
      Fraction fraction2 = Fraction.ONE_THIRD;
      Fraction fraction3 = fraction1.subtract(fraction2);
      assertEquals(1, fraction3.getDenominator());
      assertEquals(1.0, fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.multiply(Integer.MIN_VALUE);
      Fraction fraction2 = fraction1.add(Integer.MIN_VALUE);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = new Fraction(262, 262);
      Fraction fraction1 = fraction0.add(Integer.MIN_VALUE);
      Fraction fraction2 = fraction1.abs();
      assertEquals(2.147483647E9, fraction2.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals((short)1, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.add((-28));
      Fraction fraction2 = fraction1.abs();
      assertEquals(27.4F, fraction2.floatValue(), 0.01F);
      assertEquals((-2740.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = new Fraction(1411.5707, 5);
      Fraction fraction1 = fraction0.abs();
      assertEquals(2823, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction((-277), 3);
      // Undeclared exception!
      try { 
        fraction0.ZERO.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction(624.947748544568);
      // Undeclared exception!
      try { 
        fraction0.multiply(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 2/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction(2442.6514541, 37);
      Fraction fraction1 = fraction0.THREE_FIFTHS.divide(fraction0);
      // Undeclared exception!
      try { 
        fraction0.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5);
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = new Fraction(171.333583636);
      Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(17133.35837716003, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = new Fraction(262, 262);
      Fraction fraction1 = fraction0.multiply(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction1.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction((-541), (-2660));
      assertEquals(0.20338346F, fraction0.floatValue(), 0.01F);
      assertEquals(541, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.TWO_THIRDS.reciprocal();
      assertEquals(150.0, fraction1.percentageValue(), 0.01);
      assertEquals(2, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      double double0 = fraction0.doubleValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      String string0 = fraction0.ONE_HALF.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-3));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-3, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(1, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 1/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-1022));
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(1, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      // Undeclared exception!
      try { 
        fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        fraction0.TWO_FIFTHS.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = new Fraction(0.0);
      assertEquals((byte)0, fraction1.byteValue());
      
      Fraction fraction2 = fraction0.FOUR_FIFTHS.multiply(fraction1);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = new Fraction(624.947748544568);
      Fraction fraction1 = fraction0.subtract(fraction0);
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals(0, fraction2.getNumerator());
      assertEquals((byte)112, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.THREE_QUARTERS.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = new Fraction(2097);
      Fraction fraction1 = fraction0.ONE_FIFTH.subtract(2097);
      Fraction fraction2 = fraction1.subtract(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction2.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 2,147,483,648
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(0.53333336F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.ONE_QUARTER.subtract(fraction1);
      assertSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1141));
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      assertSame(fraction1, fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1141.0), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        fraction0.ONE_THIRD.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = new Fraction(289, 289);
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction0.negate();
      boolean boolean0 = fraction2.equals(fraction1);
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(boolean0);
      assertEquals((-1L), fraction2.longValue());
      assertFalse(fraction0.equals((Object)fraction2));
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals(1, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.ONE_THIRD;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = Fraction.MINUS_ONE;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.ONE_THIRD;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 2871);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/2,871, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(584, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 584/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(301, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 301/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-2.957007209750105E-8), (-2.957007209750105E-8), (-1080));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -0 to fraction after -1,080 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.0, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.divide((-1148));
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = new Fraction(2442.6514541, 37);
      String string0 = fraction0.TWO.toString();
      assertEquals("2", string0);
      assertEquals(2442.652F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      double double0 = fraction0.percentageValue();
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      float float0 = fraction0.floatValue();
      assertEquals(0.25F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = new Fraction(153);
      int int0 = fraction0.getNumerator();
      assertEquals(153, int0);
      assertEquals((byte) (-103), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      fraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = new Fraction(153);
      int int0 = fraction0.intValue();
      assertEquals(153, int0);
      assertEquals(153, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.FOUR_FIFTHS.divide(fraction0);
      assertEquals(4, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      long long0 = fraction0.longValue();
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = new Fraction(624.947748544568);
      boolean boolean0 = fraction0.equals("");
      assertFalse(boolean0);
      assertEquals(346846, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      FractionField fractionField0 = fraction0.getField();
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = new Fraction(2097);
      Fraction fraction1 = fraction0.ONE_QUARTER.multiply(455);
      Fraction fraction2 = fraction1.multiply(2097);
      Fraction fraction3 = fraction2.subtract(fraction2);
      assertEquals(11375.0, fraction1.percentageValue(), 0.01);
      assertEquals(0.0, fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.TWO_QUARTERS.subtract(fraction0);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(10, fraction1.getDenominator());
      assertEquals(0.3F, fraction1.floatValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      int int0 = fraction0.getDenominator();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(0.4, fraction1.doubleValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
  }
}
