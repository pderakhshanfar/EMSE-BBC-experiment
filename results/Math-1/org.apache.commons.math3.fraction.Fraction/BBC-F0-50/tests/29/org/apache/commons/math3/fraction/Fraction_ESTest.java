/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:13:37 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      String string0 = fraction0.ONE_HALF.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2, 2);
      Fraction fraction1 = Fraction.ONE_THIRD;
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals((short)1, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.TWO_QUARTERS.add((-2155));
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertEquals((-2154.5), fraction1.doubleValue(), 0.01);
      assertEquals((-4309), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction1 = fraction0.subtract(Integer.MIN_VALUE);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.subtract(1964);
      assertEquals((-1963.6), fraction1.doubleValue(), 0.01);
      assertEquals((-9818), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction((-5002.0300052957));
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.add(fraction0);
      double double0 = fraction2.percentageValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-500203.0), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction(2800.0, 2800.0, 17);
      double double0 = fraction0.percentageValue();
      assertEquals(280000.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2, 2);
      Fraction fraction1 = fraction0.negate();
      assertEquals((-1), fraction1.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.negate();
      assertEquals((-0.75), fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction((-166), 2);
      Fraction fraction1 = fraction0.MINUS_ONE.negate();
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-83), fraction0.getNumerator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.TWO;
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction fraction3 = fraction1.multiply(fraction2);
      assertEquals((-3), fraction2.getNumerator());
      assertEquals((short) (-3), fraction3.shortValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.TWO_QUARTERS.divide((-941));
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals((-3.9851223E-4F), fraction2.floatValue(), 0.01F);
      assertEquals((-1), fraction1.getNumerator());
      assertEquals(1882, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction(2800.0, 2800.0, 17);
      Fraction fraction1 = fraction0.multiply(4);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(11200L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.subtract(fraction0);
      Fraction fraction2 = fraction1.multiply((-2));
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.FOUR_FIFTHS.divide(5);
      Fraction fraction2 = fraction1.multiply(5);
      assertEquals(0.8F, fraction2.floatValue(), 0.01F);
      assertEquals(5, fraction2.getDenominator());
      assertEquals(0.16, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction0.multiply(fraction1);
      long long0 = fraction2.longValue();
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = new Fraction((-166), 2);
      long long0 = fraction0.longValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-83.0), fraction0.doubleValue(), 0.01);
      assertEquals((-83L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      int int0 = fraction0.intValue();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = new Fraction((-5002.0300052957));
      int int0 = fraction0.intValue();
      assertEquals((-5002.03), fraction0.doubleValue(), 0.01);
      assertEquals((-5002), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 2754);
      assertEquals((-7.797689353667393E7), fraction0.percentageValue(), 0.01);
      assertEquals(1377, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2692, 4);
      assertEquals(673, fraction0.getNumerator());
      assertEquals(673.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.subtract(fraction0);
      float float0 = fraction1.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(40.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.MINUS_ONE.subtract(5);
      float float0 = fraction1.floatValue();
      assertEquals((-6.0F), float0, 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2436.88036), 0.041666666666621166, 4);
      double double0 = fraction0.doubleValue();
      assertEquals((-2436.875), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2436.88036), 0.041666666666621166, 4);
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      assertEquals((byte)124, fraction0.byteValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.TWO_THIRDS.divide(fraction0);
      assertEquals(33.33333333333333, fraction1.percentageValue(), 0.01);
      assertEquals(3, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = new Fraction(1975.41978035393, 533.881418, 5);
      Fraction fraction1 = Fraction.ONE_HALF;
      Fraction fraction2 = fraction0.MINUS_ONE.divide(fraction1);
      assertEquals(1975, fraction0.intValue());
      assertEquals((byte) (-2), fraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1, 1979);
      Fraction fraction1 = fraction0.ZERO.divide(838);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(5.053057099545225E-4, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE.divide(1);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = new Fraction((-166), 2);
      Fraction fraction1 = fraction0.divide(2);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-4150.0), fraction1.percentageValue(), 0.01);
      assertEquals((short) (-83), fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.MINUS_ONE.subtract(5);
      Fraction fraction2 = fraction0.TWO_THIRDS.add(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-533.3333333333333), fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = new Fraction(1975.41978035393, 533.881418, 5);
      Fraction fraction1 = fraction0.THREE_FIFTHS.add(fraction0);
      assertEquals(1975.6, fraction1.doubleValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.add(1);
      assertEquals(1.4, fraction1.doubleValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.MINUS_ONE.add(1);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction(2800.0, 2800.0, 17);
      assertEquals(2800.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      Fraction fraction2 = fraction1.abs();
      assertSame(fraction2, fraction1);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(185936145, 37);
      Fraction fraction1 = fraction0.abs();
      assertEquals(5025301.216216216, fraction1.doubleValue(), 0.01);
      assertEquals((short) (-20971), fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.MINUS_ONE.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        fraction0.ZERO.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.subtract(293);
      Fraction fraction2 = fraction1.add((-1384));
      Fraction fraction3 = fraction2.multiply(784);
      // Undeclared exception!
      try { 
        fraction2.multiply(fraction3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        fraction0.divide(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 1/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.ONE.add((-2147483646));
      // Undeclared exception!
      try { 
        fraction1.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -2,147,483,645 + -2,147,483,645
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NEGATIVE_INFINITY, 463.0, 2147483645);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, 2147483645);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/2,147,483,645, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      double double0 = fraction0.doubleValue();
      assertEquals(0.75, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      String string0 = fraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3, (-1161));
      String string0 = fraction0.toString();
      assertEquals("-1 / 387", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1731));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1,731, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-2147483645), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,645/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(100, Integer.MIN_VALUE);
      assertEquals((-4.6566128730773926E-8), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-277));
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      // Undeclared exception!
      try { 
        fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = new Fraction(470.49467869892203);
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = new Fraction((-761), (-761));
      Fraction fraction1 = fraction0.divide(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(698, 698);
      // Undeclared exception!
      try { 
        fraction0.ONE_HALF.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = new Fraction(3148);
      Fraction fraction1 = fraction0.TWO_THIRDS.divide(3148);
      Fraction fraction2 = Fraction.getReducedFraction(313, 1053);
      Fraction fraction3 = fraction1.add(fraction0);
      // Undeclared exception!
      try { 
        fraction3.subtract(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 5,217,072,145
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = new Fraction(1797.905, 37);
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals(179715.47619047618, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.ONE_QUARTER.add(fraction1);
      assertEquals(0.25F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.subtract(fraction0);
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals((-2), fraction2.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.THREE_QUARTERS.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = new Fraction(3148);
      Fraction fraction1 = fraction0.ONE_THIRD.multiply(fraction0);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(104933.33333333333, fraction1.percentageValue(), 0.01);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction0.getDenominator());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.MINUS_ONE;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.negate();
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = new Fraction(1797.905, 37);
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, int0);
      assertEquals(37756, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.reciprocal();
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
      assertEquals(2.5F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-879), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -879/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, (-2147483645));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,645, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -2,147,483,648/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = new Fraction(1797.905, (-1155));
      assertEquals((short)1797, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.4794255495071411, 0.0, 4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.479 to fraction after 4 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) 2, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2 to fraction (-1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-1103), (-1103), 629);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1,103 to fraction (-9,223,372,036,854,774,704/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = new Fraction((-5002.0300052957));
      double double0 = fraction0.percentageValue();
      assertEquals((-500203.0), double0, 0.01);
      assertEquals(100, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      float float0 = fraction0.floatValue();
      assertEquals(0.4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      int int0 = fraction0.getNumerator();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      fraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      int int0 = fraction0.intValue();
      assertEquals(60.0, fraction0.percentageValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.TWO.subtract((-1155));
      Fraction fraction2 = fraction1.abs();
      assertSame(fraction2, fraction1);
      assertEquals(1157.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.TWO.reciprocal();
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      long long0 = fraction0.longValue();
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MAX_VALUE);
      assertEquals(2147483647L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      FractionField fractionField0 = fraction0.getField();
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.TWO_QUARTERS.divide((-941));
      int int0 = fraction1.getNumerator();
      assertEquals((-1), int0);
      assertEquals((-5.313496280552603E-4), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      int int0 = fraction0.getDenominator();
      assertEquals(4, int0);
  }
}
