/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 05:17:14 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      String string0 = fraction0.toString();
      assertEquals("4 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.FOUR_FIFTHS.divide(fraction0);
      assertEquals(2, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.TWO_THIRDS.divide(fraction0);
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.TWO_THIRDS;
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.divide(2692);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(1346, fraction1.getDenominator());
      assertFalse(boolean0);
      assertEquals(7.429420505200594E-4, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.ONE_THIRD.reciprocal();
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2.3333333333333335, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.subtract((-1367));
      assertEquals(1367.6F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Fraction fraction0 = new Fraction((-197));
      Fraction fraction1 = fraction0.subtract((-197));
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1449), (-1449));
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-197), 3929);
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(3929, fraction0.getDenominator());
      assertEquals((-19.944162F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      double double0 = fraction0.percentageValue();
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2436.88036), 0.041666666666621166, 4);
      double double0 = fraction0.percentageValue();
      assertEquals((-243687.5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.negate();
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.divide(2692);
      Fraction fraction2 = fraction1.negate();
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(1346, fraction1.getDenominator());
      assertEquals((-0.07429420505200594), fraction2.percentageValue(), 0.01);
      assertEquals((-1), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Fraction fraction0 = new Fraction((-166), 2);
      Fraction fraction1 = fraction0.MINUS_ONE.negate();
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-83.0), fraction0.doubleValue(), 0.01);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-761), 25);
      Fraction fraction1 = Fraction.ONE_HALF;
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals((-15.22F), fraction2.floatValue(), 0.01F);
      assertEquals((-761), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-761), 25);
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(926L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.ONE_HALF.multiply(288);
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction fraction3 = fraction2.multiply(1535);
      assertEquals(1, fraction3.getDenominator());
      assertEquals((short) (-23818), fraction3.shortValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Fraction fraction0 = new Fraction((-4.9E-324));
      Fraction fraction1 = fraction0.multiply(1390);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(0L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2, 2);
      Fraction fraction1 = fraction0.multiply(1561);
      assertEquals((byte)25, fraction1.byteValue());
      assertEquals(1561, fraction1.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Fraction fraction0 = new Fraction(2800.0, 2800.0, 17);
      Fraction fraction1 = fraction0.multiply(4);
      assertEquals(11200.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2800.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Fraction fraction0 = new Fraction(1975.41978035393, 533.881418, 5);
      long long0 = fraction0.longValue();
      assertEquals(1975L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Fraction fraction0 = new Fraction((-166), 2);
      long long0 = fraction0.longValue();
      assertEquals((-83), fraction0.getNumerator());
      assertEquals((-83L), long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.divide(2692);
      int int0 = fraction1.intValue();
      assertEquals(1346, fraction1.getDenominator());
      assertEquals(7.4294204E-4F, fraction1.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.ONE.negate();
      int int0 = fraction1.intValue();
      assertEquals((-1), int0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.THREE_QUARTERS.subtract(2434);
      int int0 = fraction1.getNumerator();
      assertEquals((-9733), int0);
      assertEquals((-2433.25F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.subtract(fraction0);
      float float0 = fraction1.floatValue();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.MINUS_ONE.subtract(5);
      float float0 = fraction1.floatValue();
      assertEquals((-6.0F), float0, 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2436.88036), 0.041666666666621166, 4);
      double double0 = fraction0.doubleValue();
      assertEquals((-2436.875), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.ZERO.add(fraction1);
      Fraction fraction3 = fraction1.TWO.divide(fraction2);
      assertSame(fraction2, fraction1);
      assertEquals(4.0, fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.divide(3);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Fraction fraction0 = new Fraction((-166), 2);
      Fraction fraction1 = fraction0.divide(2);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-41.5), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-83), fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3);
      Fraction fraction1 = fraction0.ONE.negate();
      Fraction fraction2 = fraction1.divide(3);
      Fraction fraction3 = fraction1.add(fraction2);
      assertEquals((-4), fraction3.getNumerator());
      assertEquals(Float.POSITIVE_INFINITY, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.ZERO.abs();
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Fraction fraction0 = new Fraction(2800.0, 2800.0, 17);
      Fraction fraction1 = fraction0.TWO_FIFTHS.abs();
      assertEquals(40.0, fraction1.percentageValue(), 0.01);
      assertEquals(2800, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.getReducedFraction(5, (-1073741824));
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3);
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3);
      // Undeclared exception!
      try { 
        fraction0.subtract((-4352));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        fraction0.ZERO.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1449), 2119);
      Fraction fraction1 = Fraction.getReducedFraction((-1731), (-6545102));
      // Undeclared exception!
      try { 
        fraction0.multiply(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(287, 1);
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.THREE_QUARTERS.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3);
      // Undeclared exception!
      try { 
        fraction0.add((-1783));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.0, 5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Fraction fraction0 = new Fraction((-4.9E-324));
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1449), (-1449));
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 2525);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/2,525, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-761), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -761/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      double double0 = fraction0.doubleValue();
      assertEquals(0.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      String string0 = fraction0.toString();
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2505, (-1382));
      String string0 = fraction0.toString();
      assertEquals("-2505 / 1382", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1731));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1,731, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-1731), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -1,731/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, Integer.MIN_VALUE);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      // Undeclared exception!
      try { 
        fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Fraction fraction0 = new Fraction(470.49467869892203);
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(0, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(287, 1);
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(287L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(698, 698);
      // Undeclared exception!
      try { 
        fraction0.ONE_HALF.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1449), 2119);
      Fraction fraction1 = Fraction.getReducedFraction((-1731), (-6545102));
      Fraction fraction2 = fraction0.add((-6545102));
      // Undeclared exception!
      try { 
        fraction2.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -39,518,390,225,143
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(1.2F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = new Fraction((-4517), (-4517));
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(5, fraction2.getDenominator());
      assertEquals((-0.4), fraction2.doubleValue(), 0.01);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3);
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(9223372036854775807L, fraction0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, fraction2.percentageValue(), 0.01);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.MINUS_ONE.add(1);
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals(3, fraction2.getDenominator());
      assertEquals((-0.6666667F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1, 5);
      Fraction fraction1 = new Fraction(1);
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.getNumerator());
      assertEquals(20.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Fraction fraction0 = new Fraction((-4.9E-324));
      Fraction fraction1 = fraction0.ONE_HALF.add(2);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01);
      assertFalse(boolean0);
      assertEquals(250.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Fraction fraction0 = new Fraction(1975.41978035393, 533.881418, 5);
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals(1975.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1449), (-1449));
      Fraction fraction1 = new Fraction(1);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertTrue(boolean0);
      assertEquals((short)1, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.ONE_THIRD;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.divide((-1367));
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals((-0.043891733723482075), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3);
      Fraction fraction1 = fraction0.abs();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(Double.POSITIVE_INFINITY, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2505, (-1382));
      Fraction fraction1 = fraction0.abs();
      assertEquals(181.2590448625181, fraction1.percentageValue(), 0.01);
      assertEquals((-1), fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-984170699), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -984,170,699/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3);
      Fraction fraction1 = fraction0.ONE.negate();
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      
      Fraction fraction2 = fraction1.ONE.divide(fraction1);
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Fraction fraction0 = new Fraction(1797.905209461083, 37);
      assertEquals(1797, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.4794255495071411, 0.0, 4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.479 to fraction after 4 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(3281, (-843.008), 7960);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 3,281 to fraction (9,223,372,036,854,772,528/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) (-2147483647));
      Fraction fraction1 = fraction0.divide((-2147483647));
      assertEquals(1, fraction1.getDenominator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      float float0 = fraction0.floatValue();
      assertEquals(0.4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      int int0 = fraction0.getNumerator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      fraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      int int0 = fraction0.intValue();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3);
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, fraction2.percentageValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      long long0 = fraction0.longValue();
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      FractionField fractionField0 = fraction0.getField();
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147483632), (-464));
      // Undeclared exception!
      try { 
        fraction0.FOUR_FIFTHS.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3);
      // Undeclared exception!
      try { 
        fraction0.divide(3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Fraction fraction0 = new Fraction((-4.9E-324));
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
      assertEquals(0L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3);
      // Undeclared exception!
      try { 
        fraction0.multiply(3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 3/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 3);
      // Undeclared exception!
      try { 
        fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }
}
