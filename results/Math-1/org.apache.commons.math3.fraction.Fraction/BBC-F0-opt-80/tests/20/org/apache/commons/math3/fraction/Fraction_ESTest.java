/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:30:30 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = new Fraction(1170, 388);
      Fraction fraction1 = fraction0.multiply(fraction0);
      Fraction fraction2 = fraction0.subtract(fraction1);
      String string0 = fraction2.toString();
      assertEquals("-228735 / 37636", string0);
      assertEquals(194, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = new Fraction((-362.31157));
      Fraction fraction2 = fraction0.ONE.divide(fraction1);
      assertEquals((-0.0027600555F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(251, 251);
      Fraction fraction1 = Fraction.ONE_FIFTH;
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.THREE_QUARTERS.subtract(fraction0);
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertEquals(1.75, fraction1.doubleValue(), 0.01);
      assertEquals(7, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1289), (-2147464963));
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(6.002426219793929E-7, fraction0.doubleValue(), 0.01);
      assertEquals(1289, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.subtract(102);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-10300.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      double double0 = fraction0.percentageValue();
      assertEquals((-100.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.ZERO.negate();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.negate();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2088));
      Fraction fraction1 = fraction0.TWO_QUARTERS.multiply(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1044.0F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(251, 251);
      Fraction fraction1 = new Fraction((double) 251);
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertTrue(fraction2.equals((Object)fraction1));
      assertEquals((byte)1, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.multiply((-2147244745));
      assertEquals(159268.67F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.ZERO.multiply((-369));
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-130), (-3776));
      Fraction fraction1 = fraction0.multiply((-2147244745));
      assertEquals((-1.1292134284957626E8), fraction1.percentageValue(), 0.01);
      assertEquals(1888, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1990));
      Fraction fraction1 = fraction0.TWO_QUARTERS.abs();
      long long0 = fraction1.longValue();
      assertEquals((-1990.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(50.0, fraction1.percentageValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      long long0 = fraction0.longValue();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, 1170);
      int int0 = fraction0.intValue();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2564102564102564, fraction0.percentageValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      int int0 = fraction0.intValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3776, (-483));
      assertEquals((-7.817805383022774), fraction0.doubleValue(), 0.01);
      assertEquals((-3776), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      int int0 = fraction0.getNumerator();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 1.8014398509481984E16, 274);
      int int0 = fraction0.getDenominator();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction(1215.1052313, 1215.1052313, (-1846));
      Fraction fraction1 = fraction0.multiply((-1846));
      Fraction fraction2 = fraction1.reciprocal();
      float float0 = fraction2.floatValue();
      assertEquals((-2242890L), fraction1.longValue());
      assertEquals((-4.4585335E-7F), float0, 0.01F);
      assertEquals(121500.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) (-2147464963));
      double double0 = fraction0.doubleValue();
      assertEquals((-2.147464963E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2088));
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals((-348000.0), fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = Fraction.getReducedFraction(251, 251);
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) (-2147464963));
      Fraction fraction1 = fraction0.add((-2147464963));
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals(37370, fraction1.getNumerator());
      assertEquals((-57464.94415306395), fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = new Fraction(2069);
      Fraction fraction1 = fraction0.divide((-1746));
      assertEquals((-2069), fraction1.getNumerator());
      assertEquals((-1.1849942726231386), fraction1.doubleValue(), 0.01);
      assertEquals((byte)21, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.divide((-277));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = new Fraction(1170, 388);
      Fraction fraction1 = fraction0.divide(2);
      assertEquals(585, fraction1.getNumerator());
      assertEquals(1.5077319587628866, fraction1.doubleValue(), 0.01);
      assertEquals(585, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-130), (-3776));
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals((-65), fraction1.getNumerator());
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
      assertEquals((-0.034427967F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) (-2147464963));
      assertEquals((byte) (-3), fraction0.byteValue());
      
      Fraction fraction1 = new Fraction(140);
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2.147464823E9), fraction2.doubleValue(), 0.01);
      assertEquals((-2147464823), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = new Fraction(1170, 388);
      Fraction fraction1 = fraction0.add(3);
      assertEquals(1167, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE.reciprocal();
      Fraction fraction2 = fraction1.add((-1));
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.add(0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction(51);
      Fraction fraction1 = fraction0.ZERO.abs();
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(51.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2128063273);
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction(31, 4763);
      // Undeclared exception!
      try { 
        fraction0.ZERO.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-226), (-3776));
      Fraction fraction1 = Fraction.getReducedFraction(122, 4);
      Fraction fraction2 = fraction0.add(fraction1);
      Fraction fraction3 = fraction1.add(fraction2);
      Fraction fraction4 = fraction1.subtract(fraction3);
      // Undeclared exception!
      try { 
        fraction4.multiply(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        fraction0.ONE.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        fraction0.TWO_FIFTHS.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2128063277);
      // Undeclared exception!
      try { 
        fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 1.8014398509481984E16, 274);
      // Undeclared exception!
      try { 
        fraction0.add((-3032));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = new Fraction(1170, 388);
      Fraction fraction1 = fraction0.negate();
      assertEquals(194, fraction0.getDenominator());
      assertEquals(194, fraction1.getDenominator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-3.015463917525773), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(3, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 3/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = new Fraction(1170, 388);
      double double0 = fraction0.doubleValue();
      assertEquals(194, fraction0.getDenominator());
      assertEquals(3.015463917525773, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-226), (-3776));
      Fraction fraction1 = fraction0.ZERO.subtract((-1));
      String string0 = fraction1.toString();
      assertEquals(5.985169491525424, fraction0.percentageValue(), 0.01);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2128063273);
      String string0 = fraction0.toString();
      assertEquals("1 / 0", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2147464963));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,464,963, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-1), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -1/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      Fraction fraction1 = Fraction.getReducedFraction(23, (-1073741824));
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals((-2.1420419216156006E-6), fraction2.percentageValue(), 0.01);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 177);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(4375, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 4,375/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.subtract((-1));
      // Undeclared exception!
      try { 
        fraction0.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction(2069);
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.TWO_QUARTERS.multiply(fraction0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = new Fraction(3);
      Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(300.0, fraction0.percentageValue(), 0.01);
      assertEquals(0, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        fraction0.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-226), (-3776));
      Fraction fraction1 = new Fraction(3, 2147478637);
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 4,112,967,463
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = new Fraction(31, 33);
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals((-29), fraction2.getNumerator());
      assertEquals((-0.43939394F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2128063273);
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(9223372036854775807L, fraction2.longValue());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2128063273);
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = new Fraction(4, (-1289));
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.subtract(fraction0);
      boolean boolean0 = fraction0.equals(fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.getReducedFraction(266, 266);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertEquals(1, fraction1.getDenominator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.ONE_THIRD;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2088));
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertEquals((-2088), fraction0.getNumerator());
      assertEquals((-208800.0), fraction0.percentageValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = new Fraction(652);
      Fraction fraction2 = fraction0.divide(fraction1);
      int int0 = fraction0.compareTo(fraction2);
      assertEquals(1, int0);
      assertEquals(0.06134969325153375, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 1.8014398509481984E16, 274);
      Fraction fraction1 = fraction0.reciprocal();
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals((-1), int0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 1.8014398509481984E16, 274);
      Fraction fraction1 = fraction0.abs();
      assertEquals(Double.POSITIVE_INFINITY, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 1.8014398509481984E16, 274);
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction0.TWO_QUARTERS.subtract(fraction1);
      Fraction fraction3 = fraction2.reciprocal();
      Fraction fraction4 = fraction3.abs();
      assertEquals(4, fraction2.getDenominator());
      assertEquals(Double.POSITIVE_INFINITY, fraction0.percentageValue(), 0.01);
      assertEquals((-4.0), fraction3.doubleValue(), 0.01);
      assertEquals(400.0, fraction4.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(51, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 51/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = new Fraction(1683.2657951702, 637);
      assertEquals(168326.57952069718, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-4057.512343), 7.207745511550456E-11, (-1424));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -4,057.512 to fraction after -1,424 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-20.0), 2069);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -20 to fraction (21/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-1737.267), (-1737.267), 2044);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1,737.267 to fraction (-32,929,762,905,136/18,954,923,397)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = new Fraction(3);
      double double0 = fraction0.percentageValue();
      assertEquals(300.0, double0, 0.01);
      assertEquals(3, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = new Fraction(3);
      float float0 = fraction0.floatValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(3.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = new Fraction(3);
      int int0 = fraction0.getNumerator();
      assertEquals(3, int0);
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-226), (-3776));
      fraction0.hashCode();
      assertEquals(113, fraction0.getNumerator());
      assertEquals(5.985169491525424, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = new Fraction(3);
      int int0 = fraction0.intValue();
      assertEquals(3, int0);
      assertEquals(3, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = new Fraction(31, 33);
      Fraction fraction1 = fraction0.ONE_FIFTH.subtract(Integer.MAX_VALUE);
      assertEquals((-2147483642), fraction1.getNumerator());
      assertEquals((-4.294967284E8), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MAX_VALUE);
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = new Fraction(31, 33);
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.9393939393939394, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fraction fraction0 = new Fraction(3);
      long long0 = fraction0.longValue();
      assertEquals(3L, long0);
      assertEquals(3, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2128063273);
      fraction0.ONE_HALF.getField();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(9223372036854775807L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Fraction fraction0 = new Fraction(31, 33);
      int int0 = fraction0.getDenominator();
      assertEquals(33, int0);
      assertEquals(0.9393939393939394, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2128063273);
      // Undeclared exception!
      try { 
        fraction0.multiply(765);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 765/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 1.8014398509481984E16, 274);
      // Undeclared exception!
      try { 
        fraction0.MINUS_ONE.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }
}
