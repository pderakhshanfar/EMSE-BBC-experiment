/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:58:04 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.ONE_FIFTH.add((-1688));
      String string0 = fraction1.toString();
      assertEquals("-8439 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = new Fraction(5, 5);
      fraction0.hashCode();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = Fraction.ONE;
      Fraction fraction3 = fraction2.add(fraction1);
      boolean boolean0 = fraction2.equals(fraction3);
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(boolean0);
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(25.0, fraction3.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = Fraction.getReducedFraction((-1093), (-1093));
      fraction1.equals(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE_HALF.subtract(5);
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(9, fraction2.getNumerator());
      assertEquals((-9), fraction1.getNumerator());
      assertEquals((-450.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3268), (-3268));
      Fraction fraction1 = fraction0.subtract((-3268));
      assertEquals(326900.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1667.2680043344), (-2622));
      Fraction fraction1 = fraction0.multiply(3480);
      Fraction fraction2 = fraction1.subtract((-5804640));
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.5574076175689697, 1.5574076175689697, (-2089));
      Fraction fraction1 = fraction0.TWO.reciprocal();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.reciprocal();
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.TWO_THIRDS.multiply(0);
      double double0 = fraction1.percentageValue();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(200.0, fraction0.percentageValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction(83, 83);
      double double0 = fraction0.percentageValue();
      assertEquals(100.0, double0, 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = new Fraction(1);
      Fraction fraction1 = fraction0.MINUS_ONE.negate();
      assertEquals(1, fraction1.getNumerator());
      assertEquals((short)1, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction((-307));
      Fraction fraction1 = fraction0.MINUS_ONE.multiply(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-30700.0), fraction0.percentageValue(), 0.01);
      assertEquals(307.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE_HALF.subtract(5);
      Fraction fraction2 = fraction0.THREE_QUARTERS.multiply(fraction1);
      assertEquals(2, fraction1.getDenominator());
      assertEquals((-3.375F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction(614, (-3164));
      long long0 = fraction0.longValue();
      assertEquals((-0.19405815F), fraction0.floatValue(), 0.01F);
      assertEquals((-307), fraction0.getNumerator());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-21475), 1);
      long long0 = fraction0.longValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-21475L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      int int0 = fraction0.intValue();
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      int int0 = fraction1.intValue();
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1690.61770716));
      int int0 = fraction0.getNumerator();
      assertEquals((-782756), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      float float0 = fraction0.floatValue();
      assertEquals(0.6666667F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = new Fraction(5, 5);
      double double0 = fraction0.doubleValue();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = new Fraction((-307));
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-921.0F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction(100, 100);
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1690.61770716));
      Fraction fraction1 = new Fraction((-1354), 183);
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals(71622174, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.divide(1);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.divide(1);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE_HALF.subtract(5);
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals((-450.0), fraction2.percentageValue(), 0.01);
      assertSame(fraction2, fraction1);
      assertEquals(2, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.add((-1));
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.ONE_QUARTER.add(0);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(25.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.add(132);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(131.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.TWO_THIRDS.multiply(0);
      Fraction fraction2 = fraction1.abs();
      assertSame(fraction2, fraction1);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1690.61770716));
      // Undeclared exception!
      try { 
        fraction0.multiply(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 2146353393);
      // Undeclared exception!
      try { 
        fraction0.divide((-3268));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-601,293,956, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.divide(19635);
      Fraction fraction2 = new Fraction(53365);
      // Undeclared exception!
      try { 
        fraction1.add(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      // Undeclared exception!
      try { 
        fraction0.MINUS_ONE.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1939);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1,939, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.FOUR_FIFTHS.negate();
      Fraction fraction2 = fraction0.TWO_FIFTHS.divide(fraction1);
      assertEquals((-4), fraction1.getNumerator());
      assertEquals((-50.0), fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction(614, (-3164));
      double double0 = fraction0.doubleValue();
      assertEquals((-0.19405815423514539), double0, 0.01);
      assertEquals((-307), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      String string0 = fraction0.toString();
      assertEquals(1, fraction0.getDenominator());
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3148, 1862);
      String string0 = fraction0.toString();
      assertEquals("1574 / 931", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-238));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-238, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-3879), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -3,879/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-2551));
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(2840, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 2,840/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.ONE_FIFTH.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = new Fraction(1);
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.ONE_HALF.multiply(fraction1);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3148, 1862);
      Fraction fraction1 = fraction0.ZERO.divide(3032);
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertTrue(fraction2.equals((Object)fraction1));
      assertEquals(1.6906552094522018, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        fraction0.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.TWO_FIFTHS.abs();
      Fraction fraction2 = fraction0.ONE_FIFTH.add(fraction1);
      assertEquals(0.6, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction(83, 83);
      Fraction fraction1 = fraction0.FOUR_FIFTHS.divide(83);
      Fraction fraction2 = fraction1.subtract(fraction1);
      assertEquals(0.9638554216867471, fraction1.percentageValue(), 0.01);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1690.61770716));
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      assertEquals((-782756), fraction0.getNumerator());
      assertEquals(1690.6177F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1667.2680043344), (-2622));
      // Undeclared exception!
      try { 
        fraction0.ONE_HALF.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1563);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1,563, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = new Fraction(1.0);
      boolean boolean0 = fraction0.equals(fraction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.ONE_THIRD;
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.FOUR_FIFTHS.abs();
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, 3);
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, 3);
      boolean boolean0 = fraction0.equals("2 / 3");
      assertEquals(1, fraction0.getNumerator());
      assertFalse(boolean0);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, 3);
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, 3);
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(2, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 2/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(2, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 2/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(1.0E-5, 0.0, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0 to fraction after 1 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) (-2550), (-1492));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,550 to fraction (2,551/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = new Fraction(614, (-3164));
      double double0 = fraction0.percentageValue();
      assertEquals((-307), fraction0.getNumerator());
      assertEquals((-19.40581542351454), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = new Fraction((-307));
      float float0 = fraction0.floatValue();
      assertEquals((-307), fraction0.getNumerator());
      assertEquals((-307.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      int int0 = fraction0.getNumerator();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, 3);
      int int0 = fraction0.intValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.subtract(726);
      assertEquals((-725.25F), fraction1.floatValue(), 0.01F);
      assertEquals(4, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, 3);
      long long0 = fraction0.longValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3148, 1862);
      fraction0.ZERO.getField();
      assertEquals(931, fraction0.getDenominator());
      assertEquals(1.6906552F, fraction0.floatValue(), 0.01F);
      assertEquals(1.6906552094522018, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2147483642));
      Fraction fraction1 = fraction0.abs();
      assertEquals((-2.147483642E9), fraction0.doubleValue(), 0.01);
      assertEquals(2147483642, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3148, 1862);
      Fraction fraction1 = fraction0.ONE_HALF.subtract(fraction0);
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals(931, fraction0.getDenominator());
      assertEquals((-1.1906552F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3148, 1862);
      Fraction fraction1 = fraction0.divide(3148);
      Fraction fraction2 = fraction1.THREE_FIFTHS.abs();
      Fraction fraction3 = fraction0.ONE_THIRD.add(fraction1);
      Fraction fraction4 = fraction2.multiply(fraction1);
      Fraction fraction5 = fraction4.add((-138));
      Fraction fraction6 = fraction5.multiply(644);
      // Undeclared exception!
      try { 
        fraction6.subtract(fraction3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -2,482,198,489
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3148, 1862);
      Fraction fraction1 = fraction0.multiply(644);
      assertEquals(144808, fraction1.getNumerator());
      assertEquals(133, fraction1.getDenominator());
      assertEquals((byte)1, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3148, 1862);
      Fraction fraction1 = fraction0.ONE_THIRD.add(fraction0);
      assertEquals(202.39885427855353, fraction1.percentageValue(), 0.01);
  }
}
