/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:33:03 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 11);
      String string0 = fraction0.toString();
      assertEquals("-2147483648 / 11", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3497, 3497);
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction0.ONE_QUARTER.divide(fraction1);
      assertEquals(0.3333333333333333, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1319), (-10));
      Fraction fraction1 = fraction0.divide(60);
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      assertEquals(600, fraction1.getDenominator());
      assertEquals(219.83333333333331, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.THREE_FIFTHS.abs();
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1319), (-10));
      Fraction fraction1 = fraction0.subtract(31);
      assertEquals(1009, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction(4133);
      Fraction fraction1 = fraction0.subtract(4133);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.ONE_FIFTH.negate();
      double double0 = fraction1.percentageValue();
      assertEquals((-20.0), double0, 0.01);
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3497, 3497);
      Fraction fraction1 = fraction0.negate();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.ZERO.negate();
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction(225);
      Fraction fraction1 = fraction0.MINUS_ONE.negate();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(225, fraction0.getNumerator());
      assertEquals((short)1, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3497, 3497);
      Fraction fraction1 = fraction0.MINUS_ONE.subtract(fraction0);
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals((-2), fraction1.getNumerator());
      assertEquals((-200.0), fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction((-704), 2);
      Fraction fraction1 = fraction0.FOUR_FIFTHS.multiply((-704));
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2816), fraction1.getNumerator());
      assertEquals((short) (-352), fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE_HALF.multiply(0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction(4133);
      Fraction fraction1 = fraction0.THREE_QUARTERS.divide((-2972));
      long long0 = fraction1.longValue();
      assertEquals((-3), fraction1.getNumerator());
      assertEquals((-2.5235533E-4F), fraction1.floatValue(), 0.01F);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = new Fraction(4133);
      long long0 = fraction0.longValue();
      assertEquals(4133, fraction0.getNumerator());
      assertEquals(4133L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.intValue();
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.subtract(6024);
      int int0 = fraction1.intValue();
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-6023.2), fraction1.doubleValue(), 0.01);
      assertEquals((-6023), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(244, (-177));
      assertEquals(177, fraction0.getDenominator());
      assertEquals((-1.3785310734463276), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = new Fraction(1862.630013236);
      Fraction fraction1 = fraction0.multiply((-229));
      int int0 = fraction1.getNumerator();
      assertEquals(673, fraction1.getDenominator());
      assertEquals((-287062950), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 173);
      int int0 = fraction0.getDenominator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = new Fraction(0);
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      float float0 = fraction0.floatValue();
      assertEquals(0.4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(629, 1071);
      Fraction fraction1 = fraction0.add(48);
      Fraction fraction2 = fraction0.subtract(fraction1);
      double double0 = fraction2.doubleValue();
      assertEquals((-48.0), double0, 0.01);
      assertEquals(3061, fraction1.getNumerator());
      assertEquals(0, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.TWO.subtract(4);
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals((-266.66666666666663), fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals((-0.4F), fraction2.floatValue(), 0.01F);
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((byte) (-1), fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.getReducedFraction(145, 1);
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals(145, fraction1.getNumerator());
      assertEquals(19333.333333333336, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.divide((-5177520));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = new Fraction((-704), 2);
      Fraction fraction1 = fraction0.divide(1);
      assertEquals((-352), fraction1.getNumerator());
      assertEquals((-352.0F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.getReducedFraction(145, 145);
      Fraction fraction2 = fraction0.MINUS_ONE.add(fraction1);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.multiply(2269);
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction fraction3 = fraction0.ONE_HALF.add(fraction2);
      assertEquals(10, fraction3.getDenominator());
      assertEquals((-90670.0), fraction3.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3497, 3497);
      Fraction fraction1 = fraction0.ONE_THIRD.add(fraction0);
      assertEquals(4, fraction1.getNumerator());
      assertEquals((short)1, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.add((-259));
      assertEquals(4, fraction1.getDenominator());
      assertEquals((-258.25F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 169);
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction1.add(39);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(3900.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 173);
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction1.abs();
      assertSame(fraction2, fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction((-704), 2);
      Fraction fraction1 = fraction0.abs();
      assertEquals((-352), fraction0.getNumerator());
      assertEquals((-352.0), fraction0.doubleValue(), 0.01);
      assertEquals(352, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 153);
      Fraction fraction1 = fraction0.abs();
      assertEquals(9223372036854775807L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 173);
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.ZERO.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ONE_FIFTH.multiply(4326);
      Fraction fraction2 = fraction1.multiply(fraction1);
      Fraction fraction3 = fraction0.FOUR_FIFTHS.subtract(fraction2);
      // Undeclared exception!
      try { 
        fraction3.multiply(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 169);
      // Undeclared exception!
      try { 
        fraction0.multiply(169);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 169/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 153);
      // Undeclared exception!
      try { 
        fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 173);
      // Undeclared exception!
      try { 
        fraction0.add(173);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 5);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/5, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1120), (-1120));
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-1112), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -1,112/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = new Fraction(846);
      double double0 = fraction0.doubleValue();
      assertEquals(846, fraction0.getNumerator());
      assertEquals(846.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(136, 136);
      String string0 = fraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 173);
      String string0 = fraction0.ONE_QUARTER.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1614));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1,614, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1614), Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.divide(136);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 807/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(49, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 49/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 3497);
      assertEquals(0, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-2098), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -2,098/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      // Undeclared exception!
      try { 
        fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.ONE_HALF.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = new Fraction(846);
      Fraction fraction1 = fraction0.ZERO.add(0);
      Fraction fraction2 = fraction1.divide(fraction0);
      assertTrue(fraction2.equals((Object)fraction1));
      assertEquals(846, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction(846);
      // Undeclared exception!
      try { 
        fraction0.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.subtract(6024);
      Fraction fraction2 = fraction0.divide((-5177520));
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -38,981,548,079
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = new Fraction(1862.630013236);
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(1862.13F, fraction2.floatValue(), 0.01F);
      assertEquals(1346, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.01745329052209854, 0.01745329052209854, 906);
      Fraction fraction1 = new Fraction(0.0);
      Fraction fraction2 = fraction0.TWO_THIRDS.add(fraction1);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(57, fraction0.getDenominator());
      assertEquals(2, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      assertEquals(4, fraction1.getDenominator());
      assertEquals((-75.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 169);
      assertEquals(Double.POSITIVE_INFINITY, fraction0.percentageValue(), 0.01);
      
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(9223372036854775807L, fraction2.longValue());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = new Fraction(5, 5);
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction1 = new Fraction(Integer.MIN_VALUE);
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
      assertEquals((-2.14748365E9F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = new Fraction(846);
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals(846L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = new Fraction(1862.630013236);
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
      assertEquals(1862.630014858841, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = new Fraction(1862.630013236);
      Fraction fraction1 = fraction0.THREE_QUARTERS.add(136);
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertEquals(1862.63F, fraction0.floatValue(), 0.01F);
      assertEquals(136.75, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = new Fraction(846);
      Fraction fraction1 = fraction0.divide(fraction0);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
      assertEquals((byte)1, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.THREE_QUARTERS.add(136);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
      assertEquals(13675.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(2860, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 2,860/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(2.479773539153719E-5, 2.479773539153719E-5, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0 to fraction after 0 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.0, 216);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MAX_VALUE, (-2675), 12);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = new Fraction(1688.5593102, (-1673));
      assertEquals(168800.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = new Fraction(846);
      double double0 = fraction0.percentageValue();
      assertEquals(84600.0, double0, 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      float float0 = fraction0.floatValue();
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      int int0 = fraction0.getNumerator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = new Fraction(846);
      fraction0.hashCode();
      assertEquals(846, fraction0.getNumerator());
      assertEquals(846.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = new Fraction(1862.630013236);
      int int0 = fraction0.intValue();
      assertEquals(1862.63F, fraction0.floatValue(), 0.01F);
      assertEquals(1862, int0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 173);
      // Undeclared exception!
      try { 
        fraction0.subtract(173);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 173);
      assertEquals(Float.POSITIVE_INFINITY, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction0.multiply(fraction1);
      Fraction fraction3 = fraction2.subtract(173);
      Fraction fraction4 = fraction3.negate();
      assertFalse(fraction4.equals((Object)fraction3));
      assertEquals(17300.0, fraction4.percentageValue(), 0.01);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      long long0 = fraction0.longValue();
      assertEquals((-2147483648L), long0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      fraction0.getField();
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Fraction fraction0 = new Fraction(1862.630013236);
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1862.630014858841, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Fraction fraction0 = new Fraction(1862.630013236);
      int int0 = fraction0.getDenominator();
      assertEquals(673, int0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 173);
      // Undeclared exception!
      try { 
        fraction0.ONE_THIRD.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }
}
