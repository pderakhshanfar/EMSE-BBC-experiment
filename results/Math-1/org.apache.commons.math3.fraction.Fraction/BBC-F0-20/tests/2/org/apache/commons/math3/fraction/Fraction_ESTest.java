/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:20:37 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-530), 1046);
      String string0 = fraction0.toString();
      assertEquals("-265 / 523", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2893, 2893);
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction0.subtract(fraction1);
      boolean boolean0 = fraction2.equals(fraction0);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction2));
      assertEquals(0.25F, fraction2.floatValue(), 0.01F);
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.subtract(1);
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals((-1), fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction(629, 629);
      Fraction fraction1 = Fraction.getReducedFraction(629, (-91));
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, int0);
      assertEquals((-6.912087912087912), fraction1.doubleValue(), 0.01);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, 4, 2);
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.getReducedFraction((-530), 302);
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals((-2.2549668874172184), fraction2.doubleValue(), 0.01);
      assertEquals(302, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      Fraction fraction1 = fraction0.TWO_QUARTERS.divide(651);
      Fraction fraction2 = fraction1.subtract(1);
      assertEquals((-99.9231950844854), fraction2.percentageValue(), 0.01);
      assertEquals((-1301), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2682);
      assertEquals((byte) (-1), fraction0.byteValue());
      
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      Fraction fraction1 = fraction0.ONE.reciprocal();
      Fraction fraction2 = fraction1.subtract(1);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.THREE_FIFTHS.negate();
      Fraction fraction2 = fraction1.reciprocal();
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-1.6666666666666667), fraction2.doubleValue(), 0.01);
      assertEquals((-0.6F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.negate();
      double double0 = fraction1.percentageValue();
      assertEquals((-50.0), double0, 0.01);
      assertEquals(2, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.negate();
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = Fraction.getReducedFraction(3, 3);
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertTrue(fraction2.equals((Object)fraction0));
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction(629, 629);
      Fraction fraction1 = Fraction.getReducedFraction(629, (-91));
      Fraction fraction2 = fraction1.ONE_THIRD.subtract(fraction0);
      Fraction fraction3 = fraction2.multiply(fraction1);
      assertEquals(4.608058608058608, fraction3.doubleValue(), 0.01);
      assertEquals((-629), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.THREE_FIFTHS.negate();
      long long0 = fraction1.longValue();
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-0.6), fraction1.doubleValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      Fraction fraction1 = fraction0.ONE_HALF.subtract(282);
      long long0 = fraction1.longValue();
      assertEquals(2, fraction1.getDenominator());
      assertEquals((-281.5), fraction1.doubleValue(), 0.01);
      assertEquals((-281L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      int int0 = fraction0.intValue();
      assertEquals(50.0, fraction0.percentageValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      Fraction fraction1 = fraction0.ONE_HALF.subtract(282);
      int int0 = fraction1.intValue();
      assertEquals((-563), fraction1.getNumerator());
      assertEquals((-28150.0), fraction1.percentageValue(), 0.01);
      assertEquals((-281), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(629, (-91));
      int int0 = fraction0.getNumerator();
      assertEquals((-691.2087912087912), fraction0.percentageValue(), 0.01);
      assertEquals((-629), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2682);
      int int0 = fraction0.getDenominator();
      assertEquals(0, int0);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2585), 4277);
      float float0 = fraction0.floatValue();
      assertEquals(91, fraction0.getDenominator());
      assertEquals((-0.6043956F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.THREE_FIFTHS.negate();
      Fraction fraction2 = fraction1.ONE_QUARTER.multiply(fraction1);
      double double0 = fraction2.doubleValue();
      assertEquals((-3), fraction1.getNumerator());
      assertEquals((-0.15), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE_HALF.multiply((-3830));
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-5.221932E-4F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.MINUS_ONE.divide(fraction0);
      assertEquals((-250.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.divide(2);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.TWO_QUARTERS.multiply(fraction0);
      Fraction fraction2 = fraction0.TWO.add(fraction1);
      Fraction fraction3 = fraction2.divide(Integer.MAX_VALUE);
      assertEquals((-2.1), fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.subtract(352317);
      Fraction fraction2 = fraction1.add((-2147483646));
      assertEquals((-704629), fraction2.getNumerator());
      assertEquals((byte) (-58), fraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
      Fraction fraction1 = fraction0.add(Integer.MIN_VALUE);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      Fraction fraction1 = fraction0.add(2);
      assertEquals(4, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction1, fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      Fraction fraction1 = fraction0.ONE_QUARTER.abs();
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        fraction0.TWO_THIRDS.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2682);
      // Undeclared exception!
      try { 
        fraction0.subtract(2682);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction(241);
      // Undeclared exception!
      try { 
        fraction0.ZERO.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction(2, 2146135572);
      // Undeclared exception!
      try { 
        fraction0.TWO_FIFTHS.multiply(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2682);
      // Undeclared exception!
      try { 
        fraction0.multiply(2682);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 2,682/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.ONE_FIFTH.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-4519), 31);
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2682);
      // Undeclared exception!
      try { 
        fraction0.add(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/2,147,483,647, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(37, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 37/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      double double0 = fraction0.doubleValue();
      assertEquals(0.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      String string0 = fraction0.ZERO.toString();
      assertEquals("0", string0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.ONE_FIFTH.multiply(fraction0);
      String string0 = fraction1.toString();
      assertEquals("2 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-73));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-73, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(954, Integer.MIN_VALUE);
      assertEquals((-4.4424086809158325E-7), fraction0.doubleValue(), 0.01);
      assertEquals(1073741824, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(943, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 943/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-1671));
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(1426, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1,426/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2.6033824355191673E-8));
      // Undeclared exception!
      try { 
        fraction0.ONE_HALF.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.ONE_QUARTER.multiply(fraction1);
      assertEquals(0, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction(1967, 2893);
      Fraction fraction1 = fraction0.subtract((-350));
      Fraction fraction2 = fraction0.multiply(fraction1);
      // Undeclared exception!
      try { 
        fraction1.add(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 4,930,552,620
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.ONE_FIFTH.add(fraction0);
      assertEquals(0.0, fraction0.percentageValue(), 0.01);
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.add(fraction0);
      Fraction fraction3 = fraction2.subtract(fraction0);
      assertEquals(1, fraction3.getNumerator());
      assertEquals(0, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2682);
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      assertEquals(Double.POSITIVE_INFINITY, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = new Fraction((-21473), (-21473));
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 37);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/37, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-713), (-713));
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.multiply((-713));
      Fraction fraction3 = Fraction.getReducedFraction((-713), (-1973));
      boolean boolean0 = fraction2.equals(fraction3);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(boolean0);
      assertEquals(36.13786112519007, fraction3.percentageValue(), 0.01);
      assertEquals(713L, fraction2.longValue());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-713), (-713));
      Fraction fraction1 = fraction0.negate();
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.ONE_QUARTER.multiply(fraction0);
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals(50.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2682);
      Fraction fraction1 = fraction0.abs();
      assertEquals(9223372036854775807L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1227), 27);
      Fraction fraction1 = fraction0.abs();
      assertEquals(4544.444444444444, fraction1.percentageValue(), 0.01);
      assertEquals((-45.444443F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-1530), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -1,530/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, (-2));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = new Fraction(733.1371);
      assertEquals(733.1371F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = new Fraction(4.438921624363781E-8, (-1101));
      Fraction fraction1 = fraction0.multiply((-1101));
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(0.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(1.0E-5, (-1967.9425195024837), (-710));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0 to fraction after -710 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.0, 0.0, 142);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) (-73), (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -73 to fraction (-9,223,372,036,854,775,734/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2682);
      // Undeclared exception!
      try { 
        fraction0.THREE_QUARTERS.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      double double0 = fraction0.percentageValue();
      assertEquals(50.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      float float0 = fraction0.floatValue();
      assertEquals(0.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-713), (-713));
      int int0 = fraction0.getNumerator();
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      fraction0.hashCode();
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      int int0 = fraction0.intValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1227), 27);
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals((-4544.444444444444), fraction0.percentageValue(), 0.01);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      long long0 = fraction0.longValue();
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(Integer.MAX_VALUE, fraction1.getDenominator());
      assertEquals(4.656612875245797E-10, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1227), 27);
      fraction0.TWO.getField();
      assertEquals((-409), fraction0.getNumerator());
      assertEquals((-45.444443F), fraction0.floatValue(), 0.01F);
      assertEquals(9, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-713), (-713));
      Fraction fraction1 = fraction0.ZERO.divide(199);
      int int0 = fraction1.getNumerator();
      assertEquals(0, int0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1227), 27);
      int int0 = fraction0.getDenominator();
      assertEquals(9, int0);
      assertEquals((-45.44444444444444), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-713), (-713));
      Fraction fraction1 = fraction0.multiply((-713));
      Fraction fraction2 = fraction0.multiply((-713));
      boolean boolean0 = fraction1.equals(fraction2);
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(boolean0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-713.0F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1227), 27);
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals((-409), fraction0.getNumerator());
      assertEquals((-90.88888888888889), fraction1.doubleValue(), 0.01);
  }
}
