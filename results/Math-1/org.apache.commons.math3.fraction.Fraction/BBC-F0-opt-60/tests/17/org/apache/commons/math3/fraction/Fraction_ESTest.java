/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:21:53 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1646), 110);
      String string0 = fraction0.toString();
      assertEquals("-823 / 55", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      Fraction fraction1 = new Fraction(2, (-3533));
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals((-3533.0), fraction2.doubleValue(), 0.01);
      assertEquals((-5.660911406736484E-4), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.subtract(110);
      Fraction fraction2 = fraction0.ONE_QUARTER.divide(191);
      Fraction fraction3 = fraction2.multiply(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-0.14397905759162305), fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.MINUS_ONE.add(fraction0);
      assertEquals((-2), fraction1.getNumerator());
      assertEquals((-200.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ONE_HALF;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.THREE_FIFTHS.abs();
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(boolean0);
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      Fraction fraction1 = fraction0.TWO_FIFTHS.subtract((-3533));
      assertEquals(3533.4, fraction1.doubleValue(), 0.01);
      assertEquals(2, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.ONE_THIRD.reciprocal();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(3.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      assertEquals((-1L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      double double0 = fraction0.percentageValue();
      assertEquals(20.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = new Fraction(4);
      Fraction fraction1 = fraction0.negate();
      double double0 = fraction1.percentageValue();
      assertEquals(4, fraction0.getNumerator());
      assertEquals((-400.0), double0, 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.ZERO.negate();
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, 444);
      Fraction fraction1 = fraction0.MINUS_ONE.negate();
      Fraction fraction2 = fraction0.TWO.multiply(fraction1);
      assertEquals(2, fraction2.getNumerator());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.MINUS_ONE;
      Fraction fraction2 = fraction0.TWO.multiply(fraction1);
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-2), fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.multiply(2);
      assertEquals((-4), fraction2.getNumerator());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(5, 927);
      long long0 = fraction0.longValue();
      assertEquals(0.005393743257820928, fraction0.doubleValue(), 0.01);
      assertEquals(927, fraction0.getDenominator());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(5, 927);
      Fraction fraction1 = fraction0.subtract(937);
      long long0 = fraction1.longValue();
      assertEquals(927, fraction1.getDenominator());
      assertEquals((-93699.46062567421), fraction1.percentageValue(), 0.01);
      assertEquals((-936L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.intValue();
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(5, 927);
      Fraction fraction1 = fraction0.subtract(937);
      int int0 = fraction1.intValue();
      assertEquals(927, fraction1.getDenominator());
      assertEquals((-936.9946062567421), fraction1.doubleValue(), 0.01);
      assertEquals((-936), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      int int0 = fraction0.getNumerator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ONE_QUARTER.add((-234));
      int int0 = fraction1.getNumerator();
      assertEquals((-935), int0);
      assertEquals(4, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      Fraction fraction1 = fraction0.negate();
      float float0 = fraction1.floatValue();
      assertEquals((-2.0F), float0, 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      Fraction fraction1 = fraction0.negate();
      double double0 = fraction1.doubleValue();
      assertEquals(2, fraction0.getNumerator());
      assertEquals((-2.0), double0, 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.MINUS_ONE.divide(fraction0);
      assertEquals((-100.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = new Fraction(4);
      Fraction fraction1 = fraction0.divide(1);
      assertEquals(4, fraction1.getNumerator());
      assertEquals(400.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ONE_QUARTER.add((-234));
      Fraction fraction2 = fraction1.divide(3);
      assertEquals((-7791.666666666667), fraction2.percentageValue(), 0.01);
      assertEquals((-935), fraction2.getNumerator());
      assertEquals((-23375.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(5, 927);
      Fraction fraction1 = fraction0.add(628);
      Fraction fraction2 = fraction1.subtract(937);
      Fraction fraction3 = fraction1.THREE_FIFTHS.add(fraction2);
      assertEquals(927, fraction2.getDenominator());
      assertEquals((-308.3946062567422), fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.add(1249);
      assertEquals(3749, fraction1.getNumerator());
      assertEquals(124966.66666666667, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE.negate();
      Fraction fraction2 = fraction1.add(1);
      assertEquals((-1), fraction1.getNumerator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2358.74088, 1712154);
      Fraction fraction1 = fraction0.abs();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(9223372036854775807L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction1, fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.multiply(Integer.MAX_VALUE);
      Fraction fraction2 = fraction1.reciprocal();
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 166);
      // Undeclared exception!
      try { 
        fraction0.multiply(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2358.74088, 1712154);
      // Undeclared exception!
      try { 
        fraction0.multiply((-938));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -938/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.ONE_THIRD.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.multiply(1538);
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 2142382735);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/2,142,382,735, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(4, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 4/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = new Fraction(102060);
      double double0 = fraction0.doubleValue();
      assertEquals(102060.0, double0, 0.01);
      assertEquals(102060, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      String string0 = fraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      String string0 = fraction0.TWO_FIFTHS.toString();
      assertEquals("2 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-3533));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-3,533, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(3055, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 3,055/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 1);
      assertEquals(0.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-1060), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -1,060/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = new Fraction(1260, 2);
      Fraction fraction1 = new Fraction(0, 4);
      // Undeclared exception!
      try { 
        fraction0.TWO_THIRDS.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(0, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = new Fraction(1, 925);
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      assertEquals(925, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.add(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        fraction1.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 2,147,483,649
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      Fraction fraction2 = fraction0.THREE_FIFTHS.subtract(fraction1);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = new Fraction(2773, 2773);
      Fraction fraction1 = fraction0.ONE_FIFTH.add(fraction0);
      assertEquals(120.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.multiply(1538);
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.multiply(1538);
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-1), fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, 255);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/255, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ONE_HALF;
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, 444);
      Fraction fraction1 = new Fraction((double) 0);
      boolean boolean0 = fraction0.equals(fraction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Object object0 = new Object();
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = new Fraction(2773, 2773);
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, 444);
      Fraction fraction1 = fraction0.MINUS_ONE.negate();
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(1, fraction0.getDenominator());
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.getNumerator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ONE_QUARTER.add((-234));
      Fraction fraction2 = fraction1.abs();
      int int0 = fraction2.compareTo(fraction0);
      assertEquals(1, int0);
      assertNotSame(fraction2, fraction1);
      assertEquals(233.75, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.THREE_FIFTHS.multiply(fraction0);
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals(0.24F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = new Fraction(4);
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, int0);
      assertEquals(4.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.abs();
      assertEquals(1L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-3533), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -3,533/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, (-967));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-967, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1203.630279203791), 3);
      // Undeclared exception!
      try { 
        fraction0.ZERO.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.0043133003100024325, 0.0043133003100024325, (-2142382735));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.004 to fraction after -2,142,382,735 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.0, 2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MAX_VALUE, 1269029);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      float float0 = fraction0.floatValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, 444);
      int int0 = fraction0.getNumerator();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = new Fraction(4);
      fraction0.hashCode();
      assertEquals(4, fraction0.getNumerator());
      assertEquals(400.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = new Fraction(4);
      int int0 = fraction0.intValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = new Fraction(102060);
      Fraction fraction1 = fraction0.subtract(102060);
      double double0 = fraction1.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(102060.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2358.74088, 1712154);
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      long long0 = fraction0.longValue();
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = new Fraction(1260, 2);
      fraction0.TWO_FIFTHS.getField();
      assertEquals(630, fraction0.getNumerator());
      assertEquals(63000.0, fraction0.percentageValue(), 0.01);
      assertEquals((byte)118, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = new Fraction(4);
      Fraction fraction1 = fraction0.ZERO.divide(4);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(4, fraction0.intValue());
      assertEquals((byte)0, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, 2358.74088, 1712154);
      // Undeclared exception!
      try { 
        fraction0.add((-5716));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, 444);
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.multiply(1712154);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.712154E8, fraction1.percentageValue(), 0.01);
  }
}
