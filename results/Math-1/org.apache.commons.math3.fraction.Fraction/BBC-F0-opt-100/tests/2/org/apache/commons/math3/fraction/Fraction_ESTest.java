/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:48:35 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2, (-1901));
      String string0 = fraction0.toString();
      assertEquals("-2 / 1901", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1632.8187371101353), 3);
      Fraction fraction1 = fraction0.multiply(3);
      Fraction fraction2 = fraction1.TWO_THIRDS.multiply(fraction1);
      assertEquals((-4899), fraction1.getNumerator());
      assertEquals((-3266), fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.TWO_THIRDS;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.TWO_THIRDS.abs();
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) (-2147483647));
      assertEquals((byte)1, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, 1.0E-5, 5);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ZERO.add(3);
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals((-2L), fraction2.longValue());
      assertEquals((-8), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3071));
      Fraction fraction1 = fraction0.subtract((-3071));
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction(2764.927450861, 5);
      Fraction fraction1 = fraction0.divide(694);
      Fraction fraction2 = fraction1.subtract(3);
      assertEquals(683, fraction2.getNumerator());
      assertEquals(98.4149855907781, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.TWO.reciprocal();
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      double double0 = fraction0.percentageValue();
      assertEquals(200.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte) (-1), fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1.7168146928204135));
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals((-2.9474508575456184), fraction2.doubleValue(), 0.01);
      assertEquals(113, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2293.087));
      Fraction fraction1 = fraction0.ZERO.multiply(2);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((-2293087), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction(1276, (-2147483646));
      Fraction fraction1 = fraction0.multiply((-2038));
      assertEquals(118204, fraction1.getNumerator());
      assertEquals(97612893, fraction0.getDenominator());
      assertEquals((-5.941838031580521E-5), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = Fraction.getReducedFraction(1, 1);
      Fraction fraction2 = fraction1.divide(fraction0);
      long long0 = fraction2.longValue();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.5, fraction2.doubleValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = new Fraction(2764.927450861, 5);
      long long0 = fraction0.longValue();
      assertEquals(2765L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      int int0 = fraction0.intValue();
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1866, 1866);
      int int0 = fraction0.intValue();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.subtract(fraction0);
      int int0 = fraction1.getNumerator();
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.TWO_FIFTHS.abs();
      int int0 = fraction1.getNumerator();
      assertEquals(2, int0);
      assertEquals(0.4, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1866, 1866);
      Fraction fraction1 = fraction0.add((-469));
      double double0 = fraction1.doubleValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-468.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.TWO_THIRDS.divide(fraction0);
      assertEquals(1.6666666F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.MINUS_ONE.divide(fraction0);
      assertEquals((-150.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.divide((-1));
      assertEquals((-2), fraction1.getNumerator());
      assertEquals((-200.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.multiply(fraction0);
      Fraction fraction2 = fraction0.add(fraction1);
      double double0 = fraction2.percentageValue();
      assertEquals((-100.0), fraction0.percentageValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      Fraction fraction2 = fraction1.ZERO.add(fraction1);
      assertEquals((-1), fraction1.getNumerator());
      assertSame(fraction2, fraction1);
      assertEquals((-1), fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, 1637);
      Fraction fraction1 = fraction0.add(Integer.MIN_VALUE);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1311841.0F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(68955800, (-1768));
      Fraction fraction1 = fraction0.abs();
      assertEquals(39002.14932126697, fraction1.doubleValue(), 0.01);
      assertEquals((-3900214.9321266967), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.ZERO.abs();
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1.7168146928204135));
      Fraction fraction1 = fraction0.add((-2270));
      Fraction fraction2 = fraction1.abs();
      assertEquals(113, fraction0.getDenominator());
      assertEquals(256704, fraction2.getNumerator());
      assertEquals((-256704), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(82, 82);
      Fraction fraction1 = fraction0.ZERO.negate();
      // Undeclared exception!
      try { 
        fraction1.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1.7168146928204135));
      Fraction fraction1 = fraction0.divide(113);
      Fraction fraction2 = fraction0.multiply(fraction1);
      // Undeclared exception!
      try { 
        fraction1.multiply(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 2/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = new Fraction(56);
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.getReducedFraction(390451576, 2);
      Fraction fraction2 = fraction0.divide(fraction1);
      // Undeclared exception!
      try { 
        fraction1.add(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, 1637);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1,637, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction(1276, (-2147483646));
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.reciprocal();
      Fraction fraction3 = fraction2.multiply((-1898));
      assertEquals((-292838593), fraction3.getNumerator());
      assertEquals((-5.941838031580521E-5), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = new Fraction(1276, (-2147483646));
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals((-97612893), fraction1.getNumerator());
      assertEquals((-5.941838E-7F), fraction0.floatValue(), 0.01F);
      assertEquals((short)20956, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction(1089);
      double double0 = fraction0.doubleValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1089.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      String string0 = fraction0.ONE.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = new Fraction(45, 37);
      String string0 = fraction0.THREE_QUARTERS.toString();
      assertEquals(45, fraction0.getNumerator());
      assertEquals("3 / 4", string0);
      assertEquals(1.2162162162162162, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1995));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1,995, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-3769), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -3,769/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3768), Integer.MIN_VALUE);
      assertEquals(268435456, fraction0.getDenominator());
      assertEquals(1.7546117305755615E-6, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-11));
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1.7168146928204135));
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.subtract(1);
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.add((-221231718));
      Fraction fraction2 = fraction1.THREE_QUARTERS.abs();
      Fraction fraction3 = fraction1.FOUR_FIFTHS.multiply((-221231718));
      Fraction fraction4 = fraction2.divide(fraction3);
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -87,010,618,623,089,097
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1.7168146928204135));
      Fraction fraction1 = fraction0.THREE_QUARTERS.subtract(fraction0);
      assertEquals(452, fraction1.getDenominator());
      assertEquals(2.4668141592920354, fraction1.doubleValue(), 0.01);
      assertEquals(113, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = new Fraction(45, 37);
      Fraction fraction1 = fraction0.ONE_THIRD.divide(fraction0);
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.4902902902902904, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = new Fraction(1276, (-2147483646));
      Fraction fraction1 = new Fraction(0.0);
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertSame(fraction2, fraction0);
      assertEquals(97612893, fraction2.getDenominator());
      assertEquals((-5.941838031580521E-7), fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        fraction0.TWO_THIRDS.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.divide((-1));
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = new Fraction(45, 37);
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.ONE_FIFTH.abs();
      Fraction fraction3 = fraction0.TWO_QUARTERS.multiply(fraction1);
      boolean boolean0 = fraction3.equals(fraction2);
      assertFalse(fraction2.equals((Object)fraction3));
      assertEquals(0.2F, fraction2.floatValue(), 0.01F);
      assertEquals(0.25F, fraction3.floatValue(), 0.01F);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2328, 3054);
      boolean boolean0 = fraction0.equals((Object) null);
      assertEquals(509, fraction0.getDenominator());
      assertEquals(76.2278978388998, fraction0.percentageValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.add((-21475));
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
      assertEquals((-21474.6F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.TWO_FIFTHS.add(1);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1.4, fraction1.doubleValue(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-1898), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -1,898/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, (-7301384));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-7,301,384, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-1952), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -1,952/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = new Fraction(2764.927450861, 5);
      float float0 = fraction0.floatValue();
      assertEquals(2765.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-751.918), 0.0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -751.918 to fraction after 0 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.0, 2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(1089.0, 1089);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1,089 to fraction (9,223,372,036,854,774,720/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2, (-1901));
      double double0 = fraction0.percentageValue();
      assertEquals((-0.10520778537611783), double0, 0.01);
      assertEquals(1901, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1.7168146928204135));
      float float0 = fraction0.floatValue();
      assertEquals((-1.7168142F), float0, 0.01F);
      assertEquals((-194), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      int int0 = fraction0.getNumerator();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      fraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1768), 82);
      int int0 = fraction0.intValue();
      assertEquals((-21.560976F), fraction0.floatValue(), 0.01F);
      assertEquals((-884), fraction0.getNumerator());
      assertEquals((-21), int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = new Fraction(45, 37);
      Fraction fraction1 = fraction0.THREE_FIFTHS.subtract((-270));
      assertEquals(1353, fraction1.getNumerator());
      assertEquals(270.6F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = new Fraction(45, 37);
      Fraction fraction1 = fraction0.ONE_THIRD.divide(fraction0);
      fraction0.equals(fraction1);
      assertEquals(0.27407408F, fraction1.floatValue(), 0.01F);
      assertEquals(0.2740740740740741, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1.7168146928204135));
      long long0 = fraction0.longValue();
      assertEquals((-171.68141592920355), fraction0.percentageValue(), 0.01);
      assertEquals(113, fraction0.getDenominator());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = new Fraction(45, 37);
      fraction0.getField();
      assertEquals(121.62162162162163, fraction0.percentageValue(), 0.01);
      assertEquals(37, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1768), 82);
      int int0 = fraction0.getDenominator();
      assertEquals(41, int0);
      assertEquals((-21.560976F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = new Fraction(1276, (-2147483646));
      Fraction fraction1 = fraction0.ONE_HALF.multiply(1276);
      assertEquals(638, fraction1.getNumerator());
      assertEquals((-5.941838031580521E-5), fraction0.percentageValue(), 0.01);
      assertEquals((-58), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = new Fraction(45, 37);
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(2.4324324F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
  }
}
