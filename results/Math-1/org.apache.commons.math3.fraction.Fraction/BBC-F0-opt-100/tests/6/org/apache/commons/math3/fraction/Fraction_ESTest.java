/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:58:27 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.TWO_QUARTERS.divide((-3320));
      String string0 = fraction1.toString();
      assertEquals("-1 / 6640", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.ONE_QUARTER.divide(38);
      Fraction fraction2 = fraction0.TWO_QUARTERS.abs();
      boolean boolean0 = fraction2.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction0));
      assertFalse(boolean0);
      assertNotSame(fraction2, fraction0);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.006578947368421052, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.THREE_QUARTERS.add(fraction0);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertEquals(75.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = Fraction.getReducedFraction((-794), 1);
      Fraction fraction2 = fraction0.TWO_QUARTERS.subtract(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(794.5F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = new Fraction(5);
      Fraction fraction1 = fraction0.TWO.subtract(2);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals(5, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.ONE.subtract(1025);
      assertEquals((-1024L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.TWO_THIRDS.subtract((-3101));
      assertEquals(3, fraction1.getDenominator());
      assertEquals(310166.6666666666, fraction1.percentageValue(), 0.01);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction(3);
      Fraction fraction1 = fraction0.ONE_THIRD.negate();
      Fraction fraction2 = fraction1.reciprocal();
      assertEquals((-3), fraction2.getNumerator());
      assertEquals((short) (-3), fraction2.shortValue());
      assertEquals((-0.33333334F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction(4);
      Fraction fraction1 = new Fraction((-1.0129027912496858E-9));
      Fraction fraction2 = fraction0.ONE_QUARTER.multiply(fraction1);
      double double0 = fraction2.percentageValue();
      assertEquals(400.0, fraction0.percentageValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ONE_QUARTER.subtract(fraction0);
      double double0 = fraction1.percentageValue();
      assertEquals((-8.333333333333332), double0, 0.01);
      assertEquals((-1), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.negate();
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction0.TWO_THIRDS.subtract(fraction1);
      Fraction fraction3 = fraction2.negate();
      assertEquals(1.8333334F, fraction3.floatValue(), 0.01F);
      assertEquals((-11), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-31), (-31));
      Fraction fraction1 = fraction0.multiply(1207);
      Fraction fraction2 = fraction1.negate();
      assertEquals((short) (-1207), fraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.subtract((-399));
      Fraction fraction2 = fraction0.ONE_FIFTH.add(fraction1);
      Fraction fraction3 = fraction0.TWO_FIFTHS.multiply(fraction2);
      assertEquals(159.68, fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction(2283.511, (-560));
      Fraction fraction1 = fraction0.MINUS_ONE.multiply(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2283), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.multiply((-172));
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-8600.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1.0129027912496858E-9));
      Fraction fraction1 = fraction0.multiply((-1743));
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      long long0 = fraction0.longValue();
      assertEquals(25.0, fraction0.percentageValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.multiply(38);
      long long0 = fraction1.longValue();
      assertEquals(19.0, fraction1.doubleValue(), 0.01);
      assertEquals(19, fraction1.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(19L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.reciprocal();
      int int0 = fraction1.intValue();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.TWO;
      Fraction fraction2 = fraction0.ONE_QUARTER.subtract(fraction1);
      Fraction fraction3 = fraction1.multiply(fraction2);
      int int0 = fraction3.intValue();
      assertEquals(4, fraction2.getDenominator());
      assertEquals((-3.5F), fraction3.floatValue(), 0.01F);
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      int int0 = fraction0.getNumerator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1308.297353141596));
      Fraction fraction1 = fraction0.ZERO.abs();
      float float0 = fraction1.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(454, fraction0.getDenominator());
      assertEquals((-130829.73568281939), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2533), 1418);
      float float0 = fraction0.floatValue();
      assertEquals((-2533), fraction0.getNumerator());
      assertEquals((-1.7863188F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = new Fraction(3);
      Fraction fraction1 = fraction0.ZERO.divide((-524));
      double double0 = fraction1.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)3, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(37, 37);
      Fraction fraction1 = fraction0.negate();
      double double0 = fraction1.doubleValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2533), 1418);
      Fraction fraction1 = Fraction.getReducedFraction(224, 4);
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals((-3134.9388077378603), fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2533), 1418);
      Fraction fraction1 = new Fraction(1418, 1418);
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals((-0.5598105F), fraction2.floatValue(), 0.01F);
      assertEquals((-2533), fraction0.getNumerator());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.subtract((-399));
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals(39900.0, fraction2.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = new Fraction(2);
      Fraction fraction1 = fraction0.MINUS_ONE.divide(1);
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1L), fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      assertSame(fraction1, fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.MINUS_ONE.add(0);
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.multiply((-3101));
      Fraction fraction2 = fraction1.add((-3101));
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.THREE_QUARTERS.add(4372);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(437275.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.subtract(1073736455);
      Fraction fraction2 = fraction1.abs();
      assertEquals(1.0737364545E9, fraction2.doubleValue(), 0.01);
      assertEquals((-1.07373645E9F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 38);
      Fraction fraction1 = fraction0.abs();
      assertEquals((-5.6512727578947365E7), fraction0.doubleValue(), 0.01);
      assertEquals(5.6512727578947365E7, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
      try { 
        fraction0.subtract((-3343));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(37, 37);
      // Undeclared exception!
      try { 
        fraction0.divide(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 1/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(37, 37);
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        fraction0.MINUS_ONE.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
      try { 
        fraction0.add(1431655765);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 51);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/51, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-31), (-31));
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction(886214319);
      // Undeclared exception!
      try { 
        fraction0.multiply(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2477), (-2125791892));
      assertEquals(1.1652128363654518E-6, fraction0.doubleValue(), 0.01);
      assertEquals(2125791892, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = new Fraction(252, 252);
      double double0 = fraction0.doubleValue();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1308.297353141596));
      Fraction fraction1 = fraction0.ZERO.abs();
      String string0 = fraction1.toString();
      assertEquals((-593967), fraction0.getNumerator());
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      String string0 = fraction0.ONE_FIFTH.toString();
      assertEquals("1 / 5", string0);
      assertEquals(9223372036854775807L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2630));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,630, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(5, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 5/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(252, Integer.MIN_VALUE);
      assertEquals(536870912, fraction0.getDenominator());
      assertEquals((-1.1734664440155029E-7), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 2414);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(1, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = new Fraction(1124.0);
      Fraction fraction1 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.THREE_FIFTHS.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = new Fraction(5);
      // Undeclared exception!
      try { 
        fraction0.ONE.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1372.0), 1197.63739285, 94);
      // Undeclared exception!
      try { 
        fraction0.THREE_FIFTHS.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = new Fraction((-640), 2284);
      Fraction fraction2 = fraction0.THREE_FIFTHS.add(fraction1);
      Fraction fraction3 = Fraction.getReducedFraction((-1), (-5150));
      Fraction fraction4 = fraction2.subtract((-2270));
      // Undeclared exception!
      try { 
        fraction4.add(fraction3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 6,676,216,461
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = fraction0.TWO_THIRDS.add(fraction1);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(100.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1308.297353141596));
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals((-2616.5947F), fraction1.floatValue(), 0.01F);
      assertEquals(227, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction(252, 252);
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        fraction0.TWO_FIFTHS.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 51);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/51, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = new Fraction(4);
      Fraction fraction1 = new Fraction((-1.0129027912496858E-9));
      Fraction fraction2 = fraction0.ONE_QUARTER.multiply(fraction1);
      boolean boolean0 = fraction2.equals(fraction1);
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(boolean0);
      assertEquals((byte)4, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.divide(2);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.125, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = new Fraction(810.777295);
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
      assertEquals(81077.72925764191, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1308.297353141596));
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals((-593967), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = new Fraction(3);
      Fraction fraction1 = fraction0.ONE_THIRD.negate();
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(3, fraction0.getNumerator());
      assertEquals((-0.33333334F), fraction1.floatValue(), 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = new Fraction(810.777295);
      Fraction fraction1 = fraction0.divide(fraction0);
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = new Fraction(3);
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(300.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-2144883115), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,144,883,115/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, (-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = new Fraction(2283.511, (-560));
      Fraction fraction1 = fraction0.divide(624);
      assertEquals(3.6586537F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-2650.1942180765623), (-2650.1942180765623), (-3381));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -2,650.194 to fraction after -3,381 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(100.0, 155);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 100 to fraction (-99/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = new Fraction(4);
      double double0 = fraction0.percentageValue();
      assertEquals(400.0, double0, 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      float float0 = fraction0.floatValue();
      assertEquals(0.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2533), 1418);
      int int0 = fraction0.getNumerator();
      assertEquals((-178.63187588152329), fraction0.percentageValue(), 0.01);
      assertEquals((-2533), int0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1308.297353141596));
      fraction0.hashCode();
      assertEquals((-593967), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      int int0 = fraction0.intValue();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1308.297353141596));
      long long0 = fraction0.longValue();
      assertEquals(454, fraction0.getDenominator());
      assertEquals((-130829.73568281939), fraction0.percentageValue(), 0.01);
      assertEquals((-1308L), long0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      fraction0.getField();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
      try { 
        fraction0.ZERO.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = new Fraction(3);
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
      assertEquals(3, fraction0.intValue());
  }
}
