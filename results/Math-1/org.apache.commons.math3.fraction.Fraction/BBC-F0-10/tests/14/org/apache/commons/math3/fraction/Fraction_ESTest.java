/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:31:05 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = new Fraction((-835), (-78));
      String string0 = fraction0.ONE_QUARTER.toString();
      assertEquals("1 / 4", string0);
      assertEquals(1070.5128205128203, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = new Fraction(1539);
      Fraction fraction1 = fraction0.ONE_THIRD.subtract(fraction0);
      Fraction fraction2 = fraction1.THREE_FIFTHS.multiply(fraction1);
      Fraction fraction3 = fraction0.ONE_QUARTER.divide(fraction2);
      assertEquals((-4616), fraction2.getNumerator());
      assertEquals((-2.7079723E-4F), fraction3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ONE_THIRD.multiply(fraction0);
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MAX_VALUE);
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = new Fraction(1539);
      Fraction fraction1 = fraction0.ONE_THIRD.subtract(fraction0);
      Fraction fraction2 = fraction1.TWO_THIRDS.multiply(1539);
      Fraction fraction3 = fraction2.subtract(fraction1);
      assertEquals((-4616), fraction1.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(2564.6667F, fraction3.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction(57.2957763671875);
      Fraction fraction1 = fraction0.subtract(15);
      assertEquals(42.29577464788732, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      Fraction fraction2 = fraction1.subtract(0);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1));
      Fraction fraction1 = fraction0.reciprocal();
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals((byte) (-1), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction(-0.0, Integer.MIN_VALUE);
      assertEquals(0, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction((-4394), 4);
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(0L, fraction1.longValue());
      assertEquals((-2), fraction1.getNumerator());
      assertEquals((-109850.0), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction(1539);
      Fraction fraction1 = fraction0.ONE_HALF.divide(2);
      Fraction fraction2 = fraction1.reciprocal();
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)4, fraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = new Fraction(707.9761061806317);
      Fraction fraction1 = fraction0.TWO.divide(1414);
      Fraction fraction2 = fraction1.reciprocal();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.0014144271570014145, fraction1.doubleValue(), 0.01);
      assertEquals(70797.6109215017, fraction0.percentageValue(), 0.01);
      assertEquals((byte) (-61), fraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(25, 25);
      double double0 = fraction0.percentageValue();
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.negate();
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = new Fraction((-4394), 4);
      Fraction fraction1 = fraction0.negate();
      assertEquals(109850.0, fraction1.percentageValue(), 0.01);
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte) (-74), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      assertEquals((-1L), fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.add(3193);
      Fraction fraction2 = fraction0.multiply(fraction1);
      Fraction fraction3 = fraction2.multiply(fraction0);
      assertEquals(798.3125F, fraction2.floatValue(), 0.01F);
      assertEquals(199L, fraction3.longValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.ONE_THIRD.multiply((-395));
      assertEquals((-131.66667F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.multiply((-1266));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = new Fraction(1539);
      Fraction fraction1 = fraction0.ONE_QUARTER.multiply(1539);
      assertEquals(384.75F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      long long0 = fraction0.longValue();
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = new Fraction((-796.65), (-298));
      long long0 = fraction0.longValue();
      assertEquals((-797L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ONE_QUARTER.add(fraction0);
      int int0 = fraction1.intValue();
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      int int0 = fraction0.intValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(879, 2147483611);
      int int0 = fraction0.getNumerator();
      assertEquals(4.093162785958044E-5, fraction0.percentageValue(), 0.01);
      assertEquals(879, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1743.94899834934));
      int int0 = fraction0.getNumerator();
      assertEquals((-786521), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0, 632.57925, 199);
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = new Fraction(1539);
      float float0 = fraction0.floatValue();
      assertEquals(1539.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ONE_FIFTH.subtract(464);
      double double0 = fraction1.doubleValue();
      assertEquals((-463.8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = new Fraction((-835), (-78));
      Fraction fraction1 = Fraction.TWO_THIRDS;
      Fraction fraction2 = fraction0.MINUS_ONE.divide(fraction1);
      assertEquals(835, fraction0.getNumerator());
      assertEquals((-1.5F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = new Fraction(707.9761061806317);
      Fraction fraction1 = fraction0.divide(3);
      assertEquals(23599.203640500567, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = new Fraction(1539);
      Fraction fraction1 = fraction0.ONE_HALF.divide(2);
      Fraction fraction2 = fraction0.THREE_FIFTHS.divide(fraction1);
      assertEquals(240.0, fraction2.percentageValue(), 0.01);
      assertEquals(25.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, 2097);
      Fraction fraction1 = fraction0.divide(2097);
      assertEquals((-488.35203821159234), fraction1.doubleValue(), 0.01);
      assertEquals((-1024074L), fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(598);
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction fraction3 = fraction2.divide(294);
      assertEquals((-203.40136054421768), fraction3.percentageValue(), 0.01);
      assertEquals((-299), fraction3.getNumerator());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ONE_FIFTH.subtract(464);
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-463.05), fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction(1539);
      Fraction fraction1 = fraction0.MINUS_ONE.add((-2607));
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2608.0F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1163);
      Fraction fraction1 = fraction0.ZERO.abs();
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((-1.846503566638005E8), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = new Fraction(-0.0, Integer.MIN_VALUE);
      Fraction fraction1 = fraction0.abs();
      assertEquals((byte) (-1), fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1743.94899834934));
      Fraction fraction1 = Fraction.getReducedFraction(25, (-2147483644));
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0, 632.57925, 199);
      // Undeclared exception!
      try { 
        fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1743.94899834934));
      // Undeclared exception!
      try { 
        fraction0.multiply(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        fraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1177, 1177);
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1177);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1,177, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.0, 1124);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2), (-2));
      Fraction fraction1 = Fraction.ONE_QUARTER;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertFalse(boolean0);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(133, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 133/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = new Fraction(1539);
      double double0 = fraction0.doubleValue();
      assertEquals(1539.0, double0, 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      String string0 = fraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1743.94899834934));
      String string0 = fraction0.toString();
      assertEquals("-786521 / 451", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-502));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-502, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(879, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 879/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-1));
      assertEquals(0.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(3, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 3/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        fraction0.ZERO.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(598);
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(598.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      // Undeclared exception!
      try { 
        fraction0.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = new Fraction(3804.7586991515495);
      // Undeclared exception!
      try { 
        fraction0.ONE_QUARTER.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, Integer.MAX_VALUE);
      Fraction fraction1 = Fraction.getReducedFraction(Integer.MAX_VALUE, 2049870754);
      // Undeclared exception!
      try { 
        fraction1.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 107,375,207,285,377
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, Integer.MAX_VALUE);
      Fraction fraction1 = fraction0.ONE_FIFTH.add(fraction0);
      assertEquals(20.000999999999998, fraction1.percentageValue(), 0.01);
      assertEquals(100000, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, Integer.MAX_VALUE);
      Fraction fraction1 = new Fraction(7.848361555046424E-8, 0);
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.getReducedFraction(1167, 1167);
      boolean boolean0 = fraction0.equals(fraction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.getReducedFraction(25, 25);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertFalse(boolean0);
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      boolean boolean0 = fraction0.equals("U>EI'\"Pu2kaSx,d#;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1745.0948514764302));
      boolean boolean0 = fraction0.equals(fraction0);
      assertEquals((-643940), fraction0.getNumerator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1743.94899834934));
      Fraction fraction1 = Fraction.getReducedFraction(25, 25);
      fraction0.equals(fraction1);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.THREE_QUARTERS.abs();
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) (-134));
      Fraction fraction1 = fraction0.multiply(fraction0);
      Fraction fraction2 = fraction0.add(fraction1);
      int int0 = fraction0.compareTo(fraction2);
      assertEquals(17822, fraction2.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) (-134));
      Fraction fraction1 = fraction0.multiply(fraction0);
      Fraction fraction2 = fraction1.abs();
      assertEquals((-134), fraction0.getNumerator());
      assertEquals(1795600.0, fraction1.percentageValue(), 0.01);
      assertEquals(17956, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(1208, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 1,208/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-2948.91461), (-13.34698687676769), Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -2,948.915 to fraction after -2,147,483,648 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-1743.94899834934), (-1744.949F), 25);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1,743.949 to fraction (-156,418,271,816/89,691,999)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1743.94899834934));
      double double0 = fraction0.percentageValue();
      assertEquals((-174394.9002217295), double0, 0.01);
      assertEquals(451, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1743.94899834934));
      float float0 = fraction0.floatValue();
      assertEquals(451, fraction0.getDenominator());
      assertEquals((-1743.949F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = new Fraction(1539);
      fraction0.hashCode();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(153900.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.intValue();
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1743.94899834934));
      Fraction fraction1 = fraction0.ONE_QUARTER.subtract(25);
      assertEquals(4, fraction1.getDenominator());
      assertEquals((-24.75F), fraction1.floatValue(), 0.01F);
      assertEquals((-786521), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = new Fraction(707.9761061806317);
      long long0 = fraction0.longValue();
      assertEquals(70797.6109215017, fraction0.percentageValue(), 0.01);
      assertEquals(707L, long0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      FractionField fractionField0 = fraction0.TWO_FIFTHS.getField();
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1743.94899834934));
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.divide(294);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, Integer.MAX_VALUE);
      Fraction fraction1 = fraction0.ZERO.add(0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(100000, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1743.94899834934));
      int int0 = fraction0.getDenominator();
      assertEquals(451, int0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Fraction fraction0 = new Fraction(-0.0, Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.multiply(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -2,147,483,648/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }
}
