/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:01:19 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2677), (-2677));
      Fraction fraction1 = fraction0.ONE_THIRD.add((-2677));
      String string0 = fraction1.toString();
      assertEquals("-8030 / 3", string0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1703, 1703);
      Fraction fraction1 = fraction0.THREE_FIFTHS.abs();
      Fraction fraction2 = Fraction.TWO_THIRDS;
      Fraction fraction3 = fraction2.reciprocal();
      boolean boolean0 = fraction1.equals(fraction3);
      assertFalse(boolean0);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(3, fraction3.getNumerator());
      assertFalse(fraction3.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = new Fraction(76, 5);
      Fraction fraction1 = Fraction.MINUS_ONE;
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals(76, fraction0.getNumerator());
      assertEquals(1520.0, fraction0.percentageValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2355));
      Fraction fraction1 = fraction0.THREE_QUARTERS.subtract(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(235575.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE_FIFTH.subtract(fraction0);
      assertEquals(0.2, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.THREE_FIFTHS.add(fraction0);
      Fraction fraction2 = fraction0.ZERO.subtract(fraction1);
      assertEquals(7, fraction1.getNumerator());
      assertEquals((-140.0), fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      Fraction fraction1 = fraction0.subtract((-796));
      assertEquals(796.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2355));
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction(421);
      double double0 = fraction0.percentageValue();
      assertEquals(42100.0, double0, 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2677), (-2677));
      Fraction fraction1 = fraction0.ONE_THIRD.negate();
      double double0 = fraction1.percentageValue();
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals((-33.33333333333333), double0, 0.01);
      assertEquals((-1), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      Fraction fraction1 = fraction0.negate();
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = new Fraction(76, 5);
      Fraction fraction1 = fraction0.negate();
      assertEquals((-76), fraction1.getNumerator());
      assertEquals(1520.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction(76, 5);
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(506.66666666666663, fraction2.percentageValue(), 0.01);
      assertEquals(15L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = new Fraction(723, 136);
      Fraction fraction1 = new Fraction(2437.2417743374, 723);
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(1295680.737187579, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.multiply(1);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.multiply(1);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      long long0 = fraction0.longValue();
      assertEquals(75.0, fraction0.percentageValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      long long0 = fraction0.longValue();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.ONE.divide(1);
      int int0 = fraction1.intValue();
      assertEquals(1, int0);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1918), (-1476));
      Fraction fraction1 = fraction0.multiply((-1476));
      int int0 = fraction1.intValue();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals((-1918), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1106), 3);
      assertEquals((-36866.66666666667), fraction0.percentageValue(), 0.01);
      assertEquals(3, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = new Fraction(421);
      int int0 = fraction0.getNumerator();
      assertEquals(421, int0);
      assertEquals(421, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      int int0 = fraction0.getNumerator();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
      assertEquals(0.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2355));
      float float0 = fraction0.floatValue();
      assertEquals((-2355.0F), float0, 0.01F);
      assertEquals((-2355), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = new Fraction(421);
      double double0 = fraction0.doubleValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(421.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      Fraction fraction1 = fraction0.add(Integer.MIN_VALUE);
      double double0 = fraction1.doubleValue();
      assertEquals((-2.147483648E9), double0, 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.divide(fraction0);
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals((-1), fraction2.getNumerator());
      assertEquals(1, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction(5383.5569114, (-1378));
      Fraction fraction1 = Fraction.MINUS_ONE;
      Fraction fraction2 = fraction0.ONE.divide(fraction1);
      assertTrue(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = new Fraction(421);
      Fraction fraction1 = fraction0.ZERO.divide(421);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(421, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1918), (-1476));
      Fraction fraction1 = fraction0.multiply((-1476));
      Fraction fraction2 = fraction1.divide(2);
      assertEquals((-959.0F), fraction2.floatValue(), 0.01F);
      assertEquals((short) (-1918), fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1624.03996383324), (-3293));
      Fraction fraction1 = fraction0.divide(170);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-325), fraction1.getNumerator());
      assertEquals(34, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1918), (-1476));
      Fraction fraction1 = fraction0.multiply((-1476));
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals((-1918), fraction1.getNumerator());
      assertEquals((-1916.7006F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1703, 1703);
      Fraction fraction1 = fraction0.add((-1512));
      assertEquals((-1511), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      Fraction fraction1 = fraction0.ONE_FIFTH.add(716408331);
      Fraction fraction2 = fraction1.subtract(716408331);
      assertEquals(1, fraction0.getNumerator());
      assertEquals((-858993459), fraction2.getNumerator());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((byte) (-40), fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction(217);
      Fraction fraction1 = fraction0.multiply(217);
      Fraction fraction2 = fraction1.abs();
      assertEquals(217, fraction0.getNumerator());
      assertEquals((short) (-18447), fraction2.shortValue());
      assertEquals(47089L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction(421);
      Fraction fraction1 = fraction0.ONE.abs();
      assertEquals(421, fraction0.getNumerator());
      assertEquals(421L, fraction0.longValue());
      assertEquals(1L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.ONE_FIFTH.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1173), (-967));
      Fraction fraction1 = fraction0.multiply(2967);
      // Undeclared exception!
      try { 
        fraction1.multiply(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1173), (-967));
      // Undeclared exception!
      try { 
        fraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1,173/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-796), Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      Fraction fraction1 = fraction0.add(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction1.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -2,147,483,648 + -2,147,483,648
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      Fraction fraction1 = fraction0.add(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction1.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction(421);
      Fraction fraction1 = fraction0.MINUS_ONE.negate();
      assertEquals(421, fraction0.getNumerator());
      assertEquals(1, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-796), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -796/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      double double0 = fraction0.doubleValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      String string0 = fraction0.ONE_HALF.toString();
      assertEquals(1, fraction0.getDenominator());
      assertEquals("1 / 2", string0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(51, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 51/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-1035));
      assertEquals(0, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(1, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      Fraction fraction1 = Fraction.ONE_HALF;
      Fraction fraction2 = fraction0.divide(fraction1);
      assertTrue(fraction2.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.041666663879186654, 0.097, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        fraction0.ONE_QUARTER.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.041666663879186654, 0.097, Integer.MAX_VALUE);
      Fraction fraction1 = new Fraction(5, 37);
      Fraction fraction2 = fraction0.ONE_FIFTH.multiply(fraction1);
      assertEquals(2.7027027027027026, fraction2.percentageValue(), 0.01);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.041666663879186654, 0.097, Integer.MAX_VALUE);
      Fraction fraction1 = fraction0.ONE_FIFTH.multiply(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2843, 2147483614);
      // Undeclared exception!
      try { 
        fraction0.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 5);
      Fraction fraction1 = Fraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 2,147,483,649
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      Fraction fraction1 = fraction0.add(Integer.MIN_VALUE);
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals((-2.14748365E9F), fraction2.floatValue(), 0.01F);
      assertSame(fraction2, fraction1);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction(152);
      Fraction fraction1 = fraction0.subtract(152);
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals((-152), fraction2.getNumerator());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction(152);
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1152, 1152);
      Fraction fraction1 = fraction0.divide(1152);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(0.08680555555555555, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertFalse(boolean0);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      Fraction fraction1 = fraction0.add(0);
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertTrue(boolean0);
      assertEquals(0, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2677), (-2677));
      Fraction fraction1 = fraction0.add(31);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(3200.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction0.intValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.THREE_QUARTERS.divide((-5100));
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-0.014705882352941175), fraction1.percentageValue(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      Fraction fraction1 = Fraction.getReducedFraction((-796), Integer.MIN_VALUE);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1), int0);
      assertEquals(3.7066638469696045E-7, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(306, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 306/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-2483.7), (-2483.7), (-1006));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -2,483.7 to fraction after -1,006 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(152.0F, (-790));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 152 to fraction (-151/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MAX_VALUE, (-796), (-2677));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = new Fraction(152);
      float float0 = fraction0.floatValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(152.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      int int0 = fraction0.getNumerator();
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      fraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      int int0 = fraction0.intValue();
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
      try { 
        fraction0.subtract(716408331);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = new Fraction(421);
      long long0 = fraction0.longValue();
      assertEquals(421, fraction0.getNumerator());
      assertEquals(421L, long0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      fraction0.getField();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 5);
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals((-4.294967296E8), fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      Fraction fraction1 = fraction0.add(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction1.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      int int0 = fraction0.getDenominator();
      assertEquals(0, int0);
      assertEquals(Double.POSITIVE_INFINITY, fraction0.percentageValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, (-796));
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertSame(fraction1, fraction0);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }
}
