/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:04:07 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1153), 37);
      Fraction fraction1 = fraction0.THREE_FIFTHS.divide(fraction0);
      assertEquals(37, fraction0.getDenominator());
      assertEquals((-0.01925412F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      fraction0.hashCode();
      assertEquals(100.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1153), 37);
      Fraction fraction1 = Fraction.ONE_FIFTH;
      Fraction fraction2 = fraction0.TWO.reciprocal();
      boolean boolean0 = fraction1.equals(fraction2);
      assertEquals((-1153), fraction0.getNumerator());
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(boolean0);
      assertEquals(0.5, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1216));
      Fraction fraction1 = Fraction.ONE_FIFTH;
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertEquals((byte)64, fraction0.byteValue());
      assertEquals((-1216), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals((-1.5), fraction2.doubleValue(), 0.01);
      assertEquals((-3), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1153), 37);
      Fraction fraction1 = fraction0.MINUS_ONE.multiply(fraction0);
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals(2306, fraction2.getNumerator());
      assertEquals((-1153), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.ONE_QUARTER.subtract((-3157));
      assertEquals(4, fraction1.getDenominator());
      assertEquals(3157.25F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.subtract(25);
      assertEquals((-2450.0), fraction1.percentageValue(), 0.01);
      assertEquals((-49), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 2815);
      assertEquals(Double.POSITIVE_INFINITY, fraction0.percentageValue(), 0.01);
      
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.TWO_FIFTHS.reciprocal();
      fraction1.reciprocal();
      assertEquals(2.5F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = new Fraction(37, 37);
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction fraction3 = fraction2.reciprocal();
      assertEquals(5, fraction2.getDenominator());
      assertEquals((-1.25), fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3157));
      double double0 = fraction0.percentageValue();
      assertEquals((-315700.0), double0, 0.01);
      assertEquals((-3157), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.ZERO.negate();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MAX_VALUE, (-508));
      Fraction fraction1 = fraction0.negate();
      assertEquals((-2147483647), fraction0.getNumerator());
      assertEquals(4.2273300137795275E8, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.TWO_FIFTHS.reciprocal();
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals(2, fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(5, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 31);
      Fraction fraction1 = Fraction.ONE;
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals((-6.927366606451612E9), fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.ONE_FIFTH.add(fraction0);
      Fraction fraction2 = fraction1.multiply(1);
      assertTrue(fraction2.equals((Object)fraction1));
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.multiply((-2444));
      assertEquals((-195520.0), fraction1.percentageValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      long long0 = fraction0.longValue();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.TWO.negate();
      long long0 = fraction1.longValue();
      assertEquals((-2L), long0);
      assertEquals((-2), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      int int0 = fraction0.intValue();
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1891.05980958994));
      int int0 = fraction0.intValue();
      assertEquals((-189105.98086124402), fraction0.percentageValue(), 0.01);
      assertEquals((-790463), fraction0.getNumerator());
      assertEquals((-1891), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.multiply(0);
      int int0 = fraction1.getNumerator();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1153), 37);
      int int0 = fraction0.getNumerator();
      assertEquals((-1153), int0);
      assertEquals((-3116.2162162162163), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      float float0 = fraction0.floatValue();
      assertEquals(0.4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.subtract(4539);
      float float0 = fraction1.floatValue();
      assertEquals((-4538.5F), float0, 0.01F);
      assertEquals(2, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction0.add(fraction1);
      double double0 = fraction2.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals((short)1, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      double double0 = fraction1.doubleValue();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.MINUS_ONE.divide(fraction0);
      assertEquals((-2), fraction1.getNumerator());
      assertEquals((-2), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.divide(1949);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.divide(2);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.divide((-1));
      assertEquals((-100.0), fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1209);
      Fraction fraction1 = Fraction.TWO_THIRDS;
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(1209, fraction0.getDenominator());
      assertEquals((-715827614), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = fraction0.ZERO.add(0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals(10000.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.add((-2444));
      Fraction fraction2 = fraction1.negate();
      assertEquals(5, fraction1.getDenominator());
      assertEquals(12216, fraction2.getNumerator());
      assertEquals((-2443.2F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction(206, 206);
      Fraction fraction1 = fraction0.add(206);
      assertEquals(207, fraction1.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.ZERO.abs();
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction(1780);
      Fraction fraction1 = fraction0.subtract(1780);
      // Undeclared exception!
      try { 
        fraction1.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1209);
      // Undeclared exception!
      try { 
        fraction0.TWO_THIRDS.divide(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 2/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.negate();
      String string0 = fraction1.toString();
      assertEquals("-4 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 31);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/31, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      double double0 = fraction0.doubleValue();
      assertEquals(0.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      String string0 = fraction0.TWO_QUARTERS.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-721));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-721, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(301, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 301/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.getReducedFraction(0, 3);
      // Undeclared exception!
      try { 
        fraction0.THREE_QUARTERS.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1153), 37);
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals(0, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1153), 37);
      // Undeclared exception!
      try { 
        fraction0.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 2815);
      // Undeclared exception!
      try { 
        fraction0.ONE_HALF.multiply(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1209);
      // Undeclared exception!
      try { 
        fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -4,294,967,296
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.subtract(fraction0);
      Fraction fraction2 = Fraction.getReducedFraction(4, (-2368));
      Fraction fraction3 = fraction2.multiply(fraction1);
      assertEquals(0.0, fraction3.percentageValue(), 0.01);
      assertEquals((-0.0016891892F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.ONE_FIFTH.add(fraction0);
      String string0 = fraction1.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.getReducedFraction(0, 2996);
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1216));
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1216), fraction0.intValue());
      assertEquals(1216, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction1.add(fraction0);
      assertSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.FOUR_FIFTHS.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.MINUS_ONE;
      Fraction fraction2 = fraction1.abs();
      boolean boolean0 = fraction2.equals(fraction0);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.MINUS_ONE;
      Fraction fraction2 = fraction1.abs();
      boolean boolean0 = fraction2.equals(fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction2));
      assertEquals(1, fraction2.getDenominator());
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.MINUS_ONE;
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.multiply(Integer.MAX_VALUE);
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, int0);
      assertEquals(2.147483647E9, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.getReducedFraction((-4217), 1209);
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals((-348.8006617038875), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 2815);
      Fraction fraction1 = fraction0.abs();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(Double.POSITIVE_INFINITY, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, 2419);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/2,419, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-1882), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -1,882/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = new Fraction(6, (-3190));
      assertEquals(1595, fraction0.getDenominator());
      assertEquals((-0.0018808778F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = new Fraction(1401.785605562808, (-48));
      assertEquals((short)1401, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(2923.6298413102, (-2.8), 5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 2,923.63 to fraction after 5 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-5915.33), (-5915.33), 2837);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -5,915.33 to fraction (-813,298,574,982,070/137,489,975,197)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.0, 1260);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      double double0 = fraction0.percentageValue();
      assertEquals(80.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      int int0 = fraction0.getNumerator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      int int0 = fraction0.intValue();
      assertEquals(50.0, fraction0.percentageValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 2815);
      // Undeclared exception!
      try { 
        fraction0.subtract(1827);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MAX_VALUE);
      assertEquals(2147483647L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      long long0 = fraction0.longValue();
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MAX_VALUE, (-508));
      fraction0.getField();
      assertEquals(508, fraction0.getDenominator());
      assertEquals((-4227330.0137795275), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 2815);
      // Undeclared exception!
      try { 
        fraction0.ONE.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 2815);
      // Undeclared exception!
      try { 
        fraction0.add(2815);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      int int0 = fraction0.getDenominator();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 2815);
      // Undeclared exception!
      try { 
        fraction0.multiply(1827);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1,827/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }
}
