/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:50:33 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2245), Integer.MAX_VALUE);
      String string0 = fraction0.toString();
      assertEquals("-2245 / 2147483647", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.TWO_THIRDS;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = new Fraction(2653);
      Fraction fraction1 = fraction0.multiply((-1));
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2653, fraction0.getNumerator());
      assertEquals((-2653L), fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(5, 959);
      Fraction fraction1 = fraction0.multiply(227);
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals((-1.1783108F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = new Fraction(0.0, 0.6816387176513672, 2);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      
      Fraction fraction2 = fraction0.ZERO.subtract(fraction1);
      assertTrue(fraction2.equals((Object)fraction1));
      assertNotSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction((-5309.72977199911));
      Fraction fraction1 = fraction0.ONE_FIFTH.subtract(fraction0);
      assertEquals(16407683, fraction1.getNumerator());
      assertEquals(5309.9297F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1919), (-1919));
      Fraction fraction1 = fraction0.subtract(1);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.TWO_QUARTERS.subtract(774);
      Fraction fraction2 = fraction1.reciprocal();
      assertEquals(2, fraction1.getDenominator());
      assertEquals((-0.0012928249F), fraction2.floatValue(), 0.01F);
      assertEquals((-773.5F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      double double0 = fraction1.percentageValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-100.0), fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, 3);
      double double0 = fraction0.percentageValue();
      assertEquals(100.0, double0, 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1289), (-1289));
      Fraction fraction1 = fraction0.FOUR_FIFTHS.add((-1289));
      Fraction fraction2 = fraction1.negate();
      assertEquals(5, fraction1.getDenominator());
      assertEquals(6441, fraction2.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1289), (-1289));
      Fraction fraction1 = fraction0.negate();
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1289), (-1289));
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1289), (-1289));
      Fraction fraction1 = fraction0.FOUR_FIFTHS.add((-1289));
      Fraction fraction2 = fraction0.ONE_FIFTH.multiply(fraction1);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals((-257.64F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ZERO.negate();
      Fraction fraction2 = fraction1.multiply((-1073));
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1289), (-1289));
      long long0 = fraction0.longValue();
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1289), (-1289));
      Fraction fraction1 = fraction0.FOUR_FIFTHS.add((-1289));
      long long0 = fraction1.longValue();
      assertEquals((-6441), fraction1.getNumerator());
      assertEquals((-1288L), long0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1289), (-1289));
      int int0 = fraction0.intValue();
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.ZERO.subtract(Integer.MAX_VALUE);
      int int0 = fraction1.intValue();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-2147483647), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.MINUS_ONE.add((-1));
      int int0 = fraction1.getNumerator();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.subtract(5);
      float float0 = fraction1.floatValue();
      assertEquals((-4.4F), float0, 0.01F);
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1289), (-1289));
      double double0 = fraction0.doubleValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = new Fraction(0.0, 0.6931470632553101, Integer.MAX_VALUE);
      Fraction fraction2 = fraction1.divide(fraction0);
      assertTrue(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.getReducedFraction(1, (-1));
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals((-100.0), fraction2.percentageValue(), 0.01);
      assertEquals((-1), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE.divide(1);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.TWO_QUARTERS.subtract(2979);
      Fraction fraction2 = fraction1.divide(5);
      assertEquals((-595.7), fraction2.doubleValue(), 0.01);
      assertEquals((byte)94, fraction1.byteValue());
      assertEquals(10, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = new Fraction((-5309.72977199911));
      Fraction fraction1 = fraction0.FOUR_FIFTHS.add(1);
      assertEquals(180.0, fraction1.percentageValue(), 0.01);
      assertEquals((-3281413), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 37);
      Fraction fraction1 = fraction0.add(Integer.MIN_VALUE);
      assertEquals(37, fraction0.getDenominator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1289), (-1289));
      Fraction fraction1 = fraction0.FOUR_FIFTHS.add((-1289));
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals((-6441), fraction1.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-128720.0), fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1289), (-1289));
      Fraction fraction1 = fraction0.multiply((-2147483646));
      Fraction fraction2 = fraction1.abs();
      assertEquals(2.147483646E11, fraction2.percentageValue(), 0.01);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals((-2147483646), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.FOUR_FIFTHS.abs();
      assertEquals(4, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1289, 1289);
      Fraction fraction1 = fraction0.add(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        fraction1.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 1/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = Fraction.getReducedFraction((-2147483633), (-309));
      // Undeclared exception!
      try { 
        fraction0.FOUR_FIFTHS.multiply(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        fraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.subtract(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        fraction1.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      String string0 = fraction0.toString();
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      String string0 = fraction0.toString();
      assertEquals("3 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1609));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1,609, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-1609), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -1,609/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-1289));
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, 3);
      Fraction fraction1 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        fraction0.TWO.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        fraction0.TWO_THIRDS.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.TWO_THIRDS;
      Fraction fraction2 = fraction0.add(fraction1);
      Fraction fraction3 = Fraction.getReducedFraction(3188, 2040109465);
      // Undeclared exception!
      try { 
        fraction3.add(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 6,528,359,852
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.divide(10);
      Fraction fraction2 = fraction1.divide(fraction0);
      Fraction fraction3 = fraction1.THREE_FIFTHS.subtract(fraction2);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(50.0, fraction3.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = new Fraction(0.0);
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(893, 893);
      // Undeclared exception!
      try { 
        fraction0.TWO_QUARTERS.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = Fraction.getReducedFraction(1, (-1));
      boolean boolean0 = fraction0.equals(fraction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1, 1);
      Fraction fraction1 = Fraction.ONE_QUARTER;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.getReducedFraction(1, 1);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction(2653);
      boolean boolean0 = fraction0.equals(fraction0);
      assertEquals(2653, fraction0.getNumerator());
      assertEquals(265300.0, fraction0.percentageValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      boolean boolean0 = fraction0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.THREE_FIFTHS.subtract(fraction0);
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, int0);
      assertEquals(1.6F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.getReducedFraction(1, 1);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 647);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/647, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(3, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 3/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, (-1073));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1,073, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-693), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -693/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = new Fraction(1238.478547663727, 920);
      Fraction fraction1 = fraction0.ZERO.negate();
      Fraction fraction2 = fraction1.divide(252);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1238.4785F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)0, fraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(84.1541, 0L, (-2098));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 84.154 to fraction after -2,098 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) 4, 2393);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 4 to fraction (-3/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) (-2147483647), 1503);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,647 to fraction (-9,223,372,034,707,292,160/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      double double0 = fraction0.percentageValue();
      assertEquals((-100.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      float float0 = fraction0.floatValue();
      assertEquals(0.6F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      int int0 = fraction0.getNumerator();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      fraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      int int0 = fraction0.intValue();
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.THREE_QUARTERS.subtract((-2245));
      assertEquals(2245.75F, fraction1.floatValue(), 0.01F);
      assertEquals(8983, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(2.2666667F, fraction2.floatValue(), 0.01F);
      assertEquals(5, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      long long0 = fraction0.longValue();
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = new Fraction((-5309.72977199911));
      double double0 = fraction0.doubleValue();
      assertEquals((-5309.729773462783), double0, 0.01);
      assertEquals((-3281413), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147483647), (-1359));
      fraction0.ONE_QUARTER.getField();
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(1580194.0007358352, fraction0.doubleValue(), 0.01);
      assertEquals(1580194L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 37);
      // Undeclared exception!
      try { 
        fraction0.TWO_THIRDS.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      int int0 = fraction0.getDenominator();
      assertEquals(5, int0);
  }
}
