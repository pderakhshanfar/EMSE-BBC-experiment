/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:47:18 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      String string0 = fraction0.toString();
      assertEquals("2 / 3", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = new Fraction(309.3059101964);
      Fraction fraction1 = fraction0.THREE_QUARTERS.divide(2115);
      Fraction fraction2 = Fraction.ONE_HALF;
      boolean boolean0 = fraction1.equals(fraction2);
      assertEquals(0.03546099290780142, fraction1.percentageValue(), 0.01);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(boolean0);
      assertEquals(389, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(55, 552);
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      Fraction fraction2 = fraction0.TWO_QUARTERS.multiply(fraction1);
      boolean boolean0 = fraction1.equals(fraction2);
      assertEquals(5, fraction2.getDenominator());
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(0.4F, fraction2.floatValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MAX_VALUE, 1, 1617);
      assertEquals(2.147483647E11, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.multiply(0);
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction(2088.96, 1.0E-5, 3);
      Fraction fraction1 = fraction0.MINUS_ONE.subtract(fraction0);
      assertEquals((-52249), fraction1.getNumerator());
      assertEquals((-2089.96F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.subtract(221);
      assertEquals((-1102), fraction1.getNumerator());
      assertEquals((-220.4), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4, (-398));
      double double0 = fraction0.percentageValue();
      assertEquals((-2), fraction0.getNumerator());
      assertEquals((-1.0050251256281406), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1210));
      Fraction fraction1 = fraction0.subtract((-1210));
      Fraction fraction2 = fraction1.negate();
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(5, (-1793));
      Fraction fraction1 = fraction0.negate();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1793, fraction1.getDenominator());
      assertEquals(0.002788622420524261, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.TWO.negate();
      fraction1.negate();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte) (-2), fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.add((-825));
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals(25, fraction2.getDenominator());
      assertEquals((-8246), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = new Fraction(992);
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.TWO.multiply(fraction1);
      assertEquals(992, fraction0.getNumerator());
      assertEquals((byte)1, fraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.subtract((-2555));
      Fraction fraction2 = fraction0.FOUR_FIFTHS.multiply(fraction1);
      assertEquals(2044.48, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = new Fraction(309.3059101964);
      Fraction fraction1 = fraction0.subtract(2115);
      Fraction fraction2 = fraction1.multiply(2);
      assertEquals((-702415), fraction1.getNumerator());
      assertEquals((-1404830), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.subtract(1617);
      Fraction fraction2 = fraction1.multiply(Integer.MAX_VALUE);
      assertEquals(3, fraction2.getDenominator());
      assertEquals((short)23462, fraction2.shortValue());
      assertEquals((-1616.3333333333333), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE.multiply(5);
      assertEquals(5, fraction1.getNumerator());
      assertEquals(5.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-743), 1511);
      long long0 = fraction0.longValue();
      assertEquals(1511, fraction0.getDenominator());
      assertEquals((-49.172733289212445), fraction0.percentageValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      int int0 = fraction0.intValue();
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3250), 2580);
      int int0 = fraction0.intValue();
      assertEquals((-125.96899224806202), fraction0.percentageValue(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ZERO.multiply((-875));
      int int0 = fraction1.getNumerator();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2804.310638));
      int int0 = fraction0.getNumerator();
      assertEquals((-659013), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      float float0 = fraction0.floatValue();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4, (-398));
      Fraction fraction1 = fraction0.subtract(fraction0);
      double double0 = fraction1.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-0.010050251256281407), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4, (-398));
      double double0 = fraction0.doubleValue();
      assertEquals(199, fraction0.getDenominator());
      assertEquals((-0.010050251256281407), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.subtract(1617);
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals((-2424.5), fraction2.doubleValue(), 0.01);
      assertEquals(3, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = new Fraction(992);
      Fraction fraction1 = fraction0.divide((-838));
      assertEquals((-118.37708830548925), fraction1.percentageValue(), 0.01);
      assertEquals(419, fraction1.getDenominator());
      assertEquals(992, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3250), 2580);
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals((-325), fraction0.getNumerator());
      assertEquals((-251.93798449612405), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2, (-1));
      Fraction fraction1 = fraction0.add(2);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.add((-1317791));
      assertEquals((-2635581), fraction1.getNumerator());
      assertEquals((-1.3177905E8), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1, (-838));
      Fraction fraction1 = fraction0.add(1);
      assertEquals(837, fraction1.getNumerator());
      assertEquals((-1), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.add(1269);
      assertEquals((short)1270, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4, (-398));
      Fraction fraction1 = Fraction.TWO;
      Fraction fraction2 = fraction0.add(fraction1);
      Fraction fraction3 = fraction2.subtract(fraction1);
      Fraction fraction4 = fraction2.divide(fraction3);
      Fraction fraction5 = fraction4.abs();
      assertEquals(198.0, fraction5.doubleValue(), 0.01);
      assertEquals((-2), fraction3.getNumerator());
      assertEquals((-198), fraction4.intValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      // Undeclared exception!
      try { 
        fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction(2088.96, 1.0E-5, 3);
      // Undeclared exception!
      try { 
        fraction0.multiply(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction(2088.96, 1.0E-5, 3);
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction(2088.96, 1.0E-5, 3);
      Fraction fraction1 = fraction0.reciprocal();
      // Undeclared exception!
      try { 
        fraction0.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 35);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/35, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = new Fraction(202, 202);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-3437), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -3,437/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 5);
      double double0 = fraction0.doubleValue();
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 5);
      String string0 = fraction0.toString();
      assertEquals("5", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3250), 2580);
      String string0 = fraction0.toString();
      assertEquals("-325 / 258", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1288));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1,288, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-569), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -569/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(3860, Integer.MIN_VALUE);
      assertEquals((-1.7974525690078735E-4), fraction0.percentageValue(), 0.01);
      assertEquals((-965), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 5);
      assertEquals(0.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(798, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 798/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.ZERO.abs();
      // Undeclared exception!
      try { 
        fraction1.TWO_FIFTHS.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2147483622, 25);
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(1, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 5);
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = new Fraction(5.125440338815679E-8);
      // Undeclared exception!
      try { 
        fraction0.TWO_QUARTERS.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-21475), (-943));
      Fraction fraction1 = fraction0.divide(102);
      Fraction fraction2 = fraction1.divide((-1936));
      Fraction fraction3 = fraction0.negate();
      // Undeclared exception!
      try { 
        fraction3.subtract(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -4,240,689,725
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.TWO_THIRDS.reciprocal();
      Fraction fraction2 = fraction1.add(fraction1);
      assertEquals(300.0, fraction2.percentageValue(), 0.01);
      assertEquals(3, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      Fraction fraction2 = fraction1.ONE_THIRD.add(fraction1);
      assertEquals(1.3333333333333333, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, 2);
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 5);
      Fraction fraction1 = fraction0.divide(5);
      Fraction fraction2 = Fraction.ONE_FIFTH;
      boolean boolean0 = fraction1.equals(fraction2);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(1, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3250), 2580);
      boolean boolean0 = fraction0.equals("-996205 / 258");
      assertFalse(boolean0);
      assertEquals((-125.96899224806202), fraction0.percentageValue(), 0.01);
      assertEquals((-325), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.subtract(1617);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1616.3333333333333), fraction1.doubleValue(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 5);
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(5.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2147483622, 25);
      Fraction fraction1 = fraction0.abs();
      assertEquals(8.589934488E9, fraction1.percentageValue(), 0.01);
      assertEquals((byte)80, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 25);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/25, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-943), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -943/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, (-2094));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,094, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = new Fraction(309.3059101964);
      long long0 = fraction0.longValue();
      assertEquals(309.3059F, fraction0.floatValue(), 0.01F);
      assertEquals(309L, long0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(1.0E-5, (-756.3540016), Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0 to fraction after -2,147,483,648 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.0, 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) 5, (-386));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 5 to fraction (9,223,372,036,854,775,804/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 5);
      double double0 = fraction0.percentageValue();
      assertEquals(500.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 5);
      float float0 = fraction0.floatValue();
      assertEquals(5.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      int int0 = fraction0.getNumerator();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      fraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 5);
      int int0 = fraction0.intValue();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3250), 2580);
      Fraction fraction1 = fraction0.subtract(3860);
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-3861.2598F), fraction1.floatValue(), 0.01F);
      assertEquals((-1), int0);
      assertEquals(258, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 5);
      Fraction fraction1 = fraction0.divide(fraction0);
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals(1, fraction1.getNumerator());
      assertFalse(boolean0);
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3250), 2580);
      long long0 = fraction0.longValue();
      assertEquals((-1.2596899224806202), fraction0.doubleValue(), 0.01);
      assertEquals(258, fraction0.getDenominator());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3250), 2580);
      fraction0.ONE.getField();
      assertEquals(258, fraction0.getDenominator());
      assertEquals((-1.2596899F), fraction0.floatValue(), 0.01F);
      assertEquals((-325), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1210));
      Fraction fraction1 = fraction0.subtract((-1210));
      Fraction fraction2 = fraction1.divide((-1210));
      assertTrue(fraction2.equals((Object)fraction1));
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 5);
      Fraction fraction1 = fraction0.divide(5);
      Fraction fraction2 = fraction0.divide(fraction1);
      boolean boolean0 = fraction2.equals(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.getNumerator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = new Fraction(5, (-687));
      Fraction fraction1 = fraction0.ZERO.add(57);
      assertEquals((-0.727802037845706), fraction0.percentageValue(), 0.01);
      assertEquals(687, fraction0.getDenominator());
      assertEquals((short)57, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3250), 2580);
      int int0 = fraction0.getDenominator();
      assertEquals(258, int0);
      assertEquals((-1.2596899224806202), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction1, fraction0);
  }
}
