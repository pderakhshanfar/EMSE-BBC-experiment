/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:24:39 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ONE.subtract(3786);
      Fraction fraction2 = fraction1.ONE_THIRD.add(fraction1);
      String string0 = fraction2.toString();
      assertEquals("-11354 / 3", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(419, 2);
      Fraction fraction1 = fraction0.TWO_THIRDS.multiply(fraction0);
      assertEquals(419, fraction0.getNumerator());
      assertEquals(13966.666666666666, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.ONE_HALF.subtract(31);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(2, fraction1.getDenominator());
      assertFalse(boolean0);
      assertEquals((-30.5), fraction1.doubleValue(), 0.01);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.multiply((-800));
      Fraction fraction2 = Fraction.ZERO;
      Fraction fraction3 = fraction2.subtract(fraction1);
      assertEquals(600, fraction3.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-600.0F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.TWO_QUARTERS.subtract((-336));
      assertEquals(673, fraction1.getNumerator());
      assertEquals(336.5, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction(59);
      Fraction fraction1 = fraction0.subtract(59);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction((-570), 743);
      Fraction fraction1 = fraction0.subtract((-1));
      assertEquals(0.23283984F, fraction1.floatValue(), 0.01F);
      assertEquals(743, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 801);
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
      
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, (-1));
      double double0 = fraction0.percentageValue();
      assertEquals((-300.0), double0, 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.5403022766113281, 788.25, 1560);
      Fraction fraction1 = fraction0.negate();
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(0.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = new Fraction(59);
      Fraction fraction1 = fraction0.ONE_FIFTH.negate();
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-20.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1573, 1573);
      Fraction fraction1 = fraction0.negate();
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-100.0), fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4363, 117);
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(1390.5887F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.TWO_THIRDS.subtract(263);
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals((-87.44444F), fraction2.floatValue(), 0.01F);
      assertEquals((-787), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1573, 1573);
      Fraction fraction1 = fraction0.multiply(1573);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(157300.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.TWO_THIRDS.reciprocal();
      long long0 = fraction1.longValue();
      assertEquals(3, fraction1.getNumerator());
      assertEquals(150.0, fraction1.percentageValue(), 0.01);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1859, (-1838));
      long long0 = fraction0.longValue();
      assertEquals((-1.0114255F), fraction0.floatValue(), 0.01F);
      assertEquals((-1859), fraction0.getNumerator());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      int int0 = fraction0.intValue();
      assertEquals(75.0, fraction0.percentageValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = new Fraction(59);
      int int0 = fraction0.intValue();
      assertEquals(59, int0);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-2434));
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.ONE_HALF.subtract(31);
      int int0 = fraction1.getNumerator();
      assertEquals((-61), int0);
      assertEquals((-30.5), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.7249995199969751, 0.7249995199969751, 3);
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = new Fraction(908.605290507, 256);
      float float0 = fraction0.floatValue();
      assertEquals(908.6053F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction((-765));
      float float0 = fraction0.floatValue();
      assertEquals((-765.0F), float0, 0.01F);
      assertEquals((-765), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4462, 4462);
      Fraction fraction1 = fraction0.multiply(0);
      double double0 = fraction1.doubleValue();
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = new Fraction(2776, 2776);
      double double0 = fraction0.doubleValue();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = new Fraction((-118.589), (-5023));
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((byte) (-119), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.7249995199969751, 0.7249995199969751, 3);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      
      Fraction fraction1 = new Fraction(1.01);
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals(0.990099F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction((-765));
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction1.THREE_QUARTERS.divide(fraction1);
      assertEquals((-57375.0), fraction2.percentageValue(), 0.01);
      assertEquals(765, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.divide((-8800324));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2147483646, 2028);
      Fraction fraction1 = fraction0.divide(2028);
      assertEquals(228488, fraction1.getDenominator());
      assertEquals(52214.84147964006, fraction1.percentageValue(), 0.01);
      assertEquals(1058916, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4363, 117);
      Fraction fraction1 = fraction0.divide((-1));
      assertEquals(117, fraction1.getDenominator());
      assertEquals(3729.059829059829, fraction0.percentageValue(), 0.01);
      assertEquals((-3729.059829059829), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.ONE_HALF.subtract(31);
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals((-30), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.ONE_HALF.add(fraction1);
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.add((-1));
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.add((-1));
      assertEquals((-66.66666666666666), fraction1.percentageValue(), 0.01);
      assertEquals(3, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-5361), (-1));
      Fraction fraction1 = fraction0.ONE.add((-1));
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals(536100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction(1220.8518);
      Fraction fraction1 = fraction0.add(1150);
      assertEquals(695, fraction1.getDenominator());
      assertEquals(1647742, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction1 = fraction0.ONE.abs();
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(2.147483647E11, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1573, 1573);
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 801);
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 801);
      // Undeclared exception!
      try { 
        fraction0.subtract(29);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = new Fraction(172, 5);
      // Undeclared exception!
      try { 
        fraction0.ZERO.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4462, 4462);
      Fraction fraction1 = fraction0.multiply(5283);
      Fraction fraction2 = fraction1.multiply(5283);
      // Undeclared exception!
      try { 
        fraction2.multiply(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1573, (-988));
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction1 = fraction0.MINUS_ONE.negate();
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals(1L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, 5);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/5, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -2,147,483,648/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MAX_VALUE, (-5680));
      double double0 = fraction0.doubleValue();
      assertEquals((-2147483647), fraction0.getNumerator());
      assertEquals((-378078.1068661972), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1, 1);
      String string0 = fraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MAX_VALUE);
      String string0 = fraction0.ONE_FIFTH.toString();
      assertEquals(1, fraction0.getDenominator());
      assertEquals("1 / 5", string0);
      assertEquals(2.147483647E11, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-4774));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-4,774, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-4316), Integer.MIN_VALUE);
      assertEquals(2.0097941160202026E-6, fraction0.doubleValue(), 0.01);
      assertEquals(536870912, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MAX_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 2,147,483,647/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.subtract(fraction0);
      // Undeclared exception!
      try { 
        fraction0.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        fraction0.ZERO.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 2147476002);
      Fraction fraction1 = Fraction.ONE_HALF;
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertSame(fraction2, fraction0);
      assertEquals(0, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction(453.244, 550.0, 5);
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals((byte) (-59), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.multiply(fraction0);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1, fraction1.getNumerator());
      assertEquals(25.0, fraction1.percentageValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.add(8388607);
      Fraction fraction2 = fraction0.divide((-4085));
      // Undeclared exception!
      try { 
        fraction1.add(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 34,267,461,637
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_HALF.subtract(fraction0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 801);
      Fraction fraction1 = new Fraction(801, (-887));
      Fraction fraction2 = fraction0.ONE_FIFTH.add(fraction1);
      assertEquals(887, fraction1.getDenominator());
      assertEquals((-0.703044F), fraction2.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = new Fraction(0.5403022766113281, 788.25, 1560);
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertSame(fraction2, fraction0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction1, fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1573, 1573);
      Fraction fraction1 = fraction0.subtract(fraction0);
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals(1, fraction2.getDenominator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, 1.0E-5, 409);
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(5, (-153));
      Fraction fraction1 = fraction0.multiply(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction1.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/153, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.multiply(532);
      Fraction fraction2 = fraction1.multiply(784);
      Fraction fraction3 = new Fraction((double) (-417088));
      boolean boolean0 = fraction2.equals(fraction3);
      assertTrue(boolean0);
      assertEquals((-53200.0), fraction1.percentageValue(), 0.01);
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction3.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-5361), (-1));
      Fraction fraction1 = Fraction.ZERO;
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals(5361, fraction0.getNumerator());
      assertEquals(5361, fraction0.intValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4363, 117);
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals(3729.059829059829, fraction0.percentageValue(), 0.01);
      assertEquals(4363, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1573, 1573);
      fraction0.equals(fraction0);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.getReducedFraction(1, 1);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1, fraction1.getDenominator());
      assertFalse(boolean0);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.getReducedFraction(5, (-153));
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-3.2679738562091507), fraction1.percentageValue(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals(2.147483647E11, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 801);
      Fraction fraction1 = fraction0.abs();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(Float.POSITIVE_INFINITY, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(152, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 152/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(1807.834526688249, (-1601.461511383), 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 1,807.835 to fraction after 0 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.0, 0.0, (-1981));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-1.0), 3381);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1 to fraction (-9,223,372,036,854,775,806/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MAX_VALUE);
      assertEquals(2147483647L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-5361), (-1));
      double double0 = fraction0.percentageValue();
      assertEquals(536100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 2147476002);
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      int int0 = fraction0.getNumerator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      fraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MAX_VALUE, (-5680));
      int int0 = fraction0.intValue();
      assertEquals((-2147483647), fraction0.getNumerator());
      assertEquals((-3.780781068661972E7), fraction0.percentageValue(), 0.01);
      assertEquals((-378078), int0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      long long0 = fraction0.longValue();
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      FractionField fractionField0 = fraction0.getField();
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        fraction0.THREE_FIFTHS.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 801);
      // Undeclared exception!
      try { 
        fraction0.add(616);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 801);
      int int0 = fraction0.getDenominator();
      assertEquals(0, int0);
      assertEquals(Double.POSITIVE_INFINITY, fraction0.percentageValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN, Double.NaN, 801);
      // Undeclared exception!
      try { 
        fraction0.ONE_FIFTH.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }
}
