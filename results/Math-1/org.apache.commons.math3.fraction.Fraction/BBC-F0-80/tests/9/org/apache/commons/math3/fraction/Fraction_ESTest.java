/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:12:16 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3018), 123);
      String string0 = fraction0.toString();
      assertEquals("-1006 / 41", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = Fraction.MINUS_ONE;
      Fraction fraction2 = fraction0.FOUR_FIFTHS.divide(fraction1);
      assertEquals((-0.8F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.ONE_HALF;
      Fraction fraction2 = fraction0.TWO.multiply(fraction1);
      assertEquals(100.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Fraction fraction0 = new Fraction(419, 419);
      Fraction fraction1 = fraction0.add(fraction0);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1L, fraction0.longValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Fraction fraction0 = new Fraction(2783.387954, 992.8210902635, 2062);
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(2783L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Fraction fraction0 = new Fraction(2047, (-795));
      Fraction fraction1 = fraction0.ONE_THIRD.subtract(fraction0);
      assertEquals(795, fraction0.getDenominator());
      assertEquals(2312, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.THREE_QUARTERS.subtract((-1184));
      assertEquals(4, fraction1.getDenominator());
      assertEquals(1184.75F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Fraction fraction0 = new Fraction(17212);
      Fraction fraction1 = fraction0.subtract(17212);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.ONE_THIRD.subtract(4);
      assertEquals(3, fraction1.getDenominator());
      assertEquals((-3.6666666666666665), fraction1.doubleValue(), 0.01);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Fraction fraction0 = new Fraction(2439.31874);
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      assertEquals((-1L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2439.31875, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = fraction1.THREE_QUARTERS.negate();
      Fraction fraction3 = fraction1.add(fraction0);
      Fraction fraction4 = fraction2.add(fraction3);
      double double0 = fraction4.percentageValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, fraction2.getDenominator());
      assertEquals((-75.0), fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, 3);
      Fraction fraction1 = fraction0.negate();
      double double0 = fraction1.percentageValue();
      assertEquals((-100.0), double0, 0.01);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals((-1), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction0.ONE.multiply(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2L), fraction2.longValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.multiply((-3018));
      assertEquals((-6036), fraction1.getNumerator());
      assertEquals((short) (-6036), fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.ONE_THIRD.multiply(86);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(28.666666666666668, fraction1.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE_THIRD.multiply(8388608);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(2796202.6666666665, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      long long0 = fraction0.longValue();
      assertEquals(20.0, fraction0.percentageValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Fraction fraction0 = new Fraction(2047, (-795));
      long long0 = fraction0.longValue();
      assertEquals((-257.4842767295598), fraction0.percentageValue(), 0.01);
      assertEquals((-2047), fraction0.getNumerator());
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      int int0 = fraction0.intValue();
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Fraction fraction0 = new Fraction(2047, (-795));
      int int0 = fraction0.intValue();
      assertEquals((-2.5748427F), fraction0.floatValue(), 0.01F);
      assertEquals((-2047), fraction0.getNumerator());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1), (-1));
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.ZERO.divide(4);
      int int0 = fraction1.getNumerator();
      assertEquals(0, int0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      int int0 = fraction0.getNumerator();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      int int0 = fraction0.getDenominator();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.divide((-870));
      float float0 = fraction1.floatValue();
      assertEquals(4350, fraction1.getDenominator());
      assertEquals((-2.2988506E-4F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.negate();
      double double0 = fraction1.doubleValue();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      double double0 = fraction0.doubleValue();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.TWO.divide(fraction0);
      assertEquals((short)10, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.MINUS_ONE.divide(fraction0);
      assertEquals((-2), fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147380827), 1);
      Fraction fraction1 = fraction0.divide(629);
      assertEquals((-2147380827), fraction1.getNumerator());
      assertEquals((-3.4139599793322736E8), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.divide(1);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Fraction fraction0 = new Fraction(116);
      Fraction fraction1 = fraction0.MINUS_ONE.add(1);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)116, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.FOUR_FIFTHS.add(8388608);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(8388608.8, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE_FIFTH.add(3);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(320.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.abs();
      assertEquals(0.0, fraction0.percentageValue(), 0.01);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE_FIFTH.abs();
      assertEquals(0.2, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.ONE.reciprocal();
      Fraction fraction2 = fraction1.abs();
      assertSame(fraction2, fraction1);
      assertEquals(1L, fraction2.longValue());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Fraction fraction0 = new Fraction(116);
      // Undeclared exception!
      try { 
        fraction0.ZERO.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.divide((-870));
      Fraction fraction2 = fraction1.divide(100);
      // Undeclared exception!
      try { 
        fraction2.multiply(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.divide(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.TWO_THIRDS.divide((-2147483633));
      // Undeclared exception!
      try { 
        fraction1.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) (-165), (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -165 to fraction (-9,223,372,036,854,775,642/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NEGATIVE_INFINITY, (-2.356194490192345), 2147483628);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-455), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -455/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1, 705);
      double double0 = fraction0.doubleValue();
      assertEquals(0.0014184397163120568, double0, 0.01);
      assertEquals(705, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      String string0 = fraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-829));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-829, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-4843), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -4,843/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(203992, Integer.MIN_VALUE);
      assertEquals((-25499), fraction0.getNumerator());
      assertEquals((-9.499117732048035E-5), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, Integer.MAX_VALUE);
      assertEquals(0, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(3, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 3/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Fraction fraction0 = new Fraction(2439.31874);
      Fraction fraction1 = fraction0.ONE_HALF.divide(fraction0);
      assertEquals(390291, fraction1.getDenominator());
      assertEquals(2.0497527E-4F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.TWO_THIRDS.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.TWO_FIFTHS.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(37, (-3005));
      // Undeclared exception!
      try { 
        fraction0.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147380827), (-3018));
      Fraction fraction1 = fraction0.divide(123);
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -43,663,410,149
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals((-2.0), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Fraction fraction0 = new Fraction(2783.387954, 992.8210902635, 2062);
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(278300.0, fraction0.percentageValue(), 0.01);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.TWO_THIRDS.divide(2147483631);
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(2147483597, fraction2.getDenominator());
      assertSame(fraction2, fraction1);
      assertEquals(9.313225967332035E-10, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fraction fraction0 = new Fraction(116);
      Fraction fraction1 = fraction0.ZERO.multiply((-1023));
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals(116.0F, fraction0.floatValue(), 0.01F);
      assertEquals((-116), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = fraction0.TWO_QUARTERS.subtract(fraction1);
      boolean boolean0 = fraction2.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.add((-829));
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(boolean0);
      assertEquals((-82880.0), fraction1.percentageValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      Fraction fraction1 = fraction0.abs();
      assertEquals(1, fraction0.getNumerator());
      assertEquals((short) (-1), fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.subtract((-2147380827));
      Fraction fraction2 = fraction1.abs();
      assertEquals(102820.75, fraction2.doubleValue(), 0.01);
      assertEquals((byte)92, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(2810, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 2,810/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(5.581818181781273E-4, 5.581818181781273E-4, (-315));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.001 to fraction after -315 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.0, 0.0, 2236);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MAX_VALUE);
      assertEquals(2147483647L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Fraction fraction0 = new Fraction(3, 3);
      double double0 = fraction0.percentageValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      float float0 = fraction0.floatValue();
      assertEquals(0.2F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      int int0 = fraction0.getNumerator();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      fraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Fraction fraction0 = new Fraction(174.5687, 34);
      int int0 = fraction0.intValue();
      assertEquals(17457.14285714286, fraction0.percentageValue(), 0.01);
      assertEquals(174, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
      try { 
        fraction0.subtract(811);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Fraction fraction0 = new Fraction(2439.31874);
      long long0 = fraction0.longValue();
      assertEquals(243931.875, fraction0.percentageValue(), 0.01);
      assertEquals(2439L, long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      FractionField fractionField0 = fraction0.getField();
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
      try { 
        fraction0.add(877);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      int int0 = fraction0.getDenominator();
      assertEquals(0, int0);
      assertEquals(Float.POSITIVE_INFINITY, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
      try { 
        fraction0.multiply(254);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 254/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
      try { 
        fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }
}
