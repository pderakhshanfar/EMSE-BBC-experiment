/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:22:51 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.ONE_FIFTH.reciprocal();
      Fraction fraction2 = fraction0.subtract(fraction1);
      String string0 = fraction2.toString();
      assertEquals("-22 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.ONE_FIFTH.reciprocal();
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction fraction3 = fraction1.divide(fraction2);
      assertEquals((-1.1363636363636365), fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = new Fraction(5, 5);
      Fraction fraction1 = fraction0.ONE_THIRD.abs();
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(1, fraction0.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1L, fraction0.longValue());
      assertFalse(boolean0);
      assertEquals(3, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1040.04825));
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertEquals((-237131), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = new Fraction(2107.98775744525, 2107.98775744525, 624);
      assertEquals(210700.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction(3986.85930215705, 4);
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      Fraction fraction2 = fraction0.MINUS_ONE.subtract(fraction1);
      assertEquals((-1.8), fraction2.doubleValue(), 0.01);
      assertEquals(3987, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction(5);
      Fraction fraction1 = fraction0.subtract(5);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1744.034591), (-1108));
      Fraction fraction1 = fraction0.ZERO.subtract(438427806);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-438427806), fraction1.getNumerator());
      assertEquals((-1745), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.ONE_FIFTH.reciprocal();
      Fraction fraction2 = fraction1.reciprocal();
      assertEquals(5, fraction2.getDenominator());
      assertEquals(5, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.reciprocal();
      assertTrue(fraction2.equals((Object)fraction1));
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1040.04825));
      double double0 = fraction0.percentageValue();
      assertEquals((-104004.82456140351), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction(2, 629);
      Fraction fraction1 = fraction0.MINUS_ONE.negate();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.003179650238473768, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = new Fraction(1739.003032731, (-1585));
      Fraction fraction1 = fraction0.THREE_QUARTERS.subtract(1);
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals((-1739), fraction2.getNumerator());
      assertEquals((-434.75F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = Fraction.ONE_QUARTER;
      Fraction fraction3 = fraction1.multiply(fraction2);
      assertEquals((-1), fraction3.getNumerator());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-0.25), fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = new Fraction(0);
      Fraction fraction1 = Fraction.TWO;
      Fraction fraction2 = fraction0.TWO_QUARTERS.multiply(fraction1);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction2.longValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.multiply(3);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1985, 1985);
      Fraction fraction1 = fraction0.multiply((-2088));
      assertEquals((-2088), fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      long long0 = fraction0.longValue();
      assertEquals(60.0, fraction0.percentageValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.ONE.negate();
      long long0 = fraction1.longValue();
      assertEquals((-1L), long0);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1825), 2234);
      int int0 = fraction0.intValue();
      assertEquals(2234, fraction0.getDenominator());
      assertEquals((-81.69203222918532), fraction0.percentageValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      int int0 = fraction0.intValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(480302, (-1838));
      assertEquals(919, fraction0.getDenominator());
      assertEquals((-261.3177366702938), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.divide((-18));
      int int0 = fraction1.getNumerator();
      assertEquals((-0.033333335F), fraction1.floatValue(), 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction(5);
      Fraction fraction1 = fraction0.subtract(fraction0);
      float float0 = fraction1.floatValue();
      assertEquals(500.0, fraction0.percentageValue(), 0.01);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      float float0 = fraction1.floatValue();
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals((-1), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = new Fraction(5.0614674548127384E-8, 1);
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      double double0 = fraction1.doubleValue();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = new Fraction(2, 629);
      Fraction fraction1 = fraction0.TWO.divide(fraction0);
      assertEquals(629.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1825), 2234);
      Fraction fraction1 = fraction0.ZERO.divide(1160);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-81.69203222918532), fraction0.percentageValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1040.04825));
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.divide(fraction1);
      Fraction fraction3 = fraction2.divide((-1838));
      assertEquals(113.17173510490043, fraction3.percentageValue(), 0.01);
      assertEquals(237131, fraction3.getNumerator());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1040.04825));
      Fraction fraction1 = fraction0.divide(295);
      assertEquals(67260, fraction1.getDenominator());
      assertEquals((-352.55872732679154), fraction1.percentageValue(), 0.01);
      assertEquals((-237131), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(31, 31);
      Fraction fraction1 = fraction0.subtract(4188);
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-4186.0), fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.ONE.add(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.add((-1362));
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1362L), fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.add(176);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(17680.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1744.034591), (-1108));
      Fraction fraction1 = fraction0.multiply(100);
      Fraction fraction2 = fraction1.abs();
      assertEquals(174500.0, fraction2.doubleValue(), 0.01);
      assertEquals((-1.745E7), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction(5, 5);
      Fraction fraction1 = fraction0.ZERO.negate();
      Fraction fraction2 = fraction1.abs();
      int int0 = fraction2.getNumerator();
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertSame(fraction2, fraction1);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1040.04825));
      Fraction fraction1 = fraction0.abs();
      assertEquals(1040.0482F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1825), 2234);
      Fraction fraction1 = fraction0.ONE.subtract(5);
      Fraction fraction2 = fraction1.subtract(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        fraction2.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction(-0.0, (-2147483645));
      // Undeclared exception!
      try { 
        fraction0.subtract(1047191781);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1825), 2234);
      Fraction fraction1 = Fraction.getReducedFraction(2234, 1);
      Fraction fraction2 = fraction1.add(fraction0);
      // Undeclared exception!
      try { 
        fraction0.multiply(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        fraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1040.04825));
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        fraction0.ONE.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction(-0.0, (-2147483645));
      // Undeclared exception!
      try { 
        fraction0.add((-2147483645));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NEGATIVE_INFINITY, 0.04525970930899348, 2147483645);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-2336), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction -2,336/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = new Fraction(691.6076094292295);
      double double0 = fraction0.doubleValue();
      assertEquals(691.6076099881094, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = new Fraction(0);
      String string0 = fraction0.MINUS_ONE.toString();
      assertEquals("-1", string0);
      assertEquals(0.0, fraction0.percentageValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      String string0 = fraction0.ONE_FIFTH.toString();
      assertEquals("1 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1838));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1,838, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(403, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 403/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(318, Integer.MIN_VALUE);
      assertEquals((-1.4808028936386108E-7), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 36);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(3, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 3/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.THREE_QUARTERS.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction(691.6076094292295);
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = new Fraction(0);
      Fraction fraction2 = fraction0.TWO.multiply(fraction1);
      assertTrue(fraction2.equals((Object)fraction1));
      assertEquals(0, fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        fraction0.ONE_QUARTER.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction(691.6076094292295);
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = fraction1.multiply(fraction0);
      Fraction fraction3 = fraction1.divide(fraction0);
      // Undeclared exception!
      try { 
        fraction2.add(fraction3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 338,308,123,445
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1040.04825));
      Fraction fraction1 = fraction0.ONE_QUARTER.subtract(fraction0);
      assertEquals(104029.82456140351, fraction1.percentageValue(), 0.01);
      assertEquals(228, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = new Fraction(5, 5);
      Fraction fraction1 = fraction0.ZERO.negate();
      Fraction fraction2 = new Fraction((double) 5);
      Fraction fraction3 = fraction2.subtract(fraction1);
      assertSame(fraction3, fraction2);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(5, fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-0.5F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = new Fraction(5, 5);
      Fraction fraction1 = fraction0.ZERO.negate();
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertSame(fraction2, fraction0);
      assertEquals(100.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_QUARTER.abs();
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = new Fraction(691.6076094292295);
      Fraction fraction1 = fraction0.negate();
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-69160.76099881095), fraction1.percentageValue(), 0.01);
      assertFalse(boolean0);
      assertEquals((-581642), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = new Fraction((-617), (-617));
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = new Fraction(691.6076094292295);
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals(691.6076099881094, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = new Fraction((-2143.7434578291877));
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
      assertEquals((-214374.3455497382), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = new Fraction(691.6076094292295);
      Fraction fraction1 = new Fraction(562);
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals(562.0F, fraction1.floatValue(), 0.01F);
      assertEquals(841, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-2265), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,265/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.add(1);
      // Undeclared exception!
      try { 
        fraction2.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-238.74712264588), (-238.74712264588), 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -238.747 to fraction after 0 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) 208, (-2836));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 208 to fraction (-207/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) 5, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 5 to fraction (9,223,372,036,854,775,804/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MAX_VALUE);
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = new Fraction(691.6076094292295);
      double double0 = fraction0.percentageValue();
      assertEquals(69160.76099881095, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      float float0 = fraction0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = new Fraction(691.6076094292295);
      int int0 = fraction0.getNumerator();
      assertEquals(581642, int0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = new Fraction(3986.85930215705, 4);
      fraction0.hashCode();
      assertEquals(3987, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = new Fraction(691.6076094292295);
      int int0 = fraction0.intValue();
      assertEquals(691.6076099881094, fraction0.doubleValue(), 0.01);
      assertEquals(691, int0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = new Fraction(691.6076094292295);
      long long0 = fraction0.longValue();
      assertEquals(691.6076F, fraction0.floatValue(), 0.01F);
      assertEquals(691L, long0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1040.04825));
      fraction0.getField();
      assertEquals((-237131), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.add(1);
      assertEquals(200.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Fraction fraction0 = new Fraction(691.6076094292295);
      Fraction fraction1 = fraction0.multiply(562);
      assertEquals(388683.47681331745, fraction1.doubleValue(), 0.01);
      assertEquals(841, fraction1.getDenominator());
  }
}
