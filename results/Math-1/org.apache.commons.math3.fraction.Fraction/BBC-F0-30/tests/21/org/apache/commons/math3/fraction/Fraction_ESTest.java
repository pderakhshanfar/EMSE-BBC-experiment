/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:33:34 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1923, (-178));
      Fraction fraction1 = fraction0.FOUR_FIFTHS.divide(fraction0);
      assertEquals((-1923), fraction0.getNumerator());
      assertEquals((-0.07405096F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      Fraction fraction2 = fraction0.TWO_QUARTERS.multiply(fraction1);
      Fraction fraction3 = fraction1.ONE_THIRD.divide((-2284));
      boolean boolean0 = fraction2.equals(fraction3);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction3));
      assertEquals((-1.4594279E-4F), fraction3.floatValue(), 0.01F);
      assertEquals((-50.0), fraction2.percentageValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ONE_FIFTH.add(1923);
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(192320.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction(1632, 593);
      Fraction fraction1 = Fraction.getReducedFraction(1729, 3);
      Fraction fraction2 = fraction0.TWO.subtract(fraction1);
      assertEquals((-57433.333333333336), fraction2.percentageValue(), 0.01);
      assertEquals(1632, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-515), (-515));
      Fraction fraction1 = fraction0.TWO_THIRDS.subtract((-515));
      assertEquals(51566.666666666664, fraction1.percentageValue(), 0.01);
      assertEquals(1547, fraction1.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.ONE.subtract(1);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction((-5323.6928), 1044.8665816884775, (-1177));
      Fraction fraction1 = fraction0.ONE_THIRD.subtract(0);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(33.33333333333333, fraction1.percentageValue(), 0.01);
      assertEquals((byte)52, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1923, (-190));
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals((-190), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction(38.3261, Integer.MAX_VALUE);
      Fraction fraction1 = fraction0.ZERO.divide(Integer.MAX_VALUE);
      double double0 = fraction1.percentageValue();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(3832.6099999999997, fraction0.percentageValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(72, 2057);
      Fraction fraction1 = fraction0.multiply(fraction0);
      Fraction fraction2 = fraction1.subtract(fraction0);
      double double0 = fraction2.percentageValue();
      assertEquals((-3.377726056774253), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.ZERO.negate();
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1923, (-178));
      Fraction fraction1 = fraction0.negate();
      assertEquals(178, fraction0.getDenominator());
      assertEquals(1080.3370786516855, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.ONE.negate();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = new Fraction(2776.3, 210.424603, 762);
      Fraction fraction2 = fraction0.TWO.subtract(fraction1);
      Fraction fraction3 = fraction1.TWO_FIFTHS.multiply(fraction2);
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-1109.6F), fraction3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 2118);
      Fraction fraction1 = fraction0.ONE_QUARTER.multiply(fraction0);
      assertEquals(529.5F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = new Fraction(Integer.MAX_VALUE, 589.599, Integer.MAX_VALUE);
      assertEquals(2.147483647E11, fraction1.percentageValue(), 0.01);
      
      Fraction fraction2 = fraction0.ONE.multiply(fraction1);
      assertEquals(Integer.MAX_VALUE, fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1233), (-1233));
      long long0 = fraction0.longValue();
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1923, (-178));
      long long0 = fraction0.longValue();
      assertEquals(178, fraction0.getDenominator());
      assertEquals((-10.803370786516854), fraction0.doubleValue(), 0.01);
      assertEquals((-10L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      int int0 = fraction1.intValue();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.036, 4);
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.MINUS_ONE.multiply(2);
      int int0 = fraction1.getNumerator();
      assertEquals((-2), int0);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2434), (-2434));
      float float0 = fraction0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.6666667F, 1739.11519, (-2284));
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.MINUS_ONE.multiply(2);
      double double0 = fraction1.doubleValue();
      assertEquals((-2.0), double0, 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-515), (-515));
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.multiply(1923);
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals(1923.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.ZERO.divide(1269);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ONE_FIFTH.add(1923);
      Fraction fraction2 = fraction1.divide(1923);
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(9616, fraction2.getNumerator());
      assertEquals((short)1923, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ONE_FIFTH.add(1923);
      Fraction fraction2 = fraction1.divide((-178));
      assertEquals(9616, fraction1.getNumerator());
      assertEquals((-4808), fraction2.getNumerator());
      assertEquals((-1080.4494382022472), fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-515), (-515));
      Fraction fraction1 = fraction0.add((-1573));
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals((-1572.0), fraction2.doubleValue(), 0.01);
      assertEquals((short) (-1572), fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.036, 4);
      Fraction fraction1 = fraction0.add(0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.multiply((-2236));
      Fraction fraction2 = fraction1.multiply(1639);
      Fraction fraction3 = fraction2.abs();
      assertEquals((-167700.0), fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction3.getDenominator());
      assertEquals(2.748603E8, fraction3.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = new Fraction(100);
      Fraction fraction1 = fraction0.abs();
      assertEquals(100.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        fraction0.THREE_FIFTHS.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.getReducedFraction(1923, (-190));
      Fraction fraction2 = fraction0.ONE_FIFTH.add(1923);
      Fraction fraction3 = fraction1.add(fraction2);
      // Undeclared exception!
      try { 
        fraction3.multiply(fraction3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        fraction0.divide(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction(2147483630, 2147483630);
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = new Fraction(38.3261, Integer.MAX_VALUE);
      Fraction fraction1 = new Fraction(Integer.MAX_VALUE, 10000);
      // Undeclared exception!
      try { 
        fraction0.ONE.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 10,000 + 2,147,483,647
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NEGATIVE_INFINITY, 1);
      // Undeclared exception!
      try { 
        fraction0.add(926);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.036, 4);
      Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1837), (-1837));
      int int0 = fraction0.intValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(1923, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1,923/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      double double0 = fraction0.doubleValue();
      assertEquals(0.6666666666666666, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      String string0 = fraction0.TWO.toString();
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1297), 2147483635);
      String string0 = fraction0.toString();
      assertEquals("-1297 / 2147483635", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-3743));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-3,743, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-1277), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -1,277/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 1093);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = new Fraction((-5323.6928), 1044.8665816884775, (-1177));
      Fraction fraction1 = fraction0.ZERO.multiply((-1177));
      // Undeclared exception!
      try { 
        fraction0.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      // Undeclared exception!
      try { 
        fraction0.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1297), 2147483635);
      Fraction fraction1 = fraction0.ONE_FIFTH.subtract(2147483635);
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -922,337,169,755,234,817
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1297), 2147483635);
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals((-6.039626932942844E-7), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2434), (-2434));
      Fraction fraction1 = new Fraction(1.0E-5, 2);
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertSame(fraction2, fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-515), (-515));
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      assertSame(fraction1, fraction0);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      assertEquals((-66.66666666666666), fraction1.percentageValue(), 0.01);
      assertEquals(3, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = new Fraction((-247.38164968579), Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.TWO_THIRDS;
      Fraction fraction2 = fraction0.TWO_THIRDS.reciprocal();
      Fraction fraction3 = fraction1.reciprocal();
      boolean boolean0 = fraction2.equals(fraction3);
      assertEquals(1.5F, fraction3.floatValue(), 0.01F);
      assertTrue(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2, fraction3.getDenominator());
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.TWO_THIRDS.reciprocal();
      Fraction fraction2 = fraction0.reciprocal();
      boolean boolean0 = fraction1.equals(fraction2);
      assertEquals(1.5F, fraction1.floatValue(), 0.01F);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(boolean0);
      assertEquals(3, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2434), (-2434));
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.TWO_THIRDS.reciprocal();
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals(3, fraction1.getNumerator());
      assertFalse(boolean0);
      assertEquals(1.5F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NEGATIVE_INFINITY, 1);
      Fraction fraction1 = Fraction.ONE_FIFTH;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals((-100.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NEGATIVE_INFINITY, 1);
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.getReducedFraction(1923, (-190));
      Fraction fraction2 = fraction0.ONE_FIFTH.add(1923);
      Fraction fraction3 = fraction1.divide(fraction2);
      Fraction fraction4 = fraction1.add(fraction3);
      Fraction fraction5 = fraction4.divide(3557);
      assertEquals(0.008847358485784709, fraction5.doubleValue(), 0.01);
      assertEquals((-1923), fraction3.getNumerator());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-2435), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,435/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = new Fraction(Double.NaN);
      // Undeclared exception!
      try { 
        fraction0.multiply(629);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 629/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(359.01894, 0.0, 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 359.019 to fraction after 3 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.0, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-718.6868), (-1094.293), 904);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -718.687 to fraction (-5,564,159,126,763/7,742,119,553)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(72, 2057);
      double double0 = fraction0.percentageValue();
      assertEquals(3.500243072435586, double0, 0.01);
      assertEquals(72, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1297), 2147483635);
      float float0 = fraction0.floatValue();
      assertEquals(2147483635, fraction0.getDenominator());
      assertEquals((-6.039626932942844E-5), fraction0.percentageValue(), 0.01);
      assertEquals((-6.039627E-7F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      int int0 = fraction0.getNumerator();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      fraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      int int0 = fraction0.intValue();
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.THREE_FIFTHS.subtract(1404);
      assertEquals((-1403.4F), fraction1.floatValue(), 0.01F);
      assertEquals((-7017), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      long long0 = fraction0.longValue();
      assertEquals(75.0, fraction0.percentageValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      FractionField fractionField0 = fraction0.TWO_FIFTHS.getField();
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.TWO_QUARTERS.add(1404);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(1404.5, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      int int0 = fraction0.getDenominator();
      assertEquals(3, int0);
  }
}
