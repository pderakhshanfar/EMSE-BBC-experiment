/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:30:30 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.TWO_FIFTHS.subtract(280);
      String string0 = fraction1.toString();
      assertEquals("-1398 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.TWO_FIFTHS.subtract(280);
      Fraction fraction2 = fraction1.divide(fraction1);
      assertEquals(1, fraction2.getNumerator());
      assertEquals((-27960.000000000004), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = Fraction.getReducedFraction(3, (-1410));
      boolean boolean0 = fraction2.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-0.0021276595F), fraction2.floatValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.negate();
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(boolean0);
      assertEquals((-0.2F), fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = new Fraction(4311.732678554601, 629);
      Fraction fraction1 = fraction0.ZERO.add((-1151));
      Fraction fraction2 = fraction0.FOUR_FIFTHS.subtract(fraction1);
      assertEquals(1151.8F, fraction2.floatValue(), 0.01F);
      assertEquals(435485, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction(4311.732678554601, 629);
      Fraction fraction1 = fraction0.FOUR_FIFTHS.subtract(fraction0);
      assertEquals(505, fraction1.getDenominator());
      assertEquals((-4310.932673267327), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction(31);
      Fraction fraction1 = fraction0.subtract(31);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction(805.718, 3);
      Fraction fraction1 = fraction0.TWO_QUARTERS.subtract(0);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(806.0F, fraction0.floatValue(), 0.01F);
      assertEquals(50.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction(1622, 1622);
      Fraction fraction1 = fraction0.add(1622);
      Fraction fraction2 = fraction1.subtract(282);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1341, fraction2.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(50.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction(4311.732678554601, 629);
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(4311.732673267326, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0, 4311.732678554601, 629);
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3864));
      double double0 = fraction0.percentageValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-386400.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3864));
      Fraction fraction1 = fraction0.negate();
      assertEquals((-3864), fraction0.getNumerator());
      assertEquals(3864, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.negate();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2.0), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.add(1622);
      Fraction fraction2 = fraction0.ONE_QUARTER.multiply(fraction0);
      Fraction fraction3 = fraction1.multiply(fraction2);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(202.8125F, fraction3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      Fraction fraction1 = fraction0.MINUS_ONE.multiply(0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = new Fraction(805.718, 3);
      Fraction fraction1 = fraction0.THREE_FIFTHS.multiply(1);
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(806, fraction0.getNumerator());
      assertEquals(3, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.multiply(2290);
      assertEquals(137400.0, fraction1.percentageValue(), 0.01);
      assertEquals(1374, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = new Fraction(805.718, 3);
      long long0 = fraction0.longValue();
      assertEquals(806L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.TWO;
      Fraction fraction2 = fraction0.subtract(fraction1);
      long long0 = fraction2.longValue();
      assertEquals((-9), fraction2.getNumerator());
      assertEquals((-180.0), fraction2.percentageValue(), 0.01);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      int int0 = fraction0.intValue();
      assertEquals(50.0, fraction0.percentageValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3864), (-3864));
      int int0 = fraction0.intValue();
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ONE_HALF.negate();
      Fraction fraction2 = fraction0.THREE_FIFTHS.multiply(fraction1);
      int int0 = fraction2.getNumerator();
      assertEquals((-3), int0);
      assertEquals((-0.3), fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.9987994582857286E-8, 5);
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1487, (-758));
      float float0 = fraction0.floatValue();
      assertEquals(758, fraction0.getDenominator());
      assertEquals((-1.9617414F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0, 4311.732678554601, 629);
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      double double0 = fraction0.doubleValue();
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction(4311.732678554601, 629);
      Fraction fraction1 = new Fraction(0.0, 4311.732678554601, (-4446));
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(4311.732673267326, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = new Fraction(4311.732678554601, 629);
      Fraction fraction1 = fraction0.MINUS_ONE.multiply(fraction0);
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals((-4311.733F), fraction1.floatValue(), 0.01F);
      assertEquals(101, fraction1.getDenominator());
      assertEquals((-1L), fraction2.longValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.9987994582857286E-8, 5);
      Fraction fraction1 = fraction0.divide((-391));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3864), (-3864));
      Fraction fraction1 = fraction0.divide(629);
      assertEquals(0.001589825119236884, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3864), (-3864));
      Fraction fraction1 = fraction0.divide(1);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.add(1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2144058633), 118, 192);
      Fraction fraction1 = fraction0.abs();
      assertEquals(2144058633, fraction1.getNumerator());
      assertEquals((-2144058633), fraction0.intValue());
      assertEquals(2.144058633E11, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(247, (-4446));
      Fraction fraction1 = fraction0.add(247);
      Fraction fraction2 = fraction1.abs();
      assertEquals(24694.444444444445, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction((-674), 357913942);
      Fraction fraction1 = Fraction.ONE_FIFTH;
      Fraction fraction2 = fraction0.subtract(2146799736);
      // Undeclared exception!
      try { 
        fraction2.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0, 4311.732678554601, (-4446));
      // Undeclared exception!
      try { 
        fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1487, (-758));
      Fraction fraction1 = fraction0.subtract((-1199));
      // Undeclared exception!
      try { 
        fraction1.multiply(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        fraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.THREE_QUARTERS.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.0, 629);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/2,147,483,647, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3864));
      double double0 = fraction0.doubleValue();
      assertEquals((-3864.0), double0, 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      String string0 = fraction0.ZERO.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = new Fraction(4311.732678554601, 629);
      String string0 = fraction0.ONE_HALF.toString();
      assertEquals("1 / 2", string0);
      assertEquals(4311.732673267326, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1073741824));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1,073,741,824, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(1, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 1/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 1322);
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction1, fraction0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(3, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 3/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      // Undeclared exception!
      try { 
        fraction0.THREE_FIFTHS.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = new Fraction(4311.732678554601, 629);
      Fraction fraction1 = new Fraction(0.0, 4311.732678554601, (-4446));
      Fraction fraction2 = fraction0.multiply(fraction1);
      Fraction fraction3 = fraction2.negate();
      assertTrue(fraction3.equals((Object)fraction1));
      assertEquals(435485, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.TWO_QUARTERS.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(629, (-1073741824));
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = fraction1.add(2);
      // Undeclared exception!
      try { 
        fraction2.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 2,415,918,475
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1487, (-758));
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals((-3.923483F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.subtract(fraction0);
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      assertEquals((-0.2F), fraction2.floatValue(), 0.01F);
      assertEquals((-1), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, 2147483639);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/2,147,483,639, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-421), (-421));
      Fraction fraction1 = new Fraction((-1274), (-1274));
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
      assertEquals((byte)1, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = new Fraction(4311.732678554601, 629);
      boolean boolean0 = fraction0.equals("1 / 2");
      assertFalse(boolean0);
      assertEquals(431173.26732673263, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.negate();
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertEquals(5, fraction1.getDenominator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-20.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.negate();
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
      assertEquals((-0.5F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(31, 31);
      Fraction fraction1 = fraction0.FOUR_FIFTHS.multiply(629);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
      assertEquals(2516, fraction1.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, (-3022));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-3,022, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(770, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 770/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(1282, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1,282/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = new Fraction((-171.75));
      assertEquals(4, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-1992.90708251), (-2629.1334059483884), 5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -1,992.907 to fraction after 5 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-1920.0750202), (-1920.0750202), 144);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1,920.075 to fraction (-2,621,092,490/1,365,099)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (-2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      double double0 = fraction0.percentageValue();
      assertEquals(50.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      float float0 = fraction0.floatValue();
      assertEquals(0.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = new Fraction(4311.732678554601, 629);
      int int0 = fraction0.getNumerator();
      assertEquals(101, fraction0.getDenominator());
      assertEquals(435485, int0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3864));
      fraction0.hashCode();
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte) (-24), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3864));
      int int0 = fraction0.intValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3864), int0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MAX_VALUE);
      assertEquals(2147483647L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte)2, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      long long0 = fraction0.longValue();
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      FractionField fractionField0 = fraction0.ONE_HALF.getField();
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3864));
      Fraction fraction1 = fraction0.divide(1);
      assertEquals((-3864), fraction1.getNumerator());
      assertEquals((-3864.0F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3864));
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
      assertEquals((-3864L), fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3864));
      Fraction fraction1 = fraction0.MINUS_ONE.multiply(5);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-5.0F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3864));
      Fraction fraction1 = fraction0.TWO_THIRDS.add(fraction0);
      assertEquals((-11590), fraction1.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(3, fraction1.getDenominator());
  }
}
