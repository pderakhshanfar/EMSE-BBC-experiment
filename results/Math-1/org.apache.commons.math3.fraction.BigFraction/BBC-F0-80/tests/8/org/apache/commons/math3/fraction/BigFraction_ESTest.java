/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 09 19:21:12 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1014.0));
      bigFraction0.ONE_THIRD.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.add(8796093009920L);
      bigFraction1.bigDecimalValue(5);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.6894686222076416);
      BigFraction bigFraction1 = bigFraction0.pow((-1816));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ONE.pow(bigInteger0);
      bigFraction1.MINUS_ONE.equals(bigFraction0);
      BigFraction bigFraction2 = new BigFraction((long) (-1816));
      bigFraction2.TWO_THIRDS.longValue();
      bigFraction1.compareTo(bigFraction2);
      BigFraction bigFraction3 = bigFraction0.TWO_THIRDS.pow(1);
      bigFraction1.FOUR_FIFTHS.longValue();
      BigFraction bigFraction4 = bigFraction3.ZERO.abs();
      BigFraction bigFraction5 = bigFraction1.multiply((-2166));
      bigFraction5.ONE_QUARTER.intValue();
      bigFraction5.TWO_THIRDS.pow(1887);
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction6 = bigFraction1.multiply(2254);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction3.subtract(bigInteger1);
      bigFraction6.TWO.subtract((-840));
      BigFraction bigFraction7 = bigFraction3.negate();
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction0.THREE_QUARTERS.getDenominatorAsLong();
      BigFraction bigFraction8 = bigFraction0.pow(bigInteger2);
      bigFraction8.ONE_QUARTER.add(1887);
      bigFraction2.add((long) 1);
      bigFraction7.divide(1887);
      bigFraction8.getDenominator();
      bigFraction2.add((long) 1887);
      bigFraction0.add((long) 2254);
      bigFraction1.divide((-7946511643054307839L));
      // Undeclared exception!
      try { 
        bigFraction6.divide(bigFraction4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.pow((double) (-1104));
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction3 = new BigFraction((double) (-1104));
      bigFraction3.divide(bigInteger0);
      bigFraction3.multiply((-1104));
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction4 = new BigFraction(Double.NaN, 2824);
      BigFraction bigFraction5 = BigFraction.FOUR_FIFTHS;
      bigFraction5.doubleValue();
      BigFraction bigFraction6 = new BigFraction(1429.6);
      // Undeclared exception!
      try { 
        bigFraction4.multiply(bigFraction2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.divide((-9961L));
      bigFraction1.getDenominator();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      bigFraction0.MINUS_ONE.pow(1.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2256.0);
      bigFraction0.divide(1543L);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(407, 804);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction0.divide((-536L));
      bigFraction1.getDenominator();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert infinite value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.pow(2147039494);
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.subtract(2147039494);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      bigFraction0.intValue();
      bigFraction0.ONE_HALF.add(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.divide(889);
      bigFraction0.getDenominator();
      BigFraction bigFraction4 = bigFraction3.add(1814L);
      bigFraction4.ZERO.getNumeratorAsInt();
      bigFraction4.ONE.abs();
      bigFraction3.pow((double) 889);
      BigFraction.getReducedFraction(2147261594, (-216));
      bigFraction2.getDenominator();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-1104));
      bigFraction1.pow((double) (-1104));
      bigFraction1.doubleValue();
      bigFraction1.pow((-87.33));
      BigFraction bigFraction2 = bigFraction1.abs();
      bigFraction2.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-1114));
      bigFraction1.pow((double) (-1104));
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.add(5);
      BigFraction bigFraction2 = bigFraction0.abs();
      BigFraction bigFraction3 = bigFraction1.ONE_HALF.reciprocal();
      BigFraction bigFraction4 = bigFraction3.MINUS_ONE.subtract((long) 1908874353);
      bigFraction0.ONE_FIFTH.subtract(bigFraction2);
      BigFraction bigFraction5 = bigFraction2.TWO.divide(1908874353);
      bigFraction3.ONE_HALF.multiply(bigFraction5);
      BigFraction.getReducedFraction(89, 5);
      bigFraction1.doubleValue();
      bigFraction2.getField();
      BigFraction bigFraction6 = bigFraction4.subtract((long) 5);
      bigFraction0.getField();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction7 = bigFraction6.multiply(89);
      BigFraction bigFraction8 = bigFraction7.multiply((-1));
      bigFraction8.divide((-1));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.ONE_HALF.getDenominatorAsInt();
      bigFraction0.ONE.intValue();
      bigFraction0.TWO.percentageValue();
      bigFraction0.FOUR_FIFTHS.longValue();
      bigFraction0.intValue();
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction1.TWO_QUARTERS.getDenominatorAsInt();
      bigFraction0.FOUR_FIFTHS.floatValue();
      BigFraction bigFraction2 = bigFraction1.TWO.pow(1223);
      bigFraction0.TWO_THIRDS.hashCode();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.ONE.subtract(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.FOUR_FIFTHS.reciprocal();
      bigFraction1.bigDecimalValue(0, 0);
      bigFraction2.getNumerator();
      bigFraction0.reciprocal();
      bigFraction3.multiply(0);
      BigFraction bigFraction4 = bigFraction0.divide(bigFraction3);
      bigFraction4.THREE_QUARTERS.add(1075);
      bigFraction1.toString();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.pow((-1104));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.pow((-2936.17162557795));
      BigFraction bigFraction3 = bigFraction2.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.divide(bigInteger0);
      bigFraction4.FOUR_FIFTHS.multiply((-1104));
      bigFraction3.getDenominatorAsInt();
      bigFraction2.reduce();
      bigFraction2.divide((-1104));
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2147483136, 5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      int int0 = (-1104);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-1104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-1104));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.pow((-1081.7769797877909));
      BigFraction bigFraction2 = bigFraction1.add(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.divide(bigInteger0);
      bigFraction1.TWO_THIRDS.reciprocal();
      bigFraction3.multiply((-1104));
      bigFraction3.equals(bigInteger0);
      bigFraction2.getNumerator();
      bigFraction2.divide((-1104));
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(2147483552);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-1104));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.equals(bigFraction0);
      bigFraction1.divide((long) (-1104));
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(2819561105158720014L, 1.0033721426962048E-8, 2637);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,819,561,105,158,720,000 to fraction (2,819,561,105,158,720,000/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.equals(bigFraction0);
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(142.485);
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      BigFraction bigFraction2 = BigFraction.ONE_THIRD;
      bigFraction1.ONE_HALF.add(bigFraction2);
      bigFraction1.divide((-2454L));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3883);
      bigFraction0.pow(0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      bigFraction1.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.multiply(3883);
      bigFraction2.getDenominatorAsInt();
      bigFraction0.doubleValue();
      bigFraction0.doubleValue();
      bigFraction1.multiply(bigFraction2);
      bigFraction2.abs();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(142.485);
      BigFraction bigFraction1 = new BigFraction(142.485, (-277));
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      BigInteger bigInteger0 = bigFraction2.getDenominator();
      bigFraction1.multiply(bigInteger0);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction0.multiply(bigFraction1);
      bigFraction0.bigDecimalValue((-1638), 1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = new BigFraction((-1.0));
      bigFraction1.multiply(bigFraction0);
      bigFraction1.negate();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.pow((-5.3502441327259514E-8));
      BigFraction bigFraction1 = BigFraction.ZERO;
      try { 
        bigFraction0.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.floatValue();
      BigFraction bigFraction1 = bigFraction0.divide(2724);
      bigFraction1.TWO.toString();
      BigFraction bigFraction2 = bigFraction0.multiply(2724);
      bigFraction0.ONE_THIRD.getField();
      int int0 = (-1071);
      bigFraction2.TWO.pow((-1071));
      bigFraction1.divide((long) 2724);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-4216L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.pow(2145388542);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.reduce();
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ONE_FIFTH.add((-1));
      BigFraction bigFraction1 = bigFraction0.multiply(346);
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.negate();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction2.ONE_QUARTER.add(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction1.TWO.multiply(bigInteger1);
      BigFraction bigFraction4 = bigFraction3.multiply(bigInteger1);
      bigFraction4.ONE_THIRD.multiply(bigInteger1);
      bigFraction3.pow(bigInteger1);
      BigInteger bigInteger2 = bigFraction0.getNumerator();
      bigFraction1.subtract(bigInteger2);
      bigFraction1.pow((double) 346);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.pow((-1104));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.pow((-2936.17162557795));
      BigFraction bigFraction3 = bigFraction2.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.divide(bigInteger0);
      bigFraction4.FOUR_FIFTHS.multiply((-1104));
      bigFraction3.getDenominatorAsInt();
      bigFraction4.doubleValue();
      BigFraction bigFraction5 = BigFraction.TWO_THIRDS;
      bigFraction2.doubleValue();
      BigFraction bigFraction6 = null;
      try {
        bigFraction6 = new BigFraction(Double.NaN, 2819561105158720014L, (-1104));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert \uFFFD to fraction after -1,104 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.pow((-1104));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.pow((-2936.17162557795));
      BigFraction bigFraction3 = bigFraction2.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.divide(bigInteger0);
      bigFraction4.FOUR_FIFTHS.multiply((-1104));
      bigFraction3.getDenominatorAsInt();
      bigFraction4.doubleValue();
      BigFraction bigFraction5 = BigFraction.TWO_THIRDS;
      bigFraction5.bigDecimalValue(0);
      bigFraction0.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.pow((-1104));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.pow((-2936.17162557795));
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.toString();
      bigFraction2.pow(5.3191488404991105E-6);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-1104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3678.2));
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      bigFraction2.equals(bigFraction0);
      bigFraction1.subtract(bigFraction0);
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      BigFraction bigFraction1 = new BigFraction((double) (-1));
      BigFraction bigFraction2 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      bigFraction2.ONE.multiply(7465L);
      BigFraction bigFraction4 = bigFraction2.multiply(bigFraction3);
      bigFraction3.equals(bigFraction1);
      bigFraction4.subtract(bigFraction2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.8604651154419116E-4);
      bigFraction0.pow((-392L));
      BigFraction bigFraction1 = new BigFraction((double) (-392L));
      bigFraction1.THREE_FIFTHS.longValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(142.485);
      bigFraction0.ONE_HALF.toString();
      bigFraction0.pow(142.485);
      BigFraction bigFraction1 = bigFraction0.negate();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger0);
      bigFraction2.subtract(233);
      bigFraction1.toString();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1044.0));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.multiply(bigInteger0);
      bigFraction0.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger0);
      bigFraction2.multiply(bigFraction0);
      Object object0 = new Object();
      bigFraction1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction(2616L);
      BigFraction.getReducedFraction((-350), 412);
      // Undeclared exception!
      try { 
        bigFraction1.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.pow((-1104));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.pow((-2936.17162557795));
      BigFraction bigFraction3 = bigFraction2.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.divide(bigInteger0);
      bigFraction4.FOUR_FIFTHS.multiply((-1104));
      bigFraction3.getDenominatorAsInt();
      bigFraction4.doubleValue();
      BigFraction bigFraction5 = BigFraction.TWO_THIRDS;
      bigFraction2.doubleValue();
      bigFraction5.multiply(2819561105158720014L);
      bigFraction5.subtract(0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-2146791356), (-1972));
      BigFraction bigFraction1 = bigFraction0.pow(629);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.pow((double) (-1972));
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      bigFraction1.getDenominatorAsInt();
      bigFraction0.doubleValue();
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      bigFraction2.doubleValue();
      BigFraction bigFraction4 = bigFraction0.divide(bigInteger0);
      bigFraction4.pow(629);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(137438953524L);
      bigFraction0.equals(">y(`mt;k-~");
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction2.bigDecimalValue(0, 0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction((-49.86840843831867), 5206);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger1);
      bigFraction1.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4607182418800017408L);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 629);
      bigFraction1.pow(0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(137438953472L);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, (-2281));
      bigFraction0.add(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = new BigFraction(931, (-3582));
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction0.subtract(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigDecimal bigDecimal0 = new BigDecimal((-1175));
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.multiply(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.equals(">y(`mt;k-~");
      BigFraction bigFraction3 = bigFraction1.subtract(bigFraction0);
      bigFraction3.ONE.hashCode();
      bigFraction3.doubleValue();
      bigFraction0.divide(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(142.485);
      bigFraction0.ONE_HALF.toString();
      bigFraction0.pow(142.485);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert NaN value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigDecimal bigDecimal0 = new BigDecimal((-1175));
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.multiply(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.equals(">y(`mt;k-~");
      bigFraction1.subtract(bigFraction0);
      bigFraction0.bigDecimalValue(0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.THREE_FIFTHS.add(2145388542);
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.multiply(2145388542);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction2.equals(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.subtract(bigFraction2);
      bigFraction3.hashCode();
      bigFraction1.reduce();
      bigFraction0.pow((-1493));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)89;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction2.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.hashCode();
      Object object0 = new Object();
      bigFraction0.equals("NaN is not allowed");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      bigFraction1.percentageValue();
      bigFraction0.longValue();
      BigFraction bigFraction3 = bigFraction1.multiply((-1564));
      bigFraction2.doubleValue();
      bigFraction3.percentageValue();
      bigFraction1.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.add(2664L);
      bigFraction4.pow(2309L);
      bigFraction3.percentageValue();
      BigFraction bigFraction5 = bigFraction0.negate();
      bigFraction3.multiply(bigInteger0);
      BigFraction bigFraction6 = BigFraction.ONE_THIRD;
      BigFraction bigFraction7 = bigFraction6.subtract((-1564));
      bigFraction7.ONE_THIRD.add((long) (-1564));
      bigFraction1.toString();
      bigFraction5.subtract((-1564));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.hashCode();
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction2.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.multiply(2099);
      bigFraction3.doubleValue();
      bigFraction4.percentageValue();
      BigFraction bigFraction5 = bigFraction1.pow(bigInteger0);
      BigFraction bigFraction6 = bigFraction0.add((long) 2099);
      bigFraction0.pow((-2226L));
      bigFraction6.percentageValue();
      bigFraction1.negate();
      bigFraction3.multiply(bigInteger0);
      bigFraction5.subtract(233);
      bigFraction4.toString();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction3 = new BigFraction(649.9605045145344, 716);
      bigFraction0.compareTo(bigFraction2);
      bigFraction3.add((long) 1);
      BigFraction bigFraction4 = new BigFraction(bigInteger0);
      bigFraction4.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.add(bigInteger0);
      bigFraction2.subtract(bigFraction0);
      bigFraction2.hashCode();
      bigFraction1.reduce();
      BigFraction bigFraction3 = BigFraction.TWO_QUARTERS;
      bigFraction3.pow(716);
      BigFraction bigFraction4 = BigFraction.ONE_HALF;
      bigFraction4.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.THREE_QUARTERS.getNumeratorAsInt();
      BigFraction bigFraction3 = new BigFraction(649.9605045145344, 716);
      bigFraction0.compareTo(bigFraction0);
      bigFraction2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction2.add(bigInteger0);
      BigFraction bigFraction4 = new BigFraction(649.9605045145344, 716);
      bigFraction0.compareTo(bigFraction3);
      bigFraction4.bigDecimalValue(1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(142.485);
      bigFraction0.ONE_HALF.toString();
      bigFraction0.pow(142.485);
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction1.add((long) 616);
      bigFraction2.TWO.subtract((-2144380346));
      bigFraction0.doubleValue();
      bigFraction0.negate();
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.add(2145388542);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.TWO.subtract(bigInteger0);
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction2 = BigFraction.ZERO;
      bigFraction1.THREE_QUARTERS.multiply((long) 5);
      bigFraction2.doubleValue();
      bigFraction1.getDenominatorAsInt();
      bigFraction1.toString();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = new BigFraction(1227);
      BigFraction bigFraction2 = bigFraction0.pow(1227);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.pow(1.6681559085845947);
      BigFraction bigFraction3 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.divide(bigInteger0);
      bigFraction4.getDenominatorAsInt();
      bigFraction0.doubleValue();
      BigFraction.getReducedFraction((-1), 1);
      bigFraction3.bigDecimalValue(4);
      bigFraction1.doubleValue();
      BigFraction bigFraction5 = BigFraction.ONE;
      BigFraction bigFraction6 = bigFraction3.divide(bigFraction5);
      bigFraction2.floatValue();
      bigFraction6.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigDecimal bigDecimal0 = new BigDecimal((-1175));
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.multiply(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.equals(">y(`mt;k-~");
      BigFraction bigFraction3 = bigFraction1.subtract(bigFraction0);
      bigFraction3.ONE.hashCode();
      bigFraction0.reduce();
      BigFraction bigFraction4 = bigFraction1.pow((-1175));
      bigFraction4.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      Object object0 = new Object();
      bigFraction0.equals(object0);
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.add(1923L);
      bigFraction2.ONE_THIRD.hashCode();
      BigFraction bigFraction3 = bigFraction1.multiply((-1153));
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue((-1153));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-7.0172128107897045));
      int int0 = (-1913);
      int int1 = (-1799);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.bigDecimalValue((-1913), (-1799));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(142.485);
      bigFraction0.ONE_HALF.toString();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction0.pow(142.485);
      BigFraction bigFraction2 = bigFraction0.pow(113L);
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
      Object object0 = new Object();
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      bigFraction4.equals(bigFraction3);
      BigFraction bigFraction5 = bigFraction1.add(bigInteger0);
      bigFraction5.add((-1140));
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue(100, 3312);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      bigFraction0.longValue();
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction1.ONE_QUARTER.hashCode();
      BigFraction bigFraction2 = new BigFraction(839);
      BigFraction bigFraction3 = bigFraction2.pow(839);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction4 = bigFraction3.add(bigInteger0);
      BigFraction bigFraction5 = new BigFraction(1621.7, (-107));
      bigFraction1.compareTo(bigFraction4);
      bigFraction0.divide(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      BigFraction bigFraction3 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction4 = bigFraction2.multiply(bigFraction3);
      BigFraction bigFraction5 = bigFraction2.multiply(2819561105158720014L);
      bigFraction5.add(bigInteger0);
      BigFraction bigFraction6 = bigFraction0.add(bigInteger0);
      bigFraction6.pow(1310.88814);
      BigFraction bigFraction7 = bigFraction2.divide(1128L);
      bigFraction1.percentageValue();
      bigFraction0.getNumeratorAsInt();
      bigFraction4.negate();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction8 = bigFraction3.pow(bigInteger0);
      bigFraction5.multiply(bigFraction7);
      bigFraction0.intValue();
      BigFraction.getReducedFraction((-1175), (-3481));
      bigFraction8.intValue();
      BigFraction.getReducedFraction((-1086), (-4143));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.pow(839);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction0.add(bigInteger1);
      BigFraction bigFraction2 = new BigFraction(872.256, 2794);
      bigFraction1.compareTo(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = 926;
      bigInteger0.abs();
      BigInteger bigInteger1 = bigInteger0.shiftRight(926);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      bigFraction2.MINUS_ONE.multiply((long) 926);
      BigFraction bigFraction3 = bigFraction0.THREE_FIFTHS.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.add(bigInteger1);
      bigFraction0.pow((double) 926);
      BigFraction bigFraction5 = bigFraction0.THREE_FIFTHS.divide(4499201580859392L);
      bigFraction5.TWO_FIFTHS.percentageValue();
      BigFraction bigFraction6 = bigFraction4.reduce();
      bigFraction6.getNumeratorAsInt();
      BigFraction bigFraction7 = BigFraction.ONE_HALF;
      bigFraction7.negate();
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigFraction bigFraction8 = bigFraction2.pow(bigInteger1);
      bigFraction8.TWO_FIFTHS.add((-822L));
      // Undeclared exception!
      try { 
        bigFraction8.ZERO.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.subtract(bigFraction1);
      bigFraction0.THREE_FIFTHS.multiply(bigFraction1);
      BigFraction.getReducedFraction(0, 3);
      bigFraction1.percentageValue();
      bigFraction0.getField();
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-2202), 3296);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.add(bigInteger0);
      bigFraction1.abs();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction2.add(bigInteger0);
      BigFraction bigFraction4 = new BigFraction(649.9605045145344, 716);
      bigFraction0.compareTo(bigFraction3);
      bigFraction4.add((long) 1);
      bigFraction2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(1701);
      bigFraction1.FOUR_FIFTHS.pow((double) 1701);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.negate();
      bigFraction2.ZERO.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction0.subtract((-3183605296591799669L));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)22;
      BigFraction bigFraction4 = bigFraction0.divide(4499201580859392L);
      bigFraction3.percentageValue();
      BigFraction bigFraction5 = bigFraction3.reduce();
      bigFraction0.getNumeratorAsInt();
      bigFraction5.negate();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction4.pow(bigInteger0);
      bigFraction3.multiply(bigFraction5);
      bigFraction3.intValue();
      BigFraction.getReducedFraction(1701, 1851);
      bigFraction1.intValue();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction1.percentageValue();
      bigFraction1.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction0.add(bigFraction1);
      Object object0 = new Object();
      Object object1 = new Object();
      bigFraction0.equals(object1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction3.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.add(0);
      int int0 = 52;
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue(3, 2924);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1928L, 1928L);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.pow(1193L);
      bigFraction1.TWO_FIFTHS.floatValue();
      bigFraction1.ONE_QUARTER.add(bigFraction0);
      bigFraction0.TWO_QUARTERS.toString();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.add(bigInteger0);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((double) 1193L, 116650);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1,193 to fraction (9,223,372,036,854,774,616/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.pow(862);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction1.subtract(1146L);
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      bigFraction0.compareTo(bigFraction3);
      bigFraction1.add(1L);
      bigFraction1.getNumerator();
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.subtract(bigFraction1);
      BigFraction.getReducedFraction(0, 3);
      bigFraction1.percentageValue();
      bigFraction0.getField();
      BigFraction.getReducedFraction((-2202), 3296);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(3296, 0, 3296);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 3,296 to fraction (-3,295/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(0, 3);
      bigFraction2.percentageValue();
      bigFraction1.getField();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(3296, 3);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      int int0 = (-1);
      int int1 = 710;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((-1), (-1), 710);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1 to fraction (-9,223,372,036,854,775,806/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction0.divide(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = 1.0;
      BigFraction bigFraction0 = new BigFraction(1.0);
      int int0 = (-1913);
      int int1 = (-1799);
      BigDecimal bigDecimal0 = new BigDecimal((-1799));
      BigFraction bigFraction1 = bigFraction0.pow(2755);
      BigFraction bigFraction2 = bigFraction0.ONE.divide((long) (-1799));
      bigFraction2.TWO_THIRDS.getField();
      BigFraction bigFraction3 = BigFraction.TWO_QUARTERS;
      bigFraction3.TWO_FIFTHS.hashCode();
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.subtract(bigFraction1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        bigFraction4.ZERO.pow((long) (-1913));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      double double0 = bigFraction0.doubleValue();
      assertEquals((-1.0), double0, 0.01);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.multiply(bigFraction1);
      bigFraction0.getDenominatorAsLong();
      bigFraction0.MINUS_ONE.getDenominatorAsInt();
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
      int int0 = bigFraction0.compareTo(bigFraction3);
      assertEquals((-1), int0);
      
      bigFraction0.getDenominator();
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      bigFraction0.longValue();
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction1.ONE_QUARTER.hashCode();
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.pow((-1L));
      bigFraction3.ONE_THIRD.add(bigFraction1);
      bigFraction3.ONE_QUARTER.equals(bigFraction2);
      bigFraction3.ONE_THIRD.floatValue();
      bigFraction3.ONE_FIFTH.floatValue();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      bigFraction0.ZERO.getField();
      BigFraction bigFraction4 = bigFraction0.multiply(602);
      bigFraction4.ZERO.divide(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction4.TWO_FIFTHS.bigDecimalValue(602, 602);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.add((-87));
      BigFraction bigFraction2 = bigFraction1.ONE.multiply((-87));
      BigFraction bigFraction3 = bigFraction1.TWO_QUARTERS.subtract((long) (-87));
      bigFraction3.ONE_THIRD.subtract(1075);
      bigFraction0.THREE_FIFTHS.hashCode();
      bigFraction1.THREE_FIFTHS.pow((long) (-87));
      bigFraction0.getDenominatorAsLong();
      bigFraction0.toString();
      BigFraction bigFraction4 = bigFraction1.add(bigFraction2);
      bigFraction2.ONE_THIRD.getField();
      // Undeclared exception!
      try { 
        bigFraction4.TWO_THIRDS.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 2140;
      BigFraction bigFraction0 = new BigFraction(2140);
      long long0 = 0L;
      bigFraction0.ONE_QUARTER.add(0L);
      bigFraction0.ONE_FIFTH.multiply((long) 2140);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.pow(2140);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.reciprocal();
      BigFraction bigFraction3 = bigFraction2.TWO.pow(2140);
      bigFraction3.ONE_HALF.reduce();
      bigFraction3.TWO_FIFTHS.getField();
      bigFraction2.MINUS_ONE.getDenominatorAsLong();
      bigFraction0.FOUR_FIFTHS.longValue();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2140);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1928L, 1928L);
      long long0 = 1193L;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.pow(1193L);
      bigFraction1.TWO_FIFTHS.floatValue();
      bigFraction1.ONE_QUARTER.add(bigFraction0);
      bigFraction0.TWO_QUARTERS.toString();
      bigFraction0.THREE_FIFTHS.subtract(1L);
      // Undeclared exception!
      try { 
        bigFraction0.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.TWO_FIFTHS.hashCode();
      bigFraction0.pow((-3280.1424512));
      int int0 = 0;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(1.4780692924846082E197, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 147,806,929,248,460,820,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.ZERO.bigDecimalValue();
      bigFraction0.TWO_FIFTHS.pow(584);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(142.485);
      bigFraction0.ONE_HALF.toString();
      bigFraction0.pow(142.485);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(616);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow(780);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.multiply(780);
      BigFraction bigFraction3 = bigFraction2.pow((long) 780);
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.subtract(bigFraction1);
      assertEquals((byte)0, bigFraction4.byteValue());
      
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      bigFraction1.ONE_HALF.divide(bigInteger0);
      bigFraction3.hashCode();
      assertEquals((byte)0, bigFraction3.byteValue());
      
      BigFraction bigFraction5 = bigFraction2.pow(0L);
      bigFraction5.getDenominator();
      BigFraction bigFraction6 = bigFraction5.pow(9154082963658192752L);
      int int0 = bigFraction6.getNumeratorAsInt();
      assertTrue(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertEquals(1, int0);
      assertEquals((short)312, bigFraction2.shortValue());
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      
      BigFraction bigFraction7 = bigFraction0.pow((-2205));
      assertEquals((byte)109, bigFraction7.byteValue());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 3;
      BigFraction bigFraction0 = new BigFraction(3);
      bigFraction0.THREE_QUARTERS.subtract(3);
      BigFraction bigFraction1 = new BigFraction(3, 3);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      int int1 = (-4528);
      // Undeclared exception!
      try { 
        bigFraction2.TWO.bigDecimalValue((-4528));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483648L);
      BigFraction bigFraction1 = bigFraction0.multiply(0L);
      bigFraction1.ONE.pow((double) 2147483648L);
      BigFraction bigFraction2 = bigFraction1.add(2147483648L);
      bigFraction1.ONE_FIFTH.equals(bigFraction2);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.pow(591L);
      bigFraction3.ONE_THIRD.subtract(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.THREE_FIFTHS.divide(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.multiply(bigFraction2);
      bigFraction4.FOUR_FIFTHS.divide(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.FOUR_FIFTHS.multiply(bigFraction1);
      bigFraction5.ONE_FIFTH.multiply(0);
      // Undeclared exception!
      try { 
        bigFraction1.ONE.bigDecimalValue((-957));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-87);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      assertEquals((short)89, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.abs();
      BigInteger bigInteger1 = bigInteger0.shiftRight(926);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.multiply((long) 926);
      assertEquals((short) (-926), bigFraction3.shortValue());
      
      BigFraction bigFraction4 = bigFraction0.THREE_FIFTHS.add(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.add(bigInteger1);
      double double0 = bigFraction0.pow((double) 926);
      assertEquals(0.0, double0, 0.01);
      
      BigFraction bigFraction6 = bigFraction0.THREE_FIFTHS.divide(4499201580859392L);
      double double1 = bigFraction6.TWO_FIFTHS.percentageValue();
      assertEquals(40.0, double1, 0.01);
      
      BigFraction bigFraction7 = bigFraction0.reduce();
      bigFraction7.getNumeratorAsInt();
      BigFraction bigFraction8 = bigFraction0.negate();
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigFraction bigFraction9 = bigFraction8.ONE_QUARTER.pow(bigInteger2);
      BigFraction bigFraction10 = bigFraction6.multiply(bigFraction5);
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      
      bigFraction7.intValue();
      BigFraction bigFraction11 = BigFraction.getReducedFraction(37, 37);
      assertTrue(bigFraction11.equals((Object)bigFraction9));
      
      int int0 = bigFraction2.intValue();
      assertEquals(0, int0);
      assertFalse(bigFraction2.equals((Object)bigFraction8));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.reduce();
      BigFraction bigFraction2 = bigFraction0.subtract(0);
      double double0 = bigFraction2.ONE_QUARTER.percentageValue();
      assertEquals(25.0, double0, 0.01);
      
      BigFraction bigFraction3 = bigFraction0.multiply(812L);
      BigFraction bigFraction4 = bigFraction3.ONE.multiply((-86));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertEquals((short) (-86), bigFraction4.shortValue());
      
      bigFraction3.TWO.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction5 = bigFraction1.ONE_QUARTER.add(bigInteger0);
      bigFraction0.hashCode();
      BigFraction bigFraction6 = bigFraction0.multiply((long) 0);
      bigFraction1.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction3.doubleValue();
      BigFraction bigFraction7 = bigFraction5.THREE_FIFTHS.subtract((-1));
      BigFraction bigFraction8 = bigFraction1.multiply(bigFraction6);
      BigFraction bigFraction9 = bigFraction5.subtract((-2046L));
      assertEquals((short)2046, bigFraction9.shortValue());
      
      int int0 = bigFraction1.getDenominatorAsInt();
      assertEquals(5, int0);
      
      bigFraction8.doubleValue();
      BigFraction bigFraction10 = bigFraction8.subtract(bigFraction7);
      assertEquals((byte) (-1), bigFraction10.byteValue());
      assertTrue(bigFraction8.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(0, 3);
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      
      double double0 = bigFraction1.percentageValue();
      assertEquals(200.0, double0, 0.01);
      
      bigFraction0.getField();
      assertNotSame(bigFraction0, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-2202), 3296);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction5 = bigFraction4.add(bigInteger0);
      assertEquals((byte)0, bigFraction5.byteValue());
      assertFalse(bigFraction5.equals((Object)bigFraction4));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = 1.0;
      BigFraction bigFraction0 = new BigFraction(1.0);
      int int0 = (-1913);
      int int1 = (-1799);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.bigDecimalValue((-1913), (-1799));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(1701);
      double double0 = bigFraction1.FOUR_FIFTHS.pow((double) 1701);
      assertEquals(Double.NaN, double0, 0.01);
      
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.negate();
      bigFraction2.ZERO.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction0.subtract((-3183605296591799669L));
      assertEquals((short)1397, bigFraction3.shortValue());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)89;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.ONE_QUARTER.divide(bigInteger0);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction2.abs();
      assertNotSame(bigFraction4, bigFraction2);
      assertEquals((byte) (-91), bigFraction1.byteValue());
      
      bigFraction0.intValue();
      assertFalse(bigFraction0.equals((Object)bigFraction3));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(546, 1);
      assertEquals((byte)34, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction0.multiply(9218868437227405312L);
      BigFraction bigFraction3 = bigFraction2.reciprocal();
      assertEquals((short)0, bigFraction2.shortValue());
      assertFalse(bigFraction3.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      long long0 = (-1874L);
      BigFraction bigFraction1 = bigFraction0.pow((-1874L));
      BigFraction bigFraction2 = bigFraction1.pow((-1874L));
      int int0 = 1;
      int int1 = (-1);
      bigFraction2.ONE_QUARTER.add(2);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1, (-1));
      BigFraction bigFraction4 = bigFraction0.FOUR_FIFTHS.pow(bigInteger0);
      bigFraction4.ONE_FIFTH.getNumeratorAsInt();
      bigFraction4.ONE.longValue();
      bigFraction3.TWO_THIRDS.longValue();
      bigFraction2.TWO_QUARTERS.add(0L);
      bigFraction3.TWO.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.bigDecimalValue((-781), (-552));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = (-1);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-4.852711011229633E-9), (-4.852711011229633E-9), (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -0 to fraction after -1 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      int int0 = (-1175);
      // Undeclared exception!
      try { 
        bigFraction1.TWO.bigDecimalValue((-1175));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4607182418800017408L, 4607182418800017408L);
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction1.add(1128);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1128, 1128);
      bigFraction2.TWO_FIFTHS.reciprocal();
      BigFraction bigFraction4 = bigFraction3.THREE_QUARTERS.pow(1128);
      BigFraction bigFraction5 = bigFraction4.MINUS_ONE.pow((long) 1128);
      double double0 = bigFraction5.ONE_HALF.percentageValue();
      assertEquals(50.0, double0, 0.01);
      
      bigFraction4.bigDecimalValue();
      BigFraction bigFraction6 = bigFraction4.ONE.add(bigFraction3);
      bigFraction6.ONE_QUARTER.divide(4607182418800017408L);
      double double1 = bigFraction2.percentageValue();
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertEquals(112900.0, double1, 0.01);
      
      String string0 = bigFraction1.toString();
      assertEquals("1", string0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction7 = bigFraction1.add(bigInteger0);
      assertTrue(bigFraction7.equals((Object)bigFraction6));
      
      bigFraction1.MINUS_ONE.bigDecimalValue();
      BigFraction bigFraction8 = bigFraction1.reduce();
      bigFraction8.ONE_QUARTER.subtract(bigInteger0);
      BigFraction bigFraction9 = bigFraction1.add(0);
      assertTrue(bigFraction9.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.pow(839);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      
      BigFraction bigFraction3 = new BigFraction((-416.604220989), 839);
      int int0 = bigFraction0.compareTo(bigFraction3);
      assertEquals(1, int0);
      assertEquals((short) (-416), bigFraction3.shortValue());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3311L));
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.subtract(2933);
      assertEquals((byte) (-116), bigFraction1.byteValue());
      
      bigFraction0.ONE.hashCode();
      bigFraction0.bigDecimalValue();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)10;
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.subtract((long) (byte)115);
      assertEquals((short) (-114), bigFraction2.shortValue());
      
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction0.divide(bigInteger0);
      assertEquals((byte)0, bigFraction3.byteValue());
      
      BigFraction bigFraction4 = bigFraction0.add((int) (byte) (-99));
      assertEquals((short) (-3410), bigFraction4.shortValue());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2047L);
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction2.ONE.percentageValue();
      Object object0 = new Object();
      bigFraction0.ONE_QUARTER.divide((-1843));
      bigFraction0.ONE_QUARTER.equals(object0);
      bigFraction0.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction2.ONE_HALF.multiply(bigInteger0);
      int int0 = 1145;
      bigFraction1.ZERO.pow(1145);
      bigFraction2.floatValue();
      bigFraction2.multiply(0);
      // Undeclared exception!
      try { 
        bigFraction1.ONE_THIRD.bigDecimalValue(0, (-2319));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.ONE_QUARTER.hashCode();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.ONE_THIRD.getNumeratorAsLong();
      int int0 = 0;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction0.ONE_QUARTER.multiply(bigFraction1);
      bigFraction0.ONE_HALF.bigDecimalValue(0);
      BigFraction bigFraction2 = bigFraction0.negate();
      BigFraction bigFraction3 = bigFraction2.divide(bigFraction1);
      bigFraction3.THREE_QUARTERS.doubleValue();
      bigFraction1.ONE_FIFTH.floatValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction4 = bigFraction1.divide(bigInteger0);
      bigFraction4.FOUR_FIFTHS.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = 3;
      BigFraction.getReducedFraction((-1658), 3);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction0.ONE_HALF.subtract(bigFraction1);
      bigFraction0.ONE_THIRD.getNumeratorAsLong();
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toByteArray();
      int int0 = 52;
      bigInteger0.pow(52);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.multiply(0L);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.reduce();
      // Undeclared exception!
      try { 
        bigFraction2.TWO_THIRDS.bigDecimalValue(52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 5;
      BigFraction bigFraction0 = new BigFraction((-2951), 5);
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction1.TWO_THIRDS.percentageValue();
      // Undeclared exception!
      try { 
        bigFraction0.ONE.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-598L));
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction1.MINUS_ONE.reciprocal();
      bigFraction1.FOUR_FIFTHS.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.testBit(1435);
      int int0 = 1;
      bigFraction0.TWO.equals(bigFraction1);
      BigFraction.getReducedFraction(1291, 1);
      // Undeclared exception!
      try { 
        bigFraction1.ONE_FIFTH.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = new BigFraction(3, 1370);
      bigFraction1.ONE.add(bigFraction0);
      bigFraction0.ONE_HALF.compareTo(bigFraction1);
      BigFraction bigFraction2 = new BigFraction(1436.011508352, 1436.011508352, (-623));
      BigFraction bigFraction3 = bigFraction2.ONE.divide(4349L);
      bigFraction0.add(bigFraction2);
      bigFraction2.TWO_THIRDS.getDenominatorAsInt();
      BigFraction bigFraction4 = bigFraction3.reciprocal();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction4.TWO.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.TWO_FIFTHS.reciprocal();
      BigFraction bigFraction4 = bigFraction0.TWO_QUARTERS.add(bigFraction1);
      bigFraction4.ONE_QUARTER.reduce();
      bigFraction3.TWO.getDenominatorAsLong();
      BigFraction bigFraction5 = bigFraction1.ONE_THIRD.divide(2);
      int int0 = (-1);
      int int1 = 0;
      // Undeclared exception!
      try { 
        bigFraction5.ONE_FIFTH.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }
}
