/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 09 19:21:51 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) Integer.MAX_VALUE, 145);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.THREE_QUARTERS.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.multiply(511);
      BigFraction bigFraction2 = bigFraction1.ONE.multiply((-172L));
      bigFraction2.getField();
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      bigFraction3.TWO_FIFTHS.percentageValue();
      BigFraction bigFraction4 = bigFraction3.pow(1427L);
      bigFraction4.doubleValue();
      BigFraction bigFraction5 = new BigFraction((double) 511);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.multiply(511);
      bigFraction1.ONE.multiply((-172L));
      BigFraction bigFraction2 = new BigFraction((-864.74387631));
      BigFraction bigFraction3 = bigFraction2.pow(1427L);
      bigFraction3.doubleValue();
      bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction4 = new BigFraction(182.595627831, 6118188);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction.getReducedFraction((-2147483646), (-2147483646));
      BigFraction bigFraction1 = bigFraction0.subtract((long) (-2147483646));
      bigFraction0.pow((-3.102678910525039E288));
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction3 = new BigFraction(478.8533138, (-2147483646));
      BigFraction bigFraction4 = bigFraction1.multiply(bigFraction3);
      bigFraction4.subtract((long) (-2147483646));
      bigFraction0.add(1398L);
      bigFraction1.getNumeratorAsInt();
      bigFraction4.pow(3060L);
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction(Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert infinite value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction((-3386.5148), 2407);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.negate();
      bigFraction1.divide(bigFraction2);
      bigFraction0.FOUR_FIFTHS.getDenominatorAsInt();
      bigFraction1.getDenominatorAsLong();
      bigFraction2.longValue();
      BigFraction bigFraction3 = new BigFraction((double) 1723L);
      Object object0 = new Object();
      bigFraction3.equals(object0);
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue(2135212312, 5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = new BigFraction((-1), (-1));
      bigFraction0.equals(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.ONE_FIFTH.intValue();
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.28447077359987816, (-2783.926961), (-5352));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.284 to fraction after -5,352 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.ONE_QUARTER.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.multiply(8589901824L);
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-349), 863);
      bigFraction2.THREE_QUARTERS.pow(1259.0268104336392);
      bigFraction2.ONE_THIRD.pow(0.7367644273299447);
      bigFraction1.TWO.bigDecimalValue(4);
      bigFraction0.bigDecimalValue();
      bigFraction2.TWO.doubleValue();
      bigFraction1.abs();
      bigFraction0.reciprocal();
      int int0 = 629;
      bigFraction0.subtract(629);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(832, 629);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction.getReducedFraction((-3651), (-1204));
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.doubleValue();
      bigFraction0.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483647L, 2147483647L);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow(0L);
      bigFraction1.MINUS_ONE.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0);
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = (-1);
      BigFraction bigFraction0 = new BigFraction(3.851445905038431E134);
      BigFraction bigFraction1 = bigFraction0.pow(1040);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = BigFraction.ZERO;
      BigFraction bigFraction5 = bigFraction4.subtract(bigInteger0);
      BigFraction bigFraction6 = new BigFraction((-342038L));
      BigFraction bigFraction7 = bigFraction3.add(bigFraction5);
      bigFraction1.abs();
      bigFraction1.floatValue();
      bigFraction2.getDenominatorAsLong();
      bigFraction7.percentageValue();
      bigFraction3.multiply(bigFraction5);
      Object object0 = new Object();
      BigFraction bigFraction8 = null;
      try {
        bigFraction8 = new BigFraction((-342038L), (-3080.754622154649), 1040);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -342,038 to fraction (342,039/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(bigFraction0);
      bigFraction1.equals(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(769.27861162);
      bigFraction0.TWO.percentageValue();
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.equals(bigFraction1);
      BigFraction bigFraction2 = bigFraction1.multiply((long) 0);
      BigFraction bigFraction3 = BigFraction.ONE_THIRD;
      bigFraction2.TWO_QUARTERS.equals(bigFraction3);
      BigFraction bigFraction4 = bigFraction2.ONE_HALF.subtract(0);
      bigFraction4.ONE_FIFTH.subtract((long) 0);
      BigFraction bigFraction5 = bigFraction1.subtract(bigFraction0);
      bigFraction0.getDenominator();
      bigFraction5.negate();
      BigFraction.getReducedFraction(421, (-1478));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(bigFraction0);
      BigFraction bigFraction2 = bigFraction0.subtract(4);
      bigFraction1.equals(bigFraction2);
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 37);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-2263));
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction1.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction0.negate();
      bigFraction0.add(bigFraction2);
      bigFraction0.reduce();
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(696.2692222039564);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_QUARTER.getNumeratorAsLong();
      BigFraction bigFraction2 = BigFraction.THREE_FIFTHS;
      bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.TWO.reduce();
      bigFraction3.intValue();
      bigFraction2.getField();
      bigFraction0.add((-807L));
      bigFraction1.bigDecimalValue(0, 0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2263));
      bigFraction0.MINUS_ONE.subtract((long) (-2263));
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-1337), 4);
      Object object0 = new Object();
      bigFraction0.equals(bigFraction1);
      BigFraction bigFraction2 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction3.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = (-3652);
      BigFraction bigFraction0 = new BigFraction((long) 37, (long) (-3652));
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.floatValue();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction3 = BigFraction.ONE_THIRD;
      bigFraction3.subtract((long) 3);
      bigFraction3.getField();
      BigFraction bigFraction4 = bigFraction1.reduce();
      bigFraction4.reduce();
      BigFraction bigFraction5 = new BigFraction((-1), 1030);
      BigFraction bigFraction6 = BigFraction.ONE_QUARTER;
      bigFraction0.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction7 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction7.pow((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.floatValue();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction3 = bigFraction2.divide(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction3.multiply(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction3.divide(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(696.0);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_QUARTER.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.negate();
      bigFraction0.getField();
      BigFraction bigFraction3 = new BigFraction((double) 1L);
      bigFraction2.THREE_QUARTERS.reduce();
      bigFraction2.ONE_FIFTH.compareTo(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.reduce();
      bigFraction4.bigDecimalValue();
      Object object0 = new Object();
      bigFraction2.equals(object0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-77);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction5 = bigFraction4.add(bigInteger0);
      bigFraction5.pow((double) (byte) (-77));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(696.0);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction1.abs();
      int int0 = 839;
      // Undeclared exception!
      try { 
        bigFraction0.pow((-2144348634));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = new BigFraction((-1.0));
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      bigFraction3.getNumeratorAsLong();
      bigFraction1.negate();
      BigFraction bigFraction4 = BigFraction.ONE;
      BigFraction bigFraction5 = BigFraction.getReducedFraction(1, 1);
      BigFraction bigFraction6 = bigFraction4.add(bigFraction5);
      bigFraction4.reduce();
      bigFraction1.intValue();
      bigFraction6.getField();
      bigFraction1.getField();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.floatValue();
      BigFraction bigFraction1 = new BigFraction((-990));
      BigFraction bigFraction2 = bigFraction0.abs();
      BigFraction bigFraction3 = bigFraction2.pow(1294);
      bigFraction2.subtract(bigFraction0);
      BigFraction bigFraction4 = bigFraction3.multiply(bigFraction1);
      bigFraction3.toString();
      bigFraction4.longValue();
      BigFraction bigFraction5 = bigFraction1.reciprocal();
      bigFraction0.getNumerator();
      bigFraction4.floatValue();
      bigFraction5.add(2935890503282001226L);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1), (-1));
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow((long) (-1));
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.divide((long) (-1));
      bigFraction0.percentageValue();
      BigFraction bigFraction3 = bigFraction1.ONE_THIRD.add(bigFraction0);
      bigFraction3.THREE_QUARTERS.pow(100.0);
      bigFraction3.reduce();
      BigFraction bigFraction4 = bigFraction1.reduce();
      bigFraction4.compareTo(bigFraction1);
      BigFraction bigFraction5 = BigFraction.ONE_FIFTH;
      bigFraction5.percentageValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction5.THREE_QUARTERS.compareTo(bigFraction0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction1.divide(bigInteger0);
      bigFraction5.divide((long) (-1));
      bigFraction0.getDenominatorAsInt();
      bigFraction2.toString();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3513);
      bigFraction0.TWO_THIRDS.floatValue();
      bigFraction0.ONE.getNumeratorAsInt();
      bigFraction0.bigDecimalValue(3513, 1);
      bigFraction0.percentageValue();
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = new BigFraction(100.0);
      bigFraction0.divide(bigFraction1);
      BigFraction bigFraction2 = bigFraction1.multiply((-238L));
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      bigFraction3.longValue();
      bigFraction1.equals(bigFraction2);
      bigFraction1.reduce();
      BigFraction bigFraction4 = BigFraction.ZERO;
      bigFraction1.compareTo(bigFraction4);
      BigFraction bigFraction5 = BigFraction.TWO_THIRDS;
      bigFraction0.percentageValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction6 = bigFraction0.divide(bigInteger0);
      bigFraction5.getField();
      BigFraction bigFraction7 = bigFraction2.divide(1);
      BigFraction bigFraction8 = bigFraction7.reciprocal();
      bigFraction8.getDenominator();
      bigFraction6.getNumerator();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction((-3386.5148), 2407);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.negate();
      bigFraction2.ZERO.divide(bigFraction1);
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction0.add(bigFraction1);
      bigFraction2.reduce();
      BigFraction bigFraction4 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.floatValue();
      BigFraction bigFraction1 = new BigFraction(4);
      bigFraction0.MINUS_ONE.abs();
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.pow(839);
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.TWO_FIFTHS.multiply(bigFraction2);
      bigFraction3.THREE_FIFTHS.toString();
      bigFraction0.longValue();
      bigFraction0.reciprocal();
      bigFraction1.getNumerator();
      bigFraction4.floatValue();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.abs();
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.multiply((-1501L));
      bigFraction0.divide(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.bigDecimalValue();
      bigFraction1.toString();
      bigFraction1.intValue();
      bigFraction3.pow((long) 0);
      bigFraction2.getField();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.floatValue();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction0.THREE_QUARTERS.abs();
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction3 = bigFraction2.divide(bigFraction0);
      BigFraction bigFraction4 = bigFraction1.multiply((-238L));
      bigFraction3.getDenominatorAsLong();
      bigFraction0.longValue();
      bigFraction4.bigDecimalValue(3);
      bigFraction3.equals(bigFraction1);
      BigFraction bigFraction5 = bigFraction4.reduce();
      bigFraction2.compareTo(bigFraction0);
      BigFraction bigFraction6 = BigFraction.TWO_THIRDS;
      bigFraction6.percentageValue();
      bigFraction3.toString();
      bigFraction0.intValue();
      bigFraction6.pow((-238L));
      bigFraction6.getField();
      bigFraction6.subtract((-1));
      bigFraction5.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1819));
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction1.pow(0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = new BigFraction(bigInteger0);
      bigFraction0.subtract(bigFraction3);
      bigFraction2.multiply(bigFraction0);
      bigFraction1.toString();
      bigFraction2.longValue();
      // Undeclared exception!
      try { 
        bigFraction3.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow((-1039L));
      BigFraction bigFraction2 = bigFraction1.divide((-447L));
      bigFraction2.percentageValue();
      bigFraction2.add(bigFraction1);
      bigFraction0.pow((double) (-1039L));
      BigFraction bigFraction3 = bigFraction2.reduce();
      bigFraction3.reduce();
      BigFraction bigFraction4 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction((-3386.5148), 2407);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.negate();
      bigFraction1.divide(bigFraction2);
      BigFraction bigFraction3 = bigFraction2.multiply(3448L);
      bigFraction1.getDenominatorAsLong();
      bigFraction2.longValue();
      BigFraction bigFraction4 = new BigFraction((double) 1723L);
      Object object0 = new Object();
      bigFraction4.equals(object0);
      bigFraction3.reduce();
      bigFraction0.compareTo(bigFraction4);
      bigFraction1.percentageValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction4.divide(bigInteger0);
      bigFraction3.getField();
      bigFraction1.divide(2407);
      bigFraction2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction((-3386.5148), 2407);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.negate();
      bigFraction1.ONE_HALF.compareTo(bigFraction2);
      BigFraction bigFraction3 = bigFraction1.TWO_QUARTERS.abs();
      BigFraction bigFraction4 = bigFraction1.ONE.reduce();
      BigFraction bigFraction5 = bigFraction4.reduce();
      BigFraction bigFraction6 = bigFraction1.pow(2407);
      bigFraction4.divide(bigFraction1);
      bigFraction4.multiply(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction7 = bigFraction3.subtract(bigInteger0);
      BigFraction bigFraction8 = new BigFraction((long) 2407);
      BigFraction bigFraction9 = bigFraction7.add(bigFraction2);
      bigFraction8.abs();
      bigFraction8.floatValue();
      bigFraction6.getDenominatorAsLong();
      bigFraction9.percentageValue();
      bigFraction5.multiply(bigFraction2);
      Object object0 = new Object();
      bigFraction6.equals("fT5.uqfmS*");
      int int0 = (-2125);
      BigFraction bigFraction10 = null;
      try {
        bigFraction10 = new BigFraction((-6267862043278927981L), (-1.0), (-2125));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -6,267,862,043,278,927,900 to fraction (6,267,862,043,278,927,873/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigInteger bigInteger0 = null;
      int int0 = (-5);
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      int int0 = (-2263);
      BigFraction bigFraction1 = new BigFraction((-2263));
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(696.0);
      int int0 = 2;
      BigFraction bigFraction1 = new BigFraction(2);
      bigFraction0.abs();
      int int1 = 839;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction((-2263));
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.subtract((long) (-2263));
      bigFraction0.percentageValue();
      BigFraction bigFraction3 = bigFraction2.add(bigFraction1);
      bigFraction1.pow(0.0);
      BigFraction bigFraction4 = bigFraction0.reduce();
      bigFraction4.reduce();
      bigFraction3.bigDecimalValue();
      bigFraction0.toString();
      bigFraction4.intValue();
      bigFraction1.pow((-3387L));
      bigFraction0.getField();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.subtract((long) (-2263));
      BigFraction bigFraction3 = new BigFraction((-1.4691239161932232E190), (-2263));
      BigFraction bigFraction4 = bigFraction3.add((long) (-2263));
      bigFraction4.compareTo(bigFraction1);
      bigFraction2.floatValue();
      bigFraction0.pow(0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.add(bigInteger0);
      bigFraction1.hashCode();
      bigFraction0.negate();
      BigFraction bigFraction5 = bigFraction0.multiply(bigInteger0);
      bigFraction5.ONE.add(1073741824);
      bigFraction4.ZERO.abs();
      BigFraction.getReducedFraction(373, 2147098034);
      BigFraction bigFraction6 = bigFraction4.subtract((long) (-1));
      bigFraction3.pow((double) (-1));
      BigFraction bigFraction7 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction8 = bigFraction7.multiply(bigFraction6);
      bigFraction0.subtract(1274L);
      BigFraction bigFraction9 = bigFraction7.add((-1864L));
      bigFraction8.getNumeratorAsInt();
      bigFraction9.pow((-1864L));
      bigFraction2.getField();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.floatValue();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction3 = bigFraction2.divide(bigFraction0);
      BigFraction bigFraction4 = bigFraction1.multiply((-238L));
      bigFraction3.getDenominatorAsLong();
      bigFraction0.longValue();
      bigFraction3.equals(bigFraction1);
      BigFraction bigFraction5 = bigFraction4.reduce();
      bigFraction2.compareTo(bigFraction0);
      BigFraction bigFraction6 = BigFraction.TWO_THIRDS;
      bigFraction6.percentageValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction7 = bigFraction4.divide(bigInteger1);
      bigFraction5.getField();
      bigFraction0.divide(3);
      bigFraction7.reciprocal();
      bigFraction2.getDenominator();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1), (-1));
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow((long) (-1));
      bigFraction0.TWO_THIRDS.divide((long) (-1));
      bigFraction0.percentageValue();
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.add(bigFraction0);
      bigFraction2.THREE_QUARTERS.pow(100.0);
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.reduce();
      BigFraction bigFraction4 = new BigFraction((double) (-1));
      bigFraction4.bigDecimalValue();
      bigFraction3.toString();
      bigFraction0.intValue();
      BigFraction bigFraction5 = bigFraction0.pow(191315023233024L);
      bigFraction5.getField();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.pow(2147483553);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.TWO.add((long) 2147483553);
      BigFraction bigFraction2 = bigFraction1.add(bigInteger0);
      bigFraction1.THREE_FIFTHS.divide((-455));
      bigFraction2.THREE_FIFTHS.divide((-3958705157555305932L));
      bigFraction0.getDenominator();
      int int0 = 100;
      int int1 = 2135212312;
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(100, 2135212312);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1236, 1);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.ONE_THIRD.pow(1236);
      BigFraction bigFraction4 = bigFraction2.FOUR_FIFTHS.multiply(1);
      BigFraction bigFraction5 = bigFraction2.ONE_THIRD.add(bigFraction0);
      bigFraction5.ZERO.compareTo(bigFraction2);
      BigFraction bigFraction6 = bigFraction0.subtract((-1593L));
      bigFraction3.divide(bigFraction4);
      bigFraction1.ONE_THIRD.reduce();
      bigFraction4.TWO_FIFTHS.pow((-1));
      BigFraction bigFraction7 = bigFraction5.THREE_QUARTERS.multiply(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction8 = bigFraction0.FOUR_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction9 = new BigFraction((long) (-1));
      BigFraction bigFraction10 = bigFraction0.add(bigFraction9);
      bigFraction10.abs();
      bigFraction6.floatValue();
      bigFraction0.getDenominatorAsLong();
      bigFraction2.percentageValue();
      bigFraction6.TWO_THIRDS.multiply(bigFraction0);
      Object object0 = new Object();
      bigFraction4.equals(object0);
      bigFraction1.getNumeratorAsLong();
      bigFraction2.percentageValue();
      BigFraction bigFraction11 = bigFraction3.subtract(bigInteger0);
      bigFraction8.compareTo(bigFraction7);
      // Undeclared exception!
      try { 
        bigFraction11.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction((-3386.5148), 2407);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.negate();
      bigFraction1.ONE_HALF.compareTo(bigFraction2);
      BigFraction bigFraction3 = bigFraction1.TWO_QUARTERS.abs();
      BigFraction bigFraction4 = bigFraction1.ONE.reduce();
      BigFraction bigFraction5 = bigFraction4.TWO.multiply((long) 2407);
      BigFraction bigFraction6 = bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = bigFraction4.getDenominator();
      BigFraction bigFraction7 = bigFraction4.divide(bigFraction5);
      BigFraction bigFraction8 = bigFraction2.subtract((long) 2407);
      bigFraction4.MINUS_ONE.pow(4638.595751170174);
      BigFraction bigFraction9 = bigFraction8.TWO.multiply(127);
      bigFraction9.TWO.add(bigInteger0);
      BigFraction bigFraction10 = bigFraction7.multiply(bigInteger0);
      BigFraction.getReducedFraction(1, 87);
      bigFraction6.subtract(bigFraction3);
      bigFraction8.pow(bigInteger0);
      BigFraction bigFraction11 = BigFraction.MINUS_ONE;
      bigFraction11.percentageValue();
      bigFraction10.abs();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)36;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.longValueExact();
      bigInteger0.longValue();
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction2.subtract(bigFraction1);
      BigInteger bigInteger1 = bigFraction1.getDenominator();
      BigFraction bigFraction3 = bigFraction2.pow(bigInteger1);
      bigFraction0.pow((int) (byte)26);
      bigFraction3.divide(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)36;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.longValueExact();
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = new BigFraction((long) (byte) (-1), (long) (byte) (-65));
      bigFraction1.floatValue();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.percentageValue();
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction0.getNumeratorAsLong();
      bigFraction0.getField();
      bigFraction0.percentageValue();
      bigFraction1.subtract(bigInteger0);
      bigFraction0.compareTo(bigFraction2);
      BigFraction bigFraction3 = BigFraction.TWO;
      bigFraction3.bigDecimalValue(1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      int int0 = (-2263);
      BigFraction bigFraction1 = new BigFraction((-2263));
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.subtract((long) (-2263));
      // Undeclared exception!
      try { 
        bigFraction2.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(696.0);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_QUARTER.getNumeratorAsLong();
      bigFraction1.ONE_QUARTER.negate();
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.TWO.reduce();
      bigFraction1.bigDecimalValue();
      bigFraction0.toString();
      bigFraction3.intValue();
      BigFraction bigFraction4 = bigFraction0.pow(2502L);
      bigFraction4.getNumeratorAsLong();
      bigFraction2.divide((-2257L));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(696.0);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_QUARTER.getNumeratorAsLong();
      bigFraction1.ONE_QUARTER.negate();
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.TWO.reduce();
      bigFraction0.toString();
      bigFraction3.intValue();
      bigFraction0.getField();
      bigFraction2.divide((-1L));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 1359;
      BigFraction bigFraction0 = new BigFraction(2.712977886199951, 2.712977886199951, 1359);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction0.multiply((long) 1359);
      bigFraction2.getDenominatorAsLong();
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction(1L, 0, 1455);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.ONE.hashCode();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction1.multiply((-219L));
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = bigFraction3.getDenominator();
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction5 = bigFraction4.divide(bigFraction3);
      BigFraction bigFraction6 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction7 = bigFraction6.subtract((-1390L));
      bigFraction4.pow((-5407.1950194));
      bigFraction0.multiply((-55));
      BigFraction bigFraction8 = bigFraction2.add(bigInteger0);
      bigFraction7.compareTo(bigFraction6);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction5.multiply(bigInteger1);
      BigFraction bigFraction9 = BigFraction.getReducedFraction(1, 4);
      bigFraction3.subtract(bigFraction9);
      BigFraction bigFraction10 = bigFraction7.pow(bigInteger1);
      bigFraction1.multiply(bigFraction7);
      bigFraction10.divide(bigFraction4);
      bigFraction8.pow(8);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction((-3386.5148), 2407);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.negate();
      bigFraction1.ONE_HALF.compareTo(bigFraction2);
      BigFraction bigFraction3 = bigFraction1.TWO_QUARTERS.abs();
      BigFraction bigFraction4 = new BigFraction(2407, 4503599627370495L);
      BigFraction bigFraction5 = bigFraction4.divide(bigFraction3);
      bigFraction3.getDenominatorAsLong();
      BigFraction bigFraction6 = new BigFraction(4503599627370496L, (-342038L));
      bigFraction6.longValue();
      bigFraction3.equals(bigFraction4);
      bigFraction5.reduce();
      bigFraction6.compareTo(bigFraction1);
      bigFraction0.percentageValue();
      bigFraction1.getNumeratorAsInt();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction7 = bigFraction1.divide(bigInteger0);
      bigFraction7.getField();
      bigFraction1.divide(1438);
      bigFraction1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1236, 1);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.ONE_THIRD.pow(1257);
      bigFraction0.TWO_FIFTHS.getField();
      BigFraction bigFraction4 = bigFraction2.FOUR_FIFTHS.multiply(1);
      BigFraction bigFraction5 = bigFraction2.ONE_THIRD.add(bigFraction0);
      bigFraction5.ZERO.compareTo(bigFraction2);
      BigFraction bigFraction6 = bigFraction0.subtract((-1593L));
      BigFraction bigFraction7 = bigFraction3.divide(bigFraction4);
      bigFraction1.ONE_THIRD.reduce();
      BigFraction bigFraction8 = bigFraction4.TWO_FIFTHS.pow((-1));
      BigFraction bigFraction9 = bigFraction8.ONE.divide(bigFraction5);
      bigFraction9.THREE_QUARTERS.multiply(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction10 = bigFraction9.FOUR_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction11 = new BigFraction(0L);
      BigFraction bigFraction12 = bigFraction0.add(bigFraction11);
      bigFraction12.abs();
      bigFraction6.floatValue();
      bigFraction0.getDenominatorAsLong();
      bigFraction2.percentageValue();
      bigFraction6.TWO_THIRDS.multiply(bigFraction0);
      Object object0 = new Object();
      bigFraction4.equals(object0);
      bigFraction1.getNumeratorAsLong();
      bigFraction3.add(1236);
      bigFraction7.floatValue();
      bigFraction10.floatValue();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.FOUR_FIFTHS.bigDecimalValue();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction1 = new BigFraction(1312);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction0.TWO_QUARTERS.add((long) 1312);
      BigFraction bigFraction3 = bigFraction1.multiply((-1));
      BigFraction bigFraction4 = bigFraction3.subtract(bigFraction2);
      BigFraction bigFraction5 = bigFraction4.subtract(1L);
      bigFraction5.ZERO.getDenominatorAsLong();
      BigFraction bigFraction6 = bigFraction1.pow(1863L);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction4.divide(bigInteger0);
      bigFraction6.getNumerator();
      bigFraction1.getNumeratorAsLong();
      bigFraction0.intValue();
      bigFraction6.divide(2253);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction((-3386.5148), 2407);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.negate();
      bigFraction1.ONE_HALF.compareTo(bigFraction2);
      BigFraction bigFraction3 = bigFraction1.TWO_QUARTERS.abs();
      BigFraction bigFraction4 = bigFraction1.ONE.reduce();
      BigFraction bigFraction5 = bigFraction4.TWO.multiply((long) 2407);
      BigFraction bigFraction6 = bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = bigFraction4.getDenominator();
      BigFraction bigFraction7 = bigFraction4.divide(bigFraction5);
      BigFraction bigFraction8 = bigFraction2.subtract((long) 2407);
      bigFraction4.MINUS_ONE.pow(4638.595751170174);
      BigFraction bigFraction9 = bigFraction8.TWO.multiply(127);
      BigFraction bigFraction10 = bigFraction9.TWO.add(bigInteger0);
      bigFraction1.compareTo(bigFraction5);
      BigFraction bigFraction11 = bigFraction7.multiply(bigInteger0);
      BigFraction bigFraction12 = BigFraction.getReducedFraction(1, 87);
      BigFraction bigFraction13 = bigFraction6.subtract(bigFraction3);
      bigFraction8.pow(bigInteger0);
      bigFraction10.multiply(bigFraction13);
      bigFraction11.divide(bigFraction12);
      bigFraction9.pow(1075);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-145.602914678644));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.TWO_THIRDS.reduce();
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.negate();
      bigFraction2.bigDecimalValue((-1), 0);
      bigFraction2.THREE_QUARTERS.multiply(bigFraction0);
      bigFraction0.TWO_FIFTHS.multiply(bigInteger0);
      bigFraction0.TWO_THIRDS.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.pow((-1L));
      // Undeclared exception!
      try { 
        bigFraction3.TWO_THIRDS.bigDecimalValue((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.ONE_THIRD.multiply(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.pow(6722166367014452318L);
      bigFraction1.ONE_HALF.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.add(6722166367014452318L);
      BigFraction bigFraction3 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.add(6722166367014452318L);
      bigFraction4.ONE_HALF.add(bigInteger0);
      int int0 = (-432);
      bigFraction0.FOUR_FIFTHS.bigDecimalValue(1);
      BigFraction.getReducedFraction((-432), 498);
      bigFraction2.ONE_FIFTH.doubleValue();
      BigFraction bigFraction5 = bigFraction0.ZERO.multiply(1);
      bigFraction0.ONE_HALF.floatValue();
      bigFraction5.TWO.longValue();
      // Undeclared exception!
      try { 
        bigFraction0.ONE.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1), (-1));
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow((long) (-1));
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.divide((long) (-1));
      bigFraction0.percentageValue();
      BigFraction bigFraction3 = bigFraction1.ONE_THIRD.add(bigFraction0);
      bigFraction3.THREE_QUARTERS.pow(100.0);
      bigFraction3.ONE_QUARTER.reduce();
      BigFraction bigFraction4 = bigFraction1.pow((-1515));
      bigFraction4.ZERO.getNumeratorAsInt();
      bigFraction4.TWO_FIFTHS.doubleValue();
      BigFraction bigFraction5 = bigFraction0.pow((long) (-1515));
      bigFraction5.THREE_FIFTHS.bigDecimalValue();
      bigFraction2.negate();
      // Undeclared exception!
      try { 
        bigFraction4.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.THREE_QUARTERS.getDenominatorAsInt();
      bigFraction0.equals("LV)28;{+O7'C1");
      int int0 = (-1);
      BigFraction bigFraction1 = bigFraction0.multiply((-1));
      bigFraction1.TWO.floatValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.ONE_HALF.divide(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger1);
      BigFraction bigFraction3 = bigFraction2.ONE.multiply(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.multiply(4);
      bigFraction1.intValue();
      BigFraction bigFraction5 = bigFraction0.add(bigFraction1);
      bigFraction0.floatValue();
      bigFraction1.longValue();
      bigFraction0.add((long) (-1));
      BigFraction bigFraction6 = BigFraction.THREE_FIFTHS;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte) (-53);
      byteArray0[8] = (byte) (-36);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigFraction4.divide(bigInteger2);
      BigFraction bigFraction7 = bigFraction2.divide(bigFraction6);
      bigFraction7.THREE_FIFTHS.add((long) (-1));
      bigFraction2.doubleValue();
      bigFraction5.THREE_QUARTERS.getNumeratorAsLong();
      bigFraction5.subtract(400L);
      bigFraction5.subtract(bigInteger0);
      bigFraction4.add(1);
      int int1 = 2831;
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(2831);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.THREE_FIFTHS.reciprocal();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = bigFraction0.subtract(1L);
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.pow(1L);
      bigFraction0.getNumerator();
      BigFraction bigFraction3 = bigFraction0.pow(1L);
      bigFraction0.pow((-1812));
      bigFraction3.TWO_FIFTHS.bigDecimalValue();
      BigFraction.getReducedFraction((-1812), (-1812));
      bigFraction3.toString();
      BigFraction bigFraction4 = bigFraction2.abs();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction4.divide(bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction4.ONE_QUARTER.bigDecimalValue((-1812));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = (-1);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(3.851445905038431E134, (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 385,144,590,503,843,100,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      bigFraction0.THREE_QUARTERS.bigDecimalValue();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.subtract(bigFraction1);
      bigFraction3.TWO_QUARTERS.getDenominatorAsLong();
      bigFraction2.ONE.getNumeratorAsLong();
      bigFraction0.multiply(48L);
      bigFraction0.TWO_FIFTHS.reduce();
      bigFraction2.getDenominator();
      bigFraction0.add(0L);
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 1940;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1940, (-1));
      bigFraction0.getNumeratorAsInt();
      bigFraction0.FOUR_FIFTHS.hashCode();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction0.THREE_FIFTHS.subtract(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      int int0 = (-2263);
      BigFraction bigFraction1 = new BigFraction((-2263));
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.subtract((long) (-2263));
      BigInteger bigInteger0 = null;
      try { 
        bigFraction2.TWO_THIRDS.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.ONE.hashCode();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.ONE_HALF.multiply(3448L);
      bigFraction0.getDenominatorAsLong();
      bigFraction0.longValue();
      bigFraction0.TWO_THIRDS.equals(bigFraction3);
      BigFraction bigFraction4 = bigFraction2.reduce();
      bigFraction1.compareTo(bigFraction0);
      bigFraction2.percentageValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.divide(bigInteger0);
      bigFraction4.getField();
      bigFraction0.divide(1);
      bigFraction4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.FOUR_FIFTHS.negate();
      bigFraction0.getDenominator();
      BigFraction bigFraction1 = bigFraction0.ZERO.subtract(1222);
      bigFraction1.TWO_THIRDS.getField();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.ONE_QUARTER.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(3681, 943);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-555.4502771), 0.0, 887);
      BigFraction bigFraction1 = bigFraction0.TWO.multiply((-360));
      bigFraction0.ONE_THIRD.subtract((long) 887);
      Object object0 = new Object();
      bigFraction0.equals(object0);
      BigFraction bigFraction2 = bigFraction0.multiply((-360));
      bigFraction2.ONE.add((long) 887);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ONE_THIRD.subtract((long) (-360));
      bigFraction1.pow(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.bigDecimalValue(2801, 2801);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(37, (-3652));
      bigFraction0.equals("");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 3513;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.0, 3513);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 1);
      bigFraction0.THREE_FIFTHS.longValue();
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.multiply(0L);
      bigFraction0.toString();
      bigFraction0.percentageValue();
      bigFraction0.percentageValue();
      bigFraction1.ONE_HALF.percentageValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.ONE_QUARTER.pow(bigInteger0);
      bigFraction0.equals("1");
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.subtract(0L);
      bigFraction2.MINUS_ONE.compareTo(bigFraction1);
      bigFraction2.TWO_FIFTHS.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction0.reduce();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction3.THREE_FIFTHS.pow(bigInteger1);
      bigFraction0.doubleValue();
      BigFraction bigFraction4 = bigFraction1.add(29L);
      int int1 = (-1);
      bigFraction4.THREE_QUARTERS.subtract(bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction3.ZERO.pow((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(0L);
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(638);
      bigInteger0.equals(bigFraction0);
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      bigFraction2.TWO_THIRDS.percentageValue();
      bigFraction1.doubleValue();
      bigFraction0.intValue();
      bigFraction0.floatValue();
      BigFraction bigFraction3 = bigFraction1.multiply(1159);
      bigFraction3.TWO.getDenominatorAsLong();
      bigFraction2.percentageValue();
      bigFraction2.bigDecimalValue(0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2257, 100);
      bigFraction0.ONE_HALF.bigDecimalValue();
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.subtract((-356L));
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.pow((long) 2257);
      bigFraction2.ONE_HALF.getNumeratorAsLong();
      bigFraction1.pow(1);
      BigFraction bigFraction3 = BigFraction.ONE_QUARTER;
      bigFraction3.ONE_QUARTER.getDenominatorAsInt();
      bigFraction1.equals(bigFraction3);
      bigFraction2.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction3.add(bigInteger0);
      bigFraction1.add(bigInteger0);
      bigFraction3.add((-172));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_QUARTERS.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(100);
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.ONE_THIRD.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.add(100);
      bigFraction3.getDenominatorAsInt();
      bigFraction1.THREE_FIFTHS.percentageValue();
      byte[] byteArray0 = new byte[1];
      BigFraction bigFraction4 = bigFraction2.TWO.divide(3156L);
      byteArray0[0] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.ONE.bigDecimalValue();
      BigFraction bigFraction5 = bigFraction1.subtract(bigInteger0);
      bigFraction5.ONE_THIRD.pow(0.0);
      bigFraction1.ONE_FIFTH.divide(bigInteger0);
      BigFraction bigFraction6 = bigFraction2.subtract(522L);
      bigFraction6.pow((double) 522L);
      BigFraction bigFraction7 = bigFraction4.multiply((-2005L));
      bigFraction7.subtract(bigInteger0);
      bigFraction2.ONE.getField();
      bigFraction5.floatValue();
      bigFraction4.toString();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1236, 1);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.ONE_THIRD.pow(1236);
      BigFraction bigFraction4 = bigFraction2.FOUR_FIFTHS.multiply(1);
      BigFraction bigFraction5 = bigFraction2.ONE_THIRD.add(bigFraction0);
      bigFraction5.ZERO.compareTo(bigFraction2);
      BigFraction bigFraction6 = bigFraction0.subtract((-1593L));
      bigFraction3.divide(bigFraction4);
      bigFraction1.ONE_THIRD.reduce();
      BigFraction bigFraction7 = bigFraction4.TWO_FIFTHS.pow((-1));
      BigFraction bigFraction8 = bigFraction7.ONE.divide(bigFraction5);
      BigFraction bigFraction9 = bigFraction8.THREE_QUARTERS.multiply(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction10 = bigFraction8.FOUR_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction11 = new BigFraction(0L);
      BigFraction bigFraction12 = bigFraction0.add(bigFraction11);
      bigFraction12.abs();
      bigFraction6.floatValue();
      bigFraction0.getDenominatorAsLong();
      bigFraction2.percentageValue();
      bigFraction6.TWO_THIRDS.multiply(bigFraction0);
      Object object0 = new Object();
      bigFraction4.equals(object0);
      bigFraction1.getNumeratorAsLong();
      bigFraction6.getField();
      bigFraction2.percentageValue();
      BigFraction bigFraction13 = bigFraction3.subtract(bigInteger0);
      bigFraction10.compareTo(bigFraction9);
      // Undeclared exception!
      try { 
        bigFraction13.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.TWO_QUARTERS.doubleValue();
      BigFraction bigFraction1 = bigFraction0.divide(3916L);
      bigFraction1.MINUS_ONE.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)36;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.longValueExact();
      bigInteger0.longValue();
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction2.subtract(bigFraction1);
      BigInteger bigInteger1 = bigFraction1.getDenominator();
      bigFraction2.pow(bigInteger1);
      bigFraction0.pow((int) (byte)26);
      BigFraction.getReducedFraction((-1), (-1));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.floatValue();
      BigFraction bigFraction1 = new BigFraction(4);
      bigFraction0.MINUS_ONE.abs();
      bigFraction1.TWO_FIFTHS.pow(839);
      BigFraction.getReducedFraction(4, 4);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction2.THREE_FIFTHS.toString();
      bigFraction0.longValue();
      bigFraction0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.TWO_FIFTHS.bigDecimalValue();
      bigInteger0.byteValueExact();
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.reduce();
      int int0 = 0;
      BigFraction bigFraction2 = BigFraction.getReducedFraction(0, (-1953));
      bigFraction1.ONE_THIRD.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction1.ONE_FIFTH.reciprocal();
      bigFraction0.ONE_THIRD.add(0);
      BigFraction bigFraction4 = bigFraction3.THREE_QUARTERS.pow(bigInteger0);
      bigFraction0.intValue();
      BigFraction bigFraction5 = bigFraction3.TWO_THIRDS.add(bigFraction2);
      BigFraction bigFraction6 = bigFraction0.abs();
      bigFraction6.ONE_HALF.bigDecimalValue((-1953), 1);
      bigFraction6.FOUR_FIFTHS.multiply(bigFraction3);
      bigFraction1.ONE_FIFTH.getNumeratorAsInt();
      bigFraction6.bigDecimalValue();
      bigFraction3.getNumerator();
      BigFraction bigFraction7 = bigFraction0.add((long) 0);
      bigFraction7.ZERO.divide((-1));
      BigFraction bigFraction8 = bigFraction5.abs();
      BigFraction bigFraction9 = bigFraction4.multiply(bigInteger0);
      bigFraction5.FOUR_FIFTHS.hashCode();
      bigFraction9.TWO_THIRDS.hashCode();
      // Undeclared exception!
      try { 
        bigFraction8.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2754);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-59);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.abs();
      bigFraction2.MINUS_ONE.multiply((-1501L));
      BigFraction bigFraction3 = bigFraction0.divide(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.subtract(bigInteger0);
      BigFraction bigFraction5 = bigFraction3.pow(248L);
      bigFraction5.add(248L);
      bigFraction4.reciprocal();
      bigFraction2.subtract((-1L));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigInteger0.toByteArray();
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.subtract(5);
      BigFraction bigFraction2 = bigFraction1.TWO.pow(5);
      bigFraction0.THREE_FIFTHS.hashCode();
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction4 = bigFraction0.TWO.divide(bigFraction3);
      BigFraction bigFraction5 = bigFraction4.TWO.negate();
      bigFraction0.getField();
      bigFraction3.ONE_THIRD.divide(5648769086999809661L);
      BigFraction bigFraction6 = bigFraction3.divide(bigFraction4);
      bigFraction6.FOUR_FIFTHS.getDenominatorAsInt();
      BigFraction bigFraction7 = bigFraction0.THREE_FIFTHS.subtract(bigFraction4);
      bigFraction7.ONE.getNumeratorAsLong();
      bigFraction6.getNumeratorAsLong();
      bigFraction5.getNumerator();
      bigFraction5.divide((-1));
      bigFraction0.ONE.percentageValue();
      BigFraction bigFraction8 = bigFraction3.multiply((-461L));
      bigFraction8.ONE_HALF.doubleValue();
      BigFraction bigFraction9 = bigFraction8.multiply(bigFraction5);
      BigFraction bigFraction10 = bigFraction9.divide(5);
      bigFraction10.THREE_QUARTERS.getDenominatorAsInt();
      bigFraction7.pow(1);
      bigFraction3.TWO_FIFTHS.subtract(79);
      bigFraction2.pow(4241.62003174);
      bigFraction9.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(903L);
      bigFraction0.ONE_THIRD.add(903L);
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-1), (-1));
      bigFraction0.bigDecimalValue(3);
      bigFraction1.longValue();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.712977886199951, 2.712977886199951, 1359);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add(0);
      MockRandom mockRandom0 = new MockRandom();
      bigFraction1.TWO_QUARTERS.getDenominatorAsLong();
      BigInteger bigInteger0 = new BigInteger(1359, 1359, mockRandom0);
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.subtract(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.subtract(bigFraction1);
      bigFraction4.intValue();
      bigFraction0.TWO_FIFTHS.reciprocal();
      bigFraction1.pow((-445.19602219));
      bigFraction2.subtract(bigFraction1);
      bigFraction2.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.add(bigInteger0);
      bigFraction1.doubleValue();
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger0);
      bigFraction0.FOUR_FIFTHS.getField();
      BigFraction bigFraction3 = bigFraction0.reduce();
      BigFraction bigFraction4 = bigFraction0.THREE_FIFTHS.pow(0);
      bigFraction4.ONE_HALF.getNumeratorAsLong();
      bigFraction3.pow(0.0);
      bigFraction2.multiply(0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(696.0);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_QUARTER.getNumeratorAsLong();
      bigFraction1.ONE_QUARTER.negate();
      bigFraction0.add(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.TWO.reduce();
      bigFraction1.bigDecimalValue();
      bigFraction0.toString();
      bigFraction2.intValue();
      BigFraction bigFraction3 = bigFraction0.pow(2502L);
      bigFraction3.getField();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow((-809));
      bigFraction1.MINUS_ONE.pow((long) (-809));
      BigInteger bigInteger0 = BigInteger.valueOf((-2525L));
      double double0 = bigFraction0.ONE_HALF.pow((-1.0));
      assertEquals(2.0, double0, 0.01);
      
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger0);
      bigFraction2.ZERO.hashCode();
      bigFraction0.getField();
      bigFraction0.divide(bigFraction2);
      double double1 = bigFraction0.ONE.percentageValue();
      assertEquals(100.0, double1, 0.01);
      
      BigFraction bigFraction3 = bigFraction0.subtract(2671);
      String string0 = bigFraction3.MINUS_ONE.toString();
      assertEquals("-1", string0);
      
      BigFraction bigFraction4 = bigFraction2.multiply(1681);
      assertEquals((byte) (-45), bigFraction4.byteValue());
      
      float float0 = bigFraction2.TWO_THIRDS.floatValue();
      assertEquals(0.6666667F, float0, 0.01F);
      
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-163), (-540));
      BigFraction bigFraction6 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction7 = bigFraction5.ONE_QUARTER.subtract(bigFraction6);
      bigFraction7.ONE_QUARTER.multiply(bigInteger0);
      BigFraction bigFraction8 = bigFraction2.divide((-1658));
      bigFraction7.ONE_QUARTER.subtract((-163));
      BigFraction bigFraction9 = bigFraction8.add(bigInteger0);
      bigFraction9.TWO_FIFTHS.equals(bigFraction0);
      BigFraction bigFraction10 = bigFraction5.reduce();
      BigFraction bigFraction11 = bigFraction7.pow(bigInteger0);
      assertEquals((short)7094, bigFraction11.shortValue());
      
      long long0 = bigFraction3.longValue();
      assertEquals((-2670L), long0);
      
      BigFraction bigFraction12 = bigFraction8.divide(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction12.byteValue());
      assertEquals((byte)1, bigFraction8.byteValue());
      
      bigFraction6.divide(826);
      BigInteger bigInteger1 = bigFraction5.getDenominator();
      assertTrue(bigFraction5.equals((Object)bigFraction10));
      assertEquals((byte)28, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.hashCode();
      bigFraction0.ZERO.getNumeratorAsInt();
      bigFraction0.toString();
      BigFraction bigFraction1 = bigFraction0.reduce();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byte byte0 = (byte)1;
      byteArray0[1] = (byte)1;
      bigFraction1.FOUR_FIFTHS.multiply(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.bigDecimalValue(1598);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2537L), (-159L));
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.abs();
      bigFraction1.FOUR_FIFTHS.subtract(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.ONE_QUARTER.percentageValue();
      bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction2.ONE_HALF.bigDecimalValue(111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
