/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 12:00:32 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2147483644);
      bigFraction0.bigDecimalValue(2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-80);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1756.9456148359, 5);
      bigFraction0.bigDecimalValue(5);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Random.setNextRandom((-728));
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.THREE_FIFTHS.hashCode();
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.add((-728));
      bigFraction1.ONE.getField();
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.negate();
      int int0 = 482;
      BigFraction bigFraction3 = bigFraction1.ONE_HALF.multiply(482);
      bigFraction3.TWO_FIFTHS.divide((long) 482);
      bigFraction3.THREE_QUARTERS.getNumeratorAsLong();
      bigFraction0.divide((long) (-728));
      bigFraction2.TWO.hashCode();
      int int1 = 7;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.abs();
      BigFraction.getReducedFraction(4, 93);
      bigFraction0.bigDecimalValue(4, 3);
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.ONE_FIFTH.add(bigInteger0);
      bigFraction2.MINUS_ONE.bigDecimalValue(2142, 3);
      BigInteger bigInteger1 = bigFraction0.getNumerator();
      bigFraction0.ZERO.abs();
      BigFraction bigFraction3 = bigFraction2.add((long) 4);
      bigFraction3.TWO.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction3.TWO_FIFTHS.reduce();
      BigFraction bigFraction5 = bigFraction3.ONE_QUARTER.divide(4);
      bigFraction2.ONE.percentageValue();
      bigFraction5.ONE.getDenominatorAsInt();
      BigFraction bigFraction6 = bigFraction0.multiply((-1379L));
      bigFraction6.TWO_FIFTHS.compareTo(bigFraction4);
      bigFraction6.ONE_THIRD.hashCode();
      BigFraction bigFraction7 = bigFraction6.add(3);
      bigFraction7.multiply(9007199254739968L);
      bigFraction6.ONE.pow(bigInteger1);
      bigFraction7.getNumeratorAsInt();
      bigFraction2.pow(bigInteger1);
      BigFraction bigFraction8 = bigFraction7.multiply(bigInteger1);
      bigFraction0.toString();
      BigInteger bigInteger2 = bigFraction8.getDenominator();
      bigFraction2.subtract(bigInteger2);
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.012280259813581162);
      BigFraction bigFraction1 = bigFraction0.subtract(0L);
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      Object object0 = new Object();
      bigFraction1.equals(object0);
      bigFraction1.abs();
      bigFraction0.compareTo(bigFraction2);
      bigFraction2.divide(bigFraction2);
      bigFraction2.bigDecimalValue(2799, 0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(915L);
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction0.pow(100L);
      BigFraction bigFraction3 = bigFraction2.pow(3944L);
      bigFraction0.subtract(bigFraction1);
      bigFraction3.floatValue();
      BigFraction bigFraction4 = new BigFraction((-1522.345508384));
      bigFraction4.ONE_QUARTER.multiply((-3243));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction2.add(bigInteger0);
      bigFraction3.getNumerator();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1702.194899);
      bigFraction0.getField();
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.pow((-1829L));
      bigFraction0.pow((-4161L));
      BigFraction bigFraction4 = bigFraction3.subtract(bigFraction2);
      bigFraction4.FOUR_FIFTHS.getNumeratorAsInt();
      bigFraction4.add(bigFraction1);
      bigFraction4.doubleValue();
      bigFraction1.pow(9);
      bigFraction3.multiply((-2961L));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.31845372915267944);
      bigFraction0.getField();
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction1.ONE_FIFTH.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.pow(3944L);
      bigFraction3.TWO_FIFTHS.pow(3944L);
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.subtract(bigFraction2);
      bigFraction4.add(bigFraction1);
      bigFraction3.doubleValue();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.31845372915267944);
      bigFraction0.getField();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction1.ONE_FIFTH.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.pow(3944L);
      bigFraction3.TWO_FIFTHS.pow(3944L);
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.subtract(bigFraction2);
      bigFraction4.add(bigFraction1);
      bigFraction3.doubleValue();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.31845372915267944);
      bigFraction0.getField();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.pow(3944L);
      bigFraction3.TWO_FIFTHS.pow(3944L);
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.subtract(bigFraction2);
      bigFraction3.floatValue();
      bigFraction4.abs();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2644.0376909459637));
      BigFraction bigFraction1 = bigFraction0.subtract(4503599627370495L);
      bigFraction1.getDenominator();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.pow(100);
      bigFraction1.TWO_FIFTHS.subtract(2147483647L);
      bigFraction1.THREE_QUARTERS.hashCode();
      BigFraction bigFraction2 = bigFraction0.divide(836);
      BigFraction bigFraction3 = bigFraction0.add((-801));
      bigFraction2.ONE_FIFTH.doubleValue();
      BigFraction bigFraction4 = bigFraction2.subtract(4291);
      BigFraction bigFraction5 = bigFraction4.add(836);
      bigFraction5.TWO_FIFTHS.getNumeratorAsLong();
      bigFraction3.getNumerator();
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.equals(bigFraction0);
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-631.743875722));
      bigFraction0.divide(37);
      bigFraction0.TWO_FIFTHS.percentageValue();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO.pow(bigInteger0);
      bigFraction0.MINUS_ONE.abs();
      bigFraction1.TWO_THIRDS.pow((-779.803410364));
      bigFraction0.equals(bigInteger0);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert infinite value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.5041985511779785, (-839));
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigFraction0.pow((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.pow((-274L));
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.multiply(bigFraction0);
      bigFraction1.TWO_QUARTERS.doubleValue();
      BigFraction bigFraction3 = bigFraction0.divide(2147483647L);
      bigFraction3.TWO_THIRDS.intValue();
      BigFraction bigFraction4 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction5 = bigFraction0.abs();
      bigFraction5.ONE_QUARTER.getNumeratorAsLong();
      bigFraction0.getDenominatorAsLong();
      BigFraction.getReducedFraction(719823951, 719823951);
      bigFraction4.ONE_HALF.getNumeratorAsInt();
      BigFraction bigFraction6 = bigFraction4.THREE_FIFTHS.divide(bigFraction0);
      bigFraction2.floatValue();
      BigFraction bigFraction7 = bigFraction4.subtract(bigInteger0);
      BigFraction bigFraction8 = bigFraction2.add(2147483396);
      bigFraction7.getDenominator();
      bigFraction4.subtract(1626L);
      bigFraction8.toString();
      // Undeclared exception!
      try { 
        bigFraction6.bigDecimalValue(2147419369, (-621));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.ZERO.bigDecimalValue(4);
      Object object0 = new Object();
      bigFraction0.TWO_QUARTERS.equals(object0);
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.ONE.percentageValue();
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.subtract(bigFraction1);
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsLong();
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.5686274502968445E-4, 10);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2578, 64368266);
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2820);
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1044L);
      byte[] byteArray0 = new byte[4];
      bigFraction0.TWO_THIRDS.multiply(1044L);
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add(bigInteger0);
      bigFraction1.TWO_THIRDS.getNumeratorAsLong();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.TWO.divide(bigInteger1);
      BigFraction bigFraction3 = bigFraction0.add((int) (byte)3);
      bigFraction1.TWO_THIRDS.pow(2076);
      BigFraction bigFraction4 = bigFraction1.add(bigInteger0);
      BigFraction bigFraction5 = bigFraction1.multiply(bigInteger0);
      bigFraction5.MINUS_ONE.longValue();
      bigFraction3.ONE_QUARTER.multiply((long) (byte) (-121));
      bigFraction1.bigDecimalValue();
      bigFraction2.reduce();
      BigFraction bigFraction6 = bigFraction3.THREE_FIFTHS.subtract(bigFraction0);
      bigFraction1.toString();
      bigFraction3.reduce();
      BigFraction bigFraction7 = bigFraction5.add(5);
      bigFraction7.MINUS_ONE.intValue();
      BigFraction bigFraction8 = bigFraction4.divide(bigFraction1);
      bigFraction8.divide(bigFraction6);
      bigFraction5.toString();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = new BigFraction(0.0);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-39);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction1.divide(bigInteger1);
      bigFraction2.doubleValue();
      BigFraction bigFraction4 = bigFraction1.subtract(bigFraction3);
      bigFraction1.doubleValue();
      bigFraction4.equals(bigFraction3);
      bigFraction3.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.pow(614);
      Object object0 = new Object();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.ONE.pow(bigInteger0);
      bigFraction0.ONE_QUARTER.divide((-5071L));
      bigFraction1.equals(object0);
      BigFraction bigFraction2 = bigFraction1.pow(614);
      bigFraction2.FOUR_FIFTHS.getNumeratorAsLong();
      bigFraction0.abs();
      bigFraction1.getDenominator();
      bigFraction2.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction0.subtract(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction.getReducedFraction(1916, 1916);
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = new BigFraction(1916, 2.325043175176178E-8, 1916);
      // Undeclared exception!
      try { 
        bigFraction1.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.subtract(1494);
      bigFraction1.getNumerator();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.ONE_HALF.add(bigInteger0);
      bigFraction2.ONE.percentageValue();
      bigFraction1.floatValue();
      bigFraction2.getField();
      Object object0 = new Object();
      bigFraction0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-273.6), (-1));
      BigFraction bigFraction1 = new BigFraction((-1));
      bigFraction0.toString();
      bigFraction1.pow((double) (-1));
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.negate();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.THREE_QUARTERS.divide(bigInteger0);
      bigFraction0.getNumerator();
      BigFraction bigFraction2 = bigFraction1.pow(37);
      bigFraction2.pow((long) 37);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      int int0 = 10;
      BigFraction bigFraction1 = new BigFraction(804.1015871425303, 10);
      bigFraction1.THREE_FIFTHS.add(10);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2147483645, 2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = new Object();
      BigFraction bigFraction0 = new BigFraction((-3033.9918863469647));
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.abs();
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction2.equals(object0);
      bigFraction0.abs();
      BigFraction bigFraction3 = BigFraction.ONE;
      bigFraction2.pow(0L);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1044L);
      byte[] byteArray0 = new byte[4];
      bigFraction0.TWO_THIRDS.multiply(1044L);
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add(bigInteger0);
      bigFraction1.TWO_THIRDS.getNumeratorAsLong();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.TWO.divide(bigInteger1);
      BigFraction bigFraction3 = bigFraction0.add(2147450880);
      bigFraction1.TWO_THIRDS.pow(2076);
      BigFraction bigFraction4 = bigFraction0.pow(bigInteger1);
      BigFraction bigFraction5 = bigFraction1.add(bigInteger0);
      BigFraction bigFraction6 = bigFraction1.multiply(bigInteger0);
      bigFraction6.MINUS_ONE.longValue();
      bigFraction3.ONE_QUARTER.multiply((long) (byte) (-121));
      bigFraction4.bigDecimalValue();
      bigFraction2.reduce();
      bigFraction3.THREE_FIFTHS.subtract(bigFraction0);
      bigFraction4.toString();
      bigFraction3.reduce();
      bigFraction6.add(5);
      bigFraction5.divide(bigFraction4);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = new BigFraction(0.0);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = BigFraction.ONE;
      BigFraction bigFraction4 = new BigFraction((-1L));
      bigFraction2.pow(0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = new Object();
      BigFraction bigFraction0 = new BigFraction((-3033.9918863469647));
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.abs();
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction2.equals(object0);
      BigFraction bigFraction3 = bigFraction0.abs();
      bigFraction3.compareTo(bigFraction0);
      bigFraction2.pow((long) 1);
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1986), (-1986));
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte) (-76);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger1);
      bigFraction1.multiply(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = new BigFraction(0.0);
      bigFraction0.add(bigFraction1);
      bigFraction1.getNumeratorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      bigFraction2.multiply(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.reciprocal();
      bigFraction1.ONE_THIRD.pow(2);
      BigFraction bigFraction2 = bigFraction0.multiply((-3962));
      bigFraction2.bigDecimalValue();
      bigFraction2.pow((-1226.0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO.pow(bigInteger0);
      Object object0 = new Object();
      bigFraction0.equals(object0);
      BigFraction bigFraction2 = bigFraction0.abs();
      bigFraction1.pow((-286.48116572575));
      BigFraction bigFraction3 = bigFraction0.subtract(503);
      bigFraction3.toString();
      BigFraction bigFraction4 = bigFraction2.multiply(1590);
      int int0 = 868;
      BigFraction bigFraction5 = new BigFraction((-286.48116572575), 0.0, 868);
      BigFraction bigFraction6 = bigFraction4.divide(1075);
      BigFraction bigFraction7 = new BigFraction(1.031994543154724E-7, (-712));
      bigFraction7.TWO.subtract(503);
      bigFraction5.divide((-582L));
      // Undeclared exception!
      try { 
        bigFraction6.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.abs();
      bigFraction0.floatValue();
      bigFraction0.THREE_FIFTHS.getField();
      BigFraction bigFraction3 = bigFraction0.subtract(0L);
      bigFraction3.getDenominatorAsInt();
      bigFraction0.ZERO.percentageValue();
      BigFraction bigFraction4 = new BigFraction(1);
      bigFraction2.negate();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO.pow(bigInteger0);
      bigFraction0.MINUS_ONE.abs();
      bigFraction1.TWO_THIRDS.pow((-286.48116572575));
      BigFraction bigFraction2 = bigFraction0.subtract(1075);
      bigFraction0.ONE_QUARTER.add(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.multiply(1938L);
      BigFraction bigFraction4 = new BigFraction((-1455.93198), 418);
      bigFraction4.divide((long) 418);
      BigDecimal bigDecimal0 = bigFraction2.bigDecimalValue();
      bigFraction3.doubleValue();
      BigFraction bigFraction5 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction1.equals(bigDecimal0);
      bigFraction2.subtract((long) 418);
      BigFraction bigFraction6 = new BigFraction(4136L, (long) 418);
      bigFraction6.divide(1L);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.percentageValue();
      bigFraction0.getField();
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.TWO.divide(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.add((-2656L));
      BigFraction bigFraction4 = bigFraction2.reciprocal();
      bigFraction1.reciprocal();
      BigFraction bigFraction5 = bigFraction1.subtract(1466L);
      BigFraction.getReducedFraction(2, 37);
      BigFraction bigFraction6 = new BigFraction((-1463.8933001100638), 2920);
      bigFraction6.ONE_QUARTER.subtract(bigFraction3);
      BigFraction bigFraction7 = BigFraction.FOUR_FIFTHS;
      bigFraction5.subtract(bigFraction7);
      bigFraction4.add((long) 2920);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-28);
      byte byte0 = (byte) (-15);
      byteArray0[4] = (byte) (-15);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction0.pow(bigInteger1);
      bigFraction0.abs();
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      bigFraction1.pow(3471.0129);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(3471.0129, (byte)0, 5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 3,471.013 to fraction after 5 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.TWO.pow(bigInteger0);
      bigFraction0.MINUS_ONE.abs();
      long long0 = 6735652402402348L;
      BigFraction bigFraction1 = bigFraction0.multiply(6735652402402348L);
      BigFraction bigFraction2 = new BigFraction((-1.0));
      BigFraction bigFraction3 = BigFraction.ONE_THIRD;
      bigFraction1.add(bigFraction3);
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1473.746841939);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-1);
      bigFraction0.divide((int) (byte) (-1));
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)127;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)23;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.percentageValue();
      bigFraction0.getField();
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.TWO.divide(bigFraction0);
      bigFraction2.ONE_HALF.abs();
      bigFraction1.bigDecimalValue(1, 1);
      bigFraction0.compareTo(bigFraction2);
      bigFraction0.pow((-1718L));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, 1);
      bigFraction0.THREE_QUARTERS.bigDecimalValue();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.divide((-1698L));
      bigFraction1.add(1L);
      bigFraction0.reciprocal();
      BigFraction bigFraction2 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction3 = bigFraction2.reciprocal();
      bigFraction2.TWO_FIFTHS.hashCode();
      BigFraction bigFraction4 = bigFraction3.subtract(3462L);
      BigFraction bigFraction5 = BigFraction.ONE_QUARTER;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)22;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigFraction3.divide(bigInteger1);
      BigFraction bigFraction6 = new BigFraction((-1), 3462L);
      bigFraction4.subtract(bigFraction6);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.negate();
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.negate();
      bigFraction1.pow((-2000.5));
      int int0 = 1075;
      BigFraction bigFraction2 = bigFraction1.subtract(1075);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-69);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.add(bigInteger0);
      BigFraction bigFraction3 = BigFraction.ZERO;
      bigFraction3.getNumeratorAsLong();
      // Undeclared exception!
      try { 
        bigFraction3.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(619L);
      bigFraction1.TWO_FIFTHS.reciprocal();
      bigFraction1.MINUS_ONE.abs();
      BigFraction bigFraction2 = BigFraction.TWO_FIFTHS;
      bigFraction2.ONE_THIRD.abs();
      bigFraction0.floatValue();
      bigFraction0.THREE_FIFTHS.getField();
      BigFraction bigFraction3 = bigFraction0.subtract(0L);
      bigFraction3.getDenominatorAsInt();
      bigFraction0.ONE.bigDecimalValue(5);
      bigFraction0.ZERO.percentageValue();
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO.pow(bigInteger0);
      Object object0 = new Object();
      bigFraction0.equals(object0);
      BigFraction bigFraction2 = new BigFraction((-3033.9918863469647));
      BigFraction bigFraction3 = bigFraction0.subtract(9223372036854775690L);
      bigFraction3.getField();
      BigFraction bigFraction4 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction5 = bigFraction4.abs();
      bigFraction1.abs();
      Object object1 = new Object();
      BigFraction bigFraction6 = BigFraction.MINUS_ONE;
      bigFraction6.equals(object0);
      BigFraction bigFraction7 = bigFraction6.add((-649L));
      bigFraction7.reciprocal();
      bigFraction5.reciprocal();
      bigFraction0.subtract((-78L));
      BigFraction.getReducedFraction(2, (-2124));
      BigFraction bigFraction8 = null;
      try {
        bigFraction8 = new BigFraction((double) 2, 1284);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2 to fraction (-1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(0L);
      BigFraction bigFraction2 = new BigFraction(0.0);
      int int0 = (-3122);
      BigFraction bigFraction3 = bigFraction0.subtract((-3122));
      bigFraction1.toString();
      bigFraction2.multiply((-5094));
      BigFraction bigFraction4 = new BigFraction(0.0, 1.7976931348623157E308, (-5094));
      BigFraction bigFraction5 = bigFraction3.divide(1075);
      bigFraction5.multiply((-1073741824L));
      BigFraction bigFraction6 = null;
      try {
        bigFraction6 = new BigFraction((double) (-5094), (-4034));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -5,094 to fraction (5,095/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.percentageValue();
      bigFraction0.getField();
      bigFraction0.getField();
      bigFraction0.multiply(4294967295L);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1639, 283);
      Object object0 = new Object();
      bigFraction0.equals(object0);
      // Undeclared exception!
      try { 
        bigFraction1.pow(2140204042);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-127);
      bigFraction0.ONE_QUARTER.getDenominatorAsInt();
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-36);
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte)86;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      bigFraction1.ONE_QUARTER.multiply(bigFraction0);
      BigFraction bigFraction2 = BigFraction.getReducedFraction((byte)86, 1240);
      bigFraction2.ONE_THIRD.negate();
      bigFraction2.add(bigFraction1);
      bigFraction1.getField();
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(0L);
      BigFraction bigFraction2 = new BigFraction(0.0);
      BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)126;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.equals(bigInteger0);
      bigFraction3.pow((int) (byte) (-79));
      bigFraction1.pow((int) (byte)126);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO.pow(bigInteger0);
      bigFraction0.MINUS_ONE.abs();
      bigFraction1.TWO_THIRDS.pow((-286.48116572575));
      BigFraction bigFraction2 = bigFraction0.subtract(1075);
      bigFraction0.ONE_QUARTER.add(bigInteger0);
      bigFraction1.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction1.pow(bigInteger0);
      bigFraction2.divide(bigFraction3);
      bigFraction1.getField();
      BigFraction bigFraction4 = new BigFraction(bigInteger0);
      bigFraction2.bigDecimalValue();
      bigFraction0.doubleValue();
      bigFraction4.subtract(52);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, 1);
      bigFraction0.THREE_QUARTERS.bigDecimalValue();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.divide((-1698L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      bigFraction1.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction2.pow(bigInteger0);
      bigFraction0.divide(bigFraction2);
      bigFraction1.getField();
      bigFraction3.divide(bigInteger0);
      bigFraction3.bigDecimalValue((-2311), 1);
      bigFraction3.compareTo(bigFraction0);
      BigFraction bigFraction4 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction5 = bigFraction4.pow(bigInteger0);
      bigFraction5.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.TWO.equals((Object) null);
      BigFraction bigFraction1 = bigFraction0.pow(294L);
      bigFraction1.ONE_HALF.negate();
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.divide(bigFraction1);
      bigFraction0.getField();
      BigFraction bigFraction3 = bigFraction0.multiply((long) (-3083));
      BigFraction.getReducedFraction((-3083), 907);
      bigFraction2.pow((-3083));
      bigFraction2.divide(bigFraction3);
      bigFraction1.pow(2100);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.negate();
      bigFraction0.getNumeratorAsInt();
      bigFraction0.pow(445.6);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(1, 1);
      bigFraction0.add(bigFraction2);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction2.divide(bigInteger0);
      bigFraction2.longValue();
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction1);
      BigFraction.getReducedFraction(52, 181);
      BigFraction bigFraction4 = bigFraction3.add(52);
      BigFraction bigFraction5 = BigFraction.getReducedFraction(505, 1);
      bigFraction5.add((long) 181);
      BigFraction bigFraction6 = bigFraction5.add(bigInteger0);
      bigFraction4.compareTo(bigFraction1);
      bigFraction6.pow((long) 52);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(0L);
      byte[] byteArray0 = new byte[21];
      byte byte0 = (byte) (-79);
      byteArray0[0] = (byte) (-79);
      byte byte1 = (byte)119;
      byteArray0[1] = (byte)119;
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO.pow(bigInteger0);
      bigFraction1.TWO_THIRDS.pow((-286.48116572575));
      BigFraction bigFraction2 = bigFraction0.subtract(1075);
      bigFraction0.ONE_QUARTER.add(bigInteger0);
      bigFraction1.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction1.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.divide(bigFraction3);
      bigFraction3.divide(bigInteger0);
      bigFraction2.pow(1075);
      BigFraction bigFraction5 = BigFraction.THREE_FIFTHS;
      bigFraction4.divide(bigFraction5);
      bigFraction3.pow(1063);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.abs();
      bigFraction1.TWO_THIRDS.pow((-286.48116572575));
      bigFraction0.equals(bigInteger0);
      BigFraction bigFraction3 = new BigFraction(2.7978805447341025E50);
      BigFraction bigFraction4 = bigFraction3.subtract(9223372036854775690L);
      bigFraction1.getField();
      bigFraction4.abs();
      BigFraction bigFraction5 = bigFraction0.abs();
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction4.add((-649L));
      bigFraction2.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction5.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(898);
      bigFraction0.ZERO.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.multiply((-1248));
      bigFraction3.TWO_FIFTHS.multiply(898);
      bigFraction1.ONE_QUARTER.add(898);
      BigFraction bigFraction4 = bigFraction3.ONE.divide(3385);
      int int0 = 3916;
      bigFraction2.subtract(3916);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.add(bigInteger0);
      bigFraction2.getNumeratorAsLong();
      BigFraction bigFraction5 = bigFraction3.pow(bigInteger0);
      bigFraction4.divide(bigFraction5);
      BigFraction bigFraction6 = new BigFraction((-1248), 2624.594564577075, (-1248));
      bigFraction6.getField();
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(0L);
      bigFraction1.equals(bigFraction0);
      bigFraction0.getNumeratorAsInt();
      bigFraction0.multiply(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-1549));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(619L);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.abs();
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.abs();
      bigFraction0.floatValue();
      bigFraction0.THREE_FIFTHS.getField();
      bigFraction1.longValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction4 = bigFraction2.multiply(bigInteger0);
      bigFraction2.doubleValue();
      bigFraction3.compareTo(bigFraction0);
      bigFraction2.divide((-1508L));
      BigFraction bigFraction5 = bigFraction4.pow(1);
      bigFraction3.getDenominatorAsLong();
      BigFraction bigFraction6 = BigFraction.MINUS_ONE;
      bigFraction6.divide(bigInteger0);
      bigFraction6.ONE_QUARTER.divide(bigFraction0);
      bigFraction2.multiply(bigFraction1);
      BigFraction bigFraction7 = new BigFraction(bigInteger0);
      bigFraction6.equals(bigFraction7);
      bigFraction5.subtract(619L);
      BigFraction bigFraction8 = null;
      try {
        bigFraction8 = new BigFraction(5.920972420778763E47, (-2846.9), 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 592,097,242,077,876,300,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.multiply(796);
      bigFraction1.ONE.add(bigFraction0);
      bigFraction1.TWO_FIFTHS.multiply(bigFraction0);
      bigFraction1.ONE.getField();
      BigFraction bigFraction2 = bigFraction0.add(392L);
      BigFraction bigFraction3 = bigFraction1.subtract(392L);
      bigFraction1.compareTo(bigFraction3);
      bigFraction1.subtract(bigFraction2);
      BigInteger bigInteger0 = BigInteger.valueOf(1L);
      bigFraction2.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ONE_HALF.multiply(0L);
      BigFraction bigFraction1 = new BigFraction(0.0);
      bigFraction0.add(bigFraction1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      byte byte0 = (byte)119;
      byteArray0[1] = (byte)119;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.pow((int) (byte)119);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((double) (byte)119, 239);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 119 to fraction (9,223,372,036,854,775,690/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO.pow(bigInteger0);
      bigFraction0.MINUS_ONE.abs();
      bigFraction1.TWO_THIRDS.pow((-286.48116572575));
      BigFraction bigFraction2 = bigFraction0.subtract(1075);
      bigFraction0.ONE_QUARTER.add(bigInteger0);
      bigFraction1.getNumeratorAsLong();
      bigFraction2.ONE_FIFTH.subtract(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.pow(bigInteger0);
      bigFraction2.divide(bigFraction3);
      bigFraction1.getField();
      bigFraction3.divide(bigInteger0);
      bigFraction3.bigDecimalValue(1, 1);
      bigFraction2.negate();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(619L);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.abs();
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.abs();
      bigFraction3.TWO_FIFTHS.add(bigFraction1);
      bigFraction0.floatValue();
      bigFraction0.THREE_FIFTHS.getField();
      BigFraction bigFraction4 = bigFraction0.subtract(0L);
      bigFraction4.getDenominatorAsInt();
      bigFraction0.ZERO.percentageValue();
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = new BigFraction(1, 1);
      bigFraction0.THREE_QUARTERS.bigDecimalValue();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.divide((-1698L));
      bigFraction1.ONE_THIRD.toString();
      BigFraction bigFraction2 = bigFraction0.TWO.multiply((-1));
      bigFraction2.ONE_THIRD.negate();
      BigFraction bigFraction3 = bigFraction0.multiply(509L);
      bigFraction2.divide(129L);
      // Undeclared exception!
      try { 
        bigFraction3.TWO_QUARTERS.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.negate();
      bigFraction0.getNumeratorAsInt();
      bigFraction0.getField();
      BigFraction bigFraction3 = bigFraction1.multiply((long) 1);
      BigFraction.getReducedFraction(1, 1639);
      BigFraction bigFraction4 = bigFraction2.multiply((-2644281811660520851L));
      bigFraction4.divide((long) 1639);
      bigFraction0.bigDecimalValue();
      bigFraction3.doubleValue();
      BigFraction bigFraction5 = BigFraction.THREE_QUARTERS;
      bigFraction5.subtract(1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, 1);
      bigFraction0.THREE_QUARTERS.bigDecimalValue();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.divide((-1698L));
      bigFraction1.ONE_THIRD.toString();
      BigFraction bigFraction2 = bigFraction0.TWO.multiply((-1));
      bigFraction2.ONE_THIRD.negate();
      BigFraction bigFraction3 = BigFraction.ONE_QUARTER;
      bigFraction0.equals(bigFraction3);
      BigFraction bigFraction4 = bigFraction3.pow((-1));
      bigFraction4.divide(bigFraction0);
      bigFraction0.pow(268);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(0L);
      BigFraction bigFraction2 = new BigFraction(0.0);
      bigFraction0.add(bigFraction2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      bigFraction2.TWO_FIFTHS.doubleValue();
      byteArray0[1] = (byte)119;
      bigFraction2.doubleValue();
      BigFraction bigFraction3 = bigFraction1.subtract(bigFraction2);
      bigFraction1.compareTo(bigFraction2);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 3587;
      BigFraction bigFraction0 = new BigFraction(3587);
      BigFraction bigFraction1 = new BigFraction((long) 3587);
      bigFraction0.add(bigFraction1);
      bigFraction0.FOUR_FIFTHS.getDenominatorAsLong();
      try { 
        bigFraction0.ONE_FIFTH.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.FOUR_FIFTHS.percentageValue();
      bigFraction0.ONE_THIRD.longValue();
      bigFraction0.ONE_FIFTH.divide(bigInteger0);
      bigFraction0.MINUS_ONE.add(1115);
      BigFraction bigFraction1 = bigFraction0.divide((-503));
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.subtract(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction2.ZERO.pow((-503));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(619L);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.abs();
      bigFraction2.ONE_THIRD.abs();
      bigFraction0.floatValue();
      bigFraction0.THREE_FIFTHS.getField();
      BigFraction bigFraction3 = bigFraction0.subtract(0L);
      bigFraction3.getDenominatorAsInt();
      bigFraction0.ZERO.percentageValue();
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO.pow(bigInteger0);
      bigFraction0.MINUS_ONE.abs();
      bigFraction1.TWO_THIRDS.pow((-286.48116572575));
      BigFraction bigFraction2 = bigFraction0.subtract(1075);
      bigFraction0.ONE_QUARTER.add(bigInteger0);
      bigFraction1.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction1.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.divide(bigFraction3);
      bigFraction1.getField();
      bigFraction3.divide(bigInteger0);
      bigFraction3.bigDecimalValue(1, 1);
      bigFraction3.compareTo(bigFraction4);
      bigFraction4.pow((long) 1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1);
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction0.getNumeratorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction2.subtract(bigInteger0);
      bigFraction3.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483647L, 2147483647L);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.reciprocal();
      bigFraction0.ONE_HALF.pow((double) 2147483647L);
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.add(6082L);
      bigFraction0.pow(1305.5689);
      bigFraction0.toString();
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1110, 1110);
      bigFraction3.ONE_FIFTH.getDenominatorAsInt();
      bigFraction3.THREE_QUARTERS.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.pow(1);
      bigFraction4.ONE.floatValue();
      BigFraction bigFraction5 = bigFraction2.divide(bigFraction1);
      bigFraction5.bigDecimalValue();
      Object object0 = new Object();
      bigFraction5.FOUR_FIFTHS.equals(object0);
      BigFraction bigFraction6 = bigFraction2.add((-985));
      bigFraction1.ONE_QUARTER.hashCode();
      BigFraction bigFraction7 = bigFraction5.reduce();
      bigFraction0.THREE_FIFTHS.multiply((long) 1);
      bigFraction4.getDenominator();
      bigFraction4.getDenominatorAsLong();
      bigFraction6.multiply(0);
      bigFraction7.getDenominatorAsLong();
      bigFraction0.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0, (-1));
      bigFraction0.ONE_THIRD.longValue();
      bigFraction0.toString();
      bigFraction0.reduce();
      bigFraction0.multiply(124);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = (-1471);
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1471), (-1471));
      try { 
        bigFraction0.ONE_THIRD.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.intValue();
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((long) 0, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction1 = bigFraction0.divide(2);
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.add(2);
      BigFraction bigFraction3 = bigFraction2.TWO_THIRDS.divide(bigFraction1);
      bigFraction3.TWO_QUARTERS.add((-1));
      bigFraction2.TWO_FIFTHS.getNumeratorAsLong();
      BigFraction bigFraction4 = bigFraction0.ONE_QUARTER.subtract(4279L);
      bigFraction4.ONE_QUARTER.pow((double) 2L);
      bigFraction1.TWO_THIRDS.bigDecimalValue(2, 2);
      // Undeclared exception!
      try { 
        bigFraction1.MINUS_ONE.bigDecimalValue((-2156), 532);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow(2932L);
      bigFraction1.TWO_FIFTHS.pow(365);
      bigFraction0.subtract(0);
      BigFraction bigFraction2 = bigFraction0.multiply(0L);
      bigFraction2.ONE_THIRD.subtract(bigFraction1);
      bigFraction1.reciprocal();
      BigFraction.getReducedFraction(0, 665);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = new BigFraction(1, 1);
      bigFraction0.THREE_QUARTERS.bigDecimalValue();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.divide((-1698L));
      bigFraction1.ONE_THIRD.toString();
      BigFraction bigFraction2 = bigFraction0.TWO.multiply((-1));
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.negate();
      bigFraction0.multiply(509L);
      bigFraction2.divide(129L);
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-5034868814120038111L), (-5034868814120038111L));
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.floatValue();
      bigFraction0.reciprocal();
      bigFraction1.TWO.getDenominatorAsLong();
      bigFraction1.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction1.multiply((-5034868814120038111L));
      bigFraction2.ONE.subtract((-3602L));
      BigFraction bigFraction3 = bigFraction2.add(0L);
      bigFraction3.ONE_QUARTER.getNumeratorAsInt();
      bigFraction1.subtract(0L);
      bigFraction3.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(898);
      bigFraction0.ZERO.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.divide(bigFraction1);
      int int0 = (-1248);
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.multiply((-1248));
      bigFraction3.TWO_FIFTHS.multiply(898);
      bigFraction1.ONE_QUARTER.add(898);
      int int1 = 3385;
      bigFraction3.ONE.divide(3385);
      bigFraction3.ONE.equals(bigFraction0);
      BigFraction bigFraction4 = bigFraction0.subtract((long) 898);
      bigFraction1.getField();
      bigFraction4.TWO_FIFTHS.abs();
      bigFraction0.abs();
      bigFraction0.equals(bigFraction2);
      bigFraction2.add((-1L));
      bigFraction0.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction4.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-82), (-82));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)103;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.multiply(bigInteger0);
      bigFraction2.ONE.longValue();
      bigFraction2.THREE_QUARTERS.bigDecimalValue();
      bigFraction0.ZERO.percentageValue();
      bigFraction1.ONE_THIRD.percentageValue();
      BigFraction bigFraction3 = bigFraction0.add((long) (byte)4);
      BigFraction bigFraction4 = bigFraction0.ONE_QUARTER.divide((int) (byte)120);
      BigFraction bigFraction5 = bigFraction4.MINUS_ONE.add((int) (byte) (-99));
      bigFraction2.ONE_HALF.subtract(123);
      BigFraction bigFraction6 = bigFraction5.THREE_FIFTHS.negate();
      bigFraction6.TWO_QUARTERS.divide((long) (byte)4);
      bigFraction2.add(754L);
      bigFraction3.equals(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction6.bigDecimalValue((int) (byte) (-125));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.TWO_QUARTERS.longValue();
      int int0 = 863;
      BigFraction bigFraction1 = bigFraction0.add(863);
      bigFraction0.FOUR_FIFTHS.bigDecimalValue();
      Object object0 = new Object();
      bigFraction1.ONE.equals(object0);
      bigFraction1.ONE_THIRD.getNumeratorAsInt();
      bigFraction1.multiply(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(863);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction1.TWO.intValue();
      BigFraction bigFraction2 = bigFraction0.ZERO.abs();
      // Undeclared exception!
      try { 
        bigFraction2.TWO_THIRDS.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1524);
      bigFraction0.getField();
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.percentageValue();
      bigFraction0.getField();
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.TWO.divide(bigFraction0);
      bigFraction2.ONE_HALF.abs();
      bigFraction0.compareTo(bigFraction1);
      bigFraction0.divide((long) (-1));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.ONE_FIFTH.doubleValue();
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.reduce();
      bigFraction1.hashCode();
      bigFraction0.ONE.doubleValue();
      bigFraction0.ONE_QUARTER.getField();
      BigFraction bigFraction2 = bigFraction0.pow(3509);
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction2);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        bigFraction3.ONE_FIFTH.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      boolean boolean0 = bigFraction0.TWO.equals((Object) null);
      assertFalse(boolean0);
      
      BigFraction bigFraction1 = bigFraction0.pow(294L);
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.negate();
      BigFraction bigFraction3 = bigFraction0.TWO_THIRDS.divide(bigFraction1);
      bigFraction0.ONE.pow((double) (-3083));
      BigFraction bigFraction4 = BigFraction.getReducedFraction(907, (-3083));
      BigFraction bigFraction5 = bigFraction0.add(bigFraction4);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction6 = bigFraction5.divide(bigInteger0);
      bigFraction6.MINUS_ONE.longValue();
      assertEquals((byte)0, bigFraction6.byteValue());
      
      BigFraction bigFraction7 = bigFraction0.subtract(bigFraction4);
      assertEquals((byte)0, bigFraction7.byteValue());
      
      BigFraction bigFraction8 = BigFraction.getReducedFraction(52, 52);
      BigFraction bigFraction9 = bigFraction3.add(0);
      assertEquals((short) (-21846), bigFraction9.shortValue());
      
      BigFraction bigFraction10 = bigFraction5.add(294L);
      assertEquals((byte)37, bigFraction10.byteValue());
      
      bigFraction2.add(bigInteger0);
      int int0 = bigFraction5.compareTo(bigFraction3);
      assertEquals((-1), int0);
      assertTrue(bigFraction3.equals((Object)bigFraction9));
      
      BigFraction bigFraction11 = bigFraction1.pow((-3222L));
      assertFalse(bigFraction11.equals((Object)bigFraction8));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.ONE_THIRD.toString();
      long long0 = 0L;
      bigFraction0.ZERO.divide((long) (-984));
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.bigDecimalValue((-984), Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ZERO.getField();
      BigFraction bigFraction1 = bigFraction0.abs();
      BigDecimal bigDecimal0 = bigFraction1.TWO_QUARTERS.bigDecimalValue(0, 0);
      assertEquals((short)1, bigDecimal0.shortValue());
      
      BigFraction bigFraction2 = BigFraction.getReducedFraction(0, 3409);
      bigFraction0.intValue();
      bigFraction2.ONE_THIRD.toString();
      double double0 = bigFraction2.ONE_QUARTER.percentageValue();
      assertEquals(25.0, double0, 0.01);
      
      bigFraction2.ONE.longValue();
      bigFraction0.hashCode();
      bigFraction2.getDenominatorAsLong();
      BigInteger bigInteger1 = bigFraction0.getNumerator();
      BigFraction bigFraction3 = bigFraction1.subtract(bigFraction0);
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      
      bigFraction0.getDenominatorAsInt();
      double double1 = bigFraction2.pow(1013.94);
      assertEquals(0.0, double1, 0.01);
      
      BigFraction bigFraction4 = bigFraction0.subtract(924);
      bigFraction1.add(bigInteger1);
      String string0 = bigFraction4.toString();
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertEquals("-914", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(0L);
      BigFraction bigFraction2 = new BigFraction(0.0);
      BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)119;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction4 = bigFraction1.ONE_HALF.divide(bigInteger0);
      assertEquals((byte)0, bigFraction4.byteValue());
      
      bigFraction2.doubleValue();
      BigFraction bigFraction5 = bigFraction1.subtract(bigFraction2);
      assertSame(bigFraction5, bigFraction1);
      
      BigInteger bigInteger1 = BigInteger.valueOf(0L);
      BigFraction bigFraction6 = bigFraction3.pow(bigInteger1);
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertSame(bigFraction3, bigFraction0);
      assertTrue(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_HALF.pow((-2996L));
      bigFraction0.negate();
      bigFraction0.ONE_FIFTH.getDenominatorAsInt();
      long long0 = 2147483647L;
      // Undeclared exception!
      try { 
        bigFraction0.TWO.bigDecimalValue(1075, 1008);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.abs();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.ONE_HALF.negate();
      bigFraction1.ZERO.doubleValue();
      BigFraction bigFraction2 = bigFraction1.TWO.divide(bigInteger0);
      bigFraction2.TWO.getDenominatorAsInt();
      bigFraction2.equals(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction2.TWO_FIFTHS.bigDecimalValue(3114);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ZERO.add(484L);
      bigFraction0.toString();
      BigFraction bigFraction1 = bigFraction0.add((-693L));
      assertEquals((byte)75, bigFraction1.byteValue());
      
      double double0 = bigFraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
      
      BigFraction bigFraction2 = BigFraction.getReducedFraction(1210, (-2737));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2638L);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.reciprocal();
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-371), (-371));
      BigFraction bigFraction3 = bigFraction0.ONE_HALF.add(bigFraction2);
      bigFraction0.ONE.getNumeratorAsLong();
      bigFraction0.getNumeratorAsInt();
      bigFraction0.intValue();
      bigFraction3.hashCode();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(667, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)23;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals((short) (-233), bigFraction0.shortValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1298, 921);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1008, 1008);
      bigFraction0.percentageValue();
      bigFraction0.ONE_THIRD.intValue();
      bigFraction0.ONE_HALF.getNumeratorAsInt();
      BigFraction bigFraction1 = bigFraction0.subtract((-1));
      // Undeclared exception!
      try { 
        bigFraction1.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = new BigFraction(1008, 1008);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.abs();
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.add((long) 1008);
      BigFraction bigFraction4 = bigFraction1.TWO_THIRDS.subtract(0L);
      BigFraction bigFraction5 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction6 = BigFraction.getReducedFraction((-1), (-4359));
      assertEquals((byte)0, bigFraction6.byteValue());
      
      int int0 = bigFraction5.getNumeratorAsInt();
      assertEquals((-1), int0);
      
      BigFraction.getReducedFraction((-165), 689);
      BigFraction bigFraction7 = bigFraction3.reduce();
      assertTrue(bigFraction7.equals((Object)bigFraction3));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)70;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction8 = bigFraction4.multiply(bigInteger0);
      assertFalse(bigFraction8.equals((Object)bigFraction4));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-292), (-581));
      Object object0 = new Object();
      bigFraction1.ONE.equals(object0);
      // Undeclared exception!
      try { 
        bigFraction1.ONE.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.TWO.subtract(bigInteger0);
      bigFraction0.divide(65);
      long long0 = 100L;
      int int0 = 52;
      // Undeclared exception!
      try { 
        bigFraction1.TWO_THIRDS.bigDecimalValue(52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.multiply(796);
      BigFraction bigFraction2 = bigFraction1.ONE.add(bigFraction0);
      BigFraction bigFraction3 = bigFraction1.TWO_FIFTHS.multiply(bigFraction0);
      bigFraction1.ONE.getField();
      bigFraction0.add(392L);
      BigFraction bigFraction4 = bigFraction1.subtract(392L);
      int int0 = bigFraction1.compareTo(bigFraction4);
      assertEquals(1, int0);
      
      bigFraction2.divide(833);
      assertEquals((short)1, bigFraction2.shortValue());
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte)85, bigFraction1.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction3));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1203);
      String string0 = bigFraction0.toString();
      assertEquals("1203", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0);
      BigFraction bigFraction1 = bigFraction0.divide(1);
      bigFraction0.FOUR_FIFTHS.add((-4163L));
      BigFraction bigFraction2 = BigFraction.getReducedFraction(1, 1077);
      BigFraction bigFraction3 = bigFraction2.reduce();
      bigFraction3.THREE_QUARTERS.getDenominatorAsLong();
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      
      BigFraction bigFraction4 = bigFraction1.divide(bigFraction2);
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertEquals((byte)0, bigFraction2.byteValue());
      
      BigFraction bigFraction5 = bigFraction0.TWO.multiply((-966));
      assertEquals((byte)116, bigFraction5.byteValue());
      
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      bigFraction1.subtract(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction4));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      bigFraction1.MINUS_ONE.floatValue();
      bigFraction0.doubleValue();
      bigFraction0.ZERO.hashCode();
      bigFraction2.ONE_THIRD.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction2.THREE_FIFTHS.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2);
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.add(bigFraction1);
      double double0 = bigFraction0.THREE_FIFTHS.pow((-2159.251));
      assertEquals(Double.NaN, double0, 0.01);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.multiply(bigInteger0);
      bigFraction3.TWO_QUARTERS.divide(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.THREE_QUARTERS.negate();
      byte[] byteArray0 = new byte[3];
      String string0 = bigFraction4.THREE_QUARTERS.toString();
      assertEquals("3 / 4", string0);
      
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)38;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction5 = bigFraction0.multiply(bigInteger1);
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      
      long long0 = bigFraction4.getDenominatorAsLong();
      assertEquals(4L, long0);
      
      BigFraction bigFraction6 = bigFraction2.negate();
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertEquals((short) (-1), bigFraction6.shortValue());
  }
}
