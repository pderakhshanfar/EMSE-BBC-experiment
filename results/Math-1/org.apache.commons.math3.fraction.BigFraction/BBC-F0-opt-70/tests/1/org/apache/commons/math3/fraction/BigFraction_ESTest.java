/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:25:45 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      BigFraction bigFraction1 = bigFraction0.pow(0L);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-1), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(1L);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1351, (-685));
      BigFraction bigFraction1 = bigFraction0.pow(1351);
      float float0 = bigFraction1.floatValue();
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      assertEquals((byte) (-57), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3325.0));
      assertEquals((short) (-3325), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1236.0));
      assertEquals((short) (-1236), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals((short)1, bigFraction2.shortValue());
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(80L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)80, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-732.2014586), (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE.subtract(bigInteger0);
      assertEquals((short) (-733), bigFraction0.shortValue());
      assertEquals((byte) (-9), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.subtract(1L);
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2, 2);
      BigFraction bigFraction1 = bigFraction0.TWO.subtract(2);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(5, 5);
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.reduce();
      assertEquals((short) (-1), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.reciprocal();
      assertEquals((byte) (-1), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO.pow(bigInteger0);
      assertEquals((short)1024, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-377.27078), 690);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((short) (-377), bigFraction1.shortValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow((-1251L));
      assertEquals((short)28887, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      double double0 = bigFraction0.ONE_FIFTH.pow((double) 796);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.negate();
      double double0 = bigFraction1.pow((double) (-207));
      assertEquals((-2.3636425261531485E82), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.ZERO.abs();
      double double0 = bigFraction1.percentageValue();
      assertEquals(0.0, double0, 0.01);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.add((-812));
      double double0 = bigFraction1.percentageValue();
      assertEquals((-81125.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.add((-1596));
      BigFraction bigFraction2 = bigFraction1.negate();
      BigFraction bigFraction3 = bigFraction2.negate();
      assertEquals((byte) (-59), bigFraction3.byteValue());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.add((-1596));
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      assertEquals((short) (-398), bigFraction2.shortValue());
      assertEquals((short) (-1595), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(2891.837676359, 3169);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertEquals((short)1445, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.multiply(bigInteger0);
      assertEquals((short) (-256), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.multiply(bigInteger0);
      assertEquals((short)4, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 690);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertEquals((short)6900, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.multiply((-9223372036854775808L));
      assertEquals((byte) (-85), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.ONE.multiply(2935890503282001226L);
      assertEquals((short)1354, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.multiply((-4078));
      assertEquals((byte)14, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-578), (-1023));
      BigFraction bigFraction1 = bigFraction0.multiply(4);
      assertEquals((short)2, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(473);
      assertEquals((short)236, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      long long0 = bigFraction0.longValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      long long0 = bigFraction0.MINUS_ONE.longValue();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-732.2014586), (-1));
      bigFraction0.ONE.intValue();
      assertEquals((short) (-733), bigFraction0.shortValue());
      assertEquals((byte)35, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      int int0 = bigFraction0.intValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1389), 708);
      assertEquals((short) (-1), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1), (-1));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      long long0 = bigFraction2.getNumeratorAsLong();
      assertEquals(0L, long0);
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-732.2014586), (-1));
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals((-733L), long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1427, (-4078));
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals((-1427), int0);
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-732.2014586), (-1));
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((short) (-733), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.subtract((-207));
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      assertEquals((short)206, bigInteger0.shortValue());
      assertEquals((short)206, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-159L));
      int int0 = bigFraction1.getDenominatorAsInt();
      assertEquals((short)7763, bigFraction1.shortValue());
      assertEquals((-2072385493), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-18.767105818144156));
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      assertEquals((short) (-32737), bigInteger0.shortValue());
      assertEquals((short) (-18), bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1351, (-685));
      float float0 = bigFraction0.floatValue();
      assertEquals((-1.9722627F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      double double0 = bigFraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = new BigFraction(597);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      double double0 = bigFraction2.doubleValue();
      assertEquals((-596.5), double0, 0.01);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.divide(bigFraction0);
      assertEquals((short) (-4), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(699, 2147476904);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertEquals((byte) (-114), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1351, (-685));
      BigFraction bigFraction1 = bigFraction0.pow(1351);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.divide(bigInteger0);
      assertEquals((short)25646, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.subtract(2);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction1.divide(bigInteger0);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte) (-1), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.ONE.divide(1L);
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.divide((long) (-1));
      assertEquals((byte) (-2), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.divide(1);
      assertEquals((byte)1, bigFraction3.byteValue());
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      int int0 = bigFraction0.ONE.compareTo(bigFraction0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(2891.837676359, 3169);
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals((-1), int0);
      assertEquals((short)2891, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(0, 0);
      assertEquals((byte)2, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(1, 1);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1987.8069662), 33445);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(861, 0);
      assertEquals((short) (-1987), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigDecimal bigDecimal0 = bigFraction0.FOUR_FIFTHS.bigDecimalValue(0);
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.subtract(2);
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue(2);
      assertEquals((short) (-1), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow(0);
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue();
      assertEquals((byte)1, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-938));
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((short) (-938), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-732.2014586), (-1));
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertEquals((short) (-1466), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = new BigFraction((double) 690);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)690, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-41);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.ONE.add(bigInteger0);
      assertEquals((short) (-10495), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-118);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.ONE.add(bigInteger0);
      assertEquals((short)139, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.add(1L);
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      BigFraction bigFraction1 = bigFraction0.add((-3958705157555305932L));
      assertEquals((byte)52, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-732.2014586), (-1));
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.add((long) (-1));
      assertEquals((byte) (-2), bigFraction1.byteValue());
      assertEquals((short) (-733), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.ONE.add(2470);
      assertEquals((byte) (-89), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.add(0);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2147450880, 2147450880);
      BigFraction bigFraction1 = bigFraction0.add(2147450880);
      assertEquals((short) (-32767), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.add((-812));
      BigFraction bigFraction2 = bigFraction1.abs();
      assertEquals((short)811, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(113236205062349959L);
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        bigFraction0.ONE.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-1000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow((-2482));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.pow((-2145342586));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      // Undeclared exception!
      try { 
        bigFraction0.MINUS_ONE.divide((long) 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1279.28), (-695));
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1025, (-695));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-732.2014586), (-1));
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-378L));
      try { 
        bigFraction0.ONE_HALF.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1629L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(37, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.subtract(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-732.2014586), (-1));
      BigFraction bigFraction1 = bigFraction0.ZERO.multiply(bigFraction0);
      assertEquals((short) (-733), bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ZERO;
      boolean boolean0 = bigFraction0.equals(bigFraction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      boolean boolean0 = bigFraction0.equals(bigFraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      double double0 = bigFraction0.doubleValue();
      assertEquals(0.6666666666666666, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1351, (-685));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.divide(bigInteger0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      String string0 = bigFraction0.toString();
      assertEquals("2 / 3", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1987.8069662), 33445);
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.divide(730);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals((short) (-1987), bigFraction2.shortValue());
      assertNotSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.subtract(bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-161L), (-161L));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-161L), (-161L));
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow((-921L));
      BigFraction bigFraction2 = bigFraction1.pow((-161L));
      bigFraction2.getDenominator();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow(1351);
      float float0 = bigFraction1.floatValue();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      float float0 = bigFraction0.floatValue();
      assertEquals(0.75F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      boolean boolean0 = bigFraction0.ONE_HALF.equals(bigFraction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(5, 5);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(5, 5);
      boolean boolean0 = bigFraction1.equals(bigFraction0);
      assertTrue(boolean0);
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      boolean boolean0 = bigFraction0.equals("+ZYneP");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow(1351);
      double double0 = bigFraction1.doubleValue();
      assertEquals(1.2609823731968815E-238, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.abs();
      assertSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE.subtract(34359738368L);
      BigFraction bigFraction2 = bigFraction1.abs();
      assertEquals((short) (-1), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((byte)0, (-312));
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1459.2747032411, (-2793.32334), 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 1,459.275 to fraction after 0 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-3420.0), 690);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -3,420 to fraction (3,421/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1), 515.02736613, (-1));
      assertEquals((short) (-1), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) 2935890503282001226L, 690);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,935,890,503,282,001,400 to fraction (2,935,890,503,282,001,408/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.3180771991576186E280);
      BigFraction bigFraction1 = bigFraction0.divide(561);
      assertEquals((short) (-28738), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert NaN value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      double double0 = bigFraction0.ONE.pow(1.6481517377542332E-6);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      long long0 = bigFraction0.ONE.getNumeratorAsLong();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.divide(8589934592L);
      int int0 = bigFraction1.getDenominatorAsInt();
      assertEquals(0, int0);
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(5, 5);
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(1, int0);
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.multiply((long) 0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.249654446062621E-8);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(7, 7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.multiply(0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      long long0 = bigFraction0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-18.767105818144156));
      bigFraction0.getDenominator();
      assertEquals((short) (-18), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.subtract(1969);
      assertEquals((byte)80, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.ONE_QUARTER.hashCode();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(5, 5);
      double double0 = bigFraction0.percentageValue();
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-902.3714675326906), 0.0019951417334596044, 4079);
      BigFraction bigFraction1 = bigFraction0.pow((-1372L));
      long long0 = bigFraction1.getDenominatorAsLong();
      assertEquals((-9184507409936944767L), long0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-161L), (-161L));
      bigFraction0.MINUS_ONE.bigDecimalValue();
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.add(8589934592L);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(956.16251);
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(5, 5);
      BigFraction bigFraction1 = bigFraction0.subtract((long) 5);
      assertEquals((short) (-4), bigFraction1.shortValue());
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      int int0 = bigFraction0.TWO_QUARTERS.getNumeratorAsInt();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      BigFraction bigFraction1 = bigFraction0.pow(0L);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)1, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertNotNull(bigFractionField0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      int int0 = bigFraction0.THREE_QUARTERS.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.249654446062621E-8);
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.reciprocal();
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }
}
