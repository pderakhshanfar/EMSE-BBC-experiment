/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 02 21:15:07 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1707), (-1707));
      BigFraction bigFraction1 = new BigFraction(0.0, (-1707));
      bigFraction0.add(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_THIRD.reciprocal();
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.negate();
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction1.MINUS_ONE.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.7613641572445654E170);
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-205), (-2472));
      bigFraction0.FOUR_FIFTHS.percentageValue();
      bigFraction0.getDenominatorAsLong();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)91;
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.multiply((-913));
      byteArray0[2] = (byte)15;
      byte byte0 = (byte)72;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction1.TWO.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.ONE.divide(bigFraction2);
      bigFraction1.bigDecimalValue((-205));
      int int0 = 3078;
      BigFraction bigFraction5 = bigFraction0.pow(int0);
      BigFraction bigFraction6 = bigFraction1.multiply(bigFraction0);
      bigFraction0.doubleValue();
      bigFraction5.divide((int) byte0);
      bigFraction4.divide(bigInteger0);
      bigFraction5.hashCode();
      bigFraction6.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction4.add(bigFraction2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = new BigFraction(0, (-133));
      bigFraction0.floatValue();
      bigFraction0.ONE_FIFTH.intValue();
      bigFraction0.THREE_FIFTHS.toString();
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction0.multiply(bigInteger0);
      int int1 = (-1625);
      BigFraction bigFraction4 = bigFraction0.FOUR_FIFTHS.add((long) 0);
      bigFraction4.ZERO.longValue();
      bigFraction4.MINUS_ONE.equals(bigFraction2);
      bigFraction3.bigDecimalValue((-1625));
      // Undeclared exception!
      try { 
        bigFraction2.subtract(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2.63), (-1259.8751138703537), 759);
      BigFraction bigFraction1 = bigFraction0.ONE.reciprocal();
      bigFraction1.TWO.hashCode();
      long long0 = 100L;
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      int int0 = 4;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.add(bigFraction1);
      bigFraction2.THREE_QUARTERS.bigDecimalValue(4);
      bigFraction2.ONE_HALF.toString();
      BigFraction.getReducedFraction(3302, 0);
      bigFraction0.subtract(int0);
      int int1 = 1598;
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)114;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.reduce();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(1416, (byte) (-1));
      bigFraction0.floatValue();
      bigFraction1.getNumeratorAsLong();
      BigInteger bigInteger1 = bigFraction2.getNumerator();
      BigFraction bigFraction3 = bigFraction1.multiply((-1));
      bigFraction3.multiply(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.add(530);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.divide(bigFraction0);
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      BigFraction bigFraction4 = bigFraction3.pow(348);
      BigFraction bigFraction5 = bigFraction3.TWO.pow(0L);
      BigFraction bigFraction6 = bigFraction3.THREE_QUARTERS.divide(bigFraction2);
      bigFraction6.TWO.getNumeratorAsInt();
      BigFraction bigFraction7 = bigFraction2.ONE_HALF.divide((-393));
      bigFraction7.ONE_FIFTH.pow(2759);
      BigFraction bigFraction8 = bigFraction0.MINUS_ONE.reduce();
      BigFraction bigFraction9 = bigFraction8.MINUS_ONE.subtract(348);
      bigFraction9.TWO.pow((double) 0L);
      bigFraction0.THREE_QUARTERS.compareTo(bigFraction3);
      bigFraction0.longValue();
      bigFraction3.ONE_FIFTH.bigDecimalValue();
      bigFraction0.pow((long) 1);
      BigInteger bigInteger0 = bigFraction2.getNumerator();
      bigFraction2.intValue();
      bigFraction7.subtract((long) (-393));
      bigFraction1.getNumeratorAsInt();
      BigFraction bigFraction10 = bigFraction7.pow(bigInteger0);
      BigFraction bigFraction11 = BigFraction.ONE_HALF;
      bigFraction10.ONE.multiply(bigFraction4);
      bigFraction10.TWO_FIFTHS.multiply(bigFraction11);
      bigFraction10.getField();
      bigFraction5.compareTo(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.ONE.hashCode();
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.subtract(1);
      BigFraction bigFraction2 = bigFraction0.pow(0L);
      bigFraction2.MINUS_ONE.getNumeratorAsInt();
      bigFraction1.getNumeratorAsInt();
      bigFraction1.getNumeratorAsLong();
      bigFraction1.bigDecimalValue((-1), 987);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.ONE.doubleValue();
      bigFraction0.TWO.getNumeratorAsLong();
      bigFraction0.ONE_FIFTH.getNumeratorAsInt();
      BigFraction bigFraction1 = bigFraction0.multiply(0L);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.TWO.multiply(bigInteger0);
      bigFraction1.THREE_FIFTHS.negate();
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.add(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.divide(1);
      bigFraction3.ONE_THIRD.floatValue();
      bigFraction2.pow(1.0);
      bigFraction0.getDenominatorAsInt();
      bigFraction1.toString();
      BigFraction bigFraction4 = bigFraction1.multiply(bigInteger0);
      bigFraction4.TWO_QUARTERS.divide(bigInteger0);
      BigFraction bigFraction5 = bigFraction0.reduce();
      bigFraction5.floatValue();
      BigFraction bigFraction6 = bigFraction2.divide(0L);
      bigFraction6.THREE_QUARTERS.divide((int) byte0);
      bigFraction3.add((long) byteArray0[1]);
      bigFraction2.getField();
      int int0 = 542;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.MINUS_ONE.getNumeratorAsLong();
      BigFraction bigFraction1 = null;
      bigFraction0.MINUS_ONE.doubleValue();
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = new BigFraction((-1.0857572226543142E-10), (-1552.688302685091), 1);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.ONE.getNumeratorAsInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -0 to fraction after 1 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.toString();
      bigFraction0.ONE_THIRD.multiply(0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      bigFraction0.ONE_THIRD.getDenominatorAsInt();
      BigFraction bigFraction2 = bigFraction0.reduce();
      bigFraction2.ONE_HALF.longValue();
      BigFraction bigFraction3 = bigFraction2.ONE.pow((long) 3);
      bigFraction2.compareTo(bigFraction0);
      BigFraction bigFraction4 = bigFraction0.divide(bigFraction2);
      bigFraction2.abs();
      bigFraction4.getNumeratorAsInt();
      bigFraction3.getField();
      BigFraction bigFraction5 = bigFraction2.ONE_FIFTH.divide(1);
      Object object0 = new Object();
      bigFraction1.THREE_QUARTERS.equals(object0);
      int int0 = 587;
      BigFraction bigFraction6 = bigFraction5.add(587);
      bigFraction6.ONE.bigDecimalValue(587, 587);
      // Undeclared exception!
      try { 
        bigFraction1.equals(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.pow(0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-95);
      byte byte0 = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-19);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.add(bigInteger0);
      bigFraction2.TWO_QUARTERS.getField();
      bigFraction0.TWO_THIRDS.equals(bigFraction1);
      bigFraction0.ONE.toString();
      BigFraction bigFraction3 = bigFraction0.reciprocal();
      long long0 = (-5029L);
      BigFraction bigFraction4 = bigFraction1.pow(long0);
      bigFraction4.THREE_FIFTHS.hashCode();
      BigFraction bigFraction5 = bigFraction3.subtract(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction5.pow((long) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-978.05989), 0);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.negate();
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.abs();
      bigFraction0.percentageValue();
      bigFraction0.floatValue();
      bigFraction2.hashCode();
      bigFraction1.pow((-889.362443477));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-107);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction0.ONE_FIFTH.multiply(bigInteger0);
      bigFraction3.TWO_THIRDS.subtract((int) (byte)114);
      bigFraction2.TWO_FIFTHS.pow((-2788));
      bigFraction0.THREE_FIFTHS.multiply((-654L));
      bigFraction1.THREE_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction0.multiply(4503599627370496L);
      bigFraction4.bigDecimalValue();
      BigFraction bigFraction5 = bigFraction0.add(bigInteger0);
      bigFraction2.getNumeratorAsInt();
      BigFraction bigFraction6 = bigFraction5.divide(1);
      bigFraction6.subtract(bigInteger0);
      BigFraction.getReducedFraction((-798), 100);
      BigFraction bigFraction7 = new BigFraction(bigInteger0);
      bigFraction4.compareTo(bigFraction7);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byte byte0 = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)48;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      int int0 = 2748;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger((byte) (-15), mockRandom0);
      bigInteger0.min(bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction0.doubleValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numBits must be non-negative
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.longValueExact();
      int int0 = (-1);
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction.getReducedFraction(1256, (-1));
      bigFraction0.ONE_QUARTER.pow(3197.821743461);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.subtract(bigInteger0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger((-1), (byte) (-102), mockRandom0);
      bigFraction1.ONE_FIFTH.pow(bigInteger1);
      bigInteger0.equals(bigFraction0);
      bigInteger0.toString(int0);
      BigInteger bigInteger2 = null;
      BigFraction bigFraction2 = new BigFraction(bigInteger0, bigInteger2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1182.53));
      bigFraction0.doubleValue();
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.negate();
      bigFraction1.FOUR_FIFTHS.equals(bigFraction0);
      bigFraction1.THREE_QUARTERS.add(0L);
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.divide(bigInteger0);
      bigFraction0.getNumerator();
      bigFraction1.percentageValue();
      int int0 = (-1);
      bigFraction2.TWO_QUARTERS.floatValue();
      int int1 = (-1);
      BigFraction bigFraction3 = bigFraction2.ZERO.multiply((long) (-1));
      bigFraction3.ONE_QUARTER.bigDecimalValue((-1));
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2521), (-2521));
      Object object0 = new Object();
      bigFraction0.ONE.equals(object0);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigFraction bigFraction2 = bigFraction0.subtract(1374);
      BigFraction bigFraction3 = bigFraction2.THREE_FIFTHS.add(1374);
      BigInteger bigInteger0 = BigInteger.valueOf(1374);
      BigFraction bigFraction4 = bigFraction2.divide(bigInteger0);
      bigFraction2.ONE_THIRD.intValue();
      bigFraction2.FOUR_FIFTHS.getNumeratorAsInt();
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-2521), (-3283));
      bigFraction4.ZERO.compareTo(bigFraction1);
      bigFraction4.ONE_HALF.compareTo(bigFraction2);
      BigFraction bigFraction6 = bigFraction2.THREE_QUARTERS.divide(3854L);
      bigFraction4.toString();
      bigFraction6.TWO_FIFTHS.pow(bigInteger0);
      bigFraction1.compareTo(bigFraction0);
      BigFraction bigFraction7 = bigFraction3.multiply(bigInteger0);
      bigFraction7.ONE.hashCode();
      BigFraction bigFraction8 = bigFraction7.ONE_QUARTER.subtract((-2521));
      bigFraction6.getNumeratorAsInt();
      bigFraction8.FOUR_FIFTHS.toString();
      bigFraction8.FOUR_FIFTHS.reduce();
      BigFraction bigFraction9 = bigFraction7.multiply((long) 1374);
      BigFraction bigFraction10 = bigFraction8.add((long) (-2521));
      bigFraction0.multiply(0L);
      bigFraction7.divide(bigFraction9);
      bigFraction7.divide(0);
      bigFraction10.bigDecimalValue();
      bigFraction0.hashCode();
      bigFraction7.divide(bigFraction5);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1758.0);
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.multiply(4503599627370496L);
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.subtract(4503599627370496L);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.multiply(1);
      BigFraction bigFraction4 = bigFraction3.THREE_QUARTERS.pow((-1347L));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction4.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction4.ONE_HALF.bigDecimalValue();
      int int0 = (-1259);
      bigFraction3.ONE.bigDecimalValue((-1259), 1);
      bigFraction2.TWO.doubleValue();
      BigFraction bigFraction5 = bigFraction2.ONE.divide(bigFraction3);
      bigFraction0.TWO_THIRDS.pow(1758.0);
      BigFraction bigFraction6 = bigFraction0.negate();
      BigInteger bigInteger1 = bigFraction6.getDenominator();
      bigFraction6.ZERO.longValue();
      bigFraction0.toString();
      bigFraction1.percentageValue();
      BigFraction bigFraction7 = bigFraction2.pow(bigInteger1);
      bigFraction6.percentageValue();
      BigFraction bigFraction8 = bigFraction7.divide(bigFraction2);
      bigFraction8.TWO_THIRDS.pow(bigInteger1);
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction9 = bigFraction2.subtract(bigInteger1);
      bigFraction9.percentageValue();
      bigFraction8.bigDecimalValue((-1259), 1);
      bigFraction7.ZERO.pow((-5034868814120038111L));
      bigFraction8.subtract(int0);
      bigFraction5.toString();
      BigFraction bigFraction10 = bigFraction5.subtract(bigFraction3);
      bigFraction10.reduce();
      // Undeclared exception!
      try { 
        bigFraction9.longValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction0.ONE_HALF.subtract(1914);
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.multiply((-557));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-47);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.TWO_THIRDS.add(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.ONE_HALF.subtract(bigFraction1);
      bigFraction3.THREE_QUARTERS.getField();
      bigFraction0.MINUS_ONE.bigDecimalValue();
      bigFraction0.bigDecimalValue();
      bigFraction0.MINUS_ONE.pow((-557));
      bigFraction0.percentageValue();
      bigFraction1.FOUR_FIFTHS.longValue();
      bigFraction3.doubleValue();
      BigFraction bigFraction4 = bigFraction0.divide(bigFraction1);
      bigFraction4.MINUS_ONE.floatValue();
      bigFraction3.bigDecimalValue();
      bigFraction4.bigDecimalValue((-1500), (-1500));
      bigFraction0.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(789L, 160L);
      int int0 = (-1708);
      bigFraction0.THREE_FIFTHS.bigDecimalValue((-1708), (-1708));
      long long0 = 0L;
      // Undeclared exception!
      try { 
        bigFraction0.divide(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-63);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.multiply(bigFraction1);
      bigFraction2.ZERO.subtract((int) (byte)97);
      bigFraction2.ONE_HALF.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.ONE.pow(bigInteger0);
      bigFraction3.TWO_THIRDS.divide(bigFraction0);
      BigFraction bigFraction4 = bigFraction3.ZERO.multiply(bigFraction0);
      bigFraction4.THREE_FIFTHS.bigDecimalValue(1, 283);
      bigInteger0.longValue();
      bigFraction0.getNumeratorAsInt();
      bigFraction0.pow((double) byteArray0[4]);
      bigFraction0.doubleValue();
      bigFraction1.equals(bigInteger0);
      bigFraction3.floatValue();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)70;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.subtract(3);
      bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      bigFraction1.THREE_FIFTHS.reduce();
      bigFraction0.TWO_QUARTERS.percentageValue();
      bigFraction1.MINUS_ONE.equals(bigFraction0);
      bigFraction0.ONE_HALF.subtract(0L);
      bigFraction0.multiply((int) (byte)29);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 5;
      int int1 = 137;
      BigFraction bigFraction0 = new BigFraction(5, 137);
      bigFraction0.ONE_HALF.bigDecimalValue();
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.MINUS_ONE.add(670);
      int int2 = 1444;
      bigFraction1.TWO_THIRDS.hashCode();
      bigFraction1.TWO_THIRDS.bigDecimalValue(5, 1444);
      // Undeclared exception!
      try { 
        bigFraction0.getNumeratorAsInt();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(750, 750);
      int int0 = bigFraction0.ZERO.getDenominatorAsInt();
      bigFraction0.ONE_THIRD.pow(750);
      bigFraction0.TWO_QUARTERS.percentageValue();
      BigFraction bigFraction1 = bigFraction0.add((-2249L));
      bigFraction1.MINUS_ONE.subtract((-798L));
      bigFraction1.TWO_THIRDS.bigDecimalValue(1, 750);
      bigFraction1.TWO.pow((long) int0);
      int int1 = 1236;
      // Undeclared exception!
      try { 
        bigFraction1.divide(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.getDenominatorAsInt();
      bigFraction0.ONE_QUARTER.pow(1.0);
      bigFraction0.hashCode();
      int int0 = 100;
      BigFraction bigFraction1 = bigFraction0.ZERO.multiply(100);
      bigFraction1.ONE.floatValue();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction0.reduce();
      bigFraction2.TWO.divide(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction2.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.getField();
      bigFraction0.pow(0.0);
      int int0 = bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.add(3);
      bigFraction2.ONE_HALF.negate();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.ONE_QUARTER.subtract(bigInteger0);
      BigFraction.getReducedFraction((-601), (-3379));
      BigInteger bigInteger1 = null;
      BigFraction bigFraction4 = bigFraction0.divide((BigInteger) null);
      BigFraction bigFraction5 = bigFraction4.add((long) int0);
      bigFraction5.divide(int0);
      // Undeclared exception!
      try { 
        bigFraction3.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE.reduce();
      bigFraction0.MINUS_ONE.percentageValue();
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.reduce();
      bigFraction0.FOUR_FIFTHS.longValue();
      bigFraction2.doubleValue();
      BigFraction bigFraction3 = bigFraction0.subtract(bigInteger0);
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction4 = bigFraction2.multiply(629);
      bigFraction4.ONE.floatValue();
      bigFraction2.subtract((-595));
      BigFraction bigFraction5 = bigFraction1.reduce();
      BigFraction bigFraction6 = bigFraction2.add(bigFraction3);
      bigFraction2.pow(0.0);
      bigFraction0.TWO_THIRDS.intValue();
      bigFraction2.getNumeratorAsLong();
      bigFraction3.getField();
      bigFraction5.subtract(bigFraction6);
      bigFraction3.subtract(bigInteger0);
      bigFraction2.doubleValue();
      bigFraction2.divide((-292L));
      bigFraction6.multiply(645);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.subtract((-913L));
      bigFraction1.getNumeratorAsInt();
      bigFraction0.ONE_HALF.pow(0.0);
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      bigFraction0.divide(bigFraction2);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.ONE.getNumeratorAsLong();
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.MINUS_ONE.subtract(bigInteger0);
      bigFraction0.TWO_QUARTERS.subtract(bigFraction1);
      int int0 = 4239;
      BigInteger bigInteger1 = new BigInteger((String) null, 4239);
      // Undeclared exception!
      try { 
        bigFraction0.TWO_THIRDS.multiply(bigInteger1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)123;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.floatValue();
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.subtract(bigInteger1);
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.abs();
      BigFraction bigFraction3 = bigFraction1.THREE_QUARTERS.reduce();
      BigFraction bigFraction4 = bigFraction0.add(1);
      bigFraction2.TWO_FIFTHS.add(bigInteger1);
      bigFraction1.MINUS_ONE.subtract(bigInteger0);
      BigFraction bigFraction5 = bigFraction3.pow((int) (byte)0);
      bigFraction2.TWO_FIFTHS.intValue();
      BigFraction bigFraction6 = bigFraction5.ONE.pow(bigInteger0);
      bigFraction6.add(bigInteger1);
      bigFraction5.ONE_HALF.getDenominatorAsLong();
      BigFraction bigFraction7 = bigFraction4.divide((int) (byte)0);
      bigFraction5.compareTo(bigFraction2);
      bigFraction7.intValue();
      int int0 = 37;
      int int1 = 145;
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      Object object0 = new Object();
      bigFraction0.TWO.reduce();
      bigFraction0.THREE_QUARTERS.floatValue();
      bigFraction0.TWO.equals(object0);
      bigFraction0.add(0L);
      BigFraction.getReducedFraction(1259, (-283));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1758.0);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.subtract(4503599627370496L);
      int int0 = 1;
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.multiply(1);
      BigFraction bigFraction4 = bigFraction3.THREE_QUARTERS.pow((-1347L));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction4.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction4.ONE_HALF.bigDecimalValue();
      int int1 = (-1253);
      bigFraction3.ONE.bigDecimalValue((-1253), 1);
      bigFraction2.TWO.doubleValue();
      BigFraction bigFraction5 = bigFraction2.ONE.divide(bigFraction3);
      bigFraction0.TWO_THIRDS.pow(1758.0);
      bigFraction5.THREE_QUARTERS.getNumeratorAsInt();
      BigFraction bigFraction6 = bigFraction0.negate();
      BigInteger bigInteger1 = bigFraction6.getDenominator();
      bigFraction6.ZERO.longValue();
      bigFraction0.toString();
      bigFraction1.percentageValue();
      BigFraction bigFraction7 = bigFraction2.pow(bigInteger1);
      bigFraction6.percentageValue();
      bigFraction7.divide(bigFraction2);
      BigFraction bigFraction8 = new BigFraction((-1347L), 0L);
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction9 = bigFraction2.subtract(bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction9.percentageValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      int int0 = 4239;
      int int1 = 3063;
      BigInteger bigInteger1 = new BigInteger("/k<cJP[*", 3063);
      // Undeclared exception!
      try { 
        bigFraction2.multiply(bigInteger0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-978.05989), 0);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.negate();
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.abs();
      bigFraction0.percentageValue();
      bigFraction0.floatValue();
      bigFraction2.hashCode();
      bigFraction1.pow((-889.362443477));
      byte[] byteArray0 = new byte[2];
      bigFraction0.THREE_QUARTERS.add(0);
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-107);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction0.ONE_FIFTH.multiply(bigInteger0);
      bigFraction3.TWO_THIRDS.subtract((int) (byte)114);
      bigFraction2.TWO_FIFTHS.pow((-2788));
      BigFraction bigFraction4 = bigFraction0.THREE_FIFTHS.multiply((-654L));
      bigFraction4.ONE_FIFTH.pow((int) (byte) (-107));
      bigFraction1.THREE_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction5 = bigFraction0.multiply(4503599627370496L);
      bigFraction5.bigDecimalValue();
      BigFraction bigFraction6 = bigFraction0.add(bigInteger0);
      bigFraction2.getNumeratorAsInt();
      BigFraction bigFraction7 = bigFraction6.divide(1);
      bigFraction7.subtract(bigInteger0);
      BigFraction.getReducedFraction((-798), 100);
      BigFraction bigFraction8 = new BigFraction(bigInteger0);
      bigFraction5.compareTo(bigFraction8);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-1);
      BigFraction bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
      int int1 = 1040596076;
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.ONE.getNumeratorAsLong();
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.MINUS_ONE.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.subtract(bigFraction1);
      int int0 = 4239;
      BigFraction bigFraction3 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction4 = BigFraction.TWO_QUARTERS;
      bigFraction4.percentageValue();
      bigFraction3.percentageValue();
      bigFraction1.getField();
      BigFraction bigFraction5 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction6 = bigFraction4.divide(bigFraction5);
      BigFraction bigFraction7 = BigFraction.ZERO;
      bigFraction7.getDenominatorAsLong();
      bigFraction2.pow((-2395.3247));
      bigFraction2.add((-939L));
      int int1 = 2147407303;
      BigFraction bigFraction8 = bigFraction6.pow(2147407303);
      bigFraction8.getField();
      long long0 = 1423L;
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-978.05989), 0);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.negate();
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.abs();
      bigFraction0.percentageValue();
      bigFraction0.floatValue();
      bigFraction2.hashCode();
      bigFraction1.pow((-889.362443477));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-107);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction0.ONE_FIFTH.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.TWO_THIRDS.subtract((int) (byte)114);
      bigFraction0.floatValue();
      bigFraction3.equals(bigFraction0);
      bigFraction4.percentageValue();
      BigFraction bigFraction5 = bigFraction0.add(bigFraction1);
      bigFraction1.subtract(bigFraction5);
      bigFraction4.negate();
      BigFraction bigFraction6 = bigFraction1.reciprocal();
      bigFraction6.percentageValue();
      bigFraction1.bigDecimalValue(3078);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1758.0);
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.multiply(4503599627370496L);
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.subtract(4503599627370496L);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.multiply(1);
      BigFraction bigFraction4 = bigFraction3.THREE_QUARTERS.pow((-1342L));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction4.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction4.ONE_HALF.bigDecimalValue();
      int int0 = (-1259);
      bigFraction3.ONE.bigDecimalValue((-1259), 1);
      bigFraction2.TWO.doubleValue();
      BigFraction bigFraction5 = bigFraction2.ONE.divide(bigFraction3);
      bigFraction0.TWO_THIRDS.pow(1758.0);
      BigFraction bigFraction6 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger1 = bigFraction6.getDenominator();
      bigFraction6.ZERO.longValue();
      bigFraction0.toString();
      bigFraction1.percentageValue();
      BigFraction bigFraction7 = bigFraction2.pow(bigInteger1);
      bigFraction6.percentageValue();
      BigFraction bigFraction8 = bigFraction7.divide(bigFraction2);
      bigFraction8.TWO_THIRDS.pow(bigInteger1);
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction9 = bigFraction2.subtract(bigInteger1);
      bigFraction9.percentageValue();
      bigFraction8.bigDecimalValue((-1259), 1);
      bigFraction7.ZERO.pow((-5034868814120038111L));
      bigFraction8.subtract(int0);
      bigFraction5.toString();
      BigFraction bigFraction10 = bigFraction5.subtract(bigFraction3);
      bigFraction10.reduce();
      // Undeclared exception!
      try { 
        bigFraction9.longValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1758.0);
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.multiply(4503599627370496L);
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.subtract(4503599627370496L);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.multiply(1);
      BigFraction bigFraction4 = bigFraction3.THREE_QUARTERS.pow((-1347L));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction4.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction4.ONE_HALF.bigDecimalValue();
      bigFraction3.hashCode();
      BigFraction bigFraction5 = new BigFraction(2381.2101508647, 1.0, 1);
      bigFraction5.add((-1161L));
      BigFraction bigFraction6 = BigFraction.THREE_FIFTHS;
      bigFraction6.floatValue();
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction0.percentageValue();
      bigFraction3.add(bigFraction0);
      bigFraction6.subtract(bigFraction3);
      BigFraction bigFraction7 = bigFraction5.negate();
      bigFraction4.reciprocal();
      bigFraction4.percentageValue();
      bigFraction7.add(bigInteger0);
      bigFraction7.bigDecimalValue(1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1182.53));
      BigFraction bigFraction1 = new BigFraction((-1182.53), 2147178304);
      bigFraction1.add((BigFraction) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      bigFraction0.doubleValue();
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-1);
      int int1 = (-1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(2109, mockRandom0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
      bigFraction0.pow((double) (-1));
      long long0 = (-939L);
      BigFraction bigFraction1 = bigFraction0.add((long) (-1));
      bigFraction0.pow((-1));
      // Undeclared exception!
      try { 
        bigFraction1.getField();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.multiply((long) 759);
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction1 = bigFraction0.ONE.reciprocal();
      bigFraction1.TWO.hashCode();
      BigFraction bigFraction2 = bigFraction0.add(100L);
      bigFraction2.THREE_FIFTHS.floatValue();
      bigFraction2.ONE_QUARTER.equals(bigFraction1);
      bigFraction2.ONE_FIFTH.percentageValue();
      BigFraction bigFraction3 = bigFraction2.TWO_THIRDS.add(bigFraction0);
      bigFraction3.subtract(bigFraction1);
      BigFraction bigFraction4 = bigFraction0.negate();
      bigFraction4.ONE_THIRD.reciprocal();
      bigFraction3.percentageValue();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      bigFraction0.ONE_HALF.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.divide(1491L);
      bigFraction1.ONE_THIRD.intValue();
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.add(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.subtract(bigFraction0);
      bigFraction3.TWO_THIRDS.percentageValue();
      bigFraction0.THREE_FIFTHS.percentageValue();
      int int0 = 314;
      int int1 = (-2313);
      bigFraction0.bigDecimalValue(314, (-2313));
      Random.setNextRandom(int1);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract(759);
      BigFraction bigFraction2 = bigFraction0.ONE.reciprocal();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction2.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.abs();
      bigFraction2.reduce();
      BigFraction bigFraction5 = bigFraction1.add(759);
      BigFraction bigFraction6 = bigFraction2.add(bigInteger0);
      BigFraction bigFraction7 = bigFraction3.subtract(bigInteger0);
      BigFraction bigFraction8 = bigFraction2.pow((-1673));
      bigFraction4.intValue();
      bigFraction2.pow(bigInteger0);
      bigFraction1.add(bigInteger0);
      bigFraction0.getDenominatorAsLong();
      bigFraction5.divide(1146);
      bigFraction8.compareTo(bigFraction4);
      bigFraction7.intValue();
      bigFraction2.bigDecimalValue(200, 20);
      bigFraction2.subtract(bigFraction7);
      bigFraction6.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(6, 2147483573);
      BigFraction bigFraction1 = bigFraction0.add((-1780L));
      bigFraction0.floatValue();
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      bigFraction1.equals(bigFraction0);
      BigFraction bigFraction3 = BigFraction.ZERO;
      bigFraction3.percentageValue();
      BigFraction bigFraction4 = bigFraction2.add(bigFraction1);
      bigFraction0.negate();
      bigFraction2.reciprocal();
      bigFraction4.percentageValue();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)29;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
      BigFraction bigFraction1 = bigFraction0.subtract(Integer.MAX_VALUE);
      BigFraction bigFraction2 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction3 = bigFraction2.multiply(bigFraction1);
      bigFraction1.reduce();
      bigFraction1.percentageValue();
      bigFraction0.equals(bigFraction3);
      bigFraction3.subtract((long) 3);
      bigFraction2.multiply((-819));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 5;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(5, 5);
      BigFraction bigFraction1 = new BigFraction((double) 5);
      bigFraction1.getDenominatorAsInt();
      bigFraction1.pow(1);
      bigFraction0.percentageValue();
      bigFraction0.add((-2249L));
      BigFraction bigFraction2 = bigFraction1.subtract((-798L));
      int int1 = 11;
      bigFraction2.bigDecimalValue(1202, 11);
      double double0 = 64.1979756;
      BigFraction bigFraction3 = new BigFraction(double0, int0);
      long long0 = (-110408666473L);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)70;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.subtract(3);
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      BigFraction bigFraction3 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction4 = BigFraction.ZERO;
      Object object0 = new Object();
      bigFraction4.equals(object0);
      bigFraction0.percentageValue();
      BigFraction bigFraction5 = bigFraction1.add(bigFraction4);
      BigFraction bigFraction6 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction6.subtract(bigFraction3);
      bigFraction4.negate();
      bigFraction2.reciprocal();
      BigFraction bigFraction7 = new BigFraction(0.022801000000072236, (byte)29);
      bigFraction5.percentageValue();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)70;
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.pow((int) (byte)70);
      bigFraction0.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)27;
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-103);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction1.subtract(2147483545);
      BigFraction bigFraction2 = bigFraction1.multiply((BigFraction) null);
      BigFraction bigFraction3 = bigFraction2.reduce();
      bigFraction3.percentageValue();
      // Undeclared exception!
      try { 
        bigFraction1.equals(bigFraction0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction1.equals(bigFraction0);
      BigFraction bigFraction2 = new BigFraction((double) (-1782L));
      bigFraction2.percentageValue();
      BigFraction bigFraction3 = bigFraction2.add(bigFraction0);
      bigFraction3.ZERO.multiply(899);
      BigFraction bigFraction4 = bigFraction3.subtract(bigFraction0);
      bigFraction2.negate();
      bigFraction4.reciprocal();
      bigFraction3.percentageValue();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.subtract(1914);
      BigFraction bigFraction3 = bigFraction1.THREE_QUARTERS.multiply((-557));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      BigFraction.getReducedFraction(0, (byte)83);
      bigFraction2.subtract((-1051));
      BigFraction bigFraction4 = bigFraction0.reciprocal();
      bigFraction0.ONE_QUARTER.floatValue();
      bigFraction1.hashCode();
      BigFraction bigFraction5 = bigFraction4.add((long) 0);
      bigFraction4.floatValue();
      BigFraction bigFraction6 = BigFraction.ONE_HALF;
      BigFraction bigFraction7 = new BigFraction((int) (byte)83);
      bigFraction5.equals(bigFraction7);
      BigFraction bigFraction8 = new BigFraction(5.1453167686439515E140);
      bigFraction8.percentageValue();
      BigFraction bigFraction9 = BigFraction.ONE_HALF;
      bigFraction9.add(bigFraction3);
      bigFraction9.subtract(bigFraction0);
      bigFraction1.negate();
      bigFraction2.reciprocal();
      BigFraction bigFraction10 = new BigFraction((double) 3302, 3219);
      bigFraction2.percentageValue();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.add(bigFraction1);
      bigFraction2.THREE_QUARTERS.bigDecimalValue(4);
      bigFraction2.ONE_HALF.toString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      bigFraction2.ONE_FIFTH.multiply(2969162481664L);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-47);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.subtract(bigFraction1);
      bigFraction4.getField();
      bigFraction3.bigDecimalValue();
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction5 = bigFraction0.pow(37);
      BigFraction bigFraction6 = BigFraction.TWO_THIRDS;
      bigFraction6.percentageValue();
      bigFraction0.longValue();
      bigFraction6.doubleValue();
      bigFraction4.divide(bigFraction5);
      BigFraction bigFraction7 = BigFraction.ONE_QUARTER;
      bigFraction7.floatValue();
      bigFraction1.bigDecimalValue();
      bigFraction7.bigDecimalValue((int) (byte) (-45), (-3264));
      bigFraction3.getDenominatorAsInt();
      int int0 = 511;
      bigFraction3.pow(int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.add(bigFraction1);
      bigFraction0.multiply((long) 4);
      BigFraction bigFraction3 = bigFraction1.subtract(1703L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction4 = bigFraction2.subtract(bigInteger0);
      BigDecimal bigDecimal0 = bigFraction3.bigDecimalValue();
      BigFraction.getReducedFraction(882, 1211);
      bigFraction4.equals(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(5, 2147483573);
      BigFraction bigFraction1 = new BigFraction((double) 5, 5);
      bigFraction1.add(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigFraction bigFraction0 = new BigFraction((double) (byte)29);
      BigFraction bigFraction1 = bigFraction0.multiply((long) (byte)29);
      bigFraction1.subtract(4503599627370496L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger1);
      bigFraction1.bigDecimalValue();
      BigFraction.getReducedFraction(4060, (byte)29);
      Object object0 = new Object();
      bigFraction2.equals(object0);
      bigFraction1.multiply((long) 4060);
      bigFraction0.add((-1914));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1758.0);
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.multiply(4503599627370496L);
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.subtract(4503599627370496L);
      BigFraction bigFraction3 = bigFraction2.abs();
      bigFraction2.reduce();
      bigFraction3.TWO_QUARTERS.doubleValue();
      BigFraction bigFraction4 = new BigFraction(1448);
      int int0 = 2585;
      bigFraction4.add(2585);
      BigInteger bigInteger0 = null;
      bigFraction4.add((BigInteger) null);
      BigFraction bigFraction5 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction5.subtract(bigInteger0);
      int int1 = 2147483612;
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract(759);
      BigFraction bigFraction2 = bigFraction0.ONE.reciprocal();
      bigFraction2.TWO.hashCode();
      BigFraction bigFraction3 = bigFraction0.add(100L);
      bigFraction3.THREE_FIFTHS.floatValue();
      bigFraction3.ONE_QUARTER.equals(bigFraction2);
      bigFraction1.reciprocal();
      bigFraction3.hashCode();
      BigFraction bigFraction4 = new BigFraction((-3867.89), 759);
      bigFraction0.add(bigFraction2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction3.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract(759);
      BigFraction bigFraction2 = bigFraction0.ONE.reciprocal();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.subtract(bigInteger0);
      bigFraction2.reduce();
      bigFraction1.add(759);
      bigFraction2.add(bigInteger0);
      bigFraction2.pow((-1673));
      bigFraction0.intValue();
      BigFraction bigFraction3 = bigFraction2.pow(bigInteger0);
      BigFraction bigFraction4 = BigFraction.TWO_QUARTERS;
      bigFraction0.getDenominatorAsLong();
      BigInteger.valueOf(98L);
      bigFraction3.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract(759);
      BigFraction bigFraction2 = bigFraction0.ONE.reciprocal();
      bigFraction2.TWO.hashCode();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(0, 41);
      BigFraction bigFraction4 = BigFraction.ONE_THIRD;
      bigFraction4.TWO.subtract(1281);
      BigFraction bigFraction5 = BigFraction.THREE_FIFTHS;
      bigFraction5.reciprocal();
      bigFraction3.MINUS_ONE.longValue();
      bigFraction2.hashCode();
      BigFraction bigFraction6 = new BigFraction((double) 100L, 759);
      bigFraction3.add(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = 1075;
      int int1 = (-1301);
      BigFraction bigFraction7 = null;
      try {
        bigFraction7 = new BigFraction(int0, int1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 100 to fraction (-99/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      BigFraction bigFraction3 = bigFraction1.abs();
      BigFraction bigFraction4 = bigFraction2.reduce();
      BigFraction bigFraction5 = bigFraction3.add(bigInteger0);
      BigFraction bigFraction6 = bigFraction5.subtract(bigInteger0);
      bigFraction6.getDenominatorAsLong();
      BigFraction bigFraction7 = bigFraction4.divide(5);
      BigFraction bigFraction8 = BigFraction.THREE_QUARTERS;
      bigFraction8.compareTo(bigFraction0);
      bigFraction5.subtract(bigFraction2);
      bigFraction1.getNumeratorAsInt();
      bigFraction7.pow(1);
      bigFraction5.getField();
      bigFraction0.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract(759);
      BigFraction bigFraction2 = bigFraction0.ONE.reciprocal();
      bigFraction2.TWO.hashCode();
      BigFraction bigFraction3 = bigFraction0.add(100L);
      bigFraction3.THREE_FIFTHS.floatValue();
      bigFraction3.ONE_QUARTER.equals(bigFraction2);
      bigFraction3.ONE_FIFTH.percentageValue();
      bigFraction1.pow((long) 759);
      BigFraction bigFraction4 = new BigFraction(20.0, 100L, (-3214));
      BigFraction bigFraction5 = new BigFraction((-3214));
      bigFraction5.divide(759);
      bigFraction4.getNumerator();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      int int0 = 5;
      bigFraction1.bigDecimalValue(5);
      BigFraction bigFraction3 = BigFraction.ZERO;
      bigFraction3.toString();
      BigFraction.getReducedFraction(3272, 0);
      BigFraction bigFraction4 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction2.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(7032L);
      bigFraction1.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction2.divide(bigFraction3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }
}
