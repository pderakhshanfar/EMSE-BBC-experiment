/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 11:42:43 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction0.ONE_FIFTH.multiply(bigFraction1);
      bigFraction0.ONE_HALF.subtract((long) (byte)89);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      bigFraction2.THREE_QUARTERS.doubleValue();
      bigFraction2.ONE_THIRD.pow(2519.0);
      BigFraction bigFraction3 = bigFraction2.pow(bigInteger0);
      bigFraction3.floatValue();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      byte[] byteArray0 = new byte[2];
      bigFraction0.MINUS_ONE.doubleValue();
      byteArray0[0] = (byte)89;
      byte byte0 = (byte) (-94);
      bigFraction0.ZERO.intValue();
      byteArray0[1] = (byte) (-94);
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.multiply(bigFraction1);
      bigFraction0.ONE_HALF.subtract(7094272L);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction0.add(bigInteger0);
      bigFraction3.THREE_QUARTERS.doubleValue();
      BigFraction bigFraction4 = bigFraction3.pow(bigInteger0);
      bigFraction4.floatValue();
      bigFraction3.multiply(2169);
      BigFraction bigFraction5 = bigFraction1.divide(bigFraction4);
      bigFraction5.TWO_QUARTERS.multiply(1945L);
      bigFraction2.add(9218868437227405312L);
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((-1602), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-2396L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.add(1127);
      bigFraction0.ZERO.getField();
      bigFraction0.doubleValue();
      BigFraction bigFraction2 = bigFraction0.divide(4931509965122126L);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1127, 2107);
      bigFraction3.TWO_QUARTERS.floatValue();
      bigFraction3.ONE_THIRD.compareTo(bigFraction1);
      BigFraction bigFraction4 = bigFraction2.abs();
      bigFraction4.FOUR_FIFTHS.hashCode();
      BigFraction bigFraction5 = bigFraction2.abs();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction6 = bigFraction3.divide(2147482762);
      bigFraction6.THREE_FIFTHS.negate();
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction7 = bigFraction5.ZERO.pow(bigInteger0);
      BigFraction bigFraction8 = bigFraction0.multiply(bigInteger0);
      bigFraction8.TWO_THIRDS.multiply(bigFraction7);
      bigFraction5.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.bigDecimalValue(2147483541, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.subtract((-1529L));
      bigFraction0.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.THREE_QUARTERS.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.ONE_THIRD.pow((-174));
      bigFraction0.toString();
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1302, 3);
      bigFraction0.ONE_FIFTH.longValue();
      bigFraction3.TWO.getNumeratorAsLong();
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      bigFraction0.subtract(bigFraction4);
      bigFraction0.getNumerator();
      BigFraction bigFraction5 = bigFraction4.abs();
      bigFraction5.intValue();
      bigFraction4.bigDecimalValue(0);
      bigFraction4.doubleValue();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, 838.94803076, (-2344));
      bigFraction0.pow(1040L);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2277L);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2146862378);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.THREE_FIFTHS.subtract(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction0.divide(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((long) 2146862411);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.add(bigInteger0);
      BigFraction bigFraction1 = new BigFraction(2146862411, 2146862411);
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(2146862411, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction0.equals(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction0.TWO_THIRDS.compareTo(bigFraction1);
      bigFraction1.FOUR_FIFTHS.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.abs();
      bigFraction2.TWO_FIFTHS.pow(521);
      bigFraction1.ZERO.add(bigFraction0);
      bigFraction0.bigDecimalValue();
      bigFraction0.bigDecimalValue(0, 0);
      BigFraction bigFraction3 = bigFraction1.reduce();
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      bigFraction3.THREE_QUARTERS.add(bigFraction4);
      bigFraction3.TWO_THIRDS.multiply(547);
      bigFraction1.reciprocal();
      bigFraction2.divide((long) 521);
      BigFraction.getReducedFraction(547, 547);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.3377854824066162);
      bigFraction0.doubleValue();
      bigFraction0.getDenominator();
      bigFraction0.equals("EXPONENT");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction1.pow((-941));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction((-1139.5), (-1139.5), 2147482624);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-2144069519), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      int int0 = (-3499);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.TWO_THIRDS.multiply(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.subtract((-3499));
      bigFraction1.ONE_FIFTH.hashCode();
      BigFraction bigFraction2 = BigFraction.ONE_THIRD;
      bigFraction0.ONE_QUARTER.intValue();
      bigFraction2.THREE_FIFTHS.longValue();
      BigFraction bigFraction3 = bigFraction2.TWO.abs();
      BigFraction bigFraction4 = bigFraction0.multiply(bigFraction2);
      bigFraction3.TWO_THIRDS.equals(bigFraction4);
      bigFraction4.bigDecimalValue(0, 0);
      bigFraction3.ONE_HALF.divide(2613L);
      BigFraction bigFraction5 = bigFraction2.abs();
      Object object0 = new Object();
      bigFraction5.ONE_THIRD.equals(object0);
      BigFraction bigFraction6 = bigFraction0.pow(1075);
      bigFraction6.FOUR_FIFTHS.compareTo(bigFraction4);
      bigFraction2.FOUR_FIFTHS.add(2613L);
      bigFraction6.ONE_FIFTH.reciprocal();
      BigFraction bigFraction7 = bigFraction2.pow((-32768));
      Object object1 = new Object();
      bigFraction7.equals(object1);
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue((-3499));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction0.ONE.add(340);
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.add(bigInteger0);
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      BigFraction bigFraction4 = BigFraction.ONE_FIFTH;
      bigFraction4.equals(bigFraction1);
      BigFraction bigFraction5 = new BigFraction(0.0);
      bigFraction5.toString();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = new BigFraction((-5.607991635038776E-29), 0.30863933000000543, 407);
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = new BigFraction(2769.9797003822);
      bigFraction2.floatValue();
      bigFraction2.divide(980);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.ONE_HALF.bigDecimalValue();
      bigFraction0.equals((Object) null);
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction1.pow(0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.subtract(33554432L);
      bigFraction0.subtract(bigFraction2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.pow(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      Object object0 = new Object();
      bigFraction0.intValue();
      bigFraction0.pow((long) 2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1L, 1L);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction0.add(bigFraction1);
      bigFraction0.percentageValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction3 = new BigFraction((double) 1L);
      BigFraction bigFraction4 = bigFraction3.abs();
      // Undeclared exception!
      try { 
        bigFraction4.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.multiply(bigInteger0);
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      Object object0 = new Object();
      bigFraction2.getField();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2142128327, 2142128327);
      BigFraction bigFraction1 = bigFraction0.ONE.add((-4065));
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.reduce();
      bigFraction0.ONE.pow(2142128327);
      BigFraction bigFraction3 = bigFraction0.negate();
      bigFraction1.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction2.add(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.multiply(bigFraction1);
      bigFraction5.ONE_FIFTH.divide((long) (-4065));
      bigFraction0.reciprocal();
      bigFraction3.intValue();
      bigFraction1.divide(2142128327);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = new BigFraction(1274L, 1727130457096192L);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction2.ZERO.getNumeratorAsInt();
      bigFraction2.compareTo(bigFraction1);
      bigFraction2.longValue();
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.pow(656);
      BigFraction bigFraction3 = bigFraction0.add(bigFraction1);
      bigFraction0.percentageValue();
      bigFraction3.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction0.abs();
      bigFraction4.pow((long) 656);
      BigFraction bigFraction5 = bigFraction3.negate();
      BigFraction bigFraction6 = new BigFraction(50.0);
      BigFraction bigFraction7 = bigFraction3.multiply(2852L);
      BigFraction bigFraction8 = bigFraction5.divide(bigFraction1);
      BigFraction bigFraction9 = BigFraction.MINUS_ONE;
      bigFraction1.equals(bigFraction2);
      BigFraction bigFraction10 = bigFraction6.add((long) 656);
      bigFraction9.bigDecimalValue();
      bigFraction10.bigDecimalValue();
      bigFraction7.subtract(652670102248L);
      bigFraction8.reciprocal();
      bigFraction1.getField();
      bigFraction8.reduce();
      bigFraction9.getDenominator();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(963.2212760560983, 963.2212760560983, 4);
      bigFraction0.ONE_THIRD.subtract(131L);
      bigFraction0.ONE_FIFTH.floatValue();
      bigFraction0.ONE_THIRD.pow(131L);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)51;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = (-133);
      BigFraction bigFraction1 = new BigFraction((-133));
      double double0 = 559.92578044;
      int int1 = 2363;
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(2363, (-642.1561337), 1952257861);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,363 to fraction (9,223,372,036,854,773,446/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction((-258L));
      bigFraction0.pow(bigInteger0);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigFraction0.multiply(bigInteger1);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      Object object0 = new Object();
      BigFraction bigFraction2 = new BigFraction(1641, 2147378795);
      bigFraction2.pow(1);
      bigFraction1.divide(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction1.TWO_QUARTERS.subtract(3012L);
      bigFraction0.THREE_FIFTHS.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.pow(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.multiply(bigInteger1);
      BigFraction bigFraction3 = bigFraction2.pow((-740));
      bigFraction1.multiply(bigInteger1);
      bigFraction3.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 279;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(279, 5);
      long long0 = 1670L;
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.longValue();
      bigFraction0.multiply((-1));
      BigFraction bigFraction1 = new BigFraction(2147483566);
      bigFraction1.TWO_FIFTHS.getField();
      bigFraction1.ZERO.pow(2147483566);
      bigFraction1.getNumerator();
      bigFraction1.abs();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = (-506);
      BigFraction bigFraction0 = new BigFraction(0.45021329855399017, (-506));
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction1.reduce();
      bigFraction1.TWO_THIRDS.multiply((-506));
      bigFraction2.THREE_QUARTERS.doubleValue();
      bigFraction1.TWO_QUARTERS.hashCode();
      bigFraction0.add(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1711.24782557), (-2959));
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(3);
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.add(bigFraction0);
      bigFraction2.THREE_FIFTHS.percentageValue();
      bigFraction0.bigDecimalValue();
      bigFraction1.abs();
      bigFraction1.MINUS_ONE.subtract(bigFraction2);
      BigFraction bigFraction3 = bigFraction0.ZERO.negate();
      BigFraction bigFraction4 = new BigFraction(60.0);
      bigFraction3.multiply(9007199254634496L);
      bigFraction0.TWO_THIRDS.divide(bigFraction2);
      bigFraction0.bigDecimalValue(3);
      BigFraction bigFraction5 = BigFraction.THREE_QUARTERS;
      bigFraction5.THREE_QUARTERS.getNumeratorAsInt();
      bigFraction5.ZERO.divide(1366);
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue(3017);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(3);
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.add(bigFraction0);
      bigFraction2.THREE_FIFTHS.percentageValue();
      bigFraction0.bigDecimalValue();
      bigFraction0.longValue();
      BigFraction bigFraction3 = bigFraction2.divide(1L);
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      bigFraction4.intValue();
      BigFraction bigFraction5 = bigFraction0.pow(1L);
      BigFraction bigFraction6 = bigFraction5.divide(bigFraction3);
      BigFraction bigFraction7 = new BigFraction(1L, (long) 3);
      bigFraction6.longValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction7.subtract(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1711.24782557), (-2959));
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.divide(29);
      BigFraction bigFraction2 = bigFraction1.abs();
      bigFraction2.subtract(bigFraction1);
      bigFraction0.negate();
      BigFraction bigFraction3 = new BigFraction((-1711.24782557));
      BigFraction bigFraction4 = bigFraction1.multiply(9007199254634496L);
      BigFraction bigFraction5 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction4.divide(bigFraction5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.pow(656);
      BigFraction bigFraction3 = bigFraction0.add(bigFraction1);
      bigFraction0.percentageValue();
      bigFraction3.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction0.abs();
      BigFraction bigFraction5 = bigFraction3.negate();
      BigFraction bigFraction6 = new BigFraction(50.0);
      bigFraction3.multiply(2852L);
      bigFraction5.divide(bigFraction1);
      BigFraction bigFraction7 = BigFraction.MINUS_ONE;
      bigFraction1.equals(bigFraction2);
      bigFraction6.add((long) 656);
      bigFraction7.bigDecimalValue();
      bigFraction2.bigDecimalValue();
      bigFraction4.subtract(1920L);
      bigFraction2.reciprocal();
      bigFraction1.getField();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.divide(100);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction3.add(bigInteger1);
      bigFraction2.negate();
      bigFraction1.add(1495);
      bigFraction1.subtract((-1385L));
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = null;
      // Undeclared exception!
      try { 
        bigFraction1.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = new BigFraction(0.4709796905517578, 52);
      bigFraction2.multiply(52);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byte byte0 = (byte)57;
      byteArray0[1] = (byte)57;
      byte byte1 = (byte) (-51);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-9);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = new BigFraction((int) (byte) (-51));
      bigFraction0.add(bigFraction1);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(2.007428933605617E272, 559.92578044, 2363);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 200,742,893,360,561,700,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      int int0 = 2146758636;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.pow(2146758636);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.MINUS_ONE.reciprocal();
      bigFraction0.pow((-1));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      double double0 = 4157.711950494314;
      int int0 = 3000;
      BigFraction bigFraction1 = new BigFraction(4157.711950494314, 4157.711950494314, 3000);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.negate();
      bigFraction0.getDenominatorAsLong();
      bigFraction2.doubleValue();
      BigFraction bigFraction4 = BigFraction.TWO_QUARTERS;
      bigFraction1.subtract(bigFraction4);
      bigFraction3.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.multiply(bigInteger0);
      BigFraction bigFraction5 = BigFraction.ONE_HALF;
      BigFraction bigFraction6 = bigFraction2.multiply(bigFraction3);
      bigFraction6.hashCode();
      BigFraction bigFraction7 = new BigFraction(0L, 914.4339, 3000);
      // Undeclared exception!
      try { 
        bigFraction7.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1711.24782557), (-2959));
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.divide(29);
      bigFraction1.TWO.hashCode();
      bigFraction0.longValue();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction2 = bigFraction0.divide((long) (-2959));
      bigFraction2.FOUR_FIFTHS.intValue();
      BigFraction bigFraction3 = bigFraction2.ONE_FIFTH.pow((long) (-2959));
      BigFraction bigFraction4 = bigFraction2.ONE_THIRD.multiply(55);
      BigFraction bigFraction5 = bigFraction4.add(1908L);
      bigFraction5.getDenominatorAsLong();
      BigFraction bigFraction6 = new BigFraction(24674304L, (-366L));
      bigFraction6.floatValue();
      bigFraction4.getDenominatorAsLong();
      bigFraction3.doubleValue();
      BigFraction bigFraction7 = BigFraction.ONE_HALF;
      bigFraction7.floatValue();
      bigFraction7.multiply(24674304L);
      bigFraction4.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1711.24782557), (-2959));
      bigFraction0.THREE_FIFTHS.divide(29);
      bigFraction0.longValue();
      BigFraction bigFraction1 = bigFraction0.divide((long) (-2959));
      bigFraction1.FOUR_FIFTHS.intValue();
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.pow((long) (-2959));
      bigFraction2.divide(bigFraction1);
      BigFraction bigFraction3 = new BigFraction(9007199221186560L, (-9223372036854775808L));
      bigFraction0.longValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1711.24782557), (-2959));
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.divide((-2959));
      bigFraction1.TWO.hashCode();
      bigFraction0.longValue();
      bigFraction0.getNumerator();
      bigFraction0.TWO_FIFTHS.getField();
      BigFraction bigFraction2 = bigFraction0.divide((long) (-2959));
      bigFraction2.FOUR_FIFTHS.intValue();
      BigFraction bigFraction3 = bigFraction2.ONE_FIFTH.pow((long) (-2959));
      BigFraction bigFraction4 = bigFraction2.ONE_THIRD.multiply(55);
      bigFraction4.THREE_FIFTHS.doubleValue();
      BigFraction bigFraction5 = bigFraction2.subtract(bigFraction3);
      BigFraction bigFraction6 = bigFraction1.add(1699L);
      bigFraction5.getDenominatorAsLong();
      bigFraction6.floatValue();
      bigFraction2.getDenominatorAsLong();
      bigFraction5.doubleValue();
      bigFraction6.floatValue();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.negate();
      bigFraction1.multiply(0L);
      BigFraction bigFraction3 = bigFraction0.MINUS_ONE.add(bigFraction1);
      BigFraction bigFraction4 = bigFraction0.abs();
      bigFraction4.ONE_QUARTER.doubleValue();
      bigFraction4.hashCode();
      bigFraction4.toString();
      bigFraction1.TWO.divide((-523));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction5 = bigFraction3.multiply((-1786));
      bigFraction0.doubleValue();
      bigFraction2.subtract(bigFraction0);
      bigFraction3.getNumeratorAsLong();
      BigFraction bigFraction6 = bigFraction5.multiply(bigInteger0);
      BigFraction bigFraction7 = BigFraction.ONE_HALF;
      bigFraction7.multiply(bigFraction3);
      bigFraction7.hashCode();
      bigFraction1.reciprocal();
      bigFraction3.pow((double) (-523));
      bigFraction0.subtract(bigInteger0);
      bigFraction6.multiply(bigInteger0);
      bigFraction4.multiply(1331);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(380L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-22);
      byteArray0[8] = (byte)51;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction0.ONE_THIRD.add(bigFraction1);
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      bigFraction2.MINUS_ONE.divide((-1371));
      bigFraction0.divide(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.subtract(bigFraction1);
      bigFraction2.toString();
      BigFraction.getReducedFraction(2886, 2886);
      bigFraction0.pow((double) 2886);
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction1.subtract(3840L);
      BigFraction bigFraction4 = bigFraction3.reduce();
      bigFraction1.bigDecimalValue();
      bigFraction2.negate();
      BigFraction bigFraction5 = bigFraction4.add(6);
      BigFraction bigFraction6 = bigFraction3.add(2379);
      bigFraction4.bigDecimalValue();
      BigFraction bigFraction7 = bigFraction5.multiply((long) 2379);
      BigFraction bigFraction8 = new BigFraction(2651L);
      bigFraction8.add(bigInteger0);
      BigFraction bigFraction9 = BigFraction.ONE_FIFTH;
      bigFraction9.getDenominatorAsInt();
      bigFraction7.multiply(5);
      bigFraction1.add(bigFraction6);
      bigFraction5.percentageValue();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.subtract((-322));
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.subtract(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.subtract((int) (byte)0);
      bigFraction0.multiply((int) (byte)0);
      BigFraction bigFraction4 = new BigFraction((byte) (-104), (-2595L));
      BigFraction bigFraction5 = bigFraction4.subtract((long) (byte) (-104));
      bigFraction4.multiply(bigFraction3);
      bigFraction1.add((-322));
      bigFraction5.getDenominator();
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = BigInteger.ONE;
      bigFraction4.multiply(bigInteger3);
      BigFraction bigFraction6 = BigFraction.MINUS_ONE;
      bigFraction4.subtract((int) (byte) (-104));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = new BigFraction(4157.711950494314, 4157.711950494314, 3000);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.negate();
      bigFraction0.getDenominatorAsLong();
      bigFraction1.add(3455L);
      bigFraction0.getDenominatorAsLong();
      bigFraction1.floatValue();
      bigFraction3.getDenominatorAsLong();
      bigFraction1.doubleValue();
      bigFraction3.floatValue();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction0.add(bigFraction1);
      double double0 = (-5080.117208968);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((-5080.117208968), (-5080.117208968), (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -5,080.117 to fraction after -1 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = (-1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) (-1), 52);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1 to fraction (-9,223,372,036,854,775,806/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.compareTo(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.subtract(3012L);
      BigFraction bigFraction3 = bigFraction0.abs();
      BigFraction bigFraction4 = bigFraction2.subtract(3904);
      BigFraction bigFraction5 = bigFraction1.multiply(3904);
      BigFraction bigFraction6 = bigFraction5.multiply((-2447L));
      BigFraction.getReducedFraction(733, 733);
      BigFraction bigFraction7 = bigFraction3.reduce();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction8 = bigFraction1.pow(bigInteger0);
      Object object0 = new Object();
      bigFraction4.equals(bigFraction2);
      bigFraction7.add(bigFraction6);
      BigDecimal bigDecimal0 = new BigDecimal(3904);
      BigFraction bigFraction9 = BigFraction.THREE_FIFTHS;
      bigFraction9.subtract(2147483087);
      bigFraction7.floatValue();
      bigFraction8.getNumeratorAsLong();
      bigFraction5.getDenominatorAsInt();
      bigFraction2.divide(338L);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.subtract(3012L);
      BigFraction bigFraction3 = bigFraction0.THREE_FIFTHS.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction0.pow(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction1.multiply(bigInteger1);
      BigFraction bigFraction5 = bigFraction4.multiply(696);
      BigFraction bigFraction6 = bigFraction5.add(696);
      bigFraction6.TWO_THIRDS.getDenominatorAsLong();
      bigFraction6.THREE_FIFTHS.toString();
      BigFraction bigFraction7 = BigFraction.getReducedFraction(2886, 2886);
      bigFraction0.ZERO.pow((double) 2886);
      bigFraction7.ZERO.bigDecimalValue();
      BigFraction bigFraction8 = bigFraction7.MINUS_ONE.subtract(3012L);
      bigFraction8.ONE_HALF.reduce();
      bigFraction8.ZERO.bigDecimalValue();
      bigFraction7.TWO.negate();
      BigFraction bigFraction9 = bigFraction0.add(2886);
      BigFraction bigFraction10 = bigFraction2.add(2886);
      bigFraction10.ONE_FIFTH.bigDecimalValue();
      bigFraction3.multiply((-3512299194304650054L));
      BigFraction bigFraction11 = bigFraction5.add(bigInteger0);
      bigFraction11.THREE_FIFTHS.getDenominatorAsInt();
      bigFraction9.divide(3L);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.longValue();
      bigFraction0.getNumerator();
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1711.24782557), (-2965));
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.divide((-1));
      bigFraction1.TWO.hashCode();
      bigFraction1.TWO.multiply(bigFraction0);
      bigFraction1.abs();
      BigFraction bigFraction2 = bigFraction1.add(1809L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-77);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      bigFraction0.TWO.getNumeratorAsInt();
      BigFraction bigFraction1 = new BigFraction(4157.711950494314, 4157.711950494314, 2);
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.divide(bigFraction1);
      bigFraction2.ONE_THIRD.negate();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.add((long) 2);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction0.subtract(0);
      bigFraction3.floatValue();
      bigFraction4.getNumeratorAsLong();
      bigFraction3.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction1.THREE_QUARTERS.negate();
      BigFraction bigFraction2 = bigFraction1.multiply(0L);
      bigFraction0.MINUS_ONE.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.abs();
      bigFraction3.ONE_QUARTER.doubleValue();
      bigFraction3.hashCode();
      bigFraction3.toString();
      BigFraction bigFraction4 = bigFraction1.TWO.divide((-523));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction5 = bigFraction2.TWO_THIRDS.add(bigInteger0);
      bigFraction4.THREE_FIFTHS.negate();
      bigFraction1.add(1495);
      bigFraction1.ONE_HALF.subtract(0L);
      bigFraction5.multiply((long) 1495);
      bigFraction3.equals(bigFraction1);
      bigFraction1.add(479232L);
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = new BigFraction(462.9282307, 0.4709796905517578, 1787);
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction2.percentageValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction1.pow(bigInteger1);
      bigFraction4.pow((-95.57818144));
      BigFraction bigFraction5 = bigFraction2.subtract((-1259));
      BigFraction bigFraction6 = new BigFraction((-1724));
      bigFraction3.compareTo(bigFraction6);
      BigFraction bigFraction7 = new BigFraction(52, 1);
      bigFraction7.bigDecimalValue();
      BigFraction.getReducedFraction((-1361), 1787);
      bigFraction5.divide(bigFraction6);
      // Undeclared exception!
      try { 
        bigFraction2.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger1, bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction1.subtract((int) (byte) (-104));
      bigFraction2.subtract(bigFraction0);
      BigFraction bigFraction3 = bigFraction1.subtract((int) (byte) (-104));
      bigFraction1.multiply(2590);
      BigFraction bigFraction4 = new BigFraction((-1.0));
      BigFraction bigFraction5 = bigFraction2.multiply(554L);
      Object object0 = new Object();
      bigFraction0.equals(object0);
      BigFraction bigFraction6 = bigFraction1.add((long) (byte) (-104));
      bigFraction6.bigDecimalValue();
      bigFraction5.bigDecimalValue();
      bigFraction3.subtract(4577762542105553359L);
      bigFraction1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.subtract((-322));
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.subtract(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.subtract((int) (byte)0);
      BigFraction bigFraction4 = bigFraction0.multiply((int) (byte)0);
      BigFraction bigFraction5 = new BigFraction(4035.455023075711);
      BigFraction bigFraction6 = bigFraction5.ONE_FIFTH.multiply(9218868437227405312L);
      bigFraction4.ONE_HALF.equals(bigFraction5);
      bigFraction4.ONE.add(117L);
      bigFraction4.bigDecimalValue();
      bigFraction1.bigDecimalValue();
      bigFraction6.subtract(0L);
      bigFraction3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1014);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)114;
      BigFraction bigFraction1 = new BigFraction((double) (byte) (-26));
      bigFraction0.ONE_HALF.divide(bigFraction1);
      bigFraction0.THREE_FIFTHS.divide(1L);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)37;
      byteArray0[8] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction0.ZERO.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.THREE_FIFTHS.multiply((long) (byte)31);
      bigFraction2.ONE_FIFTH.longValue();
      bigFraction0.FOUR_FIFTHS.percentageValue();
      bigFraction0.doubleValue();
      bigFraction2.getDenominatorAsInt();
      bigFraction3.compareTo(bigFraction2);
      bigFraction2.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((int) (byte) (-26), (int) (byte) (-26));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.add(0L);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(3);
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.add(bigFraction0);
      bigFraction2.THREE_FIFTHS.percentageValue();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction1.abs();
      bigFraction1.MINUS_ONE.subtract(bigFraction2);
      BigFraction bigFraction4 = bigFraction0.ZERO.negate();
      BigFraction bigFraction5 = bigFraction4.TWO_THIRDS.subtract((long) (-1897));
      bigFraction5.TWO_QUARTERS.multiply(bigFraction2);
      bigFraction3.TWO_FIFTHS.add((-1897));
      bigFraction3.getDenominator();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.multiply(bigInteger0);
      bigFraction2.reciprocal();
      bigFraction2.subtract(3);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1711.24782557), (-2965));
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.divide((-1));
      bigFraction1.TWO.hashCode();
      bigFraction0.longValue();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction2 = bigFraction0.divide((long) (-2965));
      bigFraction2.FOUR_FIFTHS.intValue();
      bigFraction2.ONE_FIFTH.pow((long) (-2965));
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.multiply(55);
      bigFraction3.THREE_FIFTHS.doubleValue();
      bigFraction3.ONE_HALF.subtract(bigFraction1);
      bigFraction3.ONE.getNumeratorAsLong();
      BigFraction bigFraction4 = bigFraction1.multiply(bigInteger0);
      BigFraction bigFraction5 = BigFraction.ONE_HALF;
      BigFraction bigFraction6 = bigFraction2.multiply(bigFraction5);
      bigFraction2.TWO_THIRDS.hashCode();
      bigFraction6.ONE.reciprocal();
      bigFraction4.pow(619.2106367518454);
      bigFraction2.subtract(bigInteger0);
      bigFraction3.multiply(bigInteger0);
      bigFraction2.multiply((-2965));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.MINUS_ONE.percentageValue();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = (-1070);
      int int1 = 257;
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1070), 257);
      bigFraction0.TWO_QUARTERS.getNumeratorAsLong();
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction1.THREE_QUARTERS.negate();
      BigFraction bigFraction2 = bigFraction1.multiply(0L);
      bigFraction0.MINUS_ONE.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.abs();
      bigFraction3.ONE_QUARTER.doubleValue();
      bigFraction3.hashCode();
      bigFraction3.toString();
      BigFraction bigFraction4 = bigFraction1.TWO.divide((-523));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction2.TWO_THIRDS.add(bigInteger0);
      bigFraction4.THREE_FIFTHS.negate();
      bigFraction1.add(1495);
      bigFraction1.ONE_HALF.subtract(0L);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction2.subtract(bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue((-523), (-523));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.toString();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.TWO.doubleValue();
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction2.THREE_QUARTERS.intValue();
      long long0 = (-1331L);
      BigFraction bigFraction3 = bigFraction2.multiply((-1331L));
      // Undeclared exception!
      try { 
        bigFraction3.MINUS_ONE.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1419);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.abs();
      BigFraction bigFraction2 = bigFraction0.divide((-1111));
      bigFraction0.TWO.getNumeratorAsInt();
      bigFraction2.TWO_QUARTERS.multiply((-1111));
      BigFraction bigFraction3 = bigFraction0.negate();
      bigFraction3.pow(0.0);
      bigFraction1.ONE_QUARTER.getField();
      bigFraction1.compareTo(bigFraction3);
      bigFraction2.compareTo(bigFraction1);
      bigFraction1.hashCode();
      bigFraction0.pow((double) 1419);
      bigFraction1.multiply(2);
      bigFraction1.pow((double) (-1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.subtract(3012L);
      BigFraction bigFraction3 = bigFraction0.THREE_FIFTHS.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction0.pow(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction1.multiply(bigInteger1);
      BigFraction bigFraction5 = bigFraction4.multiply(696);
      BigFraction bigFraction6 = bigFraction5.add(696);
      bigFraction6.TWO_THIRDS.getDenominatorAsLong();
      bigFraction6.THREE_FIFTHS.toString();
      BigFraction bigFraction7 = BigFraction.getReducedFraction(2886, 2886);
      bigFraction0.ZERO.pow((double) 2886);
      bigFraction7.ZERO.bigDecimalValue();
      BigFraction bigFraction8 = bigFraction7.MINUS_ONE.subtract(3012L);
      bigFraction8.ONE_HALF.reduce();
      bigFraction8.ZERO.bigDecimalValue();
      BigFraction bigFraction9 = bigFraction7.TWO.negate();
      bigFraction0.add(2886);
      BigFraction bigFraction10 = bigFraction2.add(2886);
      bigFraction10.ONE_FIFTH.bigDecimalValue();
      bigFraction3.multiply((-3512299194304650054L));
      BigFraction bigFraction11 = bigFraction5.add(bigInteger0);
      bigFraction11.THREE_FIFTHS.getDenominatorAsInt();
      BigFraction bigFraction12 = bigFraction11.MINUS_ONE.multiply((-1));
      bigFraction9.add(bigFraction5);
      bigFraction12.percentageValue();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = new BigFraction(0, 1);
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.TWO_THIRDS.hashCode();
      bigFraction1.MINUS_ONE.negate();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction2.divide(bigInteger0);
      bigFraction3.TWO_QUARTERS.bigDecimalValue(1);
      bigFraction3.TWO_FIFTHS.pow(bigInteger0);
      int int1 = 1108;
      // Undeclared exception!
      try { 
        bigFraction1.TWO_QUARTERS.bigDecimalValue(1108);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction1.TWO.subtract((-1));
      bigFraction1.ONE_HALF.abs();
      bigFraction2.ONE_HALF.getNumeratorAsLong();
      BigFraction bigFraction3 = new BigFraction((-5080.117208968));
      // Undeclared exception!
      try { 
        bigFraction3.ONE_QUARTER.bigDecimalValue((-2333));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      bigFraction0.TWO.getNumeratorAsInt();
      BigFraction bigFraction1 = new BigFraction(4157.711950494314, 4157.711950494314, 2);
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.divide(bigFraction1);
      bigFraction2.ONE_THIRD.negate();
      bigFraction0.getDenominatorAsLong();
      bigFraction2.TWO_QUARTERS.add((long) 2);
      bigFraction0.getDenominatorAsLong();
      bigFraction0.floatValue();
      bigFraction1.getDenominatorAsLong();
      bigFraction1.doubleValue();
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1456);
      bigFraction0.THREE_QUARTERS.longValue();
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction0.ONE_HALF.subtract(1456);
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.multiply(1456);
      bigFraction1.THREE_QUARTERS.multiply((-2447L));
      BigFraction.getReducedFraction((-1511), (-1511));
      bigFraction0.ONE_THIRD.reduce();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger0);
      Object object0 = new Object();
      bigFraction0.TWO_QUARTERS.equals(object0);
      BigFraction bigFraction4 = bigFraction3.ZERO.add(bigFraction1);
      bigFraction3.ZERO.bigDecimalValue(1, 1);
      bigFraction4.ZERO.subtract(649);
      bigFraction1.floatValue();
      bigFraction4.getNumeratorAsLong();
      bigFraction2.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction2.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1226.102));
      bigFraction0.TWO_QUARTERS.multiply(1088);
      BigFraction bigFraction1 = bigFraction0.multiply(0L);
      BigFraction bigFraction2 = bigFraction1.add(261);
      bigFraction0.longValue();
      bigFraction1.negate();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.ONE_THIRD.pow((-174));
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(974.450213298554, 974.450213298554, 4);
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.multiply(1376);
      assertEquals((short)1100, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.multiply(0L);
      bigFraction2.TWO.longValue();
      BigFraction bigFraction3 = bigFraction0.pow(1617L);
      byte[] byteArray0 = new byte[6];
      double double0 = bigFraction3.percentageValue();
      assertEquals(0.0, double0, 0.01);
      
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction3.TWO_THIRDS.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.divide((-1305));
      BigFraction bigFraction5 = bigFraction4.subtract(1376);
      assertEquals((short) (-1376), bigFraction5.shortValue());
      
      bigFraction0.add(bigInteger0);
      bigFraction3.intValue();
      BigFraction bigFraction6 = bigFraction0.TWO.abs();
      assertEquals((short)2, bigFraction6.shortValue());
      
      BigFraction bigFraction7 = bigFraction4.reciprocal();
      bigFraction7.ONE_FIFTH.pow(618);
      String string0 = bigFraction4.toString();
      assertEquals("-1 / 7605250097493800154447471228420117028161991611297284792233594865234549985253620930560018515480678247932778164399514510398241467095337611166729168066393501493628655832609540387587171409768000859136575359348111362566567271185169870568391176579253801944229254298293651329490483897423278384414785844078731149147642566968934332017378003775586868176988043791025670230355026565557058343609841508822971451747598099022935832072700099426189086105742615205256712914232719061715712687132621172333608960", string0);
      assertFalse(bigFraction4.equals((Object)bigFraction3));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 780;
      BigFraction bigFraction0 = new BigFraction(0.0, 1033.7945701, 780);
      BigFraction bigFraction1 = bigFraction0.ZERO.multiply((long) 780);
      BigFraction bigFraction2 = bigFraction0.pow((long) 780);
      BigFraction bigFraction3 = bigFraction0.reduce();
      int int1 = 828;
      bigFraction2.ONE_HALF.divide(4);
      bigFraction2.TWO.subtract(828);
      bigFraction2.hashCode();
      bigFraction1.ONE.getNumeratorAsInt();
      bigFraction0.TWO_QUARTERS.add(bigFraction3);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(308, 780);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 285;
      BigFraction bigFraction0 = new BigFraction(5258.0742, 5258.0742, 285);
      BigInteger bigInteger0 = null;
      try { 
        bigFraction0.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.pow(0L);
      bigFraction1.TWO_FIFTHS.compareTo(bigFraction0);
      bigFraction1.THREE_FIFTHS.percentageValue();
      bigFraction1.compareTo(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      double double0 = (-2584.063695);
      int int0 = 0;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.intValue();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte) (-100);
      byteArray0[8] = (byte)2;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(bigInteger0);
      bigFraction0.ZERO.floatValue();
      BigFraction bigFraction2 = bigFraction0.divide(4577762542105553359L);
      float float0 = bigFraction2.floatValue();
      assertEquals(1.0922367E-19F, float0, 0.01F);
      
      BigFraction bigFraction3 = bigFraction2.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction5 = bigFraction3.MINUS_ONE.pow(154);
      assertEquals((short)1, bigFraction5.shortValue());
      
      long long0 = bigFraction1.getNumeratorAsLong();
      assertEquals((-9184740303912546815L), long0);
      
      bigFraction3.TWO_FIFTHS.add(bigInteger0);
      bigFraction4.ZERO.getField();
      bigFraction3.getDenominator();
      BigFraction bigFraction6 = bigFraction0.multiply((long) (byte)31);
      BigFraction bigFraction7 = bigFraction4.multiply((long) (byte) (-100));
      assertEquals((byte)100, bigFraction7.byteValue());
      
      BigFraction bigFraction8 = bigFraction4.add(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertEquals((short)0, bigFraction8.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction6));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1075);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.add(bigInteger0);
      bigFraction1.MINUS_ONE.getDenominatorAsInt();
      bigFraction0.getNumeratorAsInt();
      bigFraction0.ONE_HALF.equals(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.subtract(1075);
      bigFraction2.TWO_THIRDS.multiply(1404L);
      bigFraction0.ZERO.getField();
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.subtract(bigFraction1);
      bigFraction0.MINUS_ONE.add(bigFraction2);
      // Undeclared exception!
      try { 
        bigFraction2.ONE_FIFTH.bigDecimalValue((-372), (-372));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2776.217419079));
      bigFraction0.hashCode();
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.multiply((-1));
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.subtract(744);
      BigFraction bigFraction3 = BigFraction.getReducedFraction((-1724), 744);
      bigFraction3.TWO_FIFTHS.getNumeratorAsLong();
      bigFraction0.ONE.longValue();
      BigFraction bigFraction4 = bigFraction0.add((-2357));
      assertEquals((short) (-5133), bigFraction4.shortValue());
      
      bigFraction3.getNumeratorAsLong();
      int int0 = bigFraction3.getNumeratorAsInt();
      assertEquals((-431), int0);
      
      bigFraction2.getField();
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-1724), (-431));
      assertEquals((short)4, bigFraction5.shortValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.TWO_THIRDS.reciprocal();
      double double0 = bigFraction0.ONE_THIRD.percentageValue();
      assertEquals(33.333333333333336, double0, 0.01);
      
      BigFraction bigFraction1 = bigFraction0.add((-1));
      bigFraction1.hashCode();
      assertEquals((byte) (-1), bigFraction1.byteValue());
      
      bigFraction0.multiply(4499201580859392L);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_QUARTERS.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((short)1, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.multiply(bigFraction0);
      assertEquals((short)0, bigFraction3.shortValue());
      
      bigFraction1.equals("dtg_j8");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.add(bigInteger0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.ONE_HALF.add(604);
      BigFraction bigFraction1 = bigFraction0.add(3250L);
      bigFraction1.add(1073741824L);
      String string0 = "Pp%Nw'E";
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction2.THREE_QUARTERS.bigDecimalValue(1, 604);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = (-1);
      BigFraction bigFraction0 = new BigFraction((-1));
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.abs();
      bigFraction0.ONE_HALF.subtract((-456));
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.add(bigFraction0);
      bigFraction2.TWO_FIFTHS.getField();
      BigFraction bigFraction3 = bigFraction2.ONE.reduce();
      // Undeclared exception!
      try { 
        bigFraction3.MINUS_ONE.bigDecimalValue((-1243), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-51.4771437113));
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.abs();
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.add(bigFraction1);
      bigFraction2.FOUR_FIFTHS.multiply((-593));
      bigFraction2.TWO_THIRDS.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.getLowestSetBit();
      // Undeclared exception!
      try { 
        bigFraction1.MINUS_ONE.bigDecimalValue((-190));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      BigFraction bigFraction1 = bigFraction0.subtract(0L);
      bigFraction1.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)68;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.divide(bigInteger0);
      String string0 = bigFraction0.toString();
      assertEquals("1", string0);
      
      BigFraction bigFraction4 = bigFraction0.multiply(bigFraction2);
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertEquals((short)1, bigFraction0.shortValue());
      assertTrue(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      Object object0 = new Object();
      bigFraction0.hashCode();
      bigFraction0.equals(object0);
      bigFraction0.getDenominatorAsLong();
      int int0 = (-1);
      MockRandom mockRandom0 = new MockRandom(3L);
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((-1), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numBits must be non-negative
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 0.0, (-3638));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9218868437227405312L);
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction2 = bigFraction0.TWO.divide(bigFraction1);
      BigFraction bigFraction3 = new BigFraction((-121L), (-3512299194304650054L));
      BigFraction bigFraction4 = bigFraction0.multiply(bigFraction3);
      assertEquals((short)317, bigFraction4.shortValue());
      
      bigFraction3.longValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction5 = bigFraction2.subtract(bigInteger0);
      assertEquals((short)7, bigFraction5.shortValue());
  }
}
