/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 03 20:01:26 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.NoSuchElementException;
import java.util.Random;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 0;
      int int1 = 762;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 762);
      BigFraction bigFraction1 = bigFraction0.TWO.reciprocal();
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.reduce();
      bigFraction2.ONE_HALF.equals((Object) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction3.ONE.hashCode();
      BigFraction bigFraction4 = bigFraction1.THREE_QUARTERS.multiply(bigFraction3);
      bigFraction4.ZERO.pow(762);
      bigFraction0.ONE_FIFTH.getDenominatorAsLong();
      BigFraction bigFraction5 = bigFraction4.ONE_FIFTH.reciprocal();
      bigFraction5.TWO_FIFTHS.floatValue();
      bigFraction1.TWO_QUARTERS.getNumeratorAsInt();
      bigFraction0.floatValue();
      bigFraction3.reduce();
      bigFraction3.TWO_FIFTHS.negate();
      BigFraction bigFraction6 = BigFraction.getReducedFraction(762, 0);
      // Undeclared exception!
      try { 
        bigFraction6.ONE_FIFTH.pow(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0), 1);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-62);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(798);
      bigFraction0.THREE_FIFTHS.bigDecimalValue(3, 3);
      bigFraction0.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ONE_FIFTH.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1688.1896996, 681);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ONE.divide(681);
      bigFraction0.TWO_THIRDS.multiply(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.divide(bigInteger0);
      bigFraction1.ONE_HALF.bigDecimalValue(2291, 2548);
      long long0 = 0L;
      bigFraction0.divide(long0);
      bigFraction1.subtract(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction1.getDenominatorAsLong();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4503599627370496L);
      bigFraction0.MINUS_ONE.compareTo((BigFraction) null);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 2038;
      int int1 = (-1261);
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2038, (-1261));
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.add((long) (-1261));
      bigFraction1.TWO.abs();
      BigFraction bigFraction3 = BigFraction.ONE;
      BigFraction bigFraction4 = bigFraction3.ZERO.multiply(bigFraction2);
      BigFraction bigFraction5 = bigFraction4.TWO_THIRDS.add(bigFraction1);
      bigFraction4.TWO_QUARTERS.add(bigFraction0);
      bigFraction1.ONE_QUARTER.compareTo(bigFraction3);
      BigFraction bigFraction6 = bigFraction0.add(bigFraction1);
      bigFraction6.TWO_FIFTHS.intValue();
      bigFraction1.TWO_THIRDS.compareTo(bigFraction3);
      bigFraction6.ONE.multiply(bigFraction5);
      // Undeclared exception!
      try { 
        bigFraction6.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.getNumeratorAsLong();
      int int0 = (-1);
      int int1 = 0;
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.TWO.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0, 9);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.TWO.pow(403.0356895);
      BigFraction bigFraction1 = null;
      BigFraction bigFraction2 = bigFraction0.divide((BigFraction) null);
      // Undeclared exception!
      try { 
        bigFraction2.ONE_QUARTER.divide(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.THREE_FIFTHS.getDenominatorAsLong();
      bigFraction1.TWO_QUARTERS.toString();
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.reciprocal();
      BigFraction bigFraction3 = bigFraction0.subtract(5);
      BigFraction bigFraction4 = bigFraction2.add(bigFraction1);
      bigFraction4.getNumeratorAsInt();
      bigFraction2.ONE_HALF.toString();
      BigFraction bigFraction5 = bigFraction3.divide((-682));
      BigFraction bigFraction6 = BigFraction.TWO_QUARTERS;
      bigFraction5.divide(bigFraction6);
      bigFraction2.negate();
      bigFraction1.multiply(0L);
      bigFraction4.multiply(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.ZERO.getField();
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.add(bigInteger0);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-116);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.multiply(bigInteger1);
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.multiply(bigFraction1);
      bigFraction3.THREE_QUARTERS.intValue();
      bigFraction2.MINUS_ONE.pow((-1.0));
      bigFraction0.bigDecimalValue(1, 1);
      bigFraction1.multiply(4669L);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3100.7524099764, (-1290));
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.negate();
      bigFraction0.ONE.percentageValue();
      bigFraction0.doubleValue();
      bigFraction1.intValue();
      bigFraction0.hashCode();
      bigFraction0.doubleValue();
      BigFraction bigFraction2 = bigFraction1.divide(1143L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger0);
      bigFraction1.TWO_THIRDS.getNumeratorAsLong();
      bigFraction3.ONE_QUARTER.bigDecimalValue((-1290), (-1290));
      bigFraction3.divide(bigFraction2);
      bigFraction2.getDenominatorAsInt();
      int int0 = 1;
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)32;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction1.THREE_FIFTHS.multiply(bigInteger0);
      bigInteger0.intValue();
      bigFraction1.FOUR_FIFTHS.compareTo(bigFraction0);
      bigFraction0.toString();
      bigFraction0.ZERO.pow((int) (byte)32);
      bigFraction1.TWO_QUARTERS.floatValue();
      bigFraction0.TWO_QUARTERS.percentageValue();
      bigFraction0.compareTo(bigFraction1);
      bigFraction0.doubleValue();
      bigFraction1.getField();
      bigFraction1.getField();
      bigFraction0.intValue();
      BigFraction bigFraction2 = bigFraction0.subtract(13088);
      bigFraction2.ZERO.multiply(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.add(13088);
      bigFraction3.ONE_FIFTH.toString();
      BigFraction bigFraction4 = BigFraction.getReducedFraction(3084, 5);
      bigFraction4.THREE_FIFTHS.multiply((long) (byte)32);
      bigFraction2.floatValue();
      bigFraction1.divide(0L);
      bigFraction4.getNumeratorAsLong();
      int int0 = (-1);
      int int1 = 100;
      BigFraction.getReducedFraction(int0, int1);
      BigFraction bigFraction5 = null;
      try {  
      bigFraction5 = BigFraction.ONE_FIFTH;
      } catch(MathArithmeticException e) {}
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow(85L);
      bigFraction1.TWO_THIRDS.abs();
      BigFraction bigFraction2 = bigFraction0.abs();
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.abs();
      BigInteger bigInteger0 = BigInteger.probablePrime((-780), (Random) null);
      bigFraction3.TWO_QUARTERS.multiply(bigInteger0);
      int int0 = 1;
      int int1 = 0;
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1637L));
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.reduce();
      bigFraction0.pow(0.0);
      BigFraction bigFraction2 = bigFraction1.subtract(0);
      bigFraction2.subtract(1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction1.pow(bigInteger0);
      bigFraction3.multiply((-1665L));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-334.53264), 135.9, (-1439));
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction0.add(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.ONE_QUARTER.divide(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction1.pow(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-988), (-988));
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.ONE_HALF.divide(bigFraction1);
      bigFraction2.ONE_QUARTER.negate();
      BigFraction bigFraction4 = bigFraction2.subtract((-988));
      bigFraction4.ONE_FIFTH.hashCode();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction5 = bigFraction1.divide((long) (-988));
      BigFraction bigFraction6 = bigFraction1.add(bigFraction5);
      BigFraction bigFraction7 = bigFraction6.ONE_FIFTH.add((long) (-988));
      bigFraction1.TWO_THIRDS.toString();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction5.TWO_FIFTHS.subtract(bigInteger0);
      bigFraction1.floatValue();
      bigFraction2.compareTo(bigFraction4);
      bigFraction7.getNumeratorAsInt();
      BigInteger bigInteger1 = bigFraction6.getDenominator();
      bigFraction3.bigDecimalValue(317);
      bigFraction0.pow(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.intValue();
      BigFraction bigFraction1 = bigFraction0.subtract(1842L);
      bigFraction0.floatValue();
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      bigFraction2.ZERO.getDenominatorAsLong();
      bigFraction2.getField();
      bigFraction2.TWO.intValue();
      BigFraction bigFraction3 = bigFraction2.pow((-189));
      bigFraction1.percentageValue();
      BigFraction bigFraction4 = bigFraction0.subtract((-189));
      bigFraction4.TWO_FIFTHS.reciprocal();
      bigFraction3.multiply(bigFraction0);
      bigFraction4.pow((double) 1842L);
      bigFraction3.floatValue();
      bigFraction1.negate();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = (-105);
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308, (-105));
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.bigDecimalValue(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1L);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.ZERO.divide(1L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction3.ONE_QUARTER.add(bigInteger0);
      BigFraction bigFraction4 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction5 = bigFraction0.add(bigFraction4);
      BigFraction bigFraction6 = bigFraction5.TWO_FIFTHS.reciprocal();
      bigFraction3.pow(1.0);
      BigFraction bigFraction7 = bigFraction1.reduce();
      bigFraction2.getNumeratorAsLong();
      bigFraction2.pow(bigInteger0);
      bigFraction7.ONE.add(bigFraction1);
      bigFraction7.THREE_QUARTERS.reciprocal();
      bigFraction5.floatValue();
      bigFraction7.getDenominatorAsLong();
      bigFraction6.multiply(bigInteger0);
      BigFraction bigFraction8 = BigFraction.TWO_QUARTERS;
      bigFraction3.subtract(bigFraction8);
      bigFraction8.compareTo(bigFraction3);
      bigFraction4.divide(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-176L), 424L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)84;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.subtract((BigInteger) null);
      byte byte0 = (byte) (-128);
      byteArray0[5] = byte0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction0.ZERO.divide(bigInteger0);
      bigFraction0.intValue();
      bigFraction2.add(bigFraction1);
      bigFraction0.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.subtract(3837L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.pow(bigInteger0);
      bigFraction2.FOUR_FIFTHS.reduce();
      bigFraction2.percentageValue();
      BigFraction bigFraction3 = bigFraction0.abs();
      bigFraction3.THREE_QUARTERS.divide(2);
      bigFraction3.getDenominator();
      bigFraction1.floatValue();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.divide(1073741824L);
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      bigFraction0.compareTo(bigFraction2);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.add(bigInteger0);
      bigFraction1.bigDecimalValue((-1));
      // Undeclared exception!
      try { 
        bigFraction0.multiply(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction0.TWO_THIRDS.divide(bigFraction1);
      bigFraction0.ONE_THIRD.intValue();
      BigFraction bigFraction2 = bigFraction0.abs();
      bigFraction2.ONE_QUARTER.getField();
      BigFraction bigFraction3 = bigFraction0.pow((long) 0);
      bigFraction2.reduce();
      BigFraction bigFraction4 = BigFraction.getReducedFraction(52, 1);
      bigFraction4.intValue();
      bigFraction3.getDenominator();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3574L, 3574L);
      bigFraction0.hashCode();
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.multiply(845);
      bigFraction1.ONE_HALF.subtract(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.TWO.abs();
      bigFraction2.TWO_QUARTERS.divide(9223372036854775807L);
      bigFraction1.intValue();
      BigFraction bigFraction3 = bigFraction0.MINUS_ONE.multiply(2686L);
      BigFraction bigFraction4 = bigFraction1.multiply(4398046511103L);
      bigFraction4.floatValue();
      bigFraction1.multiply(bigFraction3);
      BigFraction bigFraction5 = bigFraction3.multiply(1941L);
      bigFraction5.longValue();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.FOUR_FIFTHS.toString();
      BigFraction bigFraction1 = bigFraction0.add((BigInteger) null);
      // Undeclared exception!
      try { 
        bigFraction1.THREE_FIFTHS.subtract(bigFraction0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.ZERO.doubleValue();
      int int0 = (-673);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((-673), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numBits must be non-negative
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = (-3877);
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-3877), (-3877));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)112;
      bigFraction0.ONE.add((int) (byte)112);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      bigFraction0.ZERO.reduce();
      byteArray0[6] = (byte)104;
      bigFraction0.ONE.bigDecimalValue((int) (byte) (-1), (-1));
      bigFraction0.ONE_QUARTER.hashCode();
      byte byte0 = (byte)114;
      bigFraction0.ONE.pow(int0);
      byteArray0[7] = byte0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      long long0 = 183L;
      bigFraction0.ONE_FIFTH.multiply(long0);
      // Undeclared exception!
      try { 
        bigFraction0.multiply(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = 4503599627370495L;
      BigFraction bigFraction0 = new BigFraction(4503599627370495L);
      bigFraction0.ONE_FIFTH.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE.multiply(bigInteger0);
      bigFraction0.bigDecimalValue(1463, (-1));
      bigFraction1.ZERO.floatValue();
      int int0 = 0;
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-302932621132653753L), (-302932621132653753L));
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.pow(0L);
      bigFraction0.THREE_QUARTERS.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      bigFraction1.subtract(2467);
      bigFraction2.pow(2467);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.ONE_FIFTH.bigDecimalValue();
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.abs();
      bigFraction1.MINUS_ONE.doubleValue();
      bigFraction1.MINUS_ONE.doubleValue();
      BigFraction bigFraction2 = BigFraction.ZERO;
      bigFraction2.TWO.getDenominatorAsInt();
      bigFraction2.THREE_QUARTERS.multiply(352L);
      bigFraction0.ONE_THIRD.equals(bigFraction2);
      bigFraction0.subtract(5);
      BigFraction bigFraction3 = bigFraction0.THREE_FIFTHS.divide((-1919L));
      bigFraction3.MINUS_ONE.doubleValue();
      bigFraction0.TWO.longValue();
      BigFraction bigFraction4 = bigFraction0.pow(0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction5 = bigFraction4.pow(bigInteger0);
      BigFraction bigFraction6 = bigFraction2.divide(bigInteger0);
      bigFraction6.TWO_QUARTERS.pow(1.7976931348623157E308);
      bigFraction6.ONE_QUARTER.compareTo(bigFraction2);
      BigFraction bigFraction7 = bigFraction6.subtract(bigInteger0);
      bigFraction7.ONE_THIRD.reduce();
      bigFraction5.longValue();
      BigFraction bigFraction8 = bigFraction0.multiply(1);
      bigFraction2.getDenominatorAsLong();
      bigFraction8.longValue();
      bigFraction5.subtract((-1181));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.multiply(1220);
      BigFraction.getReducedFraction(745, 745);
      bigFraction0.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 1241;
      BigFraction bigFraction0 = new BigFraction(1241);
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction0.THREE_FIFTHS.floatValue();
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction1.ONE_THIRD.percentageValue();
      bigFraction2.ONE_QUARTER.add(0L);
      BigInteger bigInteger0 = new BigInteger((byte[]) null);
      bigFraction1.FOUR_FIFTHS.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigFraction2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L, (-375L));
      bigFraction0.TWO_THIRDS.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.pow((-375L));
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.reciprocal();
      bigFraction0.FOUR_FIFTHS.bigDecimalValue();
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      BigFraction bigFraction4 = bigFraction0.subtract(bigFraction3);
      bigFraction4.pow((double) 2L);
      BigFraction bigFraction5 = bigFraction3.THREE_QUARTERS.add(2L);
      bigFraction2.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction3.getNumerator();
      bigFraction3.add(bigFraction2);
      bigFraction5.reduce();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-337.35));
      bigFraction0.ONE_HALF.percentageValue();
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.add(1535L);
      bigFraction1.ONE.pow((double) 1535L);
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.reduce();
      bigFraction0.add(0L);
      bigFraction1.hashCode();
      bigFraction1.floatValue();
      bigFraction1.reciprocal();
      bigFraction0.abs();
      bigFraction2.compareTo(bigFraction1);
      BigFraction bigFraction3 = new BigFraction(1.0, 6.076029840339376E37, (-1));
      bigFraction0.divide(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.ONE_HALF.divide(100L);
      bigFraction0.FOUR_FIFTHS.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.ZERO.subtract(bigInteger0);
      bigFraction1.TWO_FIFTHS.getNumeratorAsInt();
      bigFraction1.bigDecimalValue(5);
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction2 = bigFraction1.multiply(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.TWO_THIRDS.multiply(bigFraction1);
      bigFraction2.pow((double) 2);
      BigFraction bigFraction4 = bigFraction2.add(0L);
      bigFraction3.ONE_FIFTH.intValue();
      bigFraction4.longValue();
      bigFraction4.MINUS_ONE.longValue();
      bigFraction4.TWO_THIRDS.bigDecimalValue((-1), 2);
      bigFraction2.subtract(bigFraction1);
      bigFraction1.longValue();
      bigFraction0.doubleValue();
      BigFraction bigFraction5 = bigFraction1.multiply(294);
      bigFraction5.ZERO.pow((long) (-1));
      bigFraction0.percentageValue();
      bigFraction2.compareTo(bigFraction3);
      bigFraction2.TWO_THIRDS.doubleValue();
      // Undeclared exception!
      try { 
        bigFraction5.reduce();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.FOUR_FIFTHS.getField();
      BigFraction bigFraction1 = bigFraction0.ZERO.divide(5105L);
      BigFraction bigFraction2 = bigFraction0.pow((-3667L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.ONE_FIFTH.percentageValue();
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.add(bigFraction0);
      BigFraction bigFraction4 = bigFraction2.MINUS_ONE.subtract(bigInteger0);
      bigFraction2.toString();
      bigFraction1.toString();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.intValue();
      bigFraction1.percentageValue();
      bigFraction4.ONE_QUARTER.compareTo(bigFraction0);
      bigFraction4.toString();
      bigFraction0.percentageValue();
      BigFraction bigFraction5 = bigFraction4.subtract(bigInteger0);
      BigFraction bigFraction6 = bigFraction4.divide(bigFraction5);
      BigFraction bigFraction7 = bigFraction6.ONE_QUARTER.pow((-1053L));
      bigFraction7.ZERO.bigDecimalValue();
      bigFraction3.add((long) 0);
      bigFraction1.multiply(0);
      BigFraction bigFraction8 = BigFraction.getReducedFraction((-3108), (-1));
      BigFraction bigFraction9 = bigFraction5.multiply(bigFraction8);
      bigFraction9.bigDecimalValue();
      bigFraction1.ONE_THIRD.pow(1687.82043791093);
      bigFraction0.percentageValue();
      bigFraction5.hashCode();
      bigFraction1.add(bigInteger0);
      bigFraction2.multiply(bigFraction7);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow((-1));
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.multiply((-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.TWO_FIFTHS.multiply(bigInteger0);
      bigFraction2.ONE_HALF.equals(bigFraction0);
      bigFraction2.percentageValue();
      bigFraction1.TWO.pow((double) (-1));
      BigFraction bigFraction3 = bigFraction1.multiply(289L);
      bigFraction3.THREE_QUARTERS.getField();
      BigFraction bigFraction4 = bigFraction3.TWO_THIRDS.add(bigFraction0);
      bigFraction4.TWO_QUARTERS.equals(bigFraction0);
      bigFraction4.TWO_FIFTHS.multiply(398);
      bigFraction3.THREE_QUARTERS.floatValue();
      BigFraction bigFraction5 = bigFraction0.subtract(289L);
      BigFraction bigFraction6 = bigFraction5.pow((-1));
      bigFraction6.getDenominatorAsInt();
      bigFraction5.longValue();
      BigFraction bigFraction7 = bigFraction1.add(bigFraction5);
      bigFraction5.ZERO.getNumeratorAsLong();
      BigFraction bigFraction8 = bigFraction3.multiply(bigFraction5);
      bigFraction8.ONE_THIRD.floatValue();
      bigFraction0.getNumerator();
      bigFraction4.THREE_FIFTHS.add(1);
      bigFraction7.subtract((-34L));
      bigFraction8.getNumeratorAsInt();
      bigFraction4.pow(1);
      bigFraction2.pow((double) 1);
      BigFraction bigFraction9 = bigFraction1.reduce();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)1;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigFraction9.pow(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), (-1));
      BigFraction bigFraction1 = bigFraction0.ZERO.abs();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.ZERO.pow(bigInteger0);
      bigFraction1.TWO_FIFTHS.getNumeratorAsLong();
      bigFraction0.divide((long) (-1));
      bigFraction0.bigDecimalValue((-1), (-2234));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.multiply(1220);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(745, 745);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-22);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction0.subtract(bigInteger0);
      bigFraction2.multiply(4643211215818981376L);
      bigFraction3.getNumeratorAsLong();
      BigFraction.getReducedFraction((byte) (-22), 745);
      BigFraction bigFraction4 = bigFraction1.subtract(bigInteger0);
      bigFraction4.pow(85L);
      bigFraction1.getDenominator();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-334.53264), (-334.53264), (-2389));
      BigFraction bigFraction1 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction1.add(bigFraction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -334.533 to fraction after -2,389 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2403L);
      BigFraction bigFraction1 = new BigFraction(0.0021996000000399363);
      bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(490, 490);
      bigFraction2.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow((-1));
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.multiply((-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.TWO_FIFTHS.multiply(bigInteger0);
      bigFraction2.ONE_HALF.equals(bigFraction0);
      bigFraction2.percentageValue();
      bigFraction1.TWO.pow((double) (-1));
      BigFraction bigFraction4 = bigFraction1.multiply(289L);
      bigFraction4.THREE_QUARTERS.getField();
      BigFraction bigFraction5 = bigFraction4.TWO_THIRDS.add(bigFraction0);
      bigFraction5.TWO_QUARTERS.equals(bigFraction0);
      bigFraction5.TWO_FIFTHS.multiply((-1));
      bigFraction4.THREE_QUARTERS.floatValue();
      bigFraction0.subtract(289L);
      bigFraction3.getDenominator();
      bigFraction0.getDenominator();
      BigFraction bigFraction6 = bigFraction2.multiply(5071932283158528L);
      bigFraction1.getNumeratorAsInt();
      BigFraction bigFraction7 = bigFraction6.divide(289L);
      bigFraction7.divide((-2001));
      BigFraction.getReducedFraction((-1), (-825));
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction7.subtract(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.toString();
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.subtract(bigFraction0);
      bigFraction1.ONE_THIRD.percentageValue();
      bigFraction2.pow(33.333333333333336);
      bigFraction0.getDenominator();
      bigFraction1.getDenominator();
      BigFraction bigFraction3 = bigFraction0.multiply((-1369L));
      bigFraction0.MINUS_ONE.getNumeratorAsInt();
      bigFraction0.TWO_THIRDS.divide(9007199254740990L);
      bigFraction3.divide((-220));
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-337.35));
      bigFraction0.ONE_HALF.percentageValue();
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction1.ONE.pow((double) 1535L);
      bigFraction1.FOUR_FIFTHS.reduce();
      BigFraction bigFraction2 = new BigFraction((-281));
      BigFraction bigFraction3 = bigFraction2.add((-3945L));
      BigFraction bigFraction4 = BigFraction.ONE_FIFTH;
      bigFraction4.hashCode();
      bigFraction0.floatValue();
      bigFraction3.reciprocal();
      BigFraction bigFraction5 = bigFraction3.abs();
      bigFraction2.compareTo(bigFraction5);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L, (-375L));
      bigFraction0.TWO_THIRDS.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.pow((-375L));
      bigFraction1.THREE_FIFTHS.reciprocal();
      bigFraction0.FOUR_FIFTHS.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction1.reduce();
      bigFraction1.percentageValue();
      BigFraction bigFraction3 = bigFraction2.abs();
      bigFraction3.divide(1);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction4 = new BigFraction(bigInteger0);
      bigFraction4.floatValue();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow((-1));
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.multiply((-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.TWO_FIFTHS.multiply(bigInteger0);
      bigFraction2.ONE_HALF.equals(bigFraction0);
      bigFraction2.percentageValue();
      bigFraction1.TWO.pow((double) (-1));
      BigFraction bigFraction3 = bigFraction1.multiply((long) (-1));
      bigFraction3.THREE_QUARTERS.getField();
      BigFraction bigFraction4 = bigFraction3.TWO_THIRDS.add(bigFraction0);
      bigFraction4.TWO_QUARTERS.equals(bigFraction0);
      bigFraction4.TWO_FIFTHS.multiply(398);
      bigFraction3.THREE_QUARTERS.floatValue();
      BigFraction bigFraction5 = bigFraction0.subtract((long) (-1));
      BigFraction bigFraction6 = bigFraction5.pow((-1));
      bigFraction6.getDenominatorAsInt();
      bigFraction5.longValue();
      bigFraction1.add(bigFraction5);
      bigFraction5.ZERO.getNumeratorAsLong();
      BigFraction bigFraction7 = bigFraction3.multiply(bigFraction5);
      bigFraction7.ONE_THIRD.floatValue();
      bigFraction0.getNumerator();
      bigFraction3.pow(1.7976931348623157E308);
      bigFraction6.add((long) 398);
      bigFraction1.getDenominatorAsLong();
      bigFraction6.getNumerator();
      bigFraction0.add(bigFraction6);
      BigFraction bigFraction8 = new BigFraction(0L);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2403L);
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-122), (-122));
      BigFraction bigFraction2 = bigFraction0.multiply(4643211215818981376L);
      bigFraction1.floatValue();
      bigFraction2.divide(2403L);
      bigFraction2.getNumeratorAsLong();
      BigFraction bigFraction3 = BigFraction.getReducedFraction((-122), (-1));
      BigFraction bigFraction4 = BigFraction.ONE_FIFTH;
      bigFraction3.subtract(bigFraction1);
      bigFraction2.subtract((-1500));
      bigFraction2.intValue();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L, (-375L));
      bigFraction0.TWO_THIRDS.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.pow((-375L));
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.reciprocal();
      bigFraction0.FOUR_FIFTHS.bigDecimalValue();
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      BigFraction bigFraction4 = bigFraction0.subtract(bigFraction3);
      bigFraction4.pow((double) 2L);
      BigFraction bigFraction5 = bigFraction3.add(bigFraction0);
      BigFraction bigFraction6 = bigFraction4.reciprocal();
      bigFraction2.floatValue();
      bigFraction6.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction4.multiply(bigInteger0);
      BigFraction bigFraction7 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction8 = bigFraction5.subtract(bigFraction2);
      bigFraction3.compareTo(bigFraction2);
      BigFraction bigFraction9 = BigFraction.ONE_HALF;
      bigFraction8.divide(bigFraction9);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.ZERO;
      long long0 = 0L;
      bigFraction0.THREE_FIFTHS.getDenominatorAsInt();
      bigFraction0.TWO_QUARTERS.subtract(0L);
      bigFraction0.TWO_QUARTERS.pow((-617.95144));
      bigFraction0.divide(0L);
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(bigInteger0);
      bigFraction1.FOUR_FIFTHS.reduce();
      bigFraction1.percentageValue();
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      bigFraction0.equals(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.multiply(1666422);
      bigFraction0.floatValue();
      bigFraction1.subtract(3072475292657254L);
      bigFraction2.getDenominator();
      bigFraction3.getDenominator();
      BigFraction bigFraction4 = bigFraction0.multiply(3072475292657254L);
      BigFraction bigFraction5 = BigFraction.ONE_QUARTER;
      bigFraction5.getNumeratorAsInt();
      bigFraction4.divide((-408L));
      bigFraction3.divide(1666422);
      BigFraction.getReducedFraction(2299, 4713238);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigFraction1.subtract(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.toString();
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction1.THREE_FIFTHS.subtract(bigFraction0);
      BigFraction bigFraction2 = new BigFraction(3.623110695743118E237);
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction2);
      BigFraction.getReducedFraction(2434, 2434);
      bigFraction3.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1688.1896996, 681);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      bigFraction0.bigDecimalValue((-1), 0);
      BigFraction bigFraction2 = bigFraction1.divide((long) (-1));
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      bigFraction3.getDenominatorAsLong();
      bigFraction1.getDenominatorAsLong();
      bigFraction3.subtract(bigFraction2);
      bigFraction3.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = (-105);
      BigFraction bigFraction0 = new BigFraction(331.2, (-105));
      bigFraction0.THREE_QUARTERS.bigDecimalValue((-105));
      // Undeclared exception!
      try { 
        bigFraction0.TWO_THIRDS.getDenominatorAsInt();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.subtract(3837L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.pow(bigInteger0);
      bigFraction2.FOUR_FIFTHS.reduce();
      bigFraction0.reduce();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1, (-2325));
      bigFraction1.intValue();
      bigFraction3.getDenominator();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.divide(bigFraction1);
      bigFraction0.ONE_THIRD.intValue();
      BigFraction bigFraction3 = bigFraction0.abs();
      bigFraction3.ONE_QUARTER.getField();
      bigFraction0.pow((long) 0);
      BigFraction bigFraction4 = BigFraction.THREE_QUARTERS;
      bigFraction4.percentageValue();
      bigFraction2.abs();
      // Undeclared exception!
      try { 
        bigFraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.pow((-1015L));
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      BigFraction bigFraction4 = bigFraction2.subtract(bigFraction3);
      bigFraction1.ONE_HALF.pow((-1015L));
      bigFraction4.pow(0.7524099764000312);
      BigFraction bigFraction5 = bigFraction0.add(bigFraction3);
      BigFraction bigFraction6 = bigFraction5.reciprocal();
      bigFraction6.floatValue();
      bigFraction2.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction7 = bigFraction1.multiply(bigInteger0);
      BigFraction bigFraction8 = BigFraction.TWO_QUARTERS;
      bigFraction7.subtract(bigFraction1);
      bigFraction3.compareTo(bigFraction7);
      BigFraction bigFraction9 = BigFraction.ONE_HALF;
      bigFraction5.divide(bigFraction9);
      bigFraction8.reciprocal();
      bigFraction3.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.18969960000003994);
      BigFraction bigFraction1 = bigFraction0.pow((-1));
      BigFraction bigFraction2 = bigFraction1.multiply((-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.multiply(bigInteger0);
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction0.percentageValue();
      bigFraction1.pow((double) (-1));
      BigFraction bigFraction3 = bigFraction2.multiply((long) (-1));
      BigFraction bigFraction4 = new BigFraction(bigInteger0);
      bigFraction4.getField();
      BigFraction bigFraction5 = bigFraction3.add(bigFraction4);
      Object object1 = new Object();
      bigFraction4.equals(object1);
      bigFraction0.multiply(5);
      bigFraction2.floatValue();
      BigFraction bigFraction6 = new BigFraction((-1));
      bigFraction6.subtract((long) 5);
      BigFraction bigFraction7 = new BigFraction(5, (-1));
      bigFraction7.getDenominator();
      bigFraction0.getDenominator();
      bigFraction5.multiply(289L);
      bigFraction1.getNumeratorAsInt();
      bigFraction1.divide((-2420L));
      BigFraction bigFraction8 = bigFraction5.divide(5);
      BigFraction.getReducedFraction((-1), 0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction8.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction((double) 9, 9);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.multiply((BigInteger) null);
      // Undeclared exception!
      try { 
        bigFraction1.equals(bigFraction3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2403L);
      BigFraction bigFraction1 = new BigFraction((-1130.419408979), 2147483585);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.toString();
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction1.percentageValue();
      bigFraction1.getNumerator();
      bigFraction0.getDenominator();
      bigFraction1.floatValue();
      bigFraction1.multiply(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.reduce();
      bigFraction1.percentageValue();
      BigDecimal bigDecimal0 = new BigDecimal(213);
      bigFraction1.getDenominatorAsInt();
      bigFraction1.add((long) 1);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction3 = BigFraction.TWO;
      bigFraction2.reduce();
      BigFraction.getReducedFraction(2147483646, 392);
      bigFraction2.intValue();
      BigFraction bigFraction4 = new BigFraction((BigInteger) null);
      bigFraction4.getDenominator();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction(135.9, 135.9, 2116);
      BigFraction bigFraction2 = BigFraction.ONE;
      BigFraction bigFraction3 = bigFraction1.add(bigFraction2);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.divide(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.reduce();
      bigFraction2.percentageValue();
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      bigFraction1.equals(bigFraction2);
      int int0 = 2108;
      BigFraction bigFraction4 = bigFraction3.multiply(2108);
      bigFraction1.floatValue();
      BigFraction bigFraction5 = bigFraction4.subtract((long) 2108);
      bigFraction3.THREE_FIFTHS.add(209715200L);
      bigFraction1.getDenominator();
      bigFraction4.multiply(9154082963658192752L);
      BigFraction bigFraction6 = BigFraction.ONE_QUARTER;
      bigFraction5.getNumeratorAsInt();
      bigFraction1.divide((long) 2108);
      BigFraction bigFraction7 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction8 = new BigFraction(1.0, 1115);
      BigInteger bigInteger1 = BigInteger.TEN;
      double double0 = 0.0;
      BigFraction bigFraction9 = new BigFraction(double0, int0);
      // Undeclared exception!
      try { 
        bigFraction0.getNumerator();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.FOUR_FIFTHS.getDenominatorAsInt();
      bigFraction0.MINUS_ONE.percentageValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ZERO.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.multiply(100);
      BigFraction bigFraction3 = bigFraction0.negate();
      Object object0 = new Object();
      bigFraction3.TWO_QUARTERS.equals(object0);
      bigFraction3.getDenominatorAsInt();
      bigFraction1.ONE_FIFTH.longValue();
      bigFraction1.getDenominatorAsLong();
      bigFraction0.pow((-412));
      bigFraction0.subtract((long) 5);
      bigFraction2.floatValue();
      bigFraction3.multiply(bigFraction1);
      bigFraction0.doubleValue();
      bigFraction3.divide(1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.subtract(3837L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.reduce();
      bigFraction3.TWO_QUARTERS.add(2147462676);
      bigFraction2.percentageValue();
      bigFraction0.abs();
      BigFraction bigFraction4 = new BigFraction((long) 2);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction2.pow(bigInteger1);
      bigFraction2.pow(2147462676);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-334.53264), 135.9, (-1439));
      BigFraction bigFraction1 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.TWO_THIRDS.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.divide(bigFraction0);
      BigFraction bigFraction3 = new BigFraction((double) (-1439));
      bigFraction2.subtract(bigFraction3);
      bigFraction2.divide(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      long long0 = 3837L;
      BigFraction bigFraction1 = bigFraction0.subtract(3837L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.reduce();
      bigFraction3.TWO_THIRDS.pow(2147483593);
      // Undeclared exception!
      try { 
        bigFraction2.percentageValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.abs();
      BigFraction bigFraction1 = new BigFraction((long) 2);
      bigFraction1.ONE.subtract((BigFraction) null);
      double double0 = (-3788.33698728);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.subtract(3837L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger0);
      bigFraction0.reduce();
      bigFraction0.percentageValue();
      BigFraction bigFraction3 = bigFraction2.abs();
      BigFraction bigFraction4 = new BigFraction(3837L);
      BigFraction bigFraction5 = new BigFraction((double) 2);
      bigFraction3.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.subtract(bigFraction1);
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9L);
      BigFraction bigFraction1 = bigFraction0.TWO.reduce();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction2 = bigFraction1.reduce();
      BigFraction bigFraction3 = bigFraction0.TWO_THIRDS.negate();
      bigFraction1.TWO.divide(bigFraction0);
      bigFraction0.pow(0);
      BigFraction bigFraction4 = bigFraction2.subtract(2147483643);
      bigFraction4.ONE_QUARTER.getField();
      BigFraction bigFraction5 = bigFraction1.divide(4194304L);
      bigFraction1.MINUS_ONE.multiply(0);
      bigFraction4.TWO.pow((double) (-2980));
      BigFraction bigFraction6 = bigFraction3.subtract((-2980));
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction7 = bigFraction1.divide(bigFraction0);
      BigFraction bigFraction8 = bigFraction5.THREE_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction9 = bigFraction7.multiply(bigInteger0);
      BigFraction bigFraction10 = bigFraction0.reciprocal();
      bigFraction6.TWO_FIFTHS.getNumeratorAsLong();
      bigFraction0.pow(bigInteger0);
      bigFraction2.add(bigFraction6);
      bigFraction5.getField();
      BigFraction bigFraction11 = bigFraction3.add(bigFraction10);
      BigFraction bigFraction12 = bigFraction11.ONE_QUARTER.add(bigInteger0);
      bigFraction9.abs();
      bigFraction7.reduce();
      bigFraction4.getDenominator();
      bigFraction3.getField();
      bigFraction8.reduce();
      bigFraction8.doubleValue();
      bigFraction10.reciprocal();
      bigFraction1.equals(bigFraction11);
      bigFraction12.floatValue();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      bigFraction0.ZERO.divide((-487));
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-9);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.subtract(894);
      bigFraction2.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction1.add(bigFraction2);
      BigFraction bigFraction4 = BigFraction.ONE;
      bigFraction4.multiply((int) (byte) (-69));
      bigFraction2.ONE_FIFTH.equals(bigFraction4);
      bigFraction3.ONE.longValue();
      bigFraction3.getDenominatorAsLong();
      bigFraction2.pow((int) (byte) (-33));
      BigFraction bigFraction5 = bigFraction1.add(bigInteger0);
      bigFraction5.subtract((int) (byte) (-9));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.add(640);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(309566179392L, 0L);
      bigFraction0.negate();
      int int0 = 880;
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 762;
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-224), 762);
      BigFraction bigFraction1 = bigFraction0.TWO.reciprocal();
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.reduce();
      bigFraction2.ONE_HALF.equals((Object) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction3.ONE.hashCode();
      BigFraction bigFraction4 = bigFraction1.THREE_QUARTERS.multiply(bigFraction3);
      bigFraction4.ZERO.pow(762);
      bigFraction0.ONE_FIFTH.getDenominatorAsLong();
      bigFraction4.ONE_FIFTH.reciprocal();
      bigFraction4.floatValue();
      bigFraction1.TWO_QUARTERS.getNumeratorAsInt();
      bigFraction0.floatValue();
      bigFraction3.reduce();
      bigFraction3.TWO_FIFTHS.negate();
      BigFraction bigFraction5 = BigFraction.getReducedFraction(762, (-224));
      bigFraction2.multiply((-224));
      bigFraction5.ONE_FIFTH.pow((-224));
      bigFraction4.TWO_THIRDS.bigDecimalValue((-224));
      bigFraction4.THREE_FIFTHS.getField();
      // Undeclared exception!
      try { 
        bigFraction0.subtract(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0021996000000399363);
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = new BigFraction(0L);
      BigFraction bigFraction3 = new BigFraction((double) 0L);
      bigFraction1.subtract(bigFraction3);
      BigFraction bigFraction4 = bigFraction2.pow((BigInteger) null);
      bigFraction1.compareTo(bigFraction4);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = new BigFraction((-651.09015311708), 2063);
      BigDecimal bigDecimal0 = new BigDecimal(2063);
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction2.add((-1550L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction2);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction1.TWO_FIFTHS.longValue();
      bigFraction3.floatValue();
      bigFraction1.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.TWO_FIFTHS.multiply((BigFraction) null);
      BigInteger bigInteger0 = null;
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0021996000000399363);
      bigFraction0.abs();
      BigFraction bigFraction1 = new BigFraction(0L);
      BigFraction bigFraction2 = new BigFraction((double) 0L);
      bigFraction2.add(158);
      BigFraction bigFraction3 = new BigFraction((BigInteger) null, (BigInteger) null);
      Object object0 = new Object();
      bigFraction3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0021996000000399363);
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction0.getDenominatorAsInt();
      bigFraction1.add(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction3 = bigFraction2.abs();
      bigFraction3.ONE_QUARTER.getDenominatorAsLong();
      bigFraction3.multiply((-1888L));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      bigFraction0.compareTo(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.reduce();
      bigFraction2.bigDecimalValue(0);
      bigFraction1.abs();
      bigFraction2.subtract(2097152L);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.FOUR_FIFTHS.abs();
      bigFraction0.ONE_QUARTER.toString();
      bigFraction0.add((BigFraction) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.multiply((-1075));
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction2 = bigFraction0.subtract(100L);
      int int0 = 1555;
      bigFraction2.FOUR_FIFTHS.add(1555);
      bigFraction2.TWO.add(100L);
      bigFraction1.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.abs();
      BigFraction bigFraction4 = bigFraction3.pow(bigInteger0);
      bigFraction4.ONE.bigDecimalValue(1075);
      bigFraction2.TWO.getNumeratorAsInt();
      bigFraction1.divide(bigFraction3);
      int int1 = 4;
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow(942);
      bigFraction1.getDenominatorAsLong();
      bigFraction1.multiply(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0021996000000399363);
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = new BigFraction(0L);
      bigFraction0.equals(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1734), 0);
      bigFraction0.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 0L);
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction0.reduce();
      bigFraction0.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 0L);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.floatValue();
      int int0 = (-45);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-45));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(3, 3);
      bigFraction0.ONE_FIFTH.bigDecimalValue(3);
      BigFraction bigFraction1 = bigFraction0.TWO.multiply(942);
      bigFraction1.ONE_QUARTER.abs();
      bigFraction0.bigDecimalValue(3);
      bigFraction0.pow(942);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      BigFraction bigFraction0 = new BigFraction((-716.436859429145), Integer.MAX_VALUE);
      bigFraction0.getDenominator();
      int int1 = 2688;
      BigFraction bigFraction1 = new BigFraction((double) Integer.MAX_VALUE, 2688);
      // Undeclared exception!
      try { 
        bigFraction0.getNumerator();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.toString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.ZERO.add(1280);
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.divide(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.floatValue();
      bigFraction0.add((-1));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ONE_FIFTH.bigDecimalValue();
      bigFraction0.longValue();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-125);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.pow(bigInteger0);
  }
}
