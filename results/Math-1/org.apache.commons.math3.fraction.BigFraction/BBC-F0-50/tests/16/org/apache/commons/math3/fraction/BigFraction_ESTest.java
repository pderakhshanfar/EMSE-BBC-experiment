/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 05:31:16 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2146938764, (-2147483646));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-2);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.add(bigFraction0);
      bigFraction2.ZERO.hashCode();
      BigFraction bigFraction3 = bigFraction1.MINUS_ONE.divide(bigFraction0);
      BigFraction bigFraction4 = bigFraction0.reciprocal();
      bigFraction4.intValue();
      bigFraction4.ONE_THIRD.getDenominatorAsLong();
      BigFraction bigFraction5 = bigFraction4.TWO_QUARTERS.subtract(bigInteger0);
      bigFraction0.getDenominator();
      bigFraction5.bigDecimalValue();
      bigFraction3.add(bigInteger0);
      BigFraction bigFraction6 = bigFraction0.multiply((int) (byte) (-38));
      bigFraction6.add(bigFraction5);
      bigFraction6.subtract(1399L);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      byte[] byteArray0 = new byte[3];
      bigFraction0.FOUR_FIFTHS.getDenominatorAsInt();
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-5);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.reciprocal();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.THREE_FIFTHS.add(2364);
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.subtract(bigInteger0);
      bigFraction1.THREE_FIFTHS.multiply(bigFraction3);
      BigFraction bigFraction4 = bigFraction2.reduce();
      BigFraction bigFraction5 = bigFraction4.add((long) (byte) (-5));
      bigFraction1.reciprocal();
      bigFraction1.getField();
      bigFraction3.toString();
      BigFraction bigFraction6 = bigFraction4.pow((int) (byte) (-12));
      bigFraction6.ONE_FIFTH.pow((double) 5);
      bigFraction2.multiply(bigFraction5);
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) Integer.MAX_VALUE, 47396908);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(697, 4);
      bigFraction0.bigDecimalValue(4, 4);
      BigFraction bigFraction1 = new BigFraction((double) 697);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1858, 1858);
      BigFraction bigFraction1 = bigFraction0.multiply((-526L));
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.multiply(bigFraction0);
      BigFraction bigFraction3 = bigFraction1.ONE_HALF.multiply(bigFraction2);
      BigFraction bigFraction4 = bigFraction3.ONE_QUARTER.multiply((-526L));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.ZERO.add(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction5 = bigFraction0.ONE_HALF.add(bigInteger1);
      bigFraction1.FOUR_FIFTHS.getNumeratorAsLong();
      BigFraction bigFraction6 = bigFraction1.abs();
      bigFraction6.TWO_QUARTERS.reciprocal();
      bigFraction6.ONE.bigDecimalValue();
      bigFraction1.toString();
      bigFraction5.ZERO.getDenominatorAsLong();
      bigFraction5.THREE_FIFTHS.percentageValue();
      bigFraction5.ONE_QUARTER.divide((-886));
      BigFraction bigFraction7 = bigFraction0.reciprocal();
      BigFraction bigFraction8 = bigFraction7.FOUR_FIFTHS.subtract(1858);
      BigFraction bigFraction9 = bigFraction1.multiply((-526L));
      bigFraction7.getDenominator();
      bigFraction5.TWO_THIRDS.add(bigFraction0);
      BigInteger bigInteger2 = bigFraction5.getNumerator();
      bigFraction9.divide(6);
      bigFraction5.TWO_FIFTHS.abs();
      BigFraction bigFraction10 = bigFraction2.divide(bigFraction7);
      bigFraction7.ONE_QUARTER.add(bigInteger2);
      bigFraction10.THREE_QUARTERS.negate();
      BigFraction bigFraction11 = bigFraction8.add(bigFraction5);
      bigFraction11.getField();
      bigFraction9.subtract((-1738L));
      Random.setNextRandom(1858);
      bigFraction4.bigDecimalValue(6, 6);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(520.0659);
      BigFraction bigFraction1 = bigFraction0.pow((-3038L));
      bigFraction1.getDenominatorAsLong();
      bigFraction1.MINUS_ONE.intValue();
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      bigFraction1.TWO.longValue();
      bigFraction0.ONE_FIFTH.floatValue();
      BigFraction bigFraction3 = bigFraction1.reduce();
      bigFraction3.ONE_FIFTH.divide((-1));
      bigFraction2.pow(8);
      bigFraction2.subtract(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction1.TWO_THIRDS.bigDecimalValue((-1), 933255644);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction0.equals(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-0.9457264756285682));
      BigFraction bigFraction1 = bigFraction0.pow(753);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction1.TWO_THIRDS.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction0.subtract(1880);
      BigFraction bigFraction4 = bigFraction3.ONE_THIRD.reciprocal();
      bigFraction4.THREE_QUARTERS.divide((long) 2);
      BigFraction bigFraction5 = new BigFraction(753, 1880);
      bigFraction2.doubleValue();
      bigFraction1.floatValue();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.233777417539386E-8);
      BigFraction bigFraction1 = bigFraction0.pow(753);
      bigFraction0.divide(bigFraction1);
      bigFraction1.TWO_THIRDS.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction0.subtract(1879);
      BigFraction bigFraction3 = bigFraction1.subtract((-306));
      BigFraction bigFraction4 = bigFraction3.reciprocal();
      bigFraction2.divide((-299L));
      bigFraction0.subtract(bigFraction4);
      bigFraction4.doubleValue();
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.233777417539386E-8);
      BigFraction bigFraction1 = bigFraction0.pow(753);
      BigFraction bigFraction2 = BigFraction.THREE_QUARTERS;
      bigFraction0.getField();
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      bigFraction2.equals(bigFraction3);
      bigFraction1.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.subtract(bigInteger0);
      bigFraction1.ONE_QUARTER.hashCode();
      bigFraction0.abs();
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow((-141L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-983.2390083505943));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.THREE_FIFTHS.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2130836487, 4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.233777417539386E-8);
      bigFraction0.floatValue();
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.reduce();
      BigFraction bigFraction2 = bigFraction0.pow(753);
      bigFraction0.FOUR_FIFTHS.reciprocal();
      BigFraction bigFraction3 = bigFraction1.divide(bigFraction2);
      bigFraction2.TWO_THIRDS.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction0.subtract(1879);
      BigFraction bigFraction5 = bigFraction4.ONE_THIRD.reciprocal();
      bigFraction5.THREE_QUARTERS.divide((long) 2);
      bigFraction3.ONE.bigDecimalValue();
      BigFraction bigFraction6 = bigFraction3.subtract(bigFraction1);
      bigFraction3.doubleValue();
      bigFraction6.floatValue();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.233777417539386E-8);
      bigFraction0.floatValue();
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.reduce();
      BigFraction bigFraction2 = bigFraction0.pow(753);
      bigFraction0.FOUR_FIFTHS.reciprocal();
      BigFraction bigFraction3 = bigFraction1.divide(bigFraction2);
      bigFraction2.TWO_THIRDS.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction0.subtract(1879);
      bigFraction4.ONE_THIRD.reciprocal();
      bigFraction3.ONE.bigDecimalValue();
      bigFraction3.subtract(bigFraction1);
      bigFraction3.doubleValue();
      bigFraction0.add(2);
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction(Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert infinite value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.233777417539386E-8);
      bigFraction0.floatValue();
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.reduce();
      BigFraction bigFraction2 = bigFraction0.pow(753);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.divide(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.FOUR_FIFTHS.reciprocal();
      bigFraction3.ONE_HALF.add(753);
      BigFraction bigFraction5 = bigFraction1.divide(bigFraction2);
      bigFraction0.TWO_FIFTHS.subtract((long) 753);
      bigFraction2.TWO_THIRDS.getNumeratorAsInt();
      BigFraction bigFraction6 = bigFraction0.subtract(1879);
      bigFraction6.ONE_THIRD.reciprocal();
      bigFraction5.ONE.bigDecimalValue();
      bigFraction5.subtract(bigFraction1);
      bigFraction5.doubleValue();
      bigFraction0.add(2);
      bigFraction4.getField();
      bigFraction0.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction0.ONE_QUARTER.subtract(bigFraction1);
      bigFraction0.floatValue();
      bigFraction1.pow(1660.0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.floatValue();
      // Undeclared exception!
      try { 
        bigFraction0.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.negate();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      BigFraction bigFraction1 = bigFraction0.subtract(4398046511103L);
      bigFraction1.divide(4398046511103L);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((-38), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(7.216954145405907E-8);
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 0);
      bigFraction0.add(2130836487);
      bigFraction0.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 0);
      // Undeclared exception!
      try { 
        bigFraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.divide((long) (-578));
      bigFraction0.subtract((-578));
      bigFraction0.divide(bigFraction0);
      bigFraction1.getDenominator();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1258.0167657899226), 2270);
      BigInteger bigInteger0 = null;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.equals(bigFraction0);
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = new BigFraction(0.36879050731658936);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.TWO.floatValue();
      bigFraction0.longValue();
      bigFraction0.divide(2959);
      BigFraction bigFraction1 = new BigFraction(0L, 2959, 2959);
      bigFraction1.floatValue();
      bigFraction1.reduce();
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.TWO_THIRDS.subtract(3);
      bigFraction0.TWO.floatValue();
      bigFraction0.ZERO.percentageValue();
      bigFraction0.longValue();
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = BigInteger.TEN;
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      Object object0 = new Object();
      bigFraction0.equals(object0);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction1.multiply(bigFraction0);
      bigFraction0.subtract(bigFraction1);
      bigFraction0.add(5);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        bigFraction0.MINUS_ONE.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2644281811660520851L), (-2644281811660520851L));
      bigFraction0.ONE_HALF.add((-2644281811660520851L));
      try { 
        bigFraction0.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4801));
      bigFraction0.ZERO.longValue();
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.equals("K$BGqnR");
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction1.TWO.getNumeratorAsLong();
      bigFraction1.equals(bigFraction0);
      BigFraction bigFraction2 = new BigFraction((double) 0L);
      BigDecimal bigDecimal0 = new BigDecimal((-4801));
      bigFraction2.toString();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction0.ONE_THIRD.add(bigFraction1);
      bigFraction0.multiply(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction1.TWO_FIFTHS.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 5163;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) 1149, 5163);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1,149 to fraction (9,223,372,036,854,774,660/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO.add((-2418L));
      bigFraction1.TWO_THIRDS.multiply(bigFraction0);
      bigFraction0.ONE_FIFTH.reduce();
      int int0 = Integer.MAX_VALUE;
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.add(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        bigFraction2.ZERO.pow((-783));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4801));
      bigFraction0.ZERO.longValue();
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction((-4801.0), 135.19, 2132253267);
      bigFraction1.ONE_QUARTER.add((-4801));
      bigFraction1.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4801));
      bigFraction0.ZERO.longValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.equals("K$BGqnR");
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction1.equals(bigFraction0);
      BigFraction bigFraction2 = new BigFraction((double) 0L);
      BigDecimal bigDecimal0 = new BigDecimal((-4801));
      bigFraction0.multiply(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      bigFraction0.percentageValue();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)28;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      long long0 = (-187L);
      BigFraction bigFraction1 = bigFraction0.subtract((-187L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.MINUS_ONE.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction1.ONE_FIFTH.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction2 = BigFraction.ONE_THIRD;
      bigFraction2.TWO.hashCode();
      bigFraction2.THREE_QUARTERS.bigDecimalValue();
      bigFraction0.getNumeratorAsInt();
      bigFraction1.subtract((-1620));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4801));
      bigFraction0.ZERO.longValue();
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.equals("K$BGqnR");
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction1.equals(bigFraction0);
      BigFraction bigFraction2 = new BigFraction((double) 0L);
      BigDecimal bigDecimal0 = new BigDecimal((-4801));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      bigFraction0.FOUR_FIFTHS.bigDecimalValue(0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction2 = BigFraction.ONE_THIRD;
      bigFraction2.MINUS_ONE.longValue();
      BigFraction bigFraction3 = new BigFraction((-137), 3);
      bigFraction3.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction3.ONE.subtract(bigFraction1);
      bigFraction4.ONE.reduce();
      BigFraction bigFraction5 = BigFraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4801));
      BigFraction bigFraction1 = bigFraction0.multiply(100);
      Object object0 = new Object();
      bigFraction0.pow((long) 100);
      bigFraction0.equals(bigFraction1);
      BigFraction bigFraction2 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction2.MINUS_ONE.multiply(bigInteger0);
      bigFraction2.equals(object0);
      BigFraction bigFraction3 = new BigFraction((double) (-4801));
      BigFraction bigFraction4 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue(100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3354.9), 280);
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction2.toString();
      Object object0 = new Object();
      bigFraction1.equals(object0);
      bigFraction0.subtract(bigFraction1);
      bigFraction0.divide((-633L));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      bigFraction2.getDenominatorAsInt();
      bigFraction2.add(2059);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.ONE.pow(0.0);
      bigFraction0.ZERO.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4801));
      bigFraction0.ZERO.longValue();
      bigFraction0.doubleValue();
      bigFraction0.getDenominator();
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction1.TWO_FIFTHS.toString();
      bigFraction0.equals(bigFraction1);
      bigFraction0.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.pow(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.intValueExact();
      BigFraction bigFraction2 = bigFraction0.ZERO.pow(bigInteger1);
      bigFraction1.TWO_FIFTHS.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction0.subtract(1);
      BigFraction bigFraction4 = bigFraction2.abs();
      BigFraction bigFraction5 = bigFraction4.subtract(bigFraction0);
      BigFraction bigFraction6 = bigFraction5.ONE.add(bigInteger0);
      bigFraction6.ONE_FIFTH.subtract(bigInteger0);
      BigFraction bigFraction7 = bigFraction0.divide(bigFraction3);
      bigFraction4.THREE_FIFTHS.getDenominatorAsInt();
      BigFraction bigFraction8 = bigFraction1.add(bigInteger0);
      bigFraction8.TWO_QUARTERS.toString();
      BigFraction bigFraction9 = bigFraction7.abs();
      BigFraction bigFraction10 = bigFraction4.divide(1020L);
      bigFraction10.TWO_FIFTHS.negate();
      BigFraction bigFraction11 = bigFraction3.subtract(0);
      bigFraction11.THREE_QUARTERS.getNumeratorAsInt();
      BigFraction bigFraction12 = bigFraction5.reduce();
      bigFraction2.getField();
      bigFraction3.bigDecimalValue(0);
      bigFraction9.getNumeratorAsInt();
      BigFraction bigFraction13 = bigFraction10.add(22608707846144L);
      BigFraction.getReducedFraction(5, 2147482178);
      bigFraction13.FOUR_FIFTHS.subtract(bigFraction9);
      // Undeclared exception!
      try { 
        bigFraction12.bigDecimalValue(1, (-2147483647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.TWO.floatValue();
      bigFraction0.ONE_QUARTER.multiply(658);
      Object object0 = new Object();
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.pow(1L);
      bigFraction0.equals(object0);
      BigFraction bigFraction2 = BigFraction.ONE_THIRD;
      bigFraction1.equals(object0);
      BigFraction bigFraction3 = new BigFraction((double) 658);
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue((-4296));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4801));
      bigFraction0.ZERO.longValue();
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      bigInteger0.longValueExact();
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.multiply((-1633));
      bigFraction2.ONE_THIRD.subtract(bigFraction0);
      bigFraction0.ONE.negate();
      BigFraction.getReducedFraction((-1663), (-3030));
      BigFraction bigFraction3 = bigFraction2.divide(bigFraction1);
      bigFraction3.THREE_QUARTERS.toString();
      BigFraction bigFraction4 = bigFraction2.reduce();
      bigFraction4.toString();
      bigFraction1.pow((long) 3370);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.reduce();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.ONE.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.divide(bigFraction1);
      bigFraction3.TWO_THIRDS.doubleValue();
      bigFraction3.TWO_QUARTERS.divide(2306L);
      BigFraction bigFraction4 = bigFraction0.subtract(1426);
      bigFraction4.ONE_THIRD.percentageValue();
      bigFraction4.add((long) 1426);
      bigFraction0.intValue();
      MockRandom mockRandom0 = new MockRandom(1095L);
      BigInteger bigInteger1 = BigInteger.probablePrime(2005, mockRandom0);
      BigInteger bigInteger2 = bigInteger1.pow(332);
      bigFraction1.add(bigInteger0);
      bigFraction0.pow((long) 2005);
      bigFraction1.divide(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.getDenominator();
      int int0 = 1149;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(1.7976931348623157E308, 1.1501053030837989E178, 1169);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(827.5915854);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.negate();
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.divide(2855);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.TWO_QUARTERS.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.ONE_QUARTER.multiply(bigFraction2);
      bigFraction0.bigDecimalValue();
      bigFraction0.negate();
      BigFraction bigFraction5 = bigFraction0.divide(9007199254740990L);
      bigFraction5.ONE.getField();
      bigFraction5.divide((-3056));
      bigFraction5.abs();
      bigFraction1.getNumeratorAsLong();
      bigFraction2.divide((-1338L));
      BigFraction bigFraction6 = new BigFraction((double) 2855);
      bigFraction6.bigDecimalValue();
      BigFraction bigFraction7 = bigFraction4.add((-1338L));
      BigFraction bigFraction8 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction9 = bigFraction8.multiply((-1164L));
      bigFraction8.percentageValue();
      bigFraction7.add((-3068L));
      bigFraction9.subtract(2855);
      bigFraction1.compareTo(bigFraction7);
      bigFraction0.reciprocal();
      bigFraction6.doubleValue();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2841L));
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = new BigFraction(0.035457173983255985, 1947.005521709653, (-283));
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1, 1571);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction4 = bigFraction1.multiply(bigInteger0);
      bigFraction3.subtract(bigInteger0);
      bigFraction3.equals(bigFraction1);
      bigFraction2.getDenominatorAsInt();
      bigFraction4.getNumerator();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction5 = new BigFraction(bigInteger1, bigInteger1);
      bigFraction5.pow(bigInteger0);
      bigFraction2.reciprocal();
      bigFraction5.multiply(1);
      bigFraction0.pow((-2348L));
      BigFraction bigFraction6 = BigFraction.TWO_FIFTHS;
      bigFraction6.divide(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1193.9227896));
      bigFraction0.subtract((-2146541354));
      // Undeclared exception!
      try { 
        bigFraction0.pow((-2146541354));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1257.8), 2279);
      bigFraction0.divide(2279);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4801));
      bigFraction0.ZERO.longValue();
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      bigInteger0.longValueExact();
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.multiply((-1633));
      bigFraction2.ONE_THIRD.subtract(bigFraction0);
      bigFraction0.ONE.negate();
      BigFraction bigFraction3 = bigFraction2.divide(bigFraction1);
      bigFraction3.THREE_QUARTERS.toString();
      BigFraction bigFraction4 = bigFraction2.reduce();
      bigFraction4.toString();
      bigFraction0.divide(3370);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      BigFraction bigFraction1 = bigFraction0.ZERO.subtract(1571);
      BigFraction bigFraction2 = bigFraction0.pow((-3094L));
      BigFraction bigFraction3 = bigFraction1.abs();
      bigFraction2.getDenominatorAsInt();
      BigFraction bigFraction4 = new BigFraction(1, 1, 4);
      bigFraction3.add(bigFraction0);
      BigFraction bigFraction5 = BigFraction.getReducedFraction(1, 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction6 = bigFraction5.multiply(bigInteger0);
      BigFraction bigFraction7 = bigFraction6.subtract(bigInteger0);
      BigFraction bigFraction8 = new BigFraction(9007198180999168L, 2268L);
      bigFraction6.equals(bigFraction8);
      bigFraction7.getDenominatorAsInt();
      bigFraction5.getNumerator();
      bigFraction7.pow(bigInteger0);
      bigFraction2.reciprocal();
      bigFraction2.multiply(1);
      bigFraction6.pow(2147483647L);
      bigFraction7.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.reduce();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.divide(13252493);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.multiply(bigFraction1);
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction5 = bigFraction2.negate();
      BigFraction bigFraction6 = BigFraction.ONE_THIRD;
      BigFraction bigFraction7 = bigFraction6.divide((-723L));
      bigFraction1.getField();
      BigFraction bigFraction8 = bigFraction5.divide(13252493);
      bigFraction6.compareTo(bigFraction8);
      bigFraction4.intValue();
      bigFraction0.hashCode();
      bigFraction3.compareTo(bigFraction7);
      BigFraction bigFraction9 = bigFraction7.subtract(bigFraction5);
      BigFraction bigFraction10 = bigFraction8.pow((long) (-3056));
      bigFraction8.getDenominatorAsInt();
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction1.multiply(bigInteger2);
      BigFraction bigFraction11 = bigFraction10.abs();
      bigFraction1.multiply(9223372036854775807L);
      bigFraction10.add(bigFraction2);
      bigFraction10.pow(2197.99960893982);
      bigFraction9.getDenominatorAsLong();
      bigFraction4.divide(bigFraction11);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      BigFraction bigFraction1 = new BigFraction(0.6312094926834106, 2279);
      bigFraction1.divide(2279);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.compareTo(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.abs();
      BigFraction bigFraction3 = BigFraction.TWO_FIFTHS;
      bigFraction3.intValue();
      bigFraction3.add((-42));
      Object object0 = new Object();
      bigFraction1.equals(object0);
      bigFraction2.multiply(bigFraction3);
      bigFraction3.getNumeratorAsLong();
      bigFraction3.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(827.5915854);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.negate();
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.divide(2855);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.TWO_QUARTERS.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.ONE_QUARTER.multiply(bigFraction2);
      bigFraction0.bigDecimalValue();
      bigFraction0.negate();
      bigFraction0.divide(9007199254740990L);
      BigFraction bigFraction5 = new BigFraction(bigInteger0);
      bigFraction4.add(bigFraction5);
      int int0 = 1742;
      BigFraction.getReducedFraction(1742, (-4158));
      BigInteger bigInteger1 = BigInteger.ONE;
      int int1 = 4399;
      BigFraction bigFraction6 = BigFraction.getReducedFraction(4399, 978);
      bigFraction6.multiply(bigInteger0);
      bigFraction0.subtract(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction4.ONE.bigDecimalValue(4399);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.TWO.floatValue();
      bigFraction0.ONE_QUARTER.multiply(658);
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.divide(658);
      bigFraction2.getNumeratorAsLong();
      bigFraction0.multiply(377);
      bigFraction0.abs();
      BigFraction bigFraction3 = new BigFraction((-2384L), (long) 658);
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue(378);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.reduce();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.ONE.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.divide(bigFraction1);
      bigFraction3.TWO_THIRDS.doubleValue();
      bigFraction3.TWO_QUARTERS.divide(2306L);
      int int0 = 1426;
      BigFraction bigFraction4 = bigFraction0.subtract(1426);
      bigFraction4.ONE_THIRD.percentageValue();
      BigFraction bigFraction5 = bigFraction4.add((long) 1426);
      bigFraction0.intValue();
      bigFraction5.getDenominatorAsInt();
      bigFraction1.ONE_QUARTER.getDenominatorAsInt();
      bigFraction4.intValue();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-5577));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3353));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction1.FOUR_FIFTHS.toString();
      BigFraction bigFraction2 = bigFraction1.ONE.divide((long) (-3353));
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.abs();
      BigFraction bigFraction4 = bigFraction3.TWO_THIRDS.add(bigFraction1);
      bigFraction0.THREE_FIFTHS.getField();
      BigFraction bigFraction5 = bigFraction2.FOUR_FIFTHS.reduce();
      bigFraction1.percentageValue();
      BigFraction bigFraction6 = bigFraction0.pow(bigInteger0);
      bigFraction6.ONE_THIRD.getNumeratorAsLong();
      bigFraction2.hashCode();
      bigFraction1.ONE_HALF.add(0L);
      bigFraction3.ONE_THIRD.subtract(0L);
      bigFraction4.getNumeratorAsLong();
      bigFraction3.percentageValue();
      bigFraction5.THREE_QUARTERS.doubleValue();
      bigFraction6.longValue();
      BigFraction bigFraction7 = bigFraction3.multiply(bigFraction2);
      bigFraction5.getDenominatorAsInt();
      bigFraction7.longValue();
      bigFraction4.multiply(bigFraction6);
      bigFraction7.reciprocal();
      bigFraction7.intValue();
      BigFraction bigFraction8 = BigFraction.getReducedFraction((-3353), 2796);
      bigFraction8.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(4399, 1575);
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.add((-3933));
      bigFraction1.ZERO.add(bigFraction0);
      bigFraction1.ONE_HALF.add(bigFraction2);
      bigFraction1.bigDecimalValue(4399, 1);
      bigFraction0.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.divide((-315L));
      bigFraction0.FOUR_FIFTHS.toString();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.reciprocal();
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction1);
      bigFraction3.ONE_FIFTH.getNumeratorAsInt();
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      BigFraction bigFraction5 = bigFraction4.ZERO.reduce();
      BigFraction bigFraction6 = bigFraction4.ONE_QUARTER.reduce();
      bigFraction6.MINUS_ONE.multiply(bigFraction2);
      bigFraction5.ONE_QUARTER.equals(bigFraction4);
      BigFraction bigFraction7 = bigFraction0.multiply(bigFraction4);
      bigFraction4.THREE_QUARTERS.intValue();
      bigFraction4.getDenominatorAsLong();
      bigFraction0.negate();
      bigFraction0.pow((double) 1L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction8 = bigFraction3.subtract(bigInteger0);
      bigFraction4.divide(193);
      BigFraction bigFraction9 = bigFraction4.divide(bigInteger0);
      bigFraction9.multiply(1L);
      bigFraction5.MINUS_ONE.getDenominatorAsInt();
      BigFraction bigFraction10 = bigFraction0.subtract(0L);
      bigFraction9.longValue();
      bigFraction1.getNumeratorAsInt();
      BigFraction bigFraction11 = bigFraction7.subtract(bigInteger0);
      bigFraction8.getNumerator();
      bigFraction5.compareTo(bigFraction11);
      bigFraction10.divide(3702L);
      bigFraction5.bigDecimalValue();
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3915);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ONE_FIFTH.bigDecimalValue();
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.add(3915);
      bigFraction2.pow((double) 3915);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-12L));
      bigFraction0.TWO_FIFTHS.longValue();
      bigFraction0.ONE_HALF.equals("");
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(52);
      bigFraction1.ONE_QUARTER.getNumeratorAsInt();
      bigFraction0.ONE_THIRD.intValue();
      bigFraction0.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.add(2271L);
      bigFraction0.THREE_FIFTHS.toString();
      bigFraction0.MINUS_ONE.equals(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.pow(0L);
      bigFraction2.THREE_FIFTHS.floatValue();
      bigFraction2.THREE_QUARTERS.compareTo(bigFraction1);
      bigFraction0.bigDecimalValue(1);
      BigFraction bigFraction3 = bigFraction0.divide(1);
      bigFraction3.getField();
      bigFraction0.floatValue();
      BigFraction bigFraction4 = BigFraction.getReducedFraction(1910, 1013);
      BigFraction bigFraction5 = bigFraction4.divide(bigInteger0);
      BigFraction bigFraction6 = BigFraction.ONE_FIFTH;
      bigFraction2.compareTo(bigFraction6);
      BigFraction bigFraction7 = BigFraction.TWO_QUARTERS;
      bigFraction5.ONE_THIRD.multiply(bigFraction7);
      bigFraction3.getDenominator();
      bigFraction5.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit(0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.pow(bigInteger0);
      bigFraction0.ZERO.bigDecimalValue(0);
      bigFraction0.ONE_HALF.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.pow((long) 1);
      BigInteger bigInteger2 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction2.THREE_FIFTHS.pow(bigInteger2);
      bigFraction0.ONE_HALF.pow(3523L);
      bigFraction0.ONE_HALF.multiply((long) 0);
      bigFraction3.ONE_HALF.pow(0);
      bigFraction3.ONE_FIFTH.pow(1.0);
      bigFraction1.ONE.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction0.subtract(2047L);
      bigFraction2.bigDecimalValue();
      bigInteger0.not();
      BigFraction bigFraction5 = bigFraction4.multiply(bigInteger1);
      bigFraction4.ONE.doubleValue();
      bigFraction2.subtract(0);
      BigFraction bigFraction6 = BigFraction.getReducedFraction(1, (-1373));
      BigFraction.getReducedFraction((-1887), 2);
      bigFraction1.hashCode();
      bigFraction6.divide(2);
      bigFraction4.ONE_FIFTH.floatValue();
      bigFraction4.getDenominatorAsInt();
      bigFraction5.floatValue();
      bigFraction2.toString();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE.subtract((-9223372036854775808L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction1.TWO_QUARTERS.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.TWO.floatValue();
      bigFraction0.ONE_QUARTER.multiply(658);
      Object object0 = new Object();
      bigFraction0.ONE_QUARTER.pow(1L);
      bigFraction0.equals(object0);
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction0.compareTo(bigFraction1);
      int int0 = Integer.MAX_VALUE;
      MockRandom mockRandom0 = new MockRandom((-3918L));
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(Integer.MAX_VALUE, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Prime search implementation restriction on bitLength
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4801));
      bigFraction0.ZERO.longValue();
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      bigInteger0.longValueExact();
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.multiply((-1633));
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.subtract(bigFraction0);
      bigFraction0.ONE.negate();
      BigFraction bigFraction4 = bigFraction2.divide(bigFraction1);
      bigFraction4.THREE_QUARTERS.toString();
      BigFraction bigFraction5 = bigFraction2.reduce();
      bigFraction5.toString();
      BigFraction bigFraction6 = bigFraction2.multiply(bigFraction1);
      bigFraction6.compareTo(bigFraction0);
      bigFraction3.getField();
      BigFraction bigFraction7 = bigFraction4.pow(bigInteger0);
      bigFraction7.TWO.subtract(331);
      bigFraction4.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(827.5915854);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.negate();
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.divide(2855);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.TWO_QUARTERS.multiply(bigInteger0);
      bigFraction3.ONE_QUARTER.multiply(bigFraction2);
      bigFraction0.bigDecimalValue();
      bigFraction0.negate();
      BigFraction bigFraction4 = bigFraction0.divide(9007199254740990L);
      bigFraction4.ONE.getField();
      BigFraction bigFraction5 = bigFraction4.divide((-3056));
      bigFraction5.compareTo(bigFraction4);
      bigFraction4.intValue();
      bigFraction2.hashCode();
      bigFraction4.TWO_FIFTHS.compareTo(bigFraction5);
      bigFraction4.TWO_QUARTERS.subtract(bigFraction5);
      BigFraction bigFraction6 = bigFraction4.pow((long) 0);
      bigFraction4.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction1.multiply(bigInteger1);
      bigFraction5.abs();
      bigFraction2.multiply(9223372036854775807L);
      bigFraction6.add(bigFraction4);
      bigFraction5.pow(0.0);
      bigFraction1.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1), (-824));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.divide(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.TWO_FIFTHS.multiply(bigInteger0);
      bigFraction3.ONE_HALF.pow(1742);
      bigFraction2.THREE_QUARTERS.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction1.TWO_THIRDS.reciprocal();
      bigFraction4.TWO_FIFTHS.multiply(0L);
      bigFraction1.ONE_FIFTH.floatValue();
      BigFraction bigFraction5 = bigFraction1.reduce();
      bigFraction1.TWO_QUARTERS.getNumeratorAsInt();
      bigFraction1.TWO_FIFTHS.bigDecimalValue();
      bigFraction5.getField();
      BigFraction bigFraction6 = bigFraction1.MINUS_ONE.subtract(bigFraction4);
      bigFraction1.FOUR_FIFTHS.divide((-562));
      BigFraction bigFraction7 = bigFraction5.add(1);
      bigFraction7.ONE.percentageValue();
      bigFraction7.equals(bigFraction1);
      bigFraction5.doubleValue();
      BigFraction bigFraction8 = bigFraction6.reciprocal();
      bigFraction4.intValue();
      bigFraction8.ONE_QUARTER.intValue();
      bigFraction4.TWO_FIFTHS.pow(558L);
      BigFraction bigFraction9 = new BigFraction(6591.0, 1, 1075);
      bigFraction9.ONE_QUARTER.reduce();
      bigFraction8.equals(bigFraction9);
      bigFraction4.getNumerator();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1457, 1457);
      BigFraction bigFraction1 = bigFraction0.reduce();
      int int0 = 2;
      BigFraction bigFraction2 = BigFraction.getReducedFraction(2, 1457);
      bigFraction2.ONE_HALF.equals(bigFraction1);
      int int1 = 629;
      bigFraction0.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(629, 629);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.divide(1);
      BigFraction bigFraction2 = bigFraction1.TWO.subtract((-948));
      BigFraction bigFraction3 = BigFraction.TWO;
      bigFraction3.TWO.pow(0.0);
      bigFraction3.subtract(285);
      BigFraction bigFraction4 = bigFraction0.multiply(bigFraction3);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction5 = new BigFraction(bigInteger0);
      bigFraction4.equals(bigFraction5);
      BigFraction bigFraction6 = bigFraction2.reciprocal();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction6.ONE_FIFTH.add(bigInteger1);
      bigFraction6.getField();
      bigFraction5.negate();
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.divide((-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)1;
      bigFraction1.pow(9.517570994930463E-138);
      bigFraction1.TWO_QUARTERS.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      bigFraction0.TWO_THIRDS.subtract(bigInteger0);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-15);
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.subtract((-811));
      byteArray0[4] = (byte)31;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction1.multiply(bigInteger1);
      BigFraction bigFraction4 = bigFraction1.multiply(0L);
      BigFraction bigFraction5 = bigFraction2.reciprocal();
      bigFraction4.ONE_HALF.hashCode();
      BigFraction bigFraction6 = bigFraction5.TWO_QUARTERS.subtract(68L);
      bigFraction4.getDenominator();
      bigFraction3.reduce();
      bigFraction6.pow((-2384L));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction.getReducedFraction((-2257), 76);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      bigFraction0.add(bigFraction1);
      bigFraction1.compareTo(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1142.071093358434, 1142.071093358434, 1);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.reduce();
      BigFraction bigFraction2 = bigFraction0.divide(1);
      bigFraction1.THREE_QUARTERS.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction0.TWO_FIFTHS.multiply(154);
      bigFraction3.ONE_FIFTH.abs();
      bigFraction0.THREE_QUARTERS.bigDecimalValue(1);
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction1.FOUR_FIFTHS.hashCode();
      bigFraction2.THREE_FIFTHS.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction0.FOUR_FIFTHS.multiply(1);
      bigFraction4.ONE_FIFTH.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction4.ZERO.multiply(bigInteger0);
      bigFraction1.bigDecimalValue((-3126), 1);
      bigFraction2.multiply(bigFraction0);
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-48);
      byteArray0[8] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.divide((long) (byte) (-110));
      BigFraction bigFraction1 = bigFraction0.add((int) (byte) (-1));
      BigFraction bigFraction2 = bigFraction0.subtract((int) (byte)1);
      bigFraction1.reduce();
      bigFraction2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.TWO_FIFTHS.toString();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      BigFraction bigFraction2 = bigFraction1.TWO.divide(Integer.MAX_VALUE);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction2.TWO_THIRDS.subtract(bigInteger1);
      BigFraction bigFraction4 = bigFraction2.TWO.subtract(Integer.MAX_VALUE);
      bigFraction4.ONE_FIFTH.add(bigFraction0);
      BigFraction bigFraction5 = bigFraction1.ONE_HALF.add(880);
      BigFraction bigFraction6 = bigFraction0.THREE_QUARTERS.add(bigInteger0);
      bigFraction6.ONE_QUARTER.equals(bigInteger0);
      BigFraction bigFraction7 = bigFraction0.pow(1049);
      bigFraction2.percentageValue();
      bigFraction7.add((long) 1049);
      BigFraction bigFraction8 = bigFraction0.abs();
      BigFraction bigFraction9 = new BigFraction(9.313225750491594E-8);
      bigFraction0.THREE_QUARTERS.pow(bigInteger1);
      bigFraction9.TWO_THIRDS.divide(bigFraction3);
      BigFraction bigFraction10 = bigFraction9.TWO_THIRDS.divide(2778L);
      Object object0 = new Object();
      bigFraction10.ONE_FIFTH.equals(object0);
      bigFraction8.ONE_HALF.equals(bigFraction9);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigFraction5.multiply(bigInteger2);
      BigFraction bigFraction11 = bigFraction5.add(bigInteger0);
      bigFraction11.MINUS_ONE.multiply(5648769086999809661L);
      BigFraction.getReducedFraction(0, Integer.MAX_VALUE);
      bigFraction8.doubleValue();
      bigFraction8.hashCode();
      bigFraction4.doubleValue();
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue(0, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1408L);
      bigFraction0.hashCode();
      int int0 = 100;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.reciprocal();
      BigFraction bigFraction2 = bigFraction0.subtract(100);
      bigFraction2.TWO_THIRDS.negate();
      int int1 = (-1162);
      bigFraction1.TWO_FIFTHS.getNumeratorAsInt();
      bigFraction1.TWO_THIRDS.add(100);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.bigDecimalValue(100, (-1162));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2841L));
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction0.ONE_HALF.equals(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow(0L);
      bigFraction0.ONE_FIFTH.abs();
      int int0 = 1;
      bigFraction1.TWO_FIFTHS.getDenominatorAsInt();
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((-463.871415335952), (-3393.2429146), 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -463.871 to fraction after 1 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      int int0 = (-1984);
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      int int0 = (-4158);
      BigFraction bigFraction1 = bigFraction0.pow((-4158));
      bigFraction1.ZERO.divide((long) (-4158));
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.add((-4158));
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.multiply((long) (-4158));
      // Undeclared exception!
      try { 
        bigFraction3.ZERO.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ONE_THIRD.percentageValue();
      BigFractionField bigFractionField0 = bigFraction0.ONE_FIFTH.getField();
      bigFraction0.TWO.equals(bigFractionField0);
      int int0 = (-1614);
      bigFraction0.ZERO.divide((-1614));
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.bigDecimalValue((-1614));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-688L));
      bigFraction0.ONE_THIRD.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.reciprocal();
      bigFraction0.floatValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger0);
      bigFraction0.FOUR_FIFTHS.bigDecimalValue();
      double double0 = bigFraction2.percentageValue();
      assertEquals((-68800.0), double0, 0.01);
      
      BigFraction bigFraction3 = bigFraction1.add(0L);
      bigFraction3.FOUR_FIFTHS.equals(bigFraction2);
      BigFraction bigFraction4 = bigFraction3.TWO_THIRDS.add((-1));
      BigFraction bigFraction5 = bigFraction3.add(bigInteger0);
      BigFraction bigFraction6 = bigFraction5.MINUS_ONE.multiply(bigFraction4);
      int int0 = bigFraction5.compareTo(bigFraction2);
      assertEquals(1, int0);
      
      float float0 = bigFraction6.floatValue();
      assertEquals(0.33333334F, float0, 0.01F);
      
      bigFraction4.getNumeratorAsLong();
      bigFraction0.getDenominatorAsLong();
      bigFraction5.bigDecimalValue(1);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      int int0 = 1571;
      BigFraction bigFraction1 = bigFraction0.ZERO.subtract(1571);
      bigFraction0.FOUR_FIFTHS.pow(1571);
      // Undeclared exception!
      try { 
        bigFraction1.ONE_THIRD.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.pow((-1));
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.divide((-1));
      BigFraction bigFraction3 = bigFraction1.MINUS_ONE.multiply(bigFraction0);
      BigFraction bigFraction4 = bigFraction3.TWO_FIFTHS.multiply((-1));
      BigFraction bigFraction5 = bigFraction4.FOUR_FIFTHS.add((-1));
      assertTrue(bigFraction5.equals((Object)bigFraction2));
      
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction6 = bigFraction1.ONE.divide(bigFraction3);
      assertEquals((short) (-3), bigFraction6.shortValue());
      
      bigFraction1.ONE_QUARTER.percentageValue();
      bigFraction0.doubleValue();
      bigFraction1.toString();
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      BigFraction bigFraction7 = bigFraction0.divide(bigFraction1);
      bigFraction7.getDenominatorAsInt();
      BigFraction bigFraction8 = bigFraction7.ONE.subtract(bigFraction0);
      BigFraction bigFraction9 = bigFraction7.THREE_QUARTERS.subtract((long) 9);
      bigFraction9.ONE.divide(bigInteger0);
      float float0 = bigFraction8.TWO_THIRDS.floatValue();
      assertEquals(0.6666667F, float0, 0.01F);
      
      bigFraction1.getDenominator();
      bigFraction7.intValue();
      BigFraction bigFraction10 = bigFraction0.subtract(bigFraction3);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction11 = bigFraction8.divide(bigInteger1);
      boolean boolean0 = bigFraction11.equals(bigFraction7);
      assertTrue(bigFraction8.equals((Object)bigFraction10));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.TWO_QUARTERS.hashCode();
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.add((-921));
      bigFraction1.FOUR_FIFTHS.getNumeratorAsLong();
      double double0 = bigFraction1.ONE_THIRD.doubleValue();
      assertEquals(0.3333333333333333, double0, 0.01);
      
      bigFraction0.ONE_THIRD.longValue();
      bigFraction0.doubleValue();
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.TWO.reciprocal();
      bigFraction3.ONE_THIRD.getField();
      BigFraction bigFraction4 = bigFraction3.multiply(bigFraction1);
      assertEquals((short) (-460), bigFraction4.shortValue());
      
      BigFraction bigFraction5 = bigFraction0.divide(bigFraction1);
      bigFraction5.ONE_HALF.abs();
      BigFraction bigFraction6 = bigFraction5.THREE_FIFTHS.subtract(0L);
      bigFraction6.ONE.bigDecimalValue();
      bigFraction0.negate();
      double double1 = bigFraction2.pow(0.0);
      assertEquals(1.0, double1, 0.01);
      
      BigFraction bigFraction7 = bigFraction2.subtract(bigFraction0);
      BigFraction bigFraction8 = bigFraction5.subtract((-921));
      float float0 = bigFraction8.floatValue();
      assertEquals(921.0F, float0, 0.01F);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte) (-113);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction8.TWO_THIRDS.add(bigInteger0);
      byte[] byteArray1 = new byte[1];
      bigFraction8.ONE_THIRD.subtract((-921));
      byteArray1[0] = (byte)52;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      BigFraction bigFraction9 = bigFraction8.pow(bigInteger1);
      bigFraction9.divide(bigInteger1);
      assertSame(bigFraction0, bigFraction7);
      assertEquals((byte)104, bigFraction1.byteValue());
      assertFalse(bigFraction5.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(1);
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      bigFraction0.hashCode();
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 2279;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 2279);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      int int0 = Integer.MAX_VALUE;
      BigFraction bigFraction1 = bigFraction0.divide(Integer.MAX_VALUE);
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.multiply(4503599627370496L);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction2.MINUS_ONE.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.TWO_THIRDS.bigDecimalValue(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-180));
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1155);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
