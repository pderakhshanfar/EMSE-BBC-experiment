/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 05:31:05 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9193070505571053912L);
      assertEquals((byte)88, bigFraction0.byteValue());
      assertEquals((short) (-3752), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.subtract(3);
      assertEquals((byte)88, bigFraction0.byteValue());
      assertEquals((short) (-3752), bigFraction0.shortValue());
      assertEquals((short) (-3755), bigFraction1.shortValue());
      assertEquals((byte)85, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      assertEquals((byte)88, bigFraction0.byteValue());
      assertEquals((short) (-3752), bigFraction0.shortValue());
      assertEquals((short) (-3755), bigFraction1.shortValue());
      assertEquals((byte)85, bigFraction1.byteValue());
      assertEquals((byte) (-3), bigFraction2.byteValue());
      assertEquals((short) (-3), bigFraction2.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.pow(bigInteger0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.4566110577298295E-7));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(0L);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.pow(0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.pow((-273L));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-25), bigFraction1.byteValue());
      assertEquals((short) (-1817), bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      float float0 = bigFraction1.floatValue();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-25), bigFraction1.byteValue());
      assertEquals((short) (-1817), bigFraction1.shortValue());
      assertEquals(2.8604447E26F, float0, 0.01F);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(609);
      assertEquals((short)609, bigFraction0.shortValue());
      assertEquals((byte)97, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = new BigFraction(5);
      assertEquals((short)5, bigFraction1.shortValue());
      assertEquals((byte)5, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertEquals((short)609, bigFraction0.shortValue());
      assertEquals((byte)97, bigFraction0.byteValue());
      assertEquals((short)5, bigFraction1.shortValue());
      assertEquals((byte)5, bigFraction1.byteValue());
      assertEquals((short)614, bigFraction2.shortValue());
      assertEquals((byte)102, bigFraction2.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3655.055461));
      assertEquals((byte) (-71), bigFraction0.byteValue());
      assertEquals((short) (-3655), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(317, 161);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE.negate();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.multiply(161);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((byte) (-128), bigFraction2.byteValue());
      assertEquals((short)128, bigFraction2.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = bigFraction1.subtract(bigFraction2);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((byte) (-128), bigFraction2.byteValue());
      assertEquals((short)128, bigFraction2.shortValue());
      assertEquals((short) (-129), bigFraction3.shortValue());
      assertEquals((byte)127, bigFraction3.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.add(1269);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-11), bigFraction1.byteValue());
      assertEquals((short)1269, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-11), bigFraction1.byteValue());
      assertEquals((short)1269, bigFraction1.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1268, bigFraction2.shortValue());
      assertEquals((byte) (-12), bigFraction2.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3285L, (-1L));
      assertEquals((short) (-3285), bigFraction0.shortValue());
      assertEquals((byte)43, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(bigInteger0);
      assertEquals((short) (-3285), bigFraction0.shortValue());
      assertEquals((byte)43, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(58L, (-3485L));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.multiply((-1002L));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short) (-200), bigFraction1.shortValue());
      assertEquals((byte)56, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short) (-200), bigFraction1.shortValue());
      assertEquals((byte)56, bigFraction1.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short) (-210), bigFraction2.shortValue());
      assertEquals((byte)46, bigFraction2.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.subtract((long) (byte)2);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.reduce();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3311.953373980818, 1269);
      assertEquals((byte) (-17), bigFraction0.byteValue());
      assertEquals((short)3311, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertEquals((byte) (-17), bigFraction0.byteValue());
      assertEquals((short)3311, bigFraction0.shortValue());
      assertEquals((short)3311, bigFraction1.shortValue());
      assertEquals((byte) (-17), bigFraction1.byteValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.TWO.abs();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(58L, (-3485L));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-60), bigFraction1.byteValue());
      assertEquals((short) (-60), bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.add(1798L);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)5, bigFraction1.byteValue());
      assertEquals((short)1797, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.pow(bigInteger0);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)5, bigFraction1.byteValue());
      assertEquals((short)1797, bigFraction1.shortValue());
      assertEquals((short) (-24327), bigFraction2.shortValue());
      assertEquals((byte) (-7), bigFraction2.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-648), (-648));
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.pow((-616L));
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.pow(4084L);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3311.953373980818, 4);
      assertEquals((short)3312, bigFraction0.shortValue());
      assertEquals((byte) (-16), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.pow((-1528));
      assertEquals((short)3312, bigFraction0.shortValue());
      assertEquals((byte) (-16), bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(58L, (-3485L));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.multiply((-1002L));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)56, bigFraction1.byteValue());
      assertEquals((short) (-200), bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.pow(3485);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)56, bigFraction1.byteValue());
      assertEquals((short) (-200), bigFraction1.shortValue());
      assertEquals((short)10087, bigFraction2.shortValue());
      assertEquals((byte)103, bigFraction2.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)5, bigFraction1.byteValue());
      assertEquals((short)5, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.pow(1017);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)5, bigFraction1.byteValue());
      assertEquals((short)5, bigFraction1.shortValue());
      assertEquals((byte) (-91), bigFraction2.byteValue());
      assertEquals((short) (-2395), bigFraction2.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.TWO_QUARTERS.pow(1.7976931348623157E308);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.MINUS_ONE.pow((double) 2147483557);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9193070505571053912L);
      assertEquals((short) (-3752), bigFraction0.shortValue());
      assertEquals((byte)88, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.ZERO.percentageValue();
      assertEquals((short) (-3752), bigFraction0.shortValue());
      assertEquals((byte)88, bigFraction0.byteValue());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1299L, (-1295L));
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.percentageValue();
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((-100.3088803088803), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.pow((-1069L));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short) (-14521), bigFraction1.shortValue());
      assertEquals((byte)71, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.negate();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short) (-14521), bigFraction1.shortValue());
      assertEquals((byte)71, bigFraction1.byteValue());
      assertEquals((byte) (-71), bigFraction2.byteValue());
      assertEquals((short)14521, bigFraction2.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(bigFraction0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)20, bigFraction1.shortValue());
      assertEquals((byte)20, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-11);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte) (-11), bigInteger0.byteValue());
      assertEquals((short) (-11), bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte) (-11)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-11), bigInteger0.byteValue());
      assertEquals((short) (-11), bigInteger0.shortValue());
      assertEquals((byte) (-4), bigFraction1.byteValue());
      assertEquals((short) (-4), bigFraction1.shortValue());
      assertArrayEquals(new byte[] {(byte) (-11)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.multiply(3024L);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)115, bigFraction1.byteValue());
      assertEquals((short)2419, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(712);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)356, bigFraction1.shortValue());
      assertEquals((byte)100, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.multiply((-2734));
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((short) (-5468), bigFraction1.shortValue());
      assertEquals((byte) (-92), bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.FOUR_FIFTHS.longValue();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigFraction0.byteValue());
      assertEquals((short)10, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.longValue();
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigFraction0.byteValue());
      assertEquals((short)10, bigFraction0.shortValue());
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(4, (-1));
      assertEquals((byte) (-4), bigFraction0.byteValue());
      assertEquals((short) (-4), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(317, 161);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.FOUR_FIFTHS.getNumeratorAsLong();
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(317, 161);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE.negate();
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      long long0 = bigFraction1.getNumeratorAsLong();
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((-1L), long0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-572.3), 0);
      assertEquals((byte) (-61), bigFraction0.byteValue());
      assertEquals((short) (-573), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals((byte) (-61), bigFraction0.byteValue());
      assertEquals((short) (-573), bigFraction0.shortValue());
      assertEquals((-573), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.multiply(bigInteger0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigInteger bigInteger1 = bigFraction1.getNumerator();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigInteger1);
      assertNotSame(bigFraction0, bigFraction1);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-572.3), 0);
      assertEquals((byte) (-61), bigFraction0.byteValue());
      assertEquals((short) (-573), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((byte) (-61), bigFraction0.byteValue());
      assertEquals((short) (-573), bigFraction0.shortValue());
      assertEquals((short) (-573), bigInteger0.shortValue());
      assertEquals((byte) (-61), bigInteger0.byteValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-572.3), 0);
      assertEquals((short) (-573), bigFraction0.shortValue());
      assertEquals((byte) (-61), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals((short) (-573), bigFraction0.shortValue());
      assertEquals((byte) (-61), bigFraction0.byteValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(407.423164);
      assertEquals((byte) (-105), bigFraction0.byteValue());
      assertEquals((short)407, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((byte) (-105), bigFraction0.byteValue());
      assertEquals((short)407, bigFraction0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483645);
      assertEquals((short) (-3), bigFraction0.shortValue());
      assertEquals((byte) (-3), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[3] = (byte)12;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)12, bigInteger0.shortValue());
      assertEquals((byte)12, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)12}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertEquals((short) (-3), bigFraction0.shortValue());
      assertEquals((byte) (-3), bigFraction0.byteValue());
      assertEquals((short)12, bigInteger0.shortValue());
      assertEquals((byte)12, bigInteger0.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)12}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigInteger bigInteger1 = bigFraction1.getDenominator();
      assertEquals((short) (-3), bigFraction0.shortValue());
      assertEquals((byte) (-3), bigFraction0.byteValue());
      assertEquals((short)12, bigInteger0.shortValue());
      assertEquals((byte)12, bigInteger0.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((byte) (-12), bigInteger1.byteValue());
      assertEquals((short) (-12), bigInteger1.shortValue());
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)12}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      float float0 = bigFraction0.floatValue();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.doubleValue();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals(0.6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3311.953373980818, 4);
      assertEquals((short)3312, bigFraction0.shortValue());
      assertEquals((byte) (-16), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      assertEquals((short)3312, bigFraction0.shortValue());
      assertEquals((byte) (-16), bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4.276879249001278));
      assertEquals((byte) (-4), bigFraction0.byteValue());
      assertEquals((short) (-4), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertEquals((byte) (-4), bigFraction0.byteValue());
      assertEquals((short) (-4), bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short) (-5), bigFraction2.shortValue());
      assertEquals((byte) (-5), bigFraction2.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483588, 2147483525, 2147483570);
      assertEquals((byte) (-60), bigFraction0.byteValue());
      assertEquals((short) (-60), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertEquals((byte) (-60), bigFraction0.byteValue());
      assertEquals((short) (-60), bigFraction0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short) (-60), bigFraction1.shortValue());
      assertEquals((byte) (-60), bigFraction1.byteValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3311.953373980818, 4);
      assertEquals((byte) (-16), bigFraction0.byteValue());
      assertEquals((short)3312, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.divide((-4267615245585081135L));
      assertEquals((byte) (-16), bigFraction0.byteValue());
      assertEquals((short)3312, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4607182418800017408L);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.divide((-3512299194304650054L));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.reduce();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction2.byteValue());
      assertEquals((short) (-1), bigFraction2.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, 1);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE.divide((-1));
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.divide(1199);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9218868437227405312L);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.divide((-236));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)15551, bigFraction1.shortValue());
      assertEquals((byte) (-65), bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(690.72, (-2325));
      assertEquals((short)690, bigFraction0.shortValue());
      assertEquals((byte) (-78), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.negate();
      assertEquals((short)690, bigFraction0.shortValue());
      assertEquals((byte) (-78), bigFraction0.byteValue());
      assertEquals((short) (-690), bigFraction1.shortValue());
      assertEquals((byte)78, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals((short)690, bigFraction0.shortValue());
      assertEquals((byte) (-78), bigFraction0.byteValue());
      assertEquals((short) (-690), bigFraction1.shortValue());
      assertEquals((byte)78, bigFraction1.byteValue());
      assertEquals(1, int0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(690.72, (-2325));
      assertEquals((short)690, bigFraction0.shortValue());
      assertEquals((byte) (-78), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.negate();
      assertEquals((short)690, bigFraction0.shortValue());
      assertEquals((byte) (-78), bigFraction0.byteValue());
      assertEquals((short) (-690), bigFraction1.shortValue());
      assertEquals((byte)78, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      int int0 = bigFraction1.compareTo(bigFraction0);
      assertEquals((short)690, bigFraction0.shortValue());
      assertEquals((byte) (-78), bigFraction0.byteValue());
      assertEquals((short) (-690), bigFraction1.shortValue());
      assertEquals((byte)78, bigFraction1.byteValue());
      assertEquals((-1), int0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(317, 161);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE.negate();
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue(1, 3);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigDecimal0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(2, 2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(317, 161);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(1, 3);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue((int) (byte)1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(3);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.TWO.abs();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigDecimal0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1149L, 1149L);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.multiply((-560L));
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte) (-48), bigFraction1.byteValue());
      assertEquals((short) (-560), bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte) (-48), bigFraction1.byteValue());
      assertEquals((short) (-560), bigFraction1.shortValue());
      assertEquals((byte) (-48), bigDecimal0.byteValue());
      assertEquals((short) (-560), bigDecimal0.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigDecimal0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9218868437227405312L);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.ONE;
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.add(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-11);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte) (-11), bigInteger0.byteValue());
      assertEquals((short) (-11), bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte) (-11)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-11), bigInteger0.byteValue());
      assertEquals((short) (-11), bigInteger0.shortValue());
      assertEquals((short)23841, bigFraction1.shortValue());
      assertEquals((byte)33, bigFraction1.byteValue());
      assertArrayEquals(new byte[] {(byte) (-11)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigFraction bigFraction2 = bigFraction1.pow(bigInteger1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-11), bigInteger0.byteValue());
      assertEquals((short) (-11), bigInteger0.shortValue());
      assertEquals((short)23841, bigFraction1.shortValue());
      assertEquals((byte)33, bigFraction1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((byte) (-52), bigFraction2.byteValue());
      assertEquals((short)16588, bigFraction2.shortValue());
      assertArrayEquals(new byte[] {(byte) (-11)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = bigFraction2.add(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-11), bigInteger0.byteValue());
      assertEquals((short) (-11), bigInteger0.shortValue());
      assertEquals((short)23841, bigFraction1.shortValue());
      assertEquals((byte)33, bigFraction1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((byte) (-52), bigFraction2.byteValue());
      assertEquals((short)16588, bigFraction2.shortValue());
      assertEquals((byte) (-18), bigFraction3.byteValue());
      assertEquals((short) (-25106), bigFraction3.shortValue());
      assertArrayEquals(new byte[] {(byte) (-11)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte) (-37);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short) (-9472), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-37), (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.add(bigInteger0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short) (-9472), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-9472), bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-37), (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1149L, 1149L);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      MockRandom mockRandom0 = new MockRandom(1349);
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = BigInteger.probablePrime(1349, mockRandom0);
      assertEquals((byte)59, bigInteger0.byteValue());
      assertEquals((short)571, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)59, bigInteger0.byteValue());
      assertEquals((short)571, bigInteger0.shortValue());
      assertEquals((short)572, bigFraction1.shortValue());
      assertEquals((byte)60, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.add(1154L);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1154, bigFraction1.shortValue());
      assertEquals((byte) (-126), bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.add(0L);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.4566110577298295E-7));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add(4503599627370495L);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-572.3), 0);
      assertEquals((byte) (-61), bigFraction0.byteValue());
      assertEquals((short) (-573), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.add(0);
      assertEquals((byte) (-61), bigFraction0.byteValue());
      assertEquals((short) (-573), bigFraction0.shortValue());
      assertEquals((short) (-573), bigFraction1.shortValue());
      assertEquals((byte) (-61), bigFraction1.byteValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-69L), (-69L));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.add(0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.add(1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483588, 2147483525, 2147483570);
      assertEquals((short) (-60), bigFraction0.shortValue());
      assertEquals((byte) (-60), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((-1514), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-572.3), 0);
      assertEquals((byte) (-61), bigFraction0.byteValue());
      assertEquals((short) (-573), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3285L, (-1L));
      assertEquals((byte)43, bigFraction0.byteValue());
      assertEquals((short) (-3285), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.bigDecimalValue(2146560792, 4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.bigDecimalValue((-1878));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.bigDecimalValue(7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.4566110577298295E-7));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.TWO_THIRDS.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(690.72, (-2325));
      assertEquals((short)690, bigFraction0.shortValue());
      assertEquals((byte) (-78), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      try { 
        bigFraction0.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-2519L));
      assertEquals((short) (-2519), bigInteger0.shortValue());
      assertEquals((byte)41, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction((-648), (-648));
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertEquals((short) (-2519), bigInteger0.shortValue());
      assertEquals((byte)41, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)41, bigFraction1.byteValue());
      assertEquals((short) (-2519), bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      int int0 = bigFraction1.intValue();
      assertEquals((short) (-2519), bigInteger0.shortValue());
      assertEquals((byte)41, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)41, bigFraction1.byteValue());
      assertEquals((short) (-2519), bigFraction1.shortValue());
      assertEquals((-2519), int0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-572.3), 0);
      assertEquals((byte) (-61), bigFraction0.byteValue());
      assertEquals((short) (-573), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE.multiply(bigFraction0);
      assertEquals((byte) (-61), bigFraction0.byteValue());
      assertEquals((short) (-573), bigFraction0.shortValue());
      assertEquals((byte) (-61), bigFraction1.byteValue());
      assertEquals((short) (-573), bigFraction1.shortValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      boolean boolean0 = bigFraction1.equals(bigFraction0);
      assertEquals((byte) (-61), bigFraction0.byteValue());
      assertEquals((short) (-573), bigFraction0.shortValue());
      assertEquals((byte) (-61), bigFraction1.byteValue());
      assertEquals((short) (-573), bigFraction1.shortValue());
      assertTrue(boolean0);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      boolean boolean0 = bigFraction0.ONE_FIFTH.equals(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      boolean boolean0 = bigFraction0.equals(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.doubleValue();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-69L), (-69L));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-682), (-682));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.subtract(4);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte) (-3), bigFraction1.byteValue());
      assertEquals((short) (-3), bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-5034868814120038111L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1271);
      assertEquals((byte) (-9), bigFraction0.byteValue());
      assertEquals((short)1271, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertEquals((byte) (-9), bigFraction0.byteValue());
      assertEquals((short)1271, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte) (-8), bigFraction1.byteValue());
      assertEquals((short)1272, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      String string0 = bigFraction0.toString();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(712, 4.137618951061827E263, 712);
      assertEquals((short)712, bigFraction0.shortValue());
      assertEquals((byte) (-56), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      String string0 = bigFraction0.toString();
      assertEquals((short)712, bigFraction0.shortValue());
      assertEquals((byte) (-56), bigFraction0.byteValue());
      assertEquals("712", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      String string0 = bigFraction0.toString();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals("2 / 5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3311.953373980818, 1269);
      assertEquals((short)3311, bigFraction0.shortValue());
      assertEquals((byte) (-17), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1269, 1269);
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals((short)3311, bigFraction0.shortValue());
      assertEquals((byte) (-17), bigFraction0.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((byte) (-18), bigFraction2.byteValue());
      assertEquals((short)3310, bigFraction2.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3311.953373980818, 1269);
      assertEquals((short)3311, bigFraction0.shortValue());
      assertEquals((byte) (-17), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      assertEquals((short)3311, bigFraction0.shortValue());
      assertEquals((byte) (-17), bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3311.953373980818, 1269);
      assertEquals((short)3311, bigFraction0.shortValue());
      assertEquals((byte) (-17), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.33684900000025664, 2567.89025001, 1436);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.pow((-1761));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.pow(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = new BigFraction(0.04662601918198561, 1662.7426481876, 2147483632);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.4566110577298295E-7));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.TWO.multiply(0L);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(20155158519L);
      assertEquals((byte) (-9), bigFraction0.byteValue());
      assertEquals((short)20471, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      boolean boolean0 = bigFraction0.equals(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(boolean0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-572.3), 0);
      assertEquals((byte) (-61), bigFraction0.byteValue());
      assertEquals((short) (-573), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = bigFraction0.equals(object0);
      assertEquals((byte) (-61), bigFraction0.byteValue());
      assertEquals((short) (-573), bigFraction0.shortValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-572.3), 0);
      assertEquals((short) (-573), bigFraction0.shortValue());
      assertEquals((byte) (-61), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.ZERO;
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals((short) (-573), bigFraction0.shortValue());
      assertEquals((byte) (-61), bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short) (-573), bigFraction2.shortValue());
      assertEquals((byte) (-61), bigFraction2.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = bigFraction2.subtract((-1417L));
      assertEquals((short) (-573), bigFraction0.shortValue());
      assertEquals((byte) (-61), bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short) (-573), bigFraction2.shortValue());
      assertEquals((byte) (-61), bigFraction2.byteValue());
      assertEquals((byte)76, bigFraction3.byteValue());
      assertEquals((short)844, bigFraction3.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction0, bigFraction3);
      assertSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1299L, (-1295L));
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.pow(1299L);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-54), bigFraction1.shortValue());
      assertEquals((byte) (-54), bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      double double0 = bigFraction1.doubleValue();
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-54), bigFraction1.shortValue());
      assertEquals((byte) (-54), bigFraction1.byteValue());
      assertEquals((-54.936130978265275), double0, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.multiply(0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9218868437227405312L);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = new BigFraction(0.0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.add(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147469875, 2147469875, 2147469875);
      assertEquals((short) (-13773), bigFraction0.shortValue());
      assertEquals((byte)51, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals((short) (-13773), bigFraction0.shortValue());
      assertEquals((byte)51, bigFraction0.byteValue());
      assertEquals((byte)51, bigFraction1.byteValue());
      assertEquals((short) (-13773), bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(690.72, (-2325));
      assertEquals((byte) (-78), bigFraction0.byteValue());
      assertEquals((short)690, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.negate();
      assertEquals((byte) (-78), bigFraction0.byteValue());
      assertEquals((short)690, bigFraction0.shortValue());
      assertEquals((byte)78, bigFraction1.byteValue());
      assertEquals((short) (-690), bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.abs();
      assertEquals((byte) (-78), bigFraction0.byteValue());
      assertEquals((short)690, bigFraction0.shortValue());
      assertEquals((byte)78, bigFraction1.byteValue());
      assertEquals((short) (-690), bigFraction1.shortValue());
      assertEquals((short)690, bigFraction2.shortValue());
      assertEquals((byte) (-78), bigFraction2.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 1447);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1276.394), 0.34999999999990905, 4967);
      assertEquals((byte)4, bigFraction0.byteValue());
      assertEquals((short) (-1276), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-503.81613), (-2276.27802), 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -503.816 to fraction after 1 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) (-2325), (-2325));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,325 to fraction (-9,223,372,036,854,773,482/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.0E-7, (-1436.0), 806);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (9,223,372,036,854,775,807/-9,999,999)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.9299691540987203E36, (-2034.647966438), (-648));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1,929,969,154,098,720,300,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2147483570);
      assertEquals((byte) (-78), bigFraction0.byteValue());
      assertEquals((short) (-78), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-54);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.33684900000025664, 2567.89025001, 1436);
      double double0 = bigFraction0.pow((-4.566098167230033E-8));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      long long0 = bigFraction0.ZERO.getNumeratorAsLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3311.953373980818, 1269);
      BigFraction bigFraction1 = bigFraction0.divide(2480L);
      assertEquals((short)3311, bigFraction0.shortValue());
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      int int0 = bigFraction0.TWO_THIRDS.getDenominatorAsInt();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4.276879249001278));
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(3);
      assertEquals((short) (-5), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1299L, (-1295L));
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1021), (-1021));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      long long0 = bigFraction0.MINUS_ONE.longValue();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((byte)3, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.subtract(2147483635);
      assertEquals((byte)14, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.TWO_FIFTHS.hashCode();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147469875, 2147469875, 2147469875);
      double double0 = bigFraction0.percentageValue();
      assertEquals(2.147469875E11, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483645);
      bigFraction0.TWO_FIFTHS.bigDecimalValue();
      assertEquals((short) (-3), bigFraction0.shortValue());
      assertEquals((byte) (-3), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(690.72, (-2325));
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(0, int0);
      assertEquals((short)690, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147469875, 2147469875, 2147469875);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.subtract(0L);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)51, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147469881, 2147469881, 2147469881);
      BigFraction bigFraction1 = bigFraction0.divide(2147469881);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)57, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9218868437227405312L);
      BigFraction bigFraction1 = bigFraction0.negate();
      float float0 = bigFraction1.floatValue();
      assertEquals((-9.2188684E18F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertNotNull(bigFractionField0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-1490L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(609);
      int int0 = bigFraction0.intValue();
      assertEquals(609, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigInteger bigInteger1 = bigFraction0.getNumerator();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      int int0 = bigFraction0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4.276879249001278));
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertEquals((short) (-4), bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
  }
}
