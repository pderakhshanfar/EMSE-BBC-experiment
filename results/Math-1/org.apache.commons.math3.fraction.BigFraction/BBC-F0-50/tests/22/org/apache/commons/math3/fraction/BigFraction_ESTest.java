/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 23:44:21 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0, 472.8346473606, 168);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.TWO_THIRDS.pow(472.8346473606);
      assertEquals(5.46955030634411E-84, double0, 0.01);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ZERO.abs();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-1));
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(912.063673262, (-2352));
      assertEquals((short)912, bigFraction0.shortValue());
      assertEquals((byte) (-112), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.ZERO;
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((short)912, bigFraction0.shortValue());
      assertEquals((byte) (-112), bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)112, bigFraction2.byteValue());
      assertEquals((short) (-912), bigFraction2.shortValue());
      assertNotNull(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.getReducedFraction(2147483632, 2008);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte) (-105), bigFraction1.byteValue());
      assertEquals((short)20887, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-105), bigFraction1.byteValue());
      assertEquals((short)20887, bigFraction1.shortValue());
      assertEquals((byte) (-105), bigFraction2.byteValue());
      assertEquals((short)20887, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BigFraction bigFraction1 = bigFraction0.ONE.subtract(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(8, byteArray0.length);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)10, bigFraction1.byteValue());
      assertEquals((short)10, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)10, bigFraction1.byteValue());
      assertEquals((short)10, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0, 472.8346473606, 168);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-90);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((short)166, bigInteger0.shortValue());
      assertEquals((byte) (-90), bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-90)}, byteArray0);
      
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.subtract(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(5, byteArray0.length);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)166, bigInteger0.shortValue());
      assertEquals((byte) (-90), bigInteger0.byteValue());
      assertEquals((short) (-165), bigFraction1.shortValue());
      assertEquals((byte)91, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-90)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.subtract((-666L));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)666, bigFraction1.shortValue());
      assertEquals((byte) (-102), bigFraction1.byteValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.subtract(2147483647L);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(37, 37);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.subtract(bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.subtract(0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2519.653733701984);
      assertEquals((byte) (-41), bigFraction0.byteValue());
      assertEquals((short)2519, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.subtract(1805);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte) (-41), bigFraction0.byteValue());
      assertEquals((short)2519, bigFraction0.shortValue());
      assertEquals((byte) (-54), bigFraction1.byteValue());
      assertEquals((short)714, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1091636, 1057);
      assertEquals((byte)8, bigFraction0.byteValue());
      assertEquals((short)1032, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)8, bigFraction0.byteValue());
      assertEquals((short)1032, bigFraction0.shortValue());
      assertEquals((short)1032, bigFraction1.shortValue());
      assertEquals((byte)8, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.subtract(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short) (-9), bigFraction1.shortValue());
      assertEquals((byte) (-9), bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short) (-9), bigFraction1.shortValue());
      assertEquals((byte) (-9), bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = bigFraction2.reciprocal();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short) (-9), bigFraction1.shortValue());
      assertEquals((byte) (-9), bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte) (-9), bigFraction3.byteValue());
      assertEquals((short) (-9), bigFraction3.shortValue());
      assertNotNull(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.TWO.pow(0L);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(235, 235);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.pow(0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.ZERO.pow(1851.1);
      assertEquals(0.0, double0, 0.01);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(235, 235);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE.subtract(1748);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short) (-1747), bigFraction1.shortValue());
      assertEquals((byte)45, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      double double0 = bigFraction1.pow(1.0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((-1747.0), double0, 0.01);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short) (-1747), bigFraction1.shortValue());
      assertEquals((byte)45, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(7, 927);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.pow(927);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      double double0 = bigFraction1.percentageValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-555.38), 1223);
      assertEquals((short) (-555), bigFraction0.shortValue());
      assertEquals((byte) (-43), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.negate();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short) (-555), bigFraction0.shortValue());
      assertEquals((byte) (-43), bigFraction0.byteValue());
      assertEquals((byte)43, bigFraction1.byteValue());
      assertEquals((short)555, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(235, 235);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE.subtract(1748);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short) (-1747), bigFraction1.shortValue());
      assertEquals((byte)45, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.multiply(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short) (-1747), bigFraction1.shortValue());
      assertEquals((byte)45, bigFraction1.byteValue());
      assertEquals((short) (-349), bigFraction2.shortValue());
      assertEquals((byte) (-93), bigFraction2.byteValue());
      assertNotNull(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2519.653733701984);
      assertEquals((byte) (-41), bigFraction0.byteValue());
      assertEquals((short)2519, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.TWO.multiply(0L);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte) (-41), bigFraction0.byteValue());
      assertEquals((short)2519, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.multiply((long) 3);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.multiply(472);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)118, bigFraction1.byteValue());
      assertEquals((short)118, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(31.278571303165, 31.278571303165, 0);
      assertEquals((byte)31, bigFraction0.byteValue());
      assertEquals((short)31, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.longValue();
      assertEquals(31L, long0);
      assertEquals((byte)31, bigFraction0.byteValue());
      assertEquals((short)31, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(433);
      assertEquals((short)433, bigFraction0.shortValue());
      assertEquals((byte) (-79), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.pow(433);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)433, bigFraction0.shortValue());
      assertEquals((byte) (-79), bigFraction0.byteValue());
      assertEquals((short) (-3407), bigFraction1.shortValue());
      assertEquals((byte) (-79), bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      long long0 = bigFraction1.longValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((-3136576859913260367L), long0);
      assertEquals((short)433, bigFraction0.shortValue());
      assertEquals((byte) (-79), bigFraction0.byteValue());
      assertEquals((short) (-3407), bigFraction1.shortValue());
      assertEquals((byte) (-79), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.TWO_QUARTERS.intValue();
      assertEquals(0, int0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.intValue();
      assertEquals(1, int0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-2379), 1);
      assertEquals((short) (-2379), bigFraction0.shortValue());
      assertEquals((byte) (-75), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(0L, long0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.TWO.getNumeratorAsLong();
      assertEquals(2L, long0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.ZERO.getNumeratorAsInt();
      assertEquals(0, int0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.TWO_FIFTHS.getNumeratorAsInt();
      assertEquals(2, int0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1922);
      assertEquals((byte) (-126), bigFraction0.byteValue());
      assertEquals((short)1922, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract((long) 1922);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte) (-126), bigFraction0.byteValue());
      assertEquals((short)1922, bigFraction0.shortValue());
      assertEquals((short) (-1921), bigFraction1.shortValue());
      assertEquals((byte)127, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte) (-126), bigFraction0.byteValue());
      assertEquals((short)1922, bigFraction0.shortValue());
      assertEquals((short) (-1921), bigFraction1.shortValue());
      assertEquals((byte)127, bigFraction1.byteValue());
      assertEquals((short) (-5765), bigInteger0.shortValue());
      assertEquals((byte)123, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1922);
      assertEquals((byte) (-126), bigFraction0.byteValue());
      assertEquals((short)1922, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((byte) (-126), bigFraction0.byteValue());
      assertEquals((short)1922, bigFraction0.shortValue());
      assertEquals((byte) (-126), bigInteger0.byteValue());
      assertEquals((short)1922, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(0L, long0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2514L, 9223372036854775807L);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals((-1), int0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(7, 927);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.pow(927);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = BigFraction.THREE_QUARTERS;
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = bigFraction1.add(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      
      BigInteger bigInteger0 = bigFraction3.getDenominator();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)124, bigInteger0.byteValue());
      assertEquals((short) (-3716), bigInteger0.shortValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1091636, 1057);
      assertEquals((byte)8, bigFraction0.byteValue());
      assertEquals((short)1032, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((byte)8, bigFraction0.byteValue());
      assertEquals((short)1032, bigFraction0.shortValue());
      assertEquals((short)151, bigInteger0.shortValue());
      assertEquals((byte) (-105), bigInteger0.byteValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1922);
      assertEquals((short)1922, bigFraction0.shortValue());
      assertEquals((byte) (-126), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      float float0 = bigFraction0.ZERO.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)1922, bigFraction0.shortValue());
      assertEquals((byte) (-126), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      float float0 = bigFraction0.MINUS_ONE.floatValue();
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.doubleValue();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte) (-3), bigFraction2.byteValue());
      assertEquals((short) (-3), bigFraction2.shortValue());
      assertNotNull(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(5, byteArray0.length);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BigFraction bigFraction2 = bigFraction1.divide(bigInteger0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals(5, byteArray0.length);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((byte) (-1), bigFraction2.byteValue());
      assertEquals((short) (-1), bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)5, bigInteger0.shortValue());
      assertEquals((byte)5, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)5, bigInteger0.shortValue());
      assertEquals((byte)5, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2307.198851380121), 773);
      assertEquals((short) (-2307), bigFraction0.shortValue());
      assertEquals((byte) (-3), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.divide((long) (byte)103);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short) (-2307), bigFraction0.shortValue());
      assertEquals((byte) (-3), bigFraction0.byteValue());
      assertEquals((short) (-22), bigFraction1.shortValue());
      assertEquals((byte) (-22), bigFraction1.byteValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2146959487, 1223);
      assertEquals((short) (-13986), bigFraction0.shortValue());
      assertEquals((byte)94, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.divide(2145L);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short) (-13986), bigFraction0.shortValue());
      assertEquals((byte)94, bigFraction0.byteValue());
      assertEquals((short)818, bigFraction1.shortValue());
      assertEquals((byte)50, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.divide(2147483646);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)6, bigFraction1.byteValue());
      assertEquals((short)6, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.divide(3);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)6, bigFraction1.byteValue());
      assertEquals((short)6, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction2.byteValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(912.063673262, (-2352));
      assertEquals((short)912, bigFraction0.shortValue());
      assertEquals((byte) (-112), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.ZERO;
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(1, int0);
      assertEquals((short)912, bigFraction0.shortValue());
      assertEquals((byte) (-112), bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = new BigFraction(2458.0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)2458, bigFraction1.shortValue());
      assertEquals((byte) (-102), bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((-1), int0);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((short)2458, bigFraction1.shortValue());
      assertEquals((byte) (-102), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1922);
      assertEquals((short)1922, bigFraction0.shortValue());
      assertEquals((byte) (-126), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction0.ZERO.bigDecimalValue((-2869), 0);
      assertEquals((short)1922, bigFraction0.shortValue());
      assertEquals((byte) (-126), bigFraction0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction0.ONE_QUARTER.bigDecimalValue((-1), 0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2303.476474786, 764.23939, (-2084));
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)2303, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction0.MINUS_ONE.bigDecimalValue(0, 0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)2303, bigFraction0.shortValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction0.TWO_QUARTERS.bigDecimalValue(3);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction0.TWO_THIRDS.bigDecimalValue(0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.negate();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue(0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2519.653733701984);
      assertEquals((byte) (-41), bigFraction0.byteValue());
      assertEquals((short)2519, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction0.THREE_FIFTHS.bigDecimalValue();
      assertEquals((byte) (-41), bigFraction0.byteValue());
      assertEquals((short)2519, bigFraction0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1922);
      assertEquals((short)1922, bigFraction0.shortValue());
      assertEquals((byte) (-126), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE.add(37);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)1922, bigFraction0.shortValue());
      assertEquals((byte) (-126), bigFraction0.byteValue());
      assertEquals((short)38, bigFraction1.shortValue());
      assertEquals((byte)38, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)1922, bigFraction0.shortValue());
      assertEquals((byte) (-126), bigFraction0.byteValue());
      assertEquals((short)38, bigFraction1.shortValue());
      assertEquals((byte)38, bigFraction1.byteValue());
      assertEquals((short)38, bigDecimal0.shortValue());
      assertEquals((byte)38, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1117L));
      assertEquals((byte) (-93), bigFraction0.byteValue());
      assertEquals((short) (-1117), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction0.MINUS_ONE.bigDecimalValue();
      assertEquals((byte) (-93), bigFraction0.byteValue());
      assertEquals((short) (-1117), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-555.38), 1223);
      assertEquals((byte) (-43), bigFraction0.byteValue());
      assertEquals((short) (-555), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte) (-43), bigFraction0.byteValue());
      assertEquals((short) (-555), bigFraction0.shortValue());
      assertEquals((short) (-1110), bigFraction1.shortValue());
      assertEquals((byte) (-86), bigFraction1.byteValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(912.063673262, (-2352));
      assertEquals((byte) (-112), bigFraction0.byteValue());
      assertEquals((short)912, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.TWO;
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((byte) (-112), bigFraction0.byteValue());
      assertEquals((short)912, bigFraction0.shortValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)914, bigFraction2.shortValue());
      assertEquals((byte) (-110), bigFraction2.byteValue());
      assertNotNull(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-749.099282), 1);
      assertEquals((short) (-750), bigFraction0.shortValue());
      assertEquals((byte)18, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals(8, byteArray0.length);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short) (-750), bigFraction0.shortValue());
      assertEquals((byte)18, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)18, bigFraction1.byteValue());
      assertEquals((short) (-750), bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1117L));
      assertEquals((short) (-1117), bigFraction0.shortValue());
      assertEquals((byte) (-93), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.add(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short) (-1117), bigFraction0.shortValue());
      assertEquals((byte) (-93), bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-749.099282), 1);
      assertEquals((byte)18, bigFraction0.byteValue());
      assertEquals((short) (-750), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.multiply(0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)18, bigFraction0.byteValue());
      assertEquals((short) (-750), bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals((short)255, bigInteger0.shortValue());
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-1)}, byteArray0);
      
      BigFraction bigFraction2 = bigFraction1.add(bigInteger0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals(8, byteArray0.length);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((byte)18, bigFraction0.byteValue());
      assertEquals((short) (-750), bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)255, bigInteger0.shortValue());
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((byte) (-1), bigFraction2.byteValue());
      assertEquals((short)255, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(235, 235);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE.subtract(1748);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)45, bigFraction1.byteValue());
      assertEquals((short) (-1747), bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.add(1251L);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)45, bigFraction1.byteValue());
      assertEquals((short) (-1747), bigFraction1.shortValue());
      assertEquals((byte)16, bigFraction2.byteValue());
      assertEquals((short) (-496), bigFraction2.shortValue());
      assertNotNull(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.add(2765L);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-51), bigFraction1.byteValue());
      assertEquals((short)2765, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(7, 927);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.add(60488893);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-67), bigFraction1.byteValue());
      assertEquals((short) (-835), bigFraction1.shortValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-2301L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-3460), (-3460));
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow((-3460));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.pow(2082408385);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(3, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(456);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-555.38), 1223);
      // Undeclared exception!
      try { 
        bigFraction0.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1), 7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(175.828783566);
      try { 
        bigFraction0.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1223, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(37, 37);
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(912.063673262, (-2352));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertEquals((short)912, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      boolean boolean0 = bigFraction0.equals(bigFraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2146959487, 1223);
      double double0 = bigFraction0.doubleValue();
      assertEquals(1755486.0891251022, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3298L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-371), (-371));
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.reduce();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      String string0 = bigFraction0.TWO_THIRDS.toString();
      assertEquals("2 / 3", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      String string0 = bigFraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-555.38), 683);
      // Undeclared exception!
      try { 
        bigFraction0.MINUS_ONE.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short) (-1), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3298L);
      bigFraction0.pow(2600L);
      assertEquals((short)3298, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.ZERO.multiply(bigFraction0);
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow((-2465L));
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.add(bigInteger0);
      float float0 = bigFraction3.floatValue();
      assertEquals(10.0F, float0, 0.01F);
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.725447941998027E-5, 5.354707198534925E-5, 2047);
      BigFraction bigFraction1 = BigFraction.ZERO;
      boolean boolean0 = bigFraction0.equals(bigFraction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.06930325509665636);
      boolean boolean0 = bigFraction0.equals(">@try(b2CNFW/z_!");
      assertEquals((short)0, bigFraction0.shortValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow(931);
      double double0 = bigFraction1.percentageValue();
      assertEquals(4.808794493698669E-115, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.ZERO.divide(113236205062349959L);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-555.38), 1223);
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.add(bigFraction0);
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 1023);
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(2627.1, (-733.2162), (-2147483646));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 2,627.1 to fraction after -2,147,483,646 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, (-3460), 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) 2147483647L, 1326);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.5851251724785243E286, 683);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 15,851,251,724,785,243,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2147483637);
      BigFraction bigFraction1 = bigFraction0.abs();
      assertSame(bigFraction1, bigFraction0);
      assertEquals((byte) (-11), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4128.886396929421));
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals((short) (-4128), bigFraction0.shortValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-15);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      boolean boolean0 = bigFraction0.TWO_QUARTERS.equals(bigFraction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2514L, 9223372036854775807L);
      BigFraction bigFraction1 = bigFraction0.add((-1));
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE.multiply((-862L));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short) (-862), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_QUARTERS.bigDecimalValue((-1900));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.multiply((-1468));
      assertEquals((short) (-1101), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.06930325509665636);
      long long0 = bigFraction0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = bigFraction1.abs();
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)1, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.06930325509665636);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      double double0 = bigFraction0.percentageValue();
      assertEquals((-100.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.725447941998027E-5, 5.354707198534925E-5, 2047);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1373), 2106965088);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-555.38), 683);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(175.828783566);
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.add((-1L));
      assertEquals((short)175, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.06930325509665636);
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(0, int0);
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-834.587524038994), 100);
      BigFraction bigFraction1 = bigFraction0.divide(100);
      assertEquals((byte) (-66), bigFraction0.byteValue());
      assertEquals((short) (-8), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertNotNull(bigFractionField0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      int int0 = bigFraction0.intValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)1, bigFraction1.shortValue());
  }
}
