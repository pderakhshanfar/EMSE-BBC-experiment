/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 05:31:46 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      MockRandom mockRandom0 = new MockRandom(1174);
      BigInteger bigInteger0 = new BigInteger(1174, mockRandom0);
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      Object object0 = new Object();
      bigFraction1.getDenominatorAsLong();
      bigFraction1.equals(bigFraction0);
      bigFraction1.pow(1174);
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      BigFraction bigFraction3 = bigFraction2.add((-6132495317591130112L));
      bigFraction3.subtract(bigInteger0);
      BigFraction bigFraction4 = new BigFraction(7.89187408872514E284);
      BigFraction bigFraction5 = new BigFraction(527.97, 7.89187408872514E284, (-3749));
      BigFraction bigFraction6 = BigFraction.ONE_FIFTH;
      bigFraction6.getDenominatorAsInt();
      BigFraction bigFraction7 = new BigFraction(2729.34229071, 1401);
      BigFraction bigFraction8 = BigFraction.ONE_HALF;
      BigFraction bigFraction9 = bigFraction1.subtract(bigFraction8);
      BigFraction bigFraction10 = new BigFraction(3338.81735, 2.746414207166481E-14, 763);
      BigFraction bigFraction11 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction12 = bigFraction1.multiply((-1065L));
      BigFraction bigFraction13 = BigFraction.ONE_FIFTH;
      bigFraction13.add(1538L);
      bigFraction9.multiply(1401);
      bigFraction12.getDenominatorAsLong();
      bigFraction9.subtract(bigFraction7);
      bigFraction4.multiply(bigFraction8);
      bigFraction4.subtract(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(508.51131845);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      BigFraction bigFraction1 = bigFraction0.add((-4267615245585081135L));
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      byte[] byteArray1 = new byte[18];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)12;
      byteArray0[0] = (byte)12;
      byteArray1[4] = (byte)12;
      byteArray1[5] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.divide(bigInteger1);
      Object object0 = new Object();
      bigFraction3.THREE_QUARTERS.getDenominatorAsLong();
      bigFraction1.equals(object0);
      BigFraction bigFraction4 = bigFraction1.pow((int) (byte) (-1));
      BigFraction bigFraction5 = bigFraction3.add((long) (byte) (-1));
      bigFraction5.TWO.subtract(bigInteger1);
      BigFraction bigFraction6 = new BigFraction((double) (-4267615245585081135L));
      BigFraction bigFraction7 = new BigFraction((byte) (-1), (byte)12, 1401);
      bigFraction4.getDenominatorAsInt();
      BigFraction bigFraction8 = null;
      try {
        bigFraction8 = new BigFraction(1.7976931348623157E308, 2147483616);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(577.5548742432488, 18);
      bigFraction0.pow(577.5548742432488);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert NaN value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-1240));
      bigFraction0.bigDecimalValue(1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4747.113932316352);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)2;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      Object object0 = new Object();
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      BigFraction.getReducedFraction((-1812), Integer.MAX_VALUE);
      bigFraction1.reciprocal();
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(Integer.MAX_VALUE, (-3.24981577480893E-27), (-1812));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.pow(1005L);
      BigFraction bigFraction2 = bigFraction1.ONE.negate();
      bigFraction2.MINUS_ONE.floatValue();
      bigFraction0.ONE_HALF.bigDecimalValue(4);
      bigFraction1.ONE.intValue();
      BigFraction bigFraction3 = BigFraction.getReducedFraction((-1), 2053);
      BigFraction.getReducedFraction(285, 257);
      bigFraction0.add((-3958705157555305932L));
      bigFraction1.doubleValue();
      bigFraction2.subtract(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow(167);
      bigFraction1.floatValue();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483567, 1.7976931348623157E308, 1431655765);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction0.FOUR_FIFTHS.equals(bigFraction1);
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow((-2665));
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.ONE_QUARTER.divide(bigInteger0);
      bigFraction0.ONE_HALF.floatValue();
      BigFraction bigFraction1 = bigFraction0.TWO.add(0);
      bigFraction1.TWO_THIRDS.pow((-656L));
      bigFraction1.THREE_FIFTHS.longValue();
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.pow(0);
      bigFraction2.ONE_QUARTER.multiply(2147473755);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2142430745);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow((-4239L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 11;
      BigFraction bigFraction0 = new BigFraction(11);
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(11);
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.negate();
      bigFraction1.TWO_THIRDS.doubleValue();
      BigFraction bigFraction3 = bigFraction0.subtract((long) 11);
      BigFraction bigFraction4 = bigFraction0.TWO_FIFTHS.divide(bigFraction2);
      BigFraction bigFraction5 = bigFraction3.multiply(bigFraction1);
      int int1 = (-143);
      BigFraction bigFraction6 = bigFraction5.TWO_THIRDS.subtract((-143));
      BigFraction bigFraction7 = bigFraction5.subtract(11);
      bigFraction4.THREE_FIFTHS.hashCode();
      bigFraction1.THREE_FIFTHS.pow(2.011215719133196E-9);
      BigFraction bigFraction8 = bigFraction5.multiply(9007199149424640L);
      BigFraction bigFraction9 = bigFraction8.MINUS_ONE.divide(bigFraction6);
      bigFraction9.equals((Object) null);
      int int2 = 3;
      bigFraction6.bigDecimalValue(3);
      bigFraction7.toString();
      // Undeclared exception!
      try { 
        bigFraction7.TWO_FIFTHS.bigDecimalValue((-143), 790);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(106, (-4032));
      BigFraction bigFraction2 = bigFraction1.pow((-4829));
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(577.5548742432488, 0);
      bigFraction0.pow(577.5548742432488);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert infinite value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(577.83596, 2147483385);
      bigFraction0.THREE_QUARTERS.intValue();
      bigFraction0.pow((-824.0));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = new BigFraction((-1631.628533916612), 6.327041633085173E-4, 2147483385);
      BigInteger bigInteger1 = bigFraction0.getNumerator();
      bigFraction2.add(2147483647L);
      BigFraction bigFraction3 = bigFraction2.divide((-1594));
      bigFraction1.getDenominator();
      bigFraction2.intValue();
      bigFraction3.getDenominator();
      bigFraction1.subtract(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.equals(bigFraction0);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      bigFraction0.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.toString();
      BigFraction.getReducedFraction(1787, 1787);
      bigFraction0.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(577.83596, 0);
      bigFraction0.pow((-2603.93897366719));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction1.toString();
      bigFraction0.toString();
      BigFraction bigFraction2 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction3 = new BigFraction(3.0233559300540946E-7, 2.649268651566672E-5, 0);
      bigFraction2.subtract((-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(577.83596, 0);
      bigFraction0.pow(577.83596);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction1.toString();
      bigFraction1.toString();
      BigFraction bigFraction2 = new BigFraction(0);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.add(2521);
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.multiply(9007199254740990L);
      BigFraction.getReducedFraction(2521, 977804762);
      bigFraction2.ONE_QUARTER.floatValue();
      bigFraction1.THREE_FIFTHS.add(bigInteger0);
      bigFraction0.ONE.equals(bigInteger0);
      bigFraction1.ONE_THIRD.add((-5034868814120038111L));
      BigFraction bigFraction3 = bigFraction1.subtract((-849));
      BigFraction bigFraction4 = bigFraction3.subtract(bigInteger0);
      bigFraction4.ONE_HALF.add(629);
      bigFraction0.getNumerator();
      BigFraction bigFraction5 = bigFraction1.pow(2521);
      bigFraction5.ONE_THIRD.negate();
      bigFraction0.getDenominator();
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4176.3);
      bigFraction0.MINUS_ONE.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.add((-493));
      bigFraction0.THREE_QUARTERS.intValue();
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.reduce();
      BigFraction bigFraction3 = bigFraction0.THREE_FIFTHS.subtract(3041L);
      bigFraction2.ONE_THIRD.hashCode();
      bigFraction3.ONE_FIFTH.equals(bigFraction2);
      bigFraction3.floatValue();
      bigFraction3.ONE_QUARTER.hashCode();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction0.subtract(bigInteger0);
      bigFraction0.floatValue();
      bigFraction1.bigDecimalValue();
      bigFraction2.TWO_QUARTERS.compareTo(bigFraction3);
      bigFraction1.THREE_FIFTHS.percentageValue();
      Object object0 = new Object();
      bigFraction2.equals(object0);
      bigFraction4.bigDecimalValue();
      bigFraction1.floatValue();
      bigFraction0.toString();
      bigFraction3.subtract(462);
      BigFraction bigFraction5 = bigFraction0.subtract(bigFraction2);
      bigFraction5.subtract((long) (-493));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-559.249), 2928);
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.floatValue();
      BigFraction bigFraction2 = bigFraction0.multiply(2928);
      bigFraction2.subtract((-987));
      BigFraction bigFraction3 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction4 = bigFraction3.add((long) 2928);
      BigFraction bigFraction5 = BigFraction.MINUS_ONE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)111;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction3.divide(bigInteger0);
      Object object0 = new Object();
      bigFraction1.equals(object0);
      bigFraction5.pow((int) (byte)111);
      bigFraction4.add((-3339L));
      BigFraction bigFraction6 = BigFraction.TWO_THIRDS;
      bigFraction2.pow((double) 2928);
      bigFraction5.abs();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ONE_FIFTH.abs();
      bigFraction0.floatValue();
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(350);
      bigFraction0.ONE_FIFTH.subtract((-1320));
      BigFraction bigFraction2 = bigFraction0.add(0L);
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction3.divide(bigInteger0);
      bigFraction2.ONE.equals(bigFraction3);
      bigFraction1.pow((-1384.1048985401999));
      bigFraction2.abs();
      bigFraction3.longValue();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(577.83596, 0);
      bigFraction0.pow(577.83596);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction((double) 0);
      bigFraction1.toString();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.add(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.multiply(bigInteger0);
      bigFraction1.ZERO.getDenominatorAsInt();
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.add(bigInteger0);
      bigFraction1.THREE_QUARTERS.getNumeratorAsLong();
      bigFraction0.ZERO.percentageValue();
      BigFraction bigFraction3 = bigFraction0.add(bigInteger0);
      bigFraction0.TWO_FIFTHS.compareTo(bigFraction3);
      BigFraction bigFraction4 = BigFraction.getReducedFraction(1, 1);
      bigFraction4.ONE_THIRD.pow((long) 1);
      bigFraction4.bigDecimalValue();
      BigFraction bigFraction5 = bigFraction3.TWO_QUARTERS.multiply(1);
      BigFraction bigFraction6 = bigFraction1.subtract(bigFraction0);
      bigFraction6.THREE_FIFTHS.percentageValue();
      bigFraction6.MINUS_ONE.bigDecimalValue(535, 1);
      bigFraction6.subtract(bigFraction2);
      bigFraction6.ONE_FIFTH.getNumeratorAsInt();
      BigFraction bigFraction7 = bigFraction0.subtract(bigFraction3);
      BigFraction bigFraction8 = bigFraction7.TWO_THIRDS.add(66L);
      bigFraction0.floatValue();
      BigFraction bigFraction9 = bigFraction5.subtract((long) (-1));
      bigFraction9.reduce();
      bigFraction6.pow((-1));
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(319, mockRandom0);
      bigFraction1.subtract(bigInteger1);
      bigFraction1.getDenominator();
      BigFraction.getReducedFraction(16, (-1));
      bigFraction5.getField();
      bigFraction8.longValue();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.abs();
      bigFraction0.floatValue();
      bigFraction0.ONE_HALF.multiply(350);
      bigFraction0.ONE_FIFTH.subtract((-1320));
      BigFraction bigFraction2 = bigFraction0.add(0L);
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction4 = bigFraction3.divide(bigInteger0);
      bigFraction2.ONE.equals(bigFraction3);
      bigFraction1.THREE_FIFTHS.pow(1);
      bigFraction4.ZERO.abs();
      bigFraction2.TWO_FIFTHS.reciprocal();
      BigFraction bigFraction5 = BigFraction.ONE_QUARTER;
      bigFraction1.ONE_THIRD.multiply(1079L);
      Object object0 = new Object();
      bigFraction2.subtract(bigInteger0);
      bigFraction4.toString();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)18;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.divide((-2695));
      bigFraction1.toString();
      BigFraction bigFraction2 = bigFraction0.negate();
      bigFraction2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction2 = new BigFraction(507, (-2147483625));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.MINUS_ONE.pow(bigInteger0);
      BigFraction bigFraction3 = BigFraction.TWO_FIFTHS;
      bigFraction1.subtract(bigFraction3);
      bigFraction1.MINUS_ONE.divide((long) 507);
      bigFraction1.MINUS_ONE.floatValue();
      bigFraction0.compareTo(bigFraction2);
      bigFraction0.compareTo(bigFraction1);
      bigFraction2.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.abs();
      bigFraction0.floatValue();
      bigFraction0.ONE_HALF.multiply(350);
      bigFraction0.ONE_FIFTH.subtract((-1320));
      BigFraction bigFraction2 = bigFraction0.add(0L);
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction4 = bigFraction3.divide(bigInteger0);
      bigFraction2.ONE.equals(bigFraction3);
      bigFraction1.THREE_FIFTHS.pow(1);
      BigFraction bigFraction5 = bigFraction2.THREE_FIFTHS.add((-2535L));
      bigFraction1.ONE_THIRD.multiply(1079L);
      Object object0 = new Object();
      bigFraction2.subtract(bigInteger0);
      bigFraction4.toString();
      bigFraction5.intValue();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = new BigFraction((double) 3);
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction4 = bigFraction1.multiply((-779));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction5 = bigFraction4.pow(bigInteger0);
      BigFraction bigFraction6 = BigFraction.TWO_FIFTHS;
      bigFraction6.subtract(bigFraction2);
      bigFraction3.floatValue();
      bigFraction2.compareTo(bigFraction5);
      bigFraction2.compareTo(bigFraction1);
      bigFraction2.pow((long) 3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.2145042419433594);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow((-1L));
      bigFraction1.FOUR_FIFTHS.hashCode();
      bigFraction0.TWO_QUARTERS.percentageValue();
      int int0 = (-2144716271);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(37, (-2144716271));
      bigFraction2.longValue();
      BigFraction bigFraction3 = bigFraction2.pow(2221L);
      bigFraction3.ONE.getField();
      BigFraction bigFraction4 = bigFraction3.TWO.subtract((-1004L));
      BigFraction bigFraction5 = bigFraction4.ONE_THIRD.subtract((-3178));
      bigFraction5.ONE_QUARTER.multiply((long) 37);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction3.MINUS_ONE.getDenominatorAsLong();
      bigFraction3.MINUS_ONE.pow(2221L);
      bigFraction3.TWO_FIFTHS.equals("");
      // Undeclared exception!
      try { 
        bigFraction3.TWO_THIRDS.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ONE_FIFTH.abs();
      bigFraction0.floatValue();
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(350);
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.subtract((-1320));
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      bigFraction3.getDenominatorAsInt();
      BigFraction bigFraction4 = bigFraction3.subtract(2810);
      bigFraction0.abs();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction5 = bigFraction0.subtract(bigInteger0);
      bigFraction1.hashCode();
      bigFraction4.THREE_QUARTERS.add((-1320));
      bigFraction2.pow(4069L);
      BigFraction bigFraction6 = BigFraction.ONE_FIFTH;
      bigFraction6.getNumeratorAsInt();
      bigFraction4.subtract(1123);
      bigFraction5.getDenominatorAsLong();
      BigFraction bigFraction7 = new BigFraction(1, 1123, 1123);
      bigFraction7.multiply(1L);
      BigFraction bigFraction8 = new BigFraction(0.37146608338798615);
      bigFraction8.toString();
      bigFraction8.bigDecimalValue(1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.multiply(1869);
      BigFraction bigFraction2 = new BigFraction((long) 1869);
      bigFraction0.equals(bigFraction2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction2.add(bigFraction1);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction0.pow((double) 1869);
      bigFraction1.pow(756L);
      BigInteger bigInteger2 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction1.subtract(bigInteger2);
      bigFraction4.subtract(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ZERO;
      bigFraction4.pow(bigInteger1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)96;
      BigInteger bigInteger4 = new BigInteger(byteArray0);
      bigFraction3.subtract(bigInteger4);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-0.3543441308487487));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      BigFraction bigFraction1 = bigFraction0.TWO.reciprocal();
      bigFraction1.ONE_HALF.abs();
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)12;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)12;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      bigFraction0.divide((-1859L));
      BigFraction bigFraction3 = bigFraction0.reciprocal();
      bigFraction3.ONE_THIRD.reduce();
      bigFraction2.getDenominator();
      bigFraction2.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ONE_FIFTH.abs();
      bigFraction0.floatValue();
      bigFraction0.ONE_HALF.multiply(350);
      bigFraction0.ONE_FIFTH.subtract((-1320));
      BigFraction bigFraction1 = bigFraction0.add(0L);
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.divide(bigInteger0);
      bigFraction1.ONE.equals(bigFraction2);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction1.subtract(bigInteger1);
      bigFraction3.subtract(bigInteger0);
      BigInteger bigInteger2 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-90), (-2145702980));
      int int0 = (-2357);
      bigFraction0.THREE_FIFTHS.getNumeratorAsInt();
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.multiply((-2357));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.TWO.subtract(bigInteger0);
      bigFraction2.THREE_FIFTHS.equals(bigFraction1);
      bigFraction1.ONE_QUARTER.getDenominatorAsInt();
      bigFraction1.TWO_QUARTERS.intValue();
      bigFraction0.ONE.divide(bigFraction2);
      int int1 = 2;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-2145702980), 2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.multiply(1869);
      BigFraction bigFraction2 = new BigFraction((long) 1869);
      bigFraction0.equals(bigFraction2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction2.add(bigFraction1);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigFraction3.bigDecimalValue();
      BigFraction bigFraction4 = new BigFraction(1541L, 2147483647L);
      BigFraction bigFraction5 = bigFraction0.negate();
      BigFraction bigFraction6 = bigFraction5.add((long) 1869);
      BigFraction.getReducedFraction((-657), 1869);
      bigFraction6.divide((long) (-657));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = new BigFraction((double) 3);
      bigFraction0.reciprocal();
      BigFraction bigFraction2 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction3 = bigFraction1.multiply((-779));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction4 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction5 = new BigFraction(3, 2193.467528076, (-2942));
      bigFraction5.getNumerator();
      bigFraction3.divide(1378);
      bigFraction0.getDenominator();
      bigFraction5.intValue();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(577.83596, 0);
      bigFraction0.pow((-824.0));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.divide(bigInteger0);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((-1631.628533916612), 6.327041633085173E-4, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -1,631.629 to fraction after 0 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1562.91359524434, 1562.91359524434, 1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.divide(1);
      bigFraction0.getDenominator();
      bigFraction1.reduce();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.multiply(2147412345);
      BigFraction bigFraction2 = new BigFraction((-878L));
      Object object0 = new Object();
      bigFraction1.equals(object0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction1.add(bigFraction2);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigFraction3.bigDecimalValue();
      BigFraction bigFraction4 = new BigFraction(2047L, 9218868437227405312L);
      bigFraction1.negate();
      bigFraction4.add(2L);
      BigFraction.getReducedFraction(0, 170);
      bigFraction2.divide((long) (-657));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = new BigFraction((double) 3);
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)12;
      bigFraction1.hashCode();
      bigFraction0.getField();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction0.subtract(487);
      BigFraction bigFraction4 = BigFraction.ZERO;
      bigFraction2.equals(bigFraction4);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction5 = bigFraction3.subtract(bigInteger0);
      bigFraction1.subtract(1);
      bigFraction3.pow(4417.0);
      // Undeclared exception!
      try { 
        bigFraction5.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.hashCode();
      bigFraction0.getField();
      bigFraction0.getNumeratorAsInt();
      bigFraction0.subtract(1);
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigFraction bigFraction2 = new BigFraction(1, 1);
      bigFraction1.equals(bigFraction2);
      BigFraction bigFraction3 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction3.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(577.83596, 0);
      bigFraction0.pow((-824.0));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.toString();
      bigFraction1.toString();
      bigFraction1.ONE_THIRD.reciprocal();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(0, 0);
      bigFraction2.add((long) 0);
      BigFraction bigFraction3 = BigFraction.ONE_HALF;
      bigFraction3.getDenominator();
      BigFraction bigFraction4 = BigFraction.ONE_HALF;
      bigFraction4.hashCode();
      BigFraction bigFraction5 = BigFraction.getReducedFraction(0, 0);
      bigFraction5.THREE_FIFTHS.hashCode();
      bigFraction5.percentageValue();
      bigFraction4.divide(3952090531849364496L);
      BigFraction.getReducedFraction((-1322), (-1));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(0L);
      BigFraction.getReducedFraction(1201, 1201);
      BigFraction bigFraction2 = bigFraction1.multiply(1201);
      BigFraction bigFraction3 = new BigFraction(1016L);
      bigFraction3.equals(bigFraction2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction3.add(bigFraction2);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigFraction3.bigDecimalValue();
      BigFraction bigFraction5 = new BigFraction(1016L, (long) 2428);
      bigFraction4.negate();
      bigFraction2.MINUS_ONE.add((long) 2428);
      BigFraction.getReducedFraction((-5981), (-657));
      bigFraction2.divide(9193070505571053912L);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ONE.percentageValue();
      bigFraction0.subtract(Integer.MAX_VALUE);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction0.THREE_FIFTHS.getNumeratorAsLong();
      bigFraction1.add((-118L));
      bigFraction0.divide(bigFraction1);
      bigFraction0.getNumeratorAsLong();
      bigFraction0.hashCode();
      // Undeclared exception!
      try { 
        bigFraction0.pow(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(577.83596, 0);
      bigFraction0.pow((-824.0));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.toString();
      bigFraction1.toString();
      bigFraction1.ONE_THIRD.reciprocal();
      bigFraction0.toString();
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((long) 0, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(0L);
      BigFraction.getReducedFraction(1201, 1201);
      BigFraction bigFraction2 = bigFraction1.multiply(1201);
      BigFraction bigFraction3 = new BigFraction(1016L);
      BigFraction.getReducedFraction((-782), 1201);
      Object object0 = new Object();
      BigFraction bigFraction4 = new BigFraction((double) 1201);
      bigFraction2.equals(object0);
      bigFraction1.compareTo(bigFraction3);
      bigFraction1.hashCode();
      BigFraction bigFraction5 = BigFraction.FOUR_FIFTHS;
      bigFraction5.getNumeratorAsLong();
      bigFraction3.abs();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      BigFraction bigFraction1 = bigFraction0.TWO.reciprocal();
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction1.divide(bigInteger0);
      bigFraction2.getNumerator();
      bigFraction1.divide((-14));
      BigFraction bigFraction3 = new BigFraction((-3362L));
      bigFraction3.getDenominator();
      bigFraction2.intValue();
      bigFraction2.add((int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(577.83596, 0);
      bigFraction0.pow((-824.0));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.toString();
      bigFraction1.toString();
      bigFraction1.ONE_THIRD.reciprocal();
      BigFraction bigFraction2 = new BigFraction(100663296L, 100663296L);
      bigFraction2.negate();
      BigFraction.getReducedFraction(100, 100);
      bigFraction1.multiply((-707L));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = new BigFraction((double) (-1));
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction3 = bigFraction2.reciprocal();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)12;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction4 = BigFraction.getReducedFraction((byte)12, 1207);
      bigFraction4.add(bigInteger1);
      bigFraction3.reciprocal();
      bigFraction2.reduce();
      bigFraction1.getDenominator();
      BigFraction bigFraction5 = new BigFraction(bigInteger0);
      bigFraction5.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(811.747416);
      bigFraction1.reciprocal();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.TWO_QUARTERS.divide(bigFraction1);
      BigFraction bigFraction2 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction3 = bigFraction2.add(bigInteger0);
      bigFraction0.reciprocal();
      BigFraction bigFraction4 = new BigFraction(1676L, (-820L));
      bigFraction4.reduce();
      bigFraction3.getDenominator();
      BigFraction bigFraction5 = new BigFraction(bigInteger0);
      bigFraction5.getNumeratorAsInt();
      bigFraction3.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = new BigFraction((double) 3);
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      bigFraction1.multiply((-779));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.divide(bigInteger0);
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction(1.7976931348623157E308, (-1876.342345376), 1139);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(6722166367014452318L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction0.ONE_THIRD.multiply(bigFraction1);
      bigFraction0.pow((double) 6722166367014452318L);
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.THREE_FIFTHS.reduce();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-96);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.ONE.subtract(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow((-2203));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = (-645);
      BigFraction bigFraction0 = new BigFraction(2696.919, 2696.919, (-645));
      BigFraction bigFraction1 = bigFraction0.ONE.pow(1482L);
      bigFraction1.ONE_QUARTER.compareTo(bigFraction0);
      BigFraction bigFraction2 = null;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1);
      BigFraction bigFraction1 = new BigFraction(4034L, 4034L);
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.multiply((-549));
      BigFraction bigFraction4 = bigFraction2.subtract(bigFraction0);
      bigFraction4.compareTo(bigFraction3);
      bigFraction1.compareTo(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction1.percentageValue();
      bigFraction0.add(98304L);
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction4 = bigFraction3.reduce();
      BigFraction bigFraction5 = BigFraction.MINUS_ONE;
      BigFraction bigFraction6 = bigFraction0.negate();
      bigFraction4.getNumeratorAsLong();
      BigFraction bigFraction7 = bigFraction0.subtract(bigFraction6);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = 629;
      BigFraction bigFraction8 = new BigFraction(629);
      BigFraction bigFraction9 = bigFraction8.subtract(bigInteger0);
      BigFraction bigFraction10 = bigFraction3.divide(bigInteger0);
      bigFraction7.getDenominatorAsLong();
      bigFraction7.multiply(bigFraction10);
      bigFraction9.floatValue();
      bigFraction6.multiply((-2147483645));
      bigFraction0.equals(bigFraction6);
      bigFraction8.add(bigInteger0);
      BigFraction bigFraction11 = BigFraction.ONE_THIRD;
      bigFraction2.add(bigFraction11);
      // Undeclared exception!
      try { 
        bigFraction11.TWO_QUARTERS.bigDecimalValue(629, 629);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      bigFraction0.ONE_THIRD.toString();
      byteArray0[2] = (byte)96;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger2);
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.multiply((-2159));
      bigFraction0.THREE_FIFTHS.percentageValue();
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.add((long) (-2159));
      BigFraction bigFraction3 = bigFraction0.TWO.reciprocal();
      bigFraction3.MINUS_ONE.reduce();
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      BigFraction bigFraction5 = bigFraction1.ONE_QUARTER.negate();
      bigFraction5.ONE_HALF.getNumeratorAsLong();
      BigFraction bigFraction6 = bigFraction3.ONE.subtract(bigFraction4);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.ONE_THIRD.add(31);
      BigFraction bigFraction7 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction8 = bigFraction7.THREE_FIFTHS.divide(bigInteger0);
      bigFraction8.MINUS_ONE.getDenominatorAsLong();
      BigFraction bigFraction9 = bigFraction7.multiply(bigFraction3);
      bigFraction9.THREE_FIFTHS.floatValue();
      BigFraction bigFraction10 = bigFraction2.multiply(3);
      bigFraction10.ZERO.floatValue();
      bigFraction7.equals(bigFraction9);
      BigFraction bigFraction11 = bigFraction9.add(bigInteger0);
      bigFraction7.ONE.add(bigFraction3);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction11.ONE.divide(bigInteger1);
      bigFraction4.multiply(bigFraction6);
      bigFraction3.bigDecimalValue();
      BigFraction.getReducedFraction((-2159), (-5981));
      bigFraction3.getDenominator();
      bigFraction8.hashCode();
      bigFraction8.percentageValue();
      bigFraction0.divide(4607182418800017408L);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.multiply((-2159));
      bigFraction0.THREE_FIFTHS.percentageValue();
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.add((long) (-2159));
      BigFraction bigFraction3 = bigFraction0.TWO.reciprocal();
      BigFraction bigFraction4 = bigFraction3.MINUS_ONE.reduce();
      BigFraction bigFraction5 = BigFraction.MINUS_ONE;
      BigFraction bigFraction6 = bigFraction1.ONE_QUARTER.negate();
      bigFraction6.ONE_HALF.getNumeratorAsLong();
      BigFraction bigFraction7 = bigFraction3.ONE.subtract(bigFraction5);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction8 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction9 = bigFraction8.THREE_FIFTHS.divide(bigInteger0);
      bigFraction9.MINUS_ONE.getDenominatorAsLong();
      BigFraction bigFraction10 = bigFraction8.multiply(bigFraction3);
      float float0 = bigFraction10.THREE_FIFTHS.floatValue();
      assertEquals(0.6F, float0, 0.01F);
      
      bigFraction2.multiply(3);
      boolean boolean0 = bigFraction8.equals(bigFraction10);
      assertFalse(boolean0);
      
      BigFraction bigFraction11 = bigFraction10.add(bigInteger0);
      BigFraction bigFraction12 = bigFraction8.ONE.add(bigFraction3);
      assertEquals((byte)1, bigFraction12.byteValue());
      
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction13 = bigFraction11.ONE.divide(bigInteger1);
      assertFalse(bigFraction13.equals((Object)bigFraction12));
      
      BigFraction bigFraction14 = bigFraction5.multiply(bigFraction7);
      assertEquals((short) (-2), bigFraction14.shortValue());
      assertFalse(bigFraction5.equals((Object)bigFraction13));
      assertTrue(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction6));
      
      bigFraction3.bigDecimalValue();
      BigFraction bigFraction15 = BigFraction.getReducedFraction((-2159), (-5981));
      assertEquals((short)0, bigFraction15.shortValue());
      
      bigFraction3.getDenominator();
      bigFraction9.hashCode();
      double double0 = bigFraction9.percentageValue();
      assertEquals(6.0, double0, 0.01);
      
      bigFraction0.divide(4607182418800017408L);
      assertFalse(bigFraction0.equals((Object)bigFraction11));
      
      bigFraction14.getNumerator();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.intValue();
      bigFraction0.abs();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 0);
      bigFraction1.negate();
      int int0 = 2061584302;
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(2061584302, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow((-26L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.TWO.subtract(bigInteger0);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(1201, 1201);
      Object object0 = new Object();
      BigFraction bigFraction3 = new BigFraction(1.7976931348623157E308);
      bigFraction0.equals(bigFraction3);
      bigFraction2.compareTo(bigFraction0);
      bigFraction0.hashCode();
      bigFraction1.getNumeratorAsLong();
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      BigFraction bigFraction1 = bigFraction0.TWO.reciprocal();
      byteArray0[1] = (byte) (-1);
      bigFraction0.getDenominatorAsLong();
      bigFraction1.percentageValue();
      bigFraction1.doubleValue();
      BigFraction bigFraction2 = bigFraction0.add((long) (byte)52);
      BigFraction bigFraction3 = bigFraction2.pow((int) (byte)12);
      bigFraction3.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction1.divide((int) (byte) (-1));
      BigFraction bigFraction5 = BigFraction.TWO;
      BigFraction bigFraction6 = BigFraction.MINUS_ONE;
      bigFraction6.divide(bigFraction3);
      bigFraction5.divide(bigFraction6);
      BigFraction bigFraction7 = BigFraction.ONE_FIFTH;
      bigFraction7.doubleValue();
      BigFraction bigFraction8 = new BigFraction((byte)12, 6442450944L);
      bigFraction8.multiply(bigFraction2);
      BigFraction bigFraction9 = BigFraction.TWO_QUARTERS;
      bigFraction9.subtract(bigFraction0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction10 = bigFraction4.multiply(bigInteger0);
      bigFraction7.add(675L);
      bigFraction10.getField();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1116, 9);
      bigFraction0.divide(bigFraction1);
      bigFraction1.reciprocal();
      BigFraction bigFraction2 = BigFraction.TWO_THIRDS;
      bigFraction2.multiply(478);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(2762, 1438);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      bigFraction0.TWO.reciprocal();
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)12;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      bigFraction1.THREE_QUARTERS.multiply(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = new BigFraction((double) 3);
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction2.add(bigInteger1);
      bigFraction3.reciprocal();
      bigFraction1.reduce();
      bigFraction1.getDenominator();
      bigFraction3.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byte byte0 = (byte) (-1);
      BigFraction bigFraction1 = bigFraction0.TWO.reciprocal();
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.multiply((-2159));
      bigFraction0.THREE_FIFTHS.percentageValue();
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.add((long) (-2159));
      BigFraction bigFraction3 = bigFraction0.TWO.reciprocal();
      bigFraction3.MINUS_ONE.reduce();
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      BigFraction bigFraction5 = bigFraction1.ONE_QUARTER.negate();
      bigFraction5.ONE_HALF.getNumeratorAsLong();
      BigFraction bigFraction6 = bigFraction3.ONE.subtract(bigFraction4);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction7 = bigFraction5.subtract(bigInteger0);
      BigFraction bigFraction8 = bigFraction7.divide(bigInteger0);
      bigFraction2.getDenominatorAsLong();
      bigFraction8.multiply(bigFraction6);
      bigFraction6.floatValue();
      BigFraction bigFraction9 = new BigFraction(1L, (long) (-2159));
      bigFraction9.multiply((-2762));
      bigFraction8.equals((Object) null);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction8.add(bigInteger1);
      BigFraction bigFraction10 = bigFraction5.add(bigFraction7);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigFraction.getReducedFraction((-2159), 1250);
      bigFraction8.THREE_QUARTERS.pow(bigInteger1);
      BigFraction bigFraction11 = bigFraction4.divide(bigInteger0);
      bigFraction9.multiply(bigFraction8);
      bigFraction2.bigDecimalValue();
      BigFraction.getReducedFraction((-2159), 5253);
      BigFraction bigFraction12 = BigFraction.MINUS_ONE;
      bigFraction12.getDenominator();
      bigFraction11.hashCode();
      bigFraction6.percentageValue();
      bigFraction10.divide(9007199254740990L);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.multiply((-2159));
      bigFraction0.THREE_FIFTHS.percentageValue();
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.add((long) (-2159));
      BigFraction bigFraction3 = bigFraction0.TWO.reciprocal();
      BigFraction bigFraction4 = bigFraction3.MINUS_ONE.reduce();
      BigFraction bigFraction5 = BigFraction.MINUS_ONE;
      BigFraction bigFraction6 = bigFraction1.ONE_QUARTER.negate();
      bigFraction6.ONE_HALF.getNumeratorAsLong();
      BigFraction bigFraction7 = bigFraction3.ONE.subtract(bigFraction5);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction8 = bigFraction5.subtract(bigInteger0);
      BigFraction bigFraction9 = bigFraction0.divide(bigInteger0);
      bigFraction9.getDenominatorAsLong();
      BigFraction bigFraction10 = bigFraction8.multiply(bigFraction9);
      bigFraction10.floatValue();
      BigFraction bigFraction11 = bigFraction3.multiply(244);
      Object object0 = new Object();
      bigFraction1.equals(object0);
      bigFraction2.add(bigInteger0);
      BigFraction bigFraction12 = bigFraction4.add(bigFraction7);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction9.divide(bigInteger1);
      bigFraction4.multiply(bigFraction5);
      bigFraction11.bigDecimalValue();
      BigFraction.getReducedFraction((-2159), (-866));
      bigFraction2.getDenominator();
      bigFraction1.hashCode();
      bigFraction12.percentageValue();
      bigFraction9.divide((long) (-5981));
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.TWO_QUARTERS.pow(0L);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1201, 1201);
      bigFraction1.FOUR_FIFTHS.negate();
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.multiply(1201);
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.subtract(bigFraction1);
      bigFraction3.FOUR_FIFTHS.compareTo(bigFraction0);
      bigFraction0.compareTo(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 5;
      BigFraction bigFraction0 = new BigFraction(5, 5);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.ONE_HALF.reciprocal();
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 1311;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1311, (-811));
      BigFraction bigFraction1 = bigFraction0.ONE.add((-811));
      bigFraction1.TWO.intValue();
      bigFraction1.THREE_FIFTHS.pow(4095L);
      BigFraction bigFraction2 = bigFraction0.divide((-811));
      bigFraction2.ONE_HALF.bigDecimalValue();
      int int1 = 1453;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.bigDecimalValue((-811), 1453);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3147));
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction1.ONE_HALF.add((-717L));
      bigFraction1.divide((-717L));
      BigFraction bigFraction3 = bigFraction1.divide((long) (-3147));
      BigFraction bigFraction4 = bigFraction3.reciprocal();
      bigFraction4.TWO_QUARTERS.subtract(bigFraction2);
      bigFraction1.MINUS_ONE.pow((-2965));
      BigFraction bigFraction5 = bigFraction0.add(2147483648L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)107;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction5.THREE_FIFTHS.pow(bigInteger0);
      bigFraction5.ONE.pow((-100));
      bigFraction3.abs();
      bigFraction0.floatValue();
      // Undeclared exception!
      try { 
        bigFraction3.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.abs();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.add(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.multiply(0L);
      bigFraction0.subtract(Integer.MAX_VALUE);
      bigFraction0.TWO.negate();
      BigFraction bigFraction4 = bigFraction2.divide(Integer.MAX_VALUE);
      bigFraction4.pow((double) 0L);
      bigFraction1.abs();
      bigFraction3.toString();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(2903);
      bigFraction1.toString();
      bigFraction0.compareTo(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.FOUR_FIFTHS.reduce();
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      try { 
        bigFraction1.ZERO.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.abs();
      int int0 = (-3);
      bigFraction0.pow((-3));
      byte[] byteArray0 = null;
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction1.THREE_QUARTERS.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 328;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 0.0, 328);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.ONE_HALF.subtract(1045);
      bigFraction0.intValue();
      bigFraction0.abs();
      bigFraction0.longValue();
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.bigDecimalValue(1045, (-1045));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3649.6357309322, 1206);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.bigDecimalValue((-1647), 1206);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow(2421L);
      bigFraction1.ONE_HALF.divide(4503599627370495L);
      bigFraction0.ONE.intValue();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(231L);
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.subtract(231L);
      bigFraction0.getDenominator();
      bigFraction0.pow(100L);
      bigFraction1.add(1211L);
      bigFraction0.getField();
      bigFraction1.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
      bigFraction0.FOUR_FIFTHS.getDenominatorAsInt();
      bigFraction1.longValue();
      bigFraction1.ONE_FIFTH.getNumeratorAsLong();
      bigFraction0.getDenominator();
      BigFraction bigFraction2 = bigFraction1.abs();
      BigFraction bigFraction3 = bigFraction2.abs();
      bigFraction2.THREE_QUARTERS.getField();
      BigFraction bigFraction4 = bigFraction2.subtract((-2106L));
      BigFraction bigFraction5 = bigFraction4.THREE_FIFTHS.multiply(5);
      bigFraction5.FOUR_FIFTHS.getField();
      bigFraction3.ONE_FIFTH.getNumeratorAsLong();
      bigFraction4.TWO.getDenominatorAsInt();
      bigFraction4.FOUR_FIFTHS.toString();
      bigFraction0.ZERO.getDenominatorAsLong();
      bigFraction4.equals(bigInteger0);
      BigFraction bigFraction6 = bigFraction0.abs();
      bigFraction3.divide(1L);
      bigFraction6.ONE_HALF.bigDecimalValue();
      bigFraction0.getNumeratorAsInt();
      bigFraction0.pow((double) (-2106L));
      bigFraction3.divide(1389);
      bigFraction0.multiply((long) 2);
      bigFraction0.intValue();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      int int0 = (-3248);
      bigInteger0.shiftLeft((-3248));
      bigInteger0.getLowestSetBit();
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.pow(bigInteger0);
      Object object0 = new Object();
      bigFraction0.TWO_QUARTERS.equals(object0);
      int int1 = 5;
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.multiply(bigFraction1);
      bigFraction0.THREE_FIFTHS.bigDecimalValue(5, 5);
      BigFraction bigFraction3 = bigFraction1.add(bigFraction2);
      bigFraction0.TWO_QUARTERS.equals("SH-CFNc*");
      bigFraction1.ONE_THIRD.multiply(bigFraction3);
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(577.83596, 0);
      bigFraction0.pow((-824.0));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.toString();
      bigFraction1.toString();
      bigFraction1.ONE_THIRD.reciprocal();
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      bigFraction2.TWO.reciprocal();
      bigFraction2.ZERO.multiply(478);
      bigFraction0.THREE_FIFTHS.bigDecimalValue(0, 0);
      bigFraction2.TWO_THIRDS.divide(bigInteger0);
      bigFraction1.getNumerator();
      // Undeclared exception!
      try { 
        bigFraction1.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.abs();
      bigFraction0.floatValue();
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.subtract((-1320));
      BigFraction bigFraction3 = bigFraction0.add(0L);
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction4.divide(bigInteger0);
      bigFraction3.ONE.equals(bigFraction4);
      BigFraction bigFraction5 = bigFraction1.THREE_FIFTHS.pow(1);
      bigFraction5.THREE_FIFTHS.compareTo(bigFraction2);
      bigFraction3.THREE_FIFTHS.add((-2535L));
      bigFraction1.ONE_THIRD.multiply(1079L);
      bigFraction3.TWO.getDenominatorAsLong();
      BigFraction bigFraction6 = bigFraction3.divide((-677L));
      bigFraction6.ONE_THIRD.getField();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction3.pow(bigInteger1);
      BigFraction bigFraction7 = bigFraction3.multiply(0);
      bigFraction0.ONE_FIFTH.equals(bigFraction3);
      bigFraction1.equals((Object) null);
      bigFraction3.multiply(475);
      bigFraction7.longValue();
      bigFraction0.pow((long) 475);
      bigFraction6.longValue();
      bigFraction7.getDenominatorAsInt();
      bigFraction0.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 1099;
      BigFraction bigFraction0 = new BigFraction(1099);
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.ONE_THIRD.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.THREE_FIFTHS.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction2.TWO.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.FOUR_FIFTHS.longValue();
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.multiply(322);
      BigFraction bigFraction2 = bigFraction1.TWO.divide(132L);
      bigInteger0.shortValueExact();
      bigFraction2.ONE_THIRD.toString();
      BigInteger bigInteger1 = bigInteger0.abs();
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.subtract(bigInteger1);
      bigFraction3.TWO_FIFTHS.subtract(bigInteger1);
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction4 = bigFraction0.divide((-1606));
      bigFraction2.intValue();
      bigFraction4.getDenominatorAsLong();
      bigFraction0.add(876);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.ONE_QUARTER.divide(106);
      bigFraction0.ONE_FIFTH.toString();
      BigFraction bigFraction1 = new BigFraction((-878L), (-1840L));
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1);
      BigFraction bigFraction1 = new BigFraction(4034L, 4034L);
      bigFraction0.ONE_FIFTH.subtract(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(345, 1109);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ONE.percentageValue();
      bigFraction0.subtract(Integer.MAX_VALUE);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction0.THREE_FIFTHS.getNumeratorAsLong();
      bigFraction0.add(1368L);
      bigFraction1.multiply((-97));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = new BigFraction(1562.91359524434, 1562.91359524434, 1);
      BigFraction bigFraction2 = bigFraction0.ONE.multiply(bigFraction1);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction0.negate();
      BigFraction bigFraction4 = bigFraction3.TWO_FIFTHS.negate();
      bigFraction4.FOUR_FIFTHS.longValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.multiply(bigInteger0);
      bigFraction2.getField();
      int int0 = (-1931);
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction((double) 3L, (-1931));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 3 to fraction (9,223,372,036,854,775,806/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      bigFraction0.TWO.reciprocal();
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)12;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.doubleValue();
      bigFraction0.TWO.intValue();
      bigFraction0.ONE_THIRD.percentageValue();
      bigFraction0.ONE_FIFTH.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.add(bigFraction0);
      bigFraction2.FOUR_FIFTHS.multiply(bigFraction0);
      bigFraction1.doubleValue();
      bigFraction0.ONE_QUARTER.getDenominatorAsLong();
      bigFraction0.percentageValue();
      bigFraction2.doubleValue();
      bigFraction2.ONE_THIRD.add((long) 2);
      bigFraction1.ZERO.pow(2);
      bigFraction2.ZERO.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction1.ZERO.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.multiply(bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction2.TWO_THIRDS.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.pow(0L);
      bigFraction1.THREE_QUARTERS.bigDecimalValue();
      bigFraction0.ONE.getDenominatorAsInt();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 3;
      BigFraction bigFraction0 = new BigFraction(0.0, 2553.42053031, 3);
      bigFraction0.ONE.pow((-5190.040895322411));
      int int1 = 1557;
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(1557, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.multiply(bigFraction1);
      bigFraction2.pow(0.0);
      bigFraction0.doubleValue();
      bigFraction2.FOUR_FIFTHS.abs();
      int int0 = 0;
      long long0 = 0L;
      // Undeclared exception!
      try { 
        bigFraction2.FOUR_FIFTHS.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.ONE_FIFTH.multiply((-2644281811660520851L));
      bigFraction0.ONE_FIFTH.getNumeratorAsInt();
      BigFraction bigFraction1 = bigFraction0.multiply(0L);
      bigFraction1.ONE_HALF.pow(170);
      bigFraction1.hashCode();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = (-1532L);
      BigFraction bigFraction0 = new BigFraction((-1532L));
      int int0 = 1480;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.bigDecimalValue(1480);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 2609;
      BigFraction bigFraction0 = new BigFraction(2609, 2609);
      BigFraction bigFraction1 = bigFraction0.add((-1L));
      BigFraction bigFraction2 = bigFraction1.ONE.negate();
      long long0 = 1L;
      bigFraction1.ONE_THIRD.divide((long) 2609);
      // Undeclared exception!
      try { 
        bigFraction2.ONE_QUARTER.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.THREE_QUARTERS.intValue();
      BigFraction bigFraction1 = bigFraction0.divide(7910884519577875640L);
      bigFraction1.ONE_QUARTER.getDenominatorAsLong();
      long long0 = 0L;
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.getNumeratorAsInt();
      double double0 = bigFraction0.doubleValue();
      assertEquals(0.75, double0, 0.01);
      
      bigFraction0.pow(3501.8707);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO.multiply(bigFraction0);
      assertEquals((byte)1, bigFraction2.byteValue());
      
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction0.negate();
      BigFraction bigFraction4 = bigFraction3.add((-1));
      double double1 = bigFraction0.pow(2312.43852567879);
      assertEquals(Double.NaN, double1, 0.01);
      
      BigFraction bigFraction5 = bigFraction3.multiply(3);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction6 = bigFraction5.ONE.multiply(bigInteger1);
      bigFraction6.ONE_FIFTH.pow(Double.NaN);
      bigFraction6.ONE_QUARTER.hashCode();
      bigFraction5.getField();
      assertEquals((byte) (-2), bigFraction5.byteValue());
      
      int int0 = bigFraction1.getNumeratorAsInt();
      assertEquals(1, int0);
      
      BigFraction bigFraction7 = bigFraction4.subtract((-1));
      BigFraction bigFraction8 = BigFraction.ZERO;
      bigFraction7.TWO_QUARTERS.equals(bigFraction8);
      assertTrue(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertEquals((short)0, bigFraction3.shortValue());
      
      BigFraction bigFraction9 = bigFraction0.subtract(bigInteger0);
      bigFraction9.TWO_FIFTHS.subtract((-1342));
      double double2 = bigFraction1.pow(0.0);
      assertEquals(1.0, double2, 0.01);
      
      bigFraction0.pow((long) 3);
      BigFraction bigFraction10 = bigFraction9.subtract(bigInteger1);
      bigFraction10.TWO.subtract(bigInteger0);
      bigFraction0.pow(bigInteger1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)96;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigFraction bigFraction11 = bigFraction8.subtract(bigInteger2);
      assertFalse(bigFraction11.equals((Object)bigFraction6));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.THREE_FIFTHS.bigDecimalValue();
      int int0 = (-1);
      int int1 = (-155);
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.bigDecimalValue((-1), (-155));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(632L, 632L);
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = (-1767);
      BigFraction bigFraction0 = new BigFraction((-2323.05383), (-1767));
      bigFraction0.ONE_FIFTH.reciprocal();
      int int1 = (-1565);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1565));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = new BigFraction(4570.5480444, 0);
      bigFraction0.ONE_FIFTH.getField();
      bigFraction0.FOUR_FIFTHS.pow(4570.5480444);
      bigFraction0.ONE_FIFTH.getNumeratorAsInt();
      bigFraction0.pow((double) 0);
      bigFraction0.multiply((long) 0);
      BigFraction bigFraction1 = bigFraction0.divide(2147483647L);
      // Undeclared exception!
      try { 
        bigFraction1.ZERO.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.intValue();
      bigFraction0.abs();
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(5253, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.ZERO.add(2373);
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.subtract((-1170));
      BigFraction bigFraction3 = bigFraction0.add(bigFraction1);
      assertEquals((short)2373, bigFraction3.shortValue());
      
      bigFraction1.ONE.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction0.divide((-3078L));
      bigFraction4.TWO.intValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.TWO.add(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction5 = bigFraction1.pow(bigInteger1);
      int int0 = bigFraction5.FOUR_FIFTHS.compareTo(bigFraction4);
      assertEquals(1, int0);
      
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction6 = bigFraction0.abs();
      bigFraction6.ONE_FIFTH.add(2373);
      bigFraction1.getDenominatorAsLong();
      bigFraction6.multiply((long) 2373);
      int int1 = bigFraction4.getDenominatorAsInt();
      assertEquals(7695, int1);
      
      bigFraction2.hashCode();
      bigFraction2.hashCode();
      bigFraction4.TWO_QUARTERS.divide(1767);
      BigFraction bigFraction7 = bigFraction0.ONE_HALF.add((-1170));
      double double0 = bigFraction0.pow((double) (-1170));
      assertEquals(Double.NaN, double0, 0.01);
      
      bigFraction5.bigDecimalValue(1);
      double double1 = bigFraction2.doubleValue();
      assertEquals(1170.75, double1, 0.01);
      
      bigFraction6.getDenominatorAsLong();
      bigFraction0.equals("<Eze`KY8N");
      BigFraction bigFraction8 = bigFraction7.add(bigInteger0);
      assertTrue(bigFraction8.equals((Object)bigFraction7));
      assertSame(bigFraction0, bigFraction6);
  }
}
