* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.math3.fraction.BigFraction
* Starting Client-0
* Connecting to master process on port 2196
* Analyzing classpath: 
  - subjects/buggy-versions/Math-1/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math3.fraction.BigFraction
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1792
* Using seed 215172320
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 621 / 1792
* Search finished after 604s and 206 generations, 58425 statements, best individual has fitness: 79.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 05:32:38.856 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 100%
* Total number of goals: 214
* Number of covered goals: 213
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 99%
* Total number of goals: 133
* Number of covered goals: 132
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 34
* Number of covered goals: 34
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 99%
* Total number of goals: 963
* Number of covered goals: 951
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 87%
* Total number of goals: 243
* Number of covered goals: 211
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 53
* Number of covered goals: 53
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 53
* Number of covered goals: 53
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 99%
* Total number of goals: 133
* Number of covered goals: 132
* Generated 112 tests with total length 1450
* Resulting test suite's coverage: 92% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 05:33:26.873 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.79575% of time used, but only 30/112 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 34%
[MASTER] 05:33:42.383 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Compiling and checking tests
[MASTER] 05:33:50.155 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_104_1629264829127/org/apache/commons/math3/fraction/BigFraction_104_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_104_1629264829127/org/apache/commons/math3/fraction/BigFraction_104_tmp__ESTest_scaffolding.java]]
[MASTER] 05:33:50.155 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Math-1/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Math-1/target/classes
[MASTER] 05:33:50.155 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Math-1/target/classes
[MASTER] 05:33:50.166 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   variable bigFraction5
  location: class org.apache.commons.math3.fraction.BigFraction_104_tmp__ESTest: 124
[MASTER] 05:33:50.172 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_104_1629264829127/org/apache/commons/math3/fraction/BigFraction_104_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Aug 18 05:33:50 GMT 2021
4:  */
5: 
6: package org.apache.commons.math3.fraction;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.apache.commons.math3.fraction.BigFraction;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class BigFraction_104_tmp__ESTest extends BigFraction_104_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       BigFraction bigFraction0 = new BigFraction(8.526512829121202E-14);
22:       assertEquals((short)0, bigFraction0.shortValue());
23:       assertEquals((byte)0, bigFraction0.byteValue());
24:       assertNotNull(bigFraction0);
25:       
26:       BigFraction bigFraction1 = bigFraction0.reciprocal();
27:       assertNotSame(bigFraction0, bigFraction1);
28:       assertNotSame(bigFraction1, bigFraction0);
29:       assertEquals((short)0, bigFraction0.shortValue());
30:       assertEquals((byte)0, bigFraction0.byteValue());
31:       assertEquals((short) (-21846), bigFraction1.shortValue());
32:       assertEquals((byte) (-86), bigFraction1.byteValue());
33:       assertNotNull(bigFraction1);
34:       assertFalse(bigFraction1.equals((Object)bigFraction0));
35:       
36:       BigFraction bigFraction2 = bigFraction1.ONE_THIRD.multiply(10064L);
37:       assertNotSame(bigFraction0, bigFraction1);
38:       assertNotSame(bigFraction0, bigFraction2);
39:       assertNotSame(bigFraction1, bigFraction0);
40:       assertNotSame(bigFraction1, bigFraction2);
41:       assertNotSame(bigFraction2, bigFraction1);
42:       assertNotSame(bigFraction2, bigFraction0);
43:       assertEquals((short)0, bigFraction0.shortValue());
44:       assertEquals((byte)0, bigFraction0.byteValue());
45:       assertEquals((short) (-21846), bigFraction1.shortValue());
46:       assertEquals((byte) (-86), bigFraction1.byteValue());
47:       assertEquals((byte)26, bigFraction2.byteValue());
48:       assertEquals((short)3354, bigFraction2.shortValue());
49:       assertNotNull(bigFraction2);
50:       assertFalse(bigFraction0.equals((Object)bigFraction1));
51:       assertFalse(bigFraction1.equals((Object)bigFraction0));
52:       assertFalse(bigFraction2.equals((Object)bigFraction1));
53:       assertFalse(bigFraction2.equals((Object)bigFraction0));
54:       
55:       BigFraction bigFraction3 = bigFraction1.pow((-2598L));
56:       assertNotSame(bigFraction0, bigFraction3);
57:       assertNotSame(bigFraction0, bigFraction1);
58:       assertNotSame(bigFraction0, bigFraction2);
59:       assertNotSame(bigFraction1, bigFraction0);
60:       assertNotSame(bigFraction1, bigFraction2);
61:       assertNotSame(bigFraction1, bigFraction3);
62:       assertNotSame(bigFraction3, bigFraction1);
63:       assertNotSame(bigFraction3, bigFraction2);
64:       assertNotSame(bigFraction3, bigFraction0);
65:       assertEquals((short)0, bigFraction0.shortValue());
66:       assertEquals((byte)0, bigFraction0.byteValue());
67:       assertEquals((short) (-21846), bigFraction1.shortValue());
68:       assertEquals((byte) (-86), bigFraction1.byteValue());
69:       assertEquals((short)0, bigFraction3.shortValue());
70:       assertEquals((byte)0, bigFraction3.byteValue());
71:       assertNotNull(bigFraction3);
72:       assertFalse(bigFraction0.equals((Object)bigFraction1));
73:       assertFalse(bigFraction0.equals((Object)bigFraction2));
74:       assertFalse(bigFraction1.equals((Object)bigFraction0));
75:       assertFalse(bigFraction1.equals((Object)bigFraction2));
76:       assertFalse(bigFraction3.equals((Object)bigFraction1));
77:       assertFalse(bigFraction3.equals((Object)bigFraction2));
78:       assertFalse(bigFraction3.equals((Object)bigFraction0));
79:       
80:       double double0 = bigFraction2.TWO_QUARTERS.percentageValue();
81:       assertEquals(50.0, double0, 0.01);
82:       assertNotSame(bigFraction0, bigFraction3);
83:       assertNotSame(bigFraction0, bigFraction1);
84:       assertNotSame(bigFraction0, bigFraction2);
85:       assertNotSame(bigFraction1, bigFraction0);
86:       assertNotSame(bigFraction1, bigFraction2);
87:       assertNotSame(bigFraction1, bigFraction3);
88:       assertNotSame(bigFraction2, bigFraction1);
89:       assertNotSame(bigFraction2, bigFraction3);
90:       assertNotSame(bigFraction2, bigFraction0);
91:       assertEquals((short)0, bigFraction0.shortValue());
92:       assertEquals((byte)0, bigFraction0.byteValue());
93:       assertEquals((short) (-21846), bigFraction1.shortValue());
94:       assertEquals((byte) (-86), bigFraction1.byteValue());
95:       assertEquals((byte)26, bigFraction2.byteValue());
96:       assertEquals((short)3354, bigFraction2.shortValue());
97:       assertFalse(bigFraction0.equals((Object)bigFraction3));
98:       assertFalse(bigFraction0.equals((Object)bigFraction1));
99:       assertFalse(bigFraction0.equals((Object)bigFraction2));
100:       assertFalse(bigFraction1.equals((Object)bigFraction0));
101:       assertFalse(bigFraction1.equals((Object)bigFraction2));
102:       assertFalse(bigFraction1.equals((Object)bigFraction3));
103:       assertFalse(bigFraction2.equals((Object)bigFraction1));
104:       assertFalse(bigFraction2.equals((Object)bigFraction3));
105:       assertFalse(bigFraction2.equals((Object)bigFraction0));
106:       
107:       BigFraction bigFraction4 = new BigFraction((-2598L));
108:       assertEquals((short) (-2598), bigFraction4.shortValue());
109:       assertEquals((byte) (-38), bigFraction4.byteValue());
110:       assertNotNull(bigFraction4);
111:       assertFalse(bigFraction4.equals((Object)bigFraction3));
112:       assertFalse(bigFraction4.equals((Object)bigFraction0));
113:       assertFalse(bigFraction4.equals((Object)bigFraction2));
114:       assertFalse(bigFraction4.equals((Object)bigFraction1));
115:       
116:       long long0 = bigFraction4.getDenominatorAsLong();
117:       assertEquals(1L, long0);
118:       assertNotSame(bigFraction4, bigFraction3);
119:       assertNotSame(bigFraction4, bigFraction0);
120:       assertNotSame(bigFraction4, bigFraction2);
121:       assertNotSame(bigFraction4, bigFraction1);
122:       assertEquals((short) (-2598), bigFraction4.shortValue());
123:       assertEquals((byte) (-38), bigFraction4.byteValue());
124:       assertNotNull(bigFraction5);
125:       assertFalse(bigFraction4.equals((Object)bigFraction3));
126:       assertFalse(bigFraction4.equals((Object)bigFraction0));
127:       assertFalse(bigFraction4.equals((Object)bigFraction2));
128:       assertFalse(bigFraction4.equals((Object)bigFraction1));
129:       
130:       BigFraction bigFraction6 = bigFraction0.reduce();
131:       assertNotSame(bigFraction0, bigFraction3);
132:       assertNotSame(bigFraction0, bigFraction6);
133:       assertNotSame(bigFraction0, bigFraction4);
134:       assertNotSame(bigFraction0, bigFraction1);
135:       assertNotSame(bigFraction0, bigFraction2);
136:       assertNotSame(bigFraction6, bigFraction3);
137:       assertNotSame(bigFraction6, bigFraction0);
138:       assertNotSame(bigFraction6, bigFraction1);
139:       assertNotSame(bigFraction6, bigFraction4);
140:       assertNotSame(bigFraction6, bigFraction2);
141:       assertEquals((short)0, bigFraction0.shortValue());
142:       assertEquals((byte)0, bigFraction0.byteValue());
143:       assertEquals((byte)0, bigFraction6.byteValue());
144:       assertEquals((short)0, bigFraction6.shortValue());
145:       assertNotNull(bigFraction6);
146:       assertFalse(bigFraction0.equals((Object)bigFraction3));
147:       assertFalse(bigFraction0.equals((Object)bigFraction4));
148:       assertFalse(bigFraction0.equals((Object)bigFraction1));
149:       assertFalse(bigFraction0.equals((Object)bigFraction2));
150:       assertFalse(bigFraction6.equals((Object)bigFraction3));
151:       assertFalse(bigFraction6.equals((Object)bigFraction1));
152:       assertTrue(bigFraction6.equals((Object)bigFraction0));
153:       assertFalse(bigFraction6.equals((Object)bigFraction4));
154:       assertFalse(bigFraction6.equals((Object)bigFraction2));
155:       
156:       BigFraction bigFraction7 = bigFraction2.subtract(bigFraction3);
157:       int int0 = Integer.MAX_VALUE;
158:       bigFraction1.multiply((-403));
159:       bigFraction7.doubleValue();
160:       int int1 = 7;
161:       bigFraction3.add((-403));
162:       int int2 = 104240510;
163:       // Undeclared exception!
164:       try { 
165:         bigFraction2.bigDecimalValue(104240510, 2141905768);
166:         fail("Expecting exception: IllegalArgumentException");
167:       
168:       } catch(IllegalArgumentException e) {
169:          //
170:          // Invalid rounding mode
171:          //
172:          verifyException("java.math.BigDecimal", e);
173:       }
174:   }
175: }
RegularFileObject[/tmp/EvoSuite_104_1629264829127/org/apache/commons/math3/fraction/BigFraction_104_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Aug 18 05:33:50 GMT 2021
5:  */
6: 
7: package org.apache.commons.math3.fraction;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class BigFraction_104_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.math3.fraction.BigFraction"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(BigFraction_104_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "org.apache.commons.math3.fraction.BigFractionField",
70:       "org.apache.commons.math3.exception.util.ExceptionContextProvider",
71:       "org.apache.commons.math3.fraction.BigFraction",
72:       "org.apache.commons.math3.exception.util.ArgUtils",
73:       "org.apache.commons.math3.exception.MathArithmeticException",
74:       "org.apache.commons.math3.exception.NumberIsTooSmallException",
75:       "org.apache.commons.math3.util.FastMath$ExpIntTable",
76:       "org.apache.commons.math3.util.FastMath$lnMant",
77:       "org.apache.commons.math3.exception.NotPositiveException",
78:       "org.apache.commons.math3.exception.MathIllegalStateException",
79:       "org.apache.commons.math3.util.FastMath$ExpFracTable",
80:       "org.apache.commons.math3.exception.MathIllegalArgumentException",
81:       "org.apache.commons.math3.util.MathUtils",
82:       "org.apache.commons.math3.exception.MathIllegalNumberException",
83:       "org.apache.commons.math3.exception.util.LocalizedFormats",
84:       "org.apache.commons.math3.exception.ZeroException",
85:       "org.apache.commons.math3.exception.ConvergenceException",
86:       "org.apache.commons.math3.util.FastMath",
87:       "org.apache.commons.math3.FieldElement",
88:       "org.apache.commons.math3.exception.util.Localizable",
89:       "org.apache.commons.math3.fraction.FractionConversionException",
90:       "org.apache.commons.math3.util.ArithmeticUtils",
91:       "org.apache.commons.math3.exception.util.ExceptionContext",
92:       "org.apache.commons.math3.exception.NullArgumentException",
93:       "org.apache.commons.math3.Field",
94:       "org.apache.commons.math3.exception.NotFiniteNumberException",
95:       "org.apache.commons.math3.util.FastMathLiteralArrays",
96:       "org.apache.commons.math3.fraction.BigFractionField$LazyHolder"
97:     );
98:   } 
99: 
100:   private static void resetClasses() {
101:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(BigFraction_104_tmp__ESTest_scaffolding.class.getClassLoader()); 
102: 
103:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
104:       "org.apache.commons.math3.exception.util.LocalizedFormats",
105:       "org.apache.commons.math3.util.MathUtils",
106:       "org.apache.commons.math3.fraction.BigFraction",
107:       "org.apache.commons.math3.util.FastMath",
108:       "org.apache.commons.math3.util.FastMathLiteralArrays",
109:       "org.apache.commons.math3.util.FastMath$lnMant",
110:       "org.apache.commons.math3.util.FastMath$ExpIntTable",
111:       "org.apache.commons.math3.util.FastMath$ExpFracTable",
112:       "org.apache.commons.math3.fraction.BigFractionField",
113:       "org.apache.commons.math3.fraction.BigFractionField$LazyHolder",
114:       "org.apache.commons.math3.util.ArithmeticUtils",
115:       "org.apache.commons.math3.exception.MathArithmeticException",
116:       "org.apache.commons.math3.exception.util.ExceptionContext",
117:       "org.apache.commons.math3.exception.util.ArgUtils",
118:       "org.apache.commons.math3.exception.MathIllegalStateException",
119:       "org.apache.commons.math3.exception.ConvergenceException",
120:       "org.apache.commons.math3.fraction.FractionConversionException",
121:       "org.apache.commons.math3.exception.MathIllegalArgumentException",
122:       "org.apache.commons.math3.exception.NullArgumentException",
123:       "org.apache.commons.math3.exception.MathIllegalNumberException",
124:       "org.apache.commons.math3.exception.ZeroException",
125:       "org.apache.commons.math3.exception.NumberIsTooSmallException",
126:       "org.apache.commons.math3.exception.NotPositiveException"
127:     );
128:   }
129: }

[MASTER] 05:33:50.175 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
BigFraction bigFraction0 = new BigFraction(8.526512829121202E-14);
assertEquals((short)0, bigFraction0.shortValue());
assertEquals((byte)0, bigFraction0.byteValue());
assertNotNull(bigFraction0);

BigFraction bigFraction1 = bigFraction0.reciprocal();
assertNotSame(bigFraction0, bigFraction1);
assertNotSame(bigFraction1, bigFraction0);
assertEquals((short)0, bigFraction0.shortValue());
assertEquals((byte)0, bigFraction0.byteValue());
assertEquals((short) (-21846), bigFraction1.shortValue());
assertEquals((byte) (-86), bigFraction1.byteValue());
assertNotNull(bigFraction1);
assertFalse(bigFraction1.equals((Object)bigFraction0));

BigFraction bigFraction2 = bigFraction1.ONE_THIRD.multiply(10064L);
assertNotSame(bigFraction0, bigFraction1);
assertNotSame(bigFraction0, bigFraction2);
assertNotSame(bigFraction1, bigFraction0);
assertNotSame(bigFraction1, bigFraction2);
assertNotSame(bigFraction2, bigFraction1);
assertNotSame(bigFraction2, bigFraction0);
assertEquals((short)0, bigFraction0.shortValue());
assertEquals((byte)0, bigFraction0.byteValue());
assertEquals((short) (-21846), bigFraction1.shortValue());
assertEquals((byte) (-86), bigFraction1.byteValue());
assertEquals((byte)26, bigFraction2.byteValue());
assertEquals((short)3354, bigFraction2.shortValue());
assertNotNull(bigFraction2);
assertFalse(bigFraction0.equals((Object)bigFraction1));
assertFalse(bigFraction1.equals((Object)bigFraction0));
assertFalse(bigFraction2.equals((Object)bigFraction1));
assertFalse(bigFraction2.equals((Object)bigFraction0));

BigFraction bigFraction3 = bigFraction1.pow((-2598L));
assertNotSame(bigFraction0, bigFraction3);
assertNotSame(bigFraction0, bigFraction1);
assertNotSame(bigFraction0, bigFraction2);
assertNotSame(bigFraction1, bigFraction0);
assertNotSame(bigFraction1, bigFraction2);
assertNotSame(bigFraction1, bigFraction3);
assertNotSame(bigFraction3, bigFraction1);
assertNotSame(bigFraction3, bigFraction2);
assertNotSame(bigFraction3, bigFraction0);
assertEquals((short)0, bigFraction0.shortValue());
assertEquals((byte)0, bigFraction0.byteValue());
assertEquals((short) (-21846), bigFraction1.shortValue());
assertEquals((byte) (-86), bigFraction1.byteValue());
assertEquals((short)0, bigFraction3.shortValue());
assertEquals((byte)0, bigFraction3.byteValue());
assertNotNull(bigFraction3);
assertFalse(bigFraction0.equals((Object)bigFraction1));
assertFalse(bigFraction0.equals((Object)bigFraction2));
assertFalse(bigFraction1.equals((Object)bigFraction0));
assertFalse(bigFraction1.equals((Object)bigFraction2));
assertFalse(bigFraction3.equals((Object)bigFraction1));
assertFalse(bigFraction3.equals((Object)bigFraction2));
assertFalse(bigFraction3.equals((Object)bigFraction0));

double double0 = bigFraction2.TWO_QUARTERS.percentageValue();
assertEquals(50.0, double0, 0.01);
assertNotSame(bigFraction0, bigFraction3);
assertNotSame(bigFraction0, bigFraction1);
assertNotSame(bigFraction0, bigFraction2);
assertNotSame(bigFraction1, bigFraction0);
assertNotSame(bigFraction1, bigFraction2);
assertNotSame(bigFraction1, bigFraction3);
assertNotSame(bigFraction2, bigFraction1);
assertNotSame(bigFraction2, bigFraction3);
assertNotSame(bigFraction2, bigFraction0);
assertEquals((short)0, bigFraction0.shortValue());
assertEquals((byte)0, bigFraction0.byteValue());
assertEquals((short) (-21846), bigFraction1.shortValue());
assertEquals((byte) (-86), bigFraction1.byteValue());
assertEquals((byte)26, bigFraction2.byteValue());
assertEquals((short)3354, bigFraction2.shortValue());
assertFalse(bigFraction0.equals((Object)bigFraction3));
assertFalse(bigFraction0.equals((Object)bigFraction1));
assertFalse(bigFraction0.equals((Object)bigFraction2));
assertFalse(bigFraction1.equals((Object)bigFraction0));
assertFalse(bigFraction1.equals((Object)bigFraction2));
assertFalse(bigFraction1.equals((Object)bigFraction3));
assertFalse(bigFraction2.equals((Object)bigFraction1));
assertFalse(bigFraction2.equals((Object)bigFraction3));
assertFalse(bigFraction2.equals((Object)bigFraction0));

BigFraction bigFraction4 = new BigFraction((-2598L));
assertEquals((short) (-2598), bigFraction4.shortValue());
assertEquals((byte) (-38), bigFraction4.byteValue());
assertNotNull(bigFraction4);
assertFalse(bigFraction4.equals((Object)bigFraction3));
assertFalse(bigFraction4.equals((Object)bigFraction0));
assertFalse(bigFraction4.equals((Object)bigFraction2));
assertFalse(bigFraction4.equals((Object)bigFraction1));

long long0 = bigFraction4.getDenominatorAsLong();
assertEquals(1L, long0);
assertNotSame(bigFraction4, bigFraction3);
assertNotSame(bigFraction4, bigFraction0);
assertNotSame(bigFraction4, bigFraction2);
assertNotSame(bigFraction4, bigFraction1);
assertEquals((short) (-2598), bigFraction4.shortValue());
assertEquals((byte) (-38), bigFraction4.byteValue());
assertNotNull(bigFraction5);
assertFalse(bigFraction4.equals((Object)bigFraction3));
assertFalse(bigFraction4.equals((Object)bigFraction0));
assertFalse(bigFraction4.equals((Object)bigFraction2));
assertFalse(bigFraction4.equals((Object)bigFraction1));

BigFraction bigFraction6 = bigFraction0.reduce();
assertNotSame(bigFraction0, bigFraction3);
assertNotSame(bigFraction0, bigFraction6);
assertNotSame(bigFraction0, bigFraction4);
assertNotSame(bigFraction0, bigFraction1);
assertNotSame(bigFraction0, bigFraction2);
assertNotSame(bigFraction6, bigFraction3);
assertNotSame(bigFraction6, bigFraction0);
assertNotSame(bigFraction6, bigFraction1);
assertNotSame(bigFraction6, bigFraction4);
assertNotSame(bigFraction6, bigFraction2);
assertEquals((short)0, bigFraction0.shortValue());
assertEquals((byte)0, bigFraction0.byteValue());
assertEquals((byte)0, bigFraction6.byteValue());
assertEquals((short)0, bigFraction6.shortValue());
assertNotNull(bigFraction6);
assertFalse(bigFraction0.equals((Object)bigFraction3));
assertFalse(bigFraction0.equals((Object)bigFraction4));
assertFalse(bigFraction0.equals((Object)bigFraction1));
assertFalse(bigFraction0.equals((Object)bigFraction2));
assertFalse(bigFraction6.equals((Object)bigFraction3));
assertFalse(bigFraction6.equals((Object)bigFraction1));
assertTrue(bigFraction6.equals((Object)bigFraction0));
assertFalse(bigFraction6.equals((Object)bigFraction4));
assertFalse(bigFraction6.equals((Object)bigFraction2));

BigFraction bigFraction7 = bigFraction2.subtract(bigFraction3);
int int0 = Integer.MAX_VALUE;
bigFraction1.multiply((-403));
bigFraction7.doubleValue();
int int1 = 7;
bigFraction3.add((-403));
int int2 = 104240510;
bigFraction2.bigDecimalValue(104240510, 2141905768);

[MASTER] 05:33:50.789 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:51.108 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:51.341 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:51.484 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:51.699 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:51.822 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:51.920 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:52.043 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:52.230 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:52.693 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:52.820 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:52.925 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:53.055 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:53.175 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:53.300 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:53.489 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:53.628 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:53.769 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:53.877 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:54.014 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:54.135 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:54.232 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:54.350 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:54.460 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:54.580 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:54.718 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:54.889 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:55.020 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:55.121 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:55.215 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:55.327 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:55.457 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:55.625 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:55.750 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:55.884 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:56.090 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:56.209 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:56.389 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:56.562 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:56.670 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:56.835 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:56.946 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:57.054 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:57.148 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:57.232 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:57.336 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:57.431 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:57.674 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:57.762 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:57.863 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:57.970 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:58.072 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:58.192 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:58.301 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:58.386 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:58.501 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:58.695 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:58.836 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:58.904 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:58.975 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:59.054 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:59.204 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:59.317 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:59.411 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:59.728 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:59.825 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:33:59.905 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:00.089 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:00.254 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:00.379 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:00.442 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:00.506 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:00.587 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:00.707 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:00.836 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:00.928 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:01.010 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:01.094 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:01.164 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:01.261 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:01.334 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:01.398 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:01.475 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:01.562 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:01.660 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:01.746 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:01.841 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:01.927 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:02.034 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:02.175 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:02.281 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:02.350 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:02.417 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:02.494 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:02.567 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:02.633 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:02.700 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:02.760 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:02.861 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:02.930 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:03.047 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:03.115 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:03.202 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:04.177 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:04.262 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:04.376 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:04.471 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:04.571 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:04.661 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:04.765 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:04.859 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:09.326 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 05:34:12.038 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'BigFraction_ESTest' to results/Math-1/org.apache.commons.math3.fraction.BigFraction/BBC-F0-50/tests/27
* Done!

* Computation finished
