/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:55:20 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3987L));
      double double0 = bigFraction0.ONE_HALF.pow(8.622937525615271E-4);
      assertEquals((byte)109, bigFraction0.byteValue());
      assertEquals(0.999402482101559, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.pow(0);
      assertEquals((byte)1, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2988, 2988);
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertEquals((short)2, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.abs();
      assertSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals((short) (-1), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = new BigFraction(5);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals((short) (-5), bigFraction2.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.multiply(1283L);
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      assertEquals((byte)2, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4375.2991), 4903.9638465710905, 37);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)33;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.subtract(bigInteger0);
      assertEquals((short) (-32), bigFraction1.shortValue());
      assertEquals((short) (-4376), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3987L));
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.subtract((-3987L));
      assertEquals((byte) (-109), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.subtract(0L);
      assertEquals((short)0, bigFraction1.shortValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.subtract(1293027789207928L);
      assertEquals((short) (-31095), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.subtract(2022);
      assertEquals((byte)27, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 1);
      BigFraction bigFraction1 = bigFraction0.subtract(1);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.subtract((-394));
      assertEquals((byte) (-118), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3987L));
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertEquals((byte)109, bigFraction1.byteValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(0L);
      BigFraction bigFraction2 = bigFraction1.negate();
      BigFraction bigFraction3 = bigFraction2.reduce();
      assertEquals((byte) (-1), bigFraction3.byteValue());
      assertTrue(bigFraction3.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1019.7136);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)1019, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.divide((-3382L));
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      assertEquals((byte) (-14), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(bigInteger0);
      assertEquals((byte) (-1), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3187));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((byte) (-55), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow((-95L));
      assertEquals((byte) (-52), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(770L, 28L);
      BigFraction bigFraction1 = bigFraction0.pow(2294);
      assertEquals((byte) (-41), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9007199254739900L);
      double double0 = bigFraction0.pow((-1071.68817810381));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.divide((-5213L));
      double double0 = bigFraction1.pow((double) (-5213L));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      double double0 = bigFraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4612.02));
      BigFraction bigFraction1 = bigFraction0.negate();
      assertEquals((short)4612, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)1, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(218, 2166.2752034311343, 0);
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertEquals((byte) (-38), bigFraction0.byteValue());
      assertEquals((short) (-18012), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.multiply(bigInteger0);
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.ONE_THIRD.subtract(bigFraction1);
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.multiply((long) 0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      BigFraction bigFraction1 = bigFraction0.multiply(1355);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1258L), 1L);
      bigFraction0.ONE.longValue();
      assertEquals((short) (-1258), bigFraction0.shortValue());
      assertEquals((byte)22, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3987L));
      long long0 = bigFraction0.longValue();
      assertEquals((-3987L), long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2722), 1075);
      int int0 = bigFraction0.intValue();
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-667), 340);
      assertEquals((byte) (-1), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      long long0 = bigFraction0.ONE_HALF.getNumeratorAsLong();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3987L));
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals((-3987L), long0);
      assertEquals((short) (-3987), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2988, 2988);
      bigFraction0.ZERO.getNumeratorAsInt();
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(7.668285339852476E-13);
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals((-673721929), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4612.02));
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((short) (-4612), bigFraction0.shortValue());
      assertEquals((byte) (-123), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.multiply(1283L);
      BigFraction bigFraction2 = bigFraction1.pow((-1607L));
      long long0 = bigFraction2.getDenominatorAsLong();
      assertEquals((short)1283, bigFraction1.shortValue());
      assertEquals((-3476017532521252213L), long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1019.7136);
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals((short)1019, bigFraction0.shortValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.6857960224151611);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(4, 2147483646);
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      int int0 = bigFraction2.getDenominatorAsInt();
      assertEquals((-4194304), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1773);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1773, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(256, 1175);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((byte) (-105), bigInteger0.byteValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      float float0 = bigFraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      float float0 = bigFraction0.floatValue();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      double double0 = bigFraction0.ZERO.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      double double0 = bigFraction0.doubleValue();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3987L));
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertEquals((short) (-3987), bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(0L);
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.divide(bigFraction2);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte) (-5), bigFraction3.byteValue());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2988, 2988);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = new BigFraction((-3340.530569));
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.divide((-880L));
      assertEquals((byte)3, bigFraction3.byteValue());
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte) (-12), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3987L));
      BigFraction bigFraction1 = bigFraction0.divide(1337L);
      assertEquals((byte) (-2), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(770L, 28L);
      BigFraction bigFraction1 = bigFraction0.divide(27);
      assertEquals((byte)27, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3987L));
      BigFraction bigFraction1 = bigFraction0.divide(1);
      assertEquals((short) (-3987), bigFraction1.shortValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2069.0));
      BigFraction bigFraction1 = bigFraction0.divide(790);
      BigFraction bigFraction2 = bigFraction1.pow(790);
      assertEquals((short) (-8127), bigFraction2.shortValue());
      assertEquals((short) (-2), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      int int0 = bigFraction0.THREE_QUARTERS.compareTo(bigFraction0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4375.2991), 4903.9638465710905, 37);
      BigFraction bigFraction1 = new BigFraction(37);
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals((short) (-4376), bigFraction0.shortValue());
      assertEquals((byte)37, bigFraction1.byteValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9007199254739900L);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue((-333), 4);
      assertEquals((byte) (-68), bigFraction0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(7, 7);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(7, 2);
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-180L), (-2034L));
      BigDecimal bigDecimal0 = bigFraction0.THREE_QUARTERS.bigDecimalValue(1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(1);
      assertEquals((byte) (-1), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1189), (-1189));
      bigFraction0.ONE_HALF.bigDecimalValue();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((byte) (-1), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction((-3340.530569));
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertEquals((short) (-3340), bigFraction2.shortValue());
      assertSame(bigFraction2, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-6);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertEquals((short) (-1536), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.add(bigInteger0);
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((long) 488, (long) 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertEquals((byte) (-23), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1773);
      BigFraction bigFraction1 = bigFraction0.add(1329L);
      BigFraction bigFraction2 = bigFraction1.multiply(666);
      assertEquals((short) (-31220), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add((long) (-560));
      assertEquals((short) (-559), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1773);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.add(0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte) (-19), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.add(0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.TWO.multiply(9007199254740990L);
      BigFraction bigFraction2 = bigFraction1.abs();
      assertEquals((byte) (-4), bigFraction2.byteValue());
      assertEquals((byte) (-4), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3340.530569));
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals((byte)12, bigFraction1.byteValue());
      assertEquals((short) (-3340), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(770L, 28L);
      BigFraction bigFraction1 = new BigFraction(Double.NaN, 1158);
      // Undeclared exception!
      try { 
        bigFraction1.subtract(bigFraction0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.201331615447998);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-1359L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(3, 2145184414);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.pow(1073976885);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      // Undeclared exception!
      try { 
        bigFraction0.MINUS_ONE.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2988, 2988);
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1), 1075);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(618943941, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1258L), 1L);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2189);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      try { 
        bigFraction0.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(218, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1119.5), (-1119.5), 2147483461);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.subtract(bigInteger0);
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      boolean boolean0 = bigFraction0.equals(bigFraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      double double0 = bigFraction0.doubleValue();
      assertEquals(0.8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(3157L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      String string0 = bigFraction0.toString();
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.6857960224151611);
      String string0 = bigFraction0.ONE_FIFTH.toString();
      assertEquals("1 / 5", string0);
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-4);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.pow(465L);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.pow((-913));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-180L), (-2034L));
      BigFraction bigFraction1 = bigFraction0.pow(632);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      assertSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.6857960224151611);
      float float0 = bigFraction0.floatValue();
      assertEquals(0.685796F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(350.4);
      BigFraction bigFraction1 = bigFraction0.multiply(1073741824L);
      boolean boolean0 = bigFraction1.equals(bigFraction0);
      assertFalse(boolean0);
      assertEquals((short) (-26215), bigFraction1.shortValue());
      assertEquals((short)350, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = new BigFraction(0.0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      boolean boolean0 = bigFraction0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-42));
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)1, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = new BigFraction((-42));
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.abs();
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction3.byteValue());
      assertNotSame(bigFraction3, bigFraction2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(8.871988939063158E-7, 0);
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-7.316349947981893E-8), (-7.316349947981893E-8), (-1778));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -0 to fraction after -1,778 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2200.687603598887, 1.2612197508587997E-8, Integer.MAX_VALUE);
      int int0 = bigFraction0.intValue();
      assertEquals(2200, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) 2765, (-2117));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,765 to fraction (9,223,372,036,854,773,044/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.7976931348623157E308, 2.97806224125452E-12, 1073741825);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-3987L));
      double double0 = bigFraction0.percentageValue();
      assertEquals((-398700.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(Float.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert infinite value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(900, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.6857960224151611);
      boolean boolean0 = bigFraction0.ONE_THIRD.equals(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, (-2621));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.6857960224151611);
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals(4194304, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.6857960224151611);
      BigDecimal bigDecimal0 = bigFraction0.ONE_QUARTER.bigDecimalValue(0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(3, 3);
      assertEquals((byte) (-1), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(770L, 28L);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.multiply(1158);
      assertEquals((byte) (-49), bigFraction1.byteValue());
      assertEquals((short)27, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      long long0 = bigFraction0.THREE_FIFTHS.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.6857960224151611);
      BigFraction bigFraction1 = bigFraction0.negate();
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.6857960224151611);
      bigFraction0.ONE_THIRD.getDenominatorAsLong();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(218, 2166.2752034311343, 0);
      double double0 = bigFraction0.percentageValue();
      assertEquals(21800.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((byte)1, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1189), (-1189));
      BigFraction bigFraction1 = bigFraction0.add(4503599627370495L);
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-371), (-371));
      // Undeclared exception!
      try { 
        bigFraction0.TWO_QUARTERS.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.subtract(464L);
      assertEquals((short) (-463), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.add((-2912));
      assertEquals((short) (-2911), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.divide((-3058));
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1019.7136);
      bigFraction0.ONE_HALF.getNumeratorAsInt();
      assertEquals((short)1019, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3987L));
      BigFraction bigFraction1 = new BigFraction((double) (-3987L));
      boolean boolean0 = bigFraction1.equals(bigFraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.6857960224151611);
      bigFraction0.ZERO.getField();
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.divide(bigInteger0);
      assertEquals((byte) (-1), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3187));
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.reduce();
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte) (-115), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((short)1, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      int int0 = bigFraction0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      assertEquals((byte)1, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }
}
