/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:25:58 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1016.798998, Integer.MAX_VALUE);
      bigFraction0.THREE_FIFTHS.pow(1016.798998);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.8409546441412518E-8));
      bigFraction0.pow(0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.ZERO.abs();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction.getReducedFraction((-148), 367);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(20.0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3920));
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.pow(0L);
      bigFraction1.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0244846761392927));
      BigFraction bigFraction1 = bigFraction0.pow(52);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals((short) (-4), bigFraction2.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1016.798998, Integer.MAX_VALUE);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.subtract(bigInteger0);
      assertEquals((byte) (-8), bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4432);
      BigFraction bigFraction1 = bigFraction0.subtract(4L);
      assertEquals((short)4428, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract((long) 2146435583);
      assertEquals((short) (-510), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.subtract((long) 1);
      assertEquals((short) (-2), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract(7078);
      assertEquals((byte)91, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483647L, (-749L));
      BigFraction bigFraction1 = bigFraction0.ZERO.subtract((-1505));
      assertEquals((short)1505, bigFraction1.shortValue());
      assertEquals((short)16450, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-342.7742273), 2146645114);
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertEquals((byte) (-86), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)42;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0244846761392927));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((byte) (-1), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0244846761392927));
      BigFraction bigFraction1 = bigFraction0.pow(52);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.pow(bigInteger0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((byte) (-7), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-1859L));
      assertEquals((byte) (-26), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1), (-1));
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow((-2033));
      assertEquals((short)11139, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      double double0 = bigFraction0.pow((double) 1602);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      double double0 = bigFraction0.MINUS_ONE.pow((double) 5);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      double double0 = bigFraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4432);
      BigFraction bigFraction1 = bigFraction0.divide((long) (-1));
      double double0 = bigFraction1.percentageValue();
      assertEquals((short) (-4432), bigFraction1.shortValue());
      assertEquals((-443200.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483647L);
      bigFraction0.negate();
      assertEquals((short) (-1), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.negate();
      assertEquals((byte) (-2), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3920));
      BigFraction bigFraction1 = new BigFraction((-284.23012186), 1060.989595, (-3920));
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertEquals((short)3088, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = new BigFraction(2147483647L);
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      assertEquals((byte) (-86), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1), (-1));
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow((long) (-1));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction1.multiply(bigInteger0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short) (-32768), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2016, 2016);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE.multiply(bigInteger0);
      assertEquals((short)10, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1), (-1));
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-86);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte) (-86), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.multiply(2023L);
      assertEquals((short)1011, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 1);
      BigFraction bigFraction1 = bigFraction0.multiply((-3461L));
      assertEquals((short) (-3461), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.multiply(2641);
      assertEquals((short)2112, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      long long0 = bigFraction0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      long long0 = bigFraction0.longValue();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.add(1);
      int int0 = bigFraction1.intValue();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3647L, (-782L));
      int int0 = bigFraction0.intValue();
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.add((-1));
      long long0 = bigFraction1.getNumeratorAsLong();
      assertEquals((-1L), long0);
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483647L, (-749L));
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.pow((-1505));
      int int0 = bigFraction1.getNumeratorAsInt();
      assertEquals((byte)66, bigFraction0.byteValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2016, 2016);
      bigFraction0.ONE_THIRD.getNumeratorAsInt();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((short)1, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.multiply((-1));
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short) (-1), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.8409546441412518E-8));
      bigFraction0.TWO.getDenominatorAsLong();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2239, 58);
      BigFraction bigFraction1 = bigFraction0.pow((-2462));
      long long0 = bigFraction1.getDenominatorAsLong();
      assertEquals((byte)38, bigFraction0.byteValue());
      assertEquals((-3573181170057705087L), long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147221535L, 9193070505571053912L);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((short) (-3752), bigInteger0.shortValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.8409546441412518E-8));
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigInteger bigInteger1 = bigFraction1.getDenominator();
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)761, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      float float0 = bigFraction0.floatValue();
      assertEquals(0.33333334F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483647L, (-749L));
      float float0 = bigFraction0.floatValue();
      assertEquals((-2867134.5F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2239, 58);
      BigFraction bigFraction1 = bigFraction0.pow((-2462));
      double double0 = bigFraction1.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals((short)38, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.add((-1509));
      double double0 = bigFraction1.doubleValue();
      assertEquals((-1508.25), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction(0.6666667F, 4.561684363579843E-11, 440);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483647L, (-749L));
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.pow((-1505));
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short) (-5992), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1112L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertEquals((byte) (-111), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2222.135293351);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertEquals((byte) (-34), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.divide((-1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1L);
      BigFraction bigFraction1 = bigFraction0.multiply((long) (-1));
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4432);
      int int0 = bigFraction0.MINUS_ONE.compareTo(bigFraction0);
      assertEquals((-1), int0);
      assertEquals((short)4432, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147221535);
      bigFraction0.ZERO.bigDecimalValue(3, 3);
      assertEquals((short)31, bigFraction0.shortValue());
      assertEquals((byte)31, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(5, 5);
      assertEquals((short)2, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(0);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.divide(bigInteger0);
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue(0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4432);
      BigFraction bigFraction1 = bigFraction0.divide((long) (-1));
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue(5);
      assertEquals((short) (-4432), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4432);
      BigFraction bigFraction1 = bigFraction0.divide((long) (-1));
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue();
      assertEquals((short) (-4432), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigDecimal bigDecimal0 = bigFraction0.ONE_HALF.bigDecimalValue();
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1016.798998, Integer.MAX_VALUE);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((short)1016, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertEquals((short)4, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1112L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertEquals((short) (-1102), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3984L, 1L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)3984, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.reciprocal();
      BigFraction bigFraction2 = bigFraction1.add((long) (byte) (-1));
      assertEquals((short)1, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.add(2147483648L);
      BigFraction bigFraction2 = bigFraction1.divide((-764L));
      assertEquals((short)7206, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.add((-713L));
      assertEquals((short) (-711), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9218868437227405312L);
      BigFraction bigFraction1 = bigFraction0.add(2130836487);
      BigFraction bigFraction2 = bigFraction1.abs();
      assertEquals((byte)7, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9218868437227405312L, 9218868437227405312L);
      BigFraction bigFraction1 = bigFraction0.ONE.abs();
      assertEquals((short)1, bigFraction0.shortValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1L);
      BigFraction bigFraction1 = bigFraction0.add((-1509));
      BigFraction bigFraction2 = bigFraction1.abs();
      assertEquals((short)1508, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1L);
      BigFraction bigFraction1 = bigFraction0.add((-1));
      // Undeclared exception!
      try { 
        bigFraction1.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.8409546441412518E-8));
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1192.7041979));
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483647L, (-749L));
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow((-749L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9218868437227405312L);
      // Undeclared exception!
      try { 
        bigFraction0.pow(2147483639);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((byte)42, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2446, 1);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.bigDecimalValue(1, 829);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.bigDecimalValue(2146435583, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      try { 
        bigFraction0.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(4095L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1), (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      assertEquals((byte) (-9), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.multiply(bigInteger0);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.8409546441412518E-8));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO.divide(bigInteger0);
      boolean boolean0 = bigFraction1.equals(bigFraction0);
      assertFalse(boolean0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)2, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.8409546441412518E-8));
      boolean boolean0 = bigFraction0.equals(bigFraction0);
      assertTrue(boolean0);
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L, 467L);
      double double0 = bigFraction0.ONE_HALF.doubleValue();
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertEquals((short)11, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1057, 1057);
      BigFraction bigFraction1 = bigFraction0.TWO.divide(1057);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      String string0 = bigFraction0.toString();
      assertEquals("4 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals((byte)0, bigFraction2.byteValue());
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4432);
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.subtract(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals((short) (-5), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4432);
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3367.0));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short) (-3367), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(42949672969L);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      BigFraction bigFraction1 = bigFraction0.ZERO.multiply((-1));
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertTrue(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1L);
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      float float0 = bigFraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.reduce();
      boolean boolean0 = bigFraction1.equals(bigFraction0);
      assertTrue(boolean0);
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      boolean boolean0 = bigFraction0.equals(bigFraction1);
      assertFalse(boolean0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1L);
      Object object0 = new Object();
      boolean boolean0 = bigFraction0.equals(object0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 1);
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1016.798998, Integer.MAX_VALUE);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.add(bigFraction0);
      assertEquals((short)1017, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.add(bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9007199254740990L);
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.add(bigFraction0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 5);
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(4105, (-1336));
      assertEquals((short) (-3), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3979.3606376462035, (-1509));
      assertEquals((short)3979, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-1074.1706), 0.731257388050949, (-1083));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -1,074.171 to fraction after -1,083 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) 2147221535, 2147221535);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,221,535 to fraction (9,223,372,034,707,554,274/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) 9218868437227405312L, (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 9,218,868,437,227,405,300 to fraction (9,218,868,437,227,405,312/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      double double0 = bigFraction0.TWO_THIRDS.pow((double) 0L);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.divide(35180077629440L);
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-458.0), (-2033));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -458 to fraction (459/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1L);
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(1, int0);
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.multiply(1L);
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1L);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(3761);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3367.0));
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(3, 3);
      assertEquals((short) (-3367), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.multiply((-40));
      assertEquals((byte) (-26), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1L);
      long long0 = bigFraction0.longValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.negate();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, Integer.MAX_VALUE, 1075);
      BigFraction bigFraction1 = bigFraction0.subtract(Integer.MAX_VALUE);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1L);
      bigFraction0.hashCode();
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      double double0 = bigFraction0.TWO.percentageValue();
      assertEquals(200.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(489, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.6666667F, 4.561684363579843E-11, 440);
      BigFraction bigFraction1 = bigFraction0.pow(440);
      double double0 = bigFraction1.doubleValue();
      assertEquals(3.310180762631932E-78, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1L);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.ONE.add((-3173L));
      assertEquals((byte) (-100), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1L);
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.add(2146435583);
      assertEquals((short)511, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1859L));
      BigFraction bigFraction1 = bigFraction0.divide(295);
      assertEquals((byte) (-6), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483647L, (-749L));
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals((byte)66, bigFraction0.byteValue());
      assertEquals((-2147483647), int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFractionField bigFractionField0 = bigFraction0.FOUR_FIFTHS.getField();
      assertNotNull(bigFractionField0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147221535);
      BigFraction bigFraction1 = bigFraction0.subtract((long) 2147221535);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)31, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.8409546441412518E-8));
      int int0 = bigFraction0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertEquals((short)1, bigFraction1.shortValue());
  }
}
