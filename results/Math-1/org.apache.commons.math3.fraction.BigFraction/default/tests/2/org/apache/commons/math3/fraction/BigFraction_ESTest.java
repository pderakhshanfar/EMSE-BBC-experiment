/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 03 23:24:09 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.NoSuchElementException;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction1.ONE_HALF.toString();
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction1.FOUR_FIFTHS.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction1.pow(1L);
      bigFraction3.ONE.longValue();
      bigFraction2.pow((double) 4L);
      BigFraction bigFraction4 = BigFraction.ZERO;
      bigFraction1.divide(bigFraction4);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((BigInteger) null);
      // Undeclared exception!
      try { 
        bigFraction0.percentageValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(757.0, (-1108));
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.add(bigInteger0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 757 to fraction (9,223,372,036,854,775,052/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3, 3, 3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(603.1907506106, 0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1404), (-1404), (-1404));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 3, 3);
      // Undeclared exception!
      try { 
        bigFraction0.floatValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 3 to fraction (9,223,372,036,854,775,806/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-1389), (-1389));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.THREE_QUARTERS.getNumeratorAsLong();
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      long long0 = (-1016L);
      BigFraction bigFraction2 = bigFraction1.TWO.divide((-1016L));
      BigFraction bigFraction3 = bigFraction0.TWO_FIFTHS.divide(bigFraction1);
      bigFraction0.getDenominator();
      bigFraction3.bigDecimalValue(303);
      // Undeclared exception!
      try { 
        bigFraction2.compareTo(bigFraction3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(17, 17, 17);
      bigFraction0.divide(17);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.bigDecimalValue(1470);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.divide(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.divide(237325590L);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1286);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.subtract(1286);
      bigFraction1.ZERO.getDenominatorAsInt();
      bigFraction0.multiply(bigFraction1);
      bigFraction1.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.ONE_HALF.percentageValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.ONE_HALF.multiply(bigInteger0);
      bigFraction0.divide((BigFraction) null);
      int int0 = 2032;
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.reduce();
      BigFraction bigFraction3 = bigFraction0.ONE_THIRD.subtract(bigFraction1);
      bigFraction0.ONE_THIRD.floatValue();
      bigFraction3.THREE_FIFTHS.equals(bigFraction1);
      bigFraction0.getDenominator();
      bigFraction0.pow(1.7976931348623157E308);
      BigFraction bigFraction4 = bigFraction3.multiply(bigFraction1);
      BigFraction bigFraction5 = bigFraction1.multiply((-3733L));
      bigFraction5.reciprocal();
      bigFraction4.divide(151);
      bigFraction0.floatValue();
      bigFraction5.equals(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1L);
      bigFraction0.intValue();
      bigFraction0.multiply((long) 1);
      BigInteger bigInteger0 = null;
      BigFraction bigFraction1 = bigFraction0.divide((BigInteger) null);
      // Undeclared exception!
      try { 
        bigFraction1.ONE.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.divide((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4503599627370496L);
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.multiply((-1678L));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(721);
      bigFraction0.ONE_HALF.subtract(721);
      bigFraction0.intValue();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = new BigFraction(4.116164446561962E-8, 4186.966, 897);
      bigFraction0.ONE_THIRD.multiply(bigFraction1);
      bigFraction0.bigDecimalValue((-19));
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.add(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.TWO_QUARTERS.pow(1.7879230976104736);
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction0.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.THREE_QUARTERS.getField();
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction1.equals(bigFraction0);
      BigFraction bigFraction2 = new BigFraction(1.0);
      bigFraction2.multiply(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = new BigFraction(863);
      bigFraction2.subtract(bigFraction0);
      bigFraction2.pow((long) 863);
      bigFraction1.hashCode();
      bigFraction1.toString();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction1.subtract(bigFraction0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction1.ONE_HALF.toString();
      bigFraction1.abs();
      int int0 = 8;
      int int1 = 722;
      // Undeclared exception!
      try { 
        bigFraction1.TWO_THIRDS.bigDecimalValue(722);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ZERO.getNumeratorAsInt();
      bigFraction0.TWO.abs();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 1035);
      bigFraction1.ONE_FIFTH.reduce();
      bigFraction1.MINUS_ONE.doubleValue();
      bigFraction1.ZERO.divide(bigFraction0);
      bigFraction1.ONE_THIRD.doubleValue();
      bigFraction0.multiply(1);
      int int0 = (-1301);
      BigInteger bigInteger0 = null;
      BigFraction bigFraction2 = bigFraction0.ZERO.multiply((BigInteger) null);
      int int1 = (-970);
      try { 
        bigFraction2.THREE_QUARTERS.add(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ZERO.getNumeratorAsInt();
      bigFraction0.TWO.abs();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 1035);
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction1.MINUS_ONE.doubleValue();
      bigFraction1.ONE_THIRD.doubleValue();
      BigFraction bigFraction3 = bigFraction0.multiply(1);
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.add(bigFraction1);
      bigFraction4.TWO_FIFTHS.subtract((long) 1);
      bigFraction0.ZERO.multiply((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.THREE_QUARTERS.abs();
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 17);
      bigFraction0.multiply(17);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.getNumeratorAsInt();
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = new BigFraction((-2183.645));
      BigFraction bigFraction2 = bigFraction0.multiply((BigInteger) null);
      bigFraction1.multiply(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(4, 4);
      BigFraction bigFraction1 = new BigFraction(4);
      bigFraction1.TWO_FIFTHS.getDenominatorAsInt();
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction1.TWO_QUARTERS.compareTo(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.pow(4);
      bigFraction3.THREE_QUARTERS.abs();
      bigFraction2.pow(0.0);
      bigFraction3.subtract(1);
      bigFraction0.multiply((long) 5);
      BigFraction bigFraction4 = bigFraction3.abs();
      BigFraction bigFraction5 = bigFraction4.ONE_THIRD.pow(0L);
      bigFraction3.divide(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.divide(bigInteger0);
      bigFraction5.floatValue();
      bigFraction0.intValue();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.subtract(2147483466);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.ONE.getNumeratorAsInt();
      bigFraction0.MINUS_ONE.toString();
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.abs();
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      bigFraction2.TWO_FIFTHS.add(0L);
      bigFraction0.longValue();
      bigFraction2.toString();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.TWO_THIRDS.subtract((BigInteger) null);
      // Undeclared exception!
      try { 
        bigFraction0.percentageValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.TWO_THIRDS.longValue();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.add((-2197L));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.TWO_QUARTERS.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.THREE_QUARTERS.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.ONE.multiply((-277L));
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.subtract(1741);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction1.ONE_THIRD.divide(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.multiply(113236205062349959L);
      BigFraction bigFraction5 = bigFraction0.multiply(0L);
      bigFraction5.ONE_QUARTER.getNumeratorAsInt();
      BigFraction bigFraction6 = bigFraction1.multiply(bigFraction0);
      bigFraction6.ONE_THIRD.add(bigFraction3);
      BigFraction bigFraction7 = bigFraction1.multiply(bigInteger0);
      bigFraction4.toString();
      BigFraction bigFraction8 = bigFraction7.ONE_THIRD.multiply(bigInteger0);
      bigFraction4.reduce();
      BigFraction bigFraction9 = bigFraction7.divide(113236205062349959L);
      bigFraction9.TWO_QUARTERS.multiply((long) 1);
      bigFraction9.subtract(bigInteger0);
      BigFraction bigFraction10 = bigFraction2.reduce();
      bigFraction10.MINUS_ONE.hashCode();
      bigFraction1.subtract(1);
      bigFraction8.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(5.249403429843369E-4, 589);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.divide((long) 589);
      BigFraction.getReducedFraction(589, 589);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.TWO_QUARTERS.toString();
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction1.ZERO.divide((-1));
      bigFraction2.ONE.getDenominatorAsLong();
      bigFraction1.ONE_QUARTER.subtract((-1));
      bigFraction0.TWO_THIRDS.intValue();
      bigFraction0.TWO_QUARTERS.percentageValue();
      bigFraction0.FOUR_FIFTHS.longValue();
      BigFraction bigFraction3 = bigFraction0.reduce();
      bigFraction3.THREE_FIFTHS.getDenominatorAsLong();
      bigFraction0.bigDecimalValue();
      bigFraction3.TWO_FIFTHS.add((-1258));
      BigFraction bigFraction4 = bigFraction1.TWO_QUARTERS.divide((long) 100);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction4.THREE_QUARTERS.add(bigInteger0);
      bigFraction2.abs();
      bigFraction3.bigDecimalValue(100, 100);
      bigFraction3.getNumeratorAsLong();
      bigFraction3.ONE_HALF.divide(bigInteger0);
      BigFraction bigFraction5 = null;
      try {  
      bigFraction5 = BigFraction.ONE_QUARTER;
      } catch(IllegalArgumentException e) {}
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.THREE_QUARTERS.hashCode();
      bigFraction0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.add((BigFraction) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction0.compareTo(bigFraction1);
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction.getReducedFraction(742, 742);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(17, 17, 17);
      bigFraction0.pow(17);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = new BigFraction((-1993), 434);
      BigFraction bigFraction2 = bigFraction0.ONE_THIRD.subtract(bigFraction1);
      bigFraction2.THREE_QUARTERS.pow((-1201L));
      bigFraction0.FOUR_FIFTHS.hashCode();
      bigFraction0.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction1.subtract(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.pow((long) 2284);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.getField();
      bigFraction0.subtract(4577762542105553359L);
      bigFraction0.divide(0L);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction1.ONE_HALF.toString();
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction1.FOUR_FIFTHS.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction1.pow(1L);
      bigFraction3.ONE.longValue();
      bigFraction2.pow((double) 4L);
      bigFraction1.getField();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.getField();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.abs();
      bigFraction1.FOUR_FIFTHS.floatValue();
      bigFraction0.getField();
      bigFraction0.THREE_FIFTHS.floatValue();
      bigFraction1.getField();
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.abs();
      BigFraction bigFraction3 = bigFraction2.multiply(bigInteger0);
      bigFraction3.THREE_QUARTERS.add(bigInteger0);
      bigFraction3.TWO_FIFTHS.multiply((-1));
      BigFraction bigFraction4 = bigFraction1.multiply(3470L);
      BigFraction bigFraction5 = bigFraction4.reduce();
      bigFraction4.ZERO.pow(3982);
      BigFraction.getReducedFraction(2294, 1);
      BigFraction bigFraction6 = bigFraction5.add(1);
      bigFraction6.THREE_QUARTERS.reciprocal();
      bigFraction5.ONE.getNumeratorAsInt();
      BigFraction.getReducedFraction((-3224), 0);
      int int0 = 1;
      bigFraction1.MINUS_ONE.bigDecimalValue(int0);
      bigFraction6.toString();
      bigFraction5.getNumeratorAsLong();
      long long0 = (-3344L);
      bigFraction0.pow(long0);
      bigFraction4.getDenominator();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.add(3);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9218868437227405312L);
      bigFraction0.intValue();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1229, 0);
      bigFraction1.doubleValue();
      // Undeclared exception!
      try { 
        bigFraction0.floatValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.ONE_QUARTER.getField();
      bigFraction0.ONE_THIRD.multiply(46);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(3, (-347));
      bigFraction0.FOUR_FIFTHS.bigDecimalValue(0, 3);
      bigFraction0.abs();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.bigDecimalValue(0, 0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2190.60541049647));
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.negate();
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.pow((-1));
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.negate();
      BigFraction bigFraction4 = bigFraction1.MINUS_ONE.pow((-1));
      bigFraction1.TWO_THIRDS.toString();
      bigFraction0.THREE_FIFTHS.doubleValue();
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      bigFraction3.MINUS_ONE.pow(bigInteger0);
      bigFraction2.bigDecimalValue((-1), (-1));
      bigFraction4.intValue();
      // Undeclared exception!
      try { 
        bigFraction2.multiply(bigFraction3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(3439);
      bigFraction1.ONE_HALF.doubleValue();
      BigFraction bigFraction2 = bigFraction1.multiply(3811L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-17);
      bigFraction0.ONE.percentageValue();
      byteArray0[1] = (byte) (-93);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(631, 631);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction3.THREE_FIFTHS.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.THREE_QUARTERS.abs();
      bigFraction0.ONE_HALF.getField();
      bigFraction4.THREE_QUARTERS.getNumeratorAsInt();
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigFraction2.divide(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.pow((-4903));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 721);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.negate();
      bigFraction0.ONE_HALF.doubleValue();
      BigFraction bigFraction2 = new BigFraction((double) 3);
      bigFraction2.pow(3);
      bigFraction2.multiply((long) 3);
      bigFraction1.bigDecimalValue(3);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9.755392680573412E-9);
      long long0 = 2771L;
      BigFraction bigFraction1 = bigFraction0.pow(2771L);
      int int0 = (-1);
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.divide(int0);
      int int1 = 0;
      bigFraction0.multiply(int1);
      int int2 = 1347;
      bigFraction0.TWO.pow(int2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = (-503L);
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-503L));
      double double0 = 8.227620163729258E-235;
      BigFraction bigFraction2 = new BigFraction(8.227620163729258E-235);
      bigFraction1.floatValue();
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction(Float.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert infinite value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2709.712));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction(804.523, (-2436));
      BigFraction bigFraction2 = new BigFraction((-1570.3247325644));
      BigFraction bigFraction3 = BigFraction.TWO_QUARTERS;
      bigFraction3.TWO_QUARTERS.negate();
      BigFraction bigFraction4 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction5 = bigFraction4.multiply(bigFraction0);
      bigFraction5.ONE_THIRD.hashCode();
      bigFraction4.getDenominator();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4437), (-4437));
      bigFraction0.bigDecimalValue((-4437), (-4437));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(8.6628E-6, 8.6628E-6, (-40));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 552;
      BigFraction bigFraction0 = new BigFraction((-1064.5733517666404), (-1064.5733517666404), 552);
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.divide(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1,064.573 to fraction (-25,461,928,843,196/23,917,495,963)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1888.7332621), (-1888.7332621), 2794);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-106.5813939), (-1));
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.reciprocal();
      long long0 = (-3512299194304650054L);
      bigFraction1.ZERO.bigDecimalValue((-1), (-1));
      bigFraction0.divide(long0);
      bigFraction1.ONE_FIFTH.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.percentageValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-2515), 964);
      bigFraction0.floatValue();
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction1.THREE_QUARTERS.getDenominatorAsInt();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)23;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.MINUS_ONE.subtract(bigInteger0);
      BigInteger bigInteger1 = new BigInteger((byte[]) null);
      bigFraction1.THREE_FIFTHS.multiply(bigInteger1);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction2.FOUR_FIFTHS.negate();
      bigFraction2.FOUR_FIFTHS.hashCode();
      // Undeclared exception!
      try { 
        bigFraction1.percentageValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4551L), (-4551L));
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(929L, 0L);
      int int0 = (-171);
      int int1 = (-1004);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(2080, 0L);
      bigFraction1.add(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.equals("Uv");
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.divide((-59L));
      bigFraction2.MINUS_ONE.reduce();
      bigFraction1.THREE_FIFTHS.intValue();
      bigFraction1.FOUR_FIFTHS.getField();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1, (-1788));
      bigFraction0.compareTo(bigFraction1);
      bigFraction3.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.multiply(377);
      bigFraction1.TWO_QUARTERS.pow(0.23015019297599792);
      bigFraction1.TWO_THIRDS.compareTo(bigFraction0);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.ONE_HALF.reciprocal();
      bigFraction0.hashCode();
      bigFraction0.pow(751L);
      bigFraction0.divide(bigFraction1);
      bigFraction1.percentageValue();
      bigFraction0.pow((-1588.9159442052));
      bigFraction2.abs();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1250L, 1250L);
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.add(37);
      BigFraction bigFraction2 = new BigFraction(9007199254740990L, 1250L);
      BigFraction bigFraction3 = bigFraction1.add(bigFraction2);
      bigFraction0.percentageValue();
      bigFraction2.bigDecimalValue((-87));
      bigFraction3.divide(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.ONE.floatValue();
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction1.FOUR_FIFTHS.pow(0.0);
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.divide((-2298L));
      bigFraction2.TWO_QUARTERS.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction0.add(bigFraction1);
      bigFraction3.percentageValue();
      bigFraction3.bigDecimalValue((-87));
      bigFraction1.divide(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4, 4905);
      BigFraction bigFraction1 = bigFraction0.multiply((long) 4);
      bigFraction1.TWO.getNumeratorAsLong();
      bigFraction1.equals(bigFraction0);
      bigFraction0.TWO.multiply(1330);
      bigFraction1.add(bigFraction0);
      bigFraction0.subtract(4905);
      bigFraction1.subtract(1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-854L), (-854L));
      BigFraction bigFraction1 = bigFraction0.pow(1L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.add(bigInteger0);
      bigFraction0.ONE_HALF.reciprocal();
      BigFraction bigFraction3 = bigFraction1.divide((-15));
      bigFraction0.pow((double) (-854L));
      bigFraction3.ONE.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.reduce();
      BigFraction bigFraction5 = bigFraction3.subtract((-1));
      bigFraction5.ONE.multiply(bigFraction2);
      bigFraction0.TWO.getField();
      bigFraction4.bigDecimalValue((int) (byte) (-65), 0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.add((-2371L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.subtract(bigInteger0);
      bigFraction3.THREE_FIFTHS.compareTo(bigFraction1);
      int int0 = 0;
      BigFraction bigFraction4 = bigFraction0.TWO.pow(0);
      bigFraction1.ZERO.compareTo(bigFraction2);
      bigFraction0.ZERO.equals(bigFraction4);
      int int1 = 803;
      bigFraction0.TWO_QUARTERS.bigDecimalValue(803);
      bigFraction2.pow(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.intValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction0.MINUS_ONE.multiply(bigFraction1);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 5446);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.pow(bigInteger0);
      bigFraction0.ONE_FIFTH.pow((double) 5446);
      bigFraction0.FOUR_FIFTHS.toString();
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.pow(1);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.divide(bigInteger1);
      bigFraction2.ONE_FIFTH.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction1.getNumeratorAsInt();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte) (-1);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigFraction0.ONE_THIRD.multiply(bigInteger1);
      BigFraction.getReducedFraction((-1), (-1));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.pow((-1683L));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1227L);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.multiply(1227L);
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.subtract(bigFraction0);
      bigFraction0.MINUS_ONE.doubleValue();
      bigFraction0.MINUS_ONE.doubleValue();
      bigFraction2.THREE_QUARTERS.compareTo(bigFraction0);
      bigFraction1.ZERO.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction0.divide((-745L));
      bigFraction1.ONE_QUARTER.pow((-1.0));
      bigFraction1.ONE.divide(bigFraction3);
      bigFraction3.ONE_FIFTH.add((-745L));
      BigInteger bigInteger0 = new BigInteger("", 40);
      bigFraction2.multiply(bigInteger0);
      int int0 = 0;
      BigFraction.getReducedFraction(int0, int0);
      // Undeclared exception!
      try { 
        bigFraction2.compareTo(bigFraction1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 5;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(629, 5);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-41);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.add(bigInteger0);
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      bigFraction1.FOUR_FIFTHS.bigDecimalValue(1361, 5);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.modInverse(bigInteger1);
      bigFraction2.FOUR_FIFTHS.longValue();
      bigFraction2.negate();
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.divide((long) byteArray0[4]);
      long long0 = 9007199254740990L;
      bigFraction3.TWO.subtract(long0);
      BigFraction bigFraction4 = bigFraction0.add(bigFraction2);
      // Undeclared exception!
      try { 
        bigFraction4.MINUS_ONE.percentageValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-978.528));
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.add((-3512299194304650054L));
      bigFraction1.TWO.getDenominatorAsInt();
      bigFraction0.toString();
      bigFraction1.ONE_THIRD.reciprocal();
      bigFraction0.percentageValue();
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      int int0 = 0;
      bigFraction1.divide(0);
      bigFraction1.pow(bigInteger0);
      int int1 = (-1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.ONE_HALF.divide(0);
      double double0 = (-3653.379827);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.subtract((-822L));
      bigFraction0.ONE_THIRD.multiply(1780L);
      bigFraction0.ZERO.getNumeratorAsInt();
      BigFraction bigFraction1 = bigFraction0.subtract(0L);
      bigFraction1.multiply(1780L);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.subtract((long) 17);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(220.20959);
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.negate();
      BigFraction.getReducedFraction(1, 1);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.add(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction2.ONE.multiply(0);
      BigFraction bigFraction3 = bigFraction2.pow(bigInteger0);
      bigFraction2.MINUS_ONE.pow(Integer.MAX_VALUE);
      bigFraction3.ONE.getNumeratorAsInt();
      bigFraction2.TWO_FIFTHS.add(bigFraction1);
      bigFraction0.ONE_THIRD.reduce();
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction4 = BigFraction.getReducedFraction(0, 0);
      bigFraction0.hashCode();
      BigFraction bigFraction5 = BigFraction.TWO_QUARTERS;
      bigFraction4.TWO.equals(bigFraction5);
      bigFraction0.getDenominatorAsInt();
      bigFraction4.divide((long) 0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction4.TWO.pow(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigFraction4.TWO.subtract(bigInteger2);
      int int0 = 0;
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-742L));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.FOUR_FIFTHS.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.divide((-1));
      bigFraction1.getDenominatorAsLong();
      bigFraction0.ONE_QUARTER.intValue();
      bigFraction2.ONE.doubleValue();
      bigFraction1.ONE_THIRD.getDenominatorAsInt();
      long long0 = 4550L;
      BigFraction bigFraction3 = bigFraction1.reciprocal();
      bigFraction3.THREE_QUARTERS.divide(1647);
      BigFraction bigFraction4 = bigFraction3.MINUS_ONE.pow((-1));
      BigFraction bigFraction5 = bigFraction4.ZERO.multiply(bigInteger0);
      bigFraction5.ONE_HALF.compareTo(bigFraction4);
      int int0 = (-2476);
      bigFraction2.longValue();
      bigFraction2.TWO_THIRDS.bigDecimalValue((-2476));
      BigFraction bigFraction6 = bigFraction0.subtract(long0);
      BigFraction bigFraction7 = bigFraction6.pow(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction7.TWO_FIFTHS.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(706, 706);
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.pow(706);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction0.MINUS_ONE.pow(bigInteger0);
      bigFraction4.THREE_FIFTHS.toString();
      BigFraction bigFraction5 = bigFraction0.ONE.add((long) 706);
      bigFraction5.THREE_FIFTHS.subtract(bigInteger0);
      bigFraction1.ONE_FIFTH.longValue();
      BigFraction bigFraction6 = bigFraction0.THREE_QUARTERS.reciprocal();
      bigFraction6.TWO_QUARTERS.reciprocal();
      bigFraction0.longValue();
      bigFraction1.longValue();
      bigFraction1.pow((-706));
      BigFraction bigFraction7 = bigFraction1.subtract((long) (-706));
      bigFraction7.TWO_FIFTHS.pow(1.7976931348623157E308);
      bigFraction3.toString();
      bigFraction7.hashCode();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.ONE.add(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction2.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.reduce();
      int int0 = 706;
      BigFraction bigFraction2 = BigFraction.getReducedFraction(706, 706);
      bigFraction2.TWO_QUARTERS.pow(706);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = new BigFraction(bigInteger0);
      bigFraction3.THREE_FIFTHS.toString();
      BigFraction bigFraction4 = bigFraction0.ONE.add((long) 706);
      bigFraction4.THREE_FIFTHS.subtract(bigInteger0);
      bigFraction1.ONE_FIFTH.longValue();
      BigFraction bigFraction5 = bigFraction0.THREE_QUARTERS.reciprocal();
      bigFraction5.TWO_QUARTERS.reciprocal();
      bigFraction0.longValue();
      bigFraction4.getDenominatorAsLong();
      bigFraction5.divide(1L);
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction0.add(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = new BigFraction((-1993), 434);
      BigFraction bigFraction2 = bigFraction0.ONE_THIRD.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.pow((-1201L));
      bigFraction0.FOUR_FIFTHS.hashCode();
      bigFraction0.toString();
      bigFraction0.hashCode();
      BigFraction bigFraction4 = bigFraction3.reciprocal();
      bigFraction0.hashCode();
      bigFraction1.getDenominator();
      bigFraction4.divide(bigFraction0);
      bigFraction4.add((-3958705157555305932L));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = new BigFraction((-1993), 434);
      bigFraction1.toString();
      bigFraction1.ONE_QUARTER.longValue();
      bigFraction1.ONE_FIFTH.percentageValue();
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction1.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction2.pow(1L);
      bigFraction0.longValue();
      bigFraction1.pow(3541.982924581478);
      bigFraction3.getField();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2750);
      BigFraction bigFraction1 = new BigFraction(2750);
      bigFraction0.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.ONE.floatValue();
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction1.ZERO.toString();
      bigFraction1.FOUR_FIFTHS.pow(0.0);
      BigFraction bigFraction2 = bigFraction0.divide(1653);
      bigFraction2.multiply(1653);
      BigFraction bigFraction3 = bigFraction0.pow((-1));
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction3.subtract(bigInteger1);
      Object object0 = new Object();
      bigFraction2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-106.5813939), (-1));
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.reciprocal();
      bigFraction1.bigDecimalValue();
      bigFraction0.divide((-3512299194304650054L));
      bigFraction1.ONE_FIFTH.getDenominatorAsInt();
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.ONE.floatValue();
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction1.FOUR_FIFTHS.pow(0.0);
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.divide((-2298L));
      bigFraction2.TWO_QUARTERS.bigDecimalValue();
      bigFraction0.percentageValue();
      bigFraction1.bigDecimalValue(0);
      BigFraction bigFraction3 = bigFraction1.divide(bigFraction2);
      bigFraction3.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      BigFraction bigFraction3 = bigFraction2.reciprocal();
      bigFraction1.longValue();
      bigFraction0.longValue();
      BigFraction bigFraction4 = bigFraction3.pow(638);
      bigFraction4.subtract((long) 897);
      bigFraction3.pow((-18.915159519220662));
      bigFraction4.toString();
      bigFraction0.hashCode();
      bigFraction2.divide((-1405L));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(706, 706);
      bigFraction2.TWO_QUARTERS.pow(706);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction0.MINUS_ONE.pow(bigInteger0);
      bigFraction3.THREE_FIFTHS.toString();
      BigFraction bigFraction4 = bigFraction0.ONE.add((long) 706);
      bigFraction4.THREE_FIFTHS.subtract(bigInteger0);
      bigFraction1.ONE_FIFTH.longValue();
      BigFraction bigFraction5 = new BigFraction(1714.924346895, 0L, (-940));
      bigFraction5.multiply(bigFraction2);
      BigFraction bigFraction6 = BigFraction.THREE_FIFTHS;
      int int0 = 5;
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      int int0 = 434;
      BigFraction bigFraction1 = new BigFraction((-1993), 434);
      BigFraction bigFraction2 = bigFraction0.ONE_THIRD.subtract(bigFraction1);
      long long0 = (-1201L);
      BigFraction bigFraction3 = BigFraction.ONE;
      BigFraction bigFraction4 = bigFraction2.divide(bigFraction3);
      bigFraction0.multiply((-1993));
      bigFraction2.divide(bigFraction1);
      bigFraction4.getDenominatorAsLong();
      BigFraction bigFraction5 = new BigFraction((double) 434, 434);
      bigFraction5.divide(long0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-85);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9.755392680573412E-9);
      long long0 = 2771L;
      BigFraction bigFraction1 = bigFraction0.pow(long0);
      int int0 = (-1);
      bigFraction1.ONE_FIFTH.divide(int0);
      int int1 = 0;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction0.divide(long0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.divide(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction3.percentageValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.TWO_QUARTERS.toString();
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction1.ZERO.divide((-1));
      bigFraction2.ONE.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction1.ONE_QUARTER.subtract((-1));
      bigFraction0.TWO_THIRDS.intValue();
      bigFraction0.TWO_QUARTERS.percentageValue();
      bigFraction0.FOUR_FIFTHS.longValue();
      BigFraction bigFraction4 = bigFraction0.reduce();
      bigFraction4.THREE_FIFTHS.getDenominatorAsLong();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction5 = bigFraction4.TWO_FIFTHS.add((-1258));
      BigFraction bigFraction6 = bigFraction1.TWO_QUARTERS.divide((long) 100);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction7 = bigFraction6.divide(bigFraction0);
      BigFraction bigFraction8 = bigFraction5.multiply((-1));
      bigFraction7.divide(bigFraction3);
      BigFraction bigFraction9 = BigFraction.THREE_FIFTHS;
      bigFraction9.getDenominatorAsLong();
      BigFraction bigFraction10 = bigFraction8.divide((long) 100);
      bigFraction6.divide(bigInteger0);
      bigFraction10.percentageValue();
      int int0 = 2144998134;
      int int1 = 764;
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO.negate();
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.subtract(100L);
      bigFraction2.ZERO.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction0.multiply((BigFraction) null);
      bigFraction3.TWO_THIRDS.longValue();
      // Undeclared exception!
      try { 
        bigFraction1.negate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.TWO_THIRDS.multiply((BigFraction) null);
      // Undeclared exception!
      try { 
        bigFraction0.floatValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      int int0 = (-1548);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.multiply((-1548));
      bigFraction1.ONE_FIFTH.longValue();
      bigFraction1.ONE_FIFTH.toString();
      bigFraction0.ONE_THIRD.longValue();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      bigFraction0.toString();
      bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.subtract(0L);
      bigFraction2.MINUS_ONE.percentageValue();
      bigFraction2.percentageValue();
      BigFraction bigFraction3 = bigFraction1.subtract(8989607068696576L);
      bigFraction3.bigDecimalValue((-1548));
      bigFraction3.ONE_THIRD.add(int0);
      // Undeclared exception!
      try { 
        bigFraction3.THREE_FIFTHS.add(bigFraction0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.MINUS_ONE.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.multiply((-2290));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.subtract(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.TWO_FIFTHS.multiply((long) (-2290));
      bigFraction3.MINUS_ONE.floatValue();
      bigFraction1.FOUR_FIFTHS.reduce();
      BigFraction bigFraction4 = new BigFraction((-1077));
      BigFraction bigFraction5 = bigFraction4.FOUR_FIFTHS.subtract((-1077));
      bigFraction1.MINUS_ONE.equals(bigFraction3);
      bigFraction5.FOUR_FIFTHS.toString();
      BigFraction bigFraction6 = bigFraction3.TWO_THIRDS.multiply(bigFraction4);
      BigFraction bigFraction7 = bigFraction6.ONE_QUARTER.reciprocal();
      bigFraction7.TWO_FIFTHS.subtract(bigFraction4);
      BigFraction bigFraction8 = bigFraction1.subtract(9007199254740990L);
      bigFraction1.floatValue();
      bigFraction0.abs();
      BigFraction bigFraction9 = bigFraction8.multiply((-129));
      BigFraction bigFraction10 = bigFraction8.MINUS_ONE.divide(bigFraction0);
      bigFraction9.percentageValue();
      bigFraction9.intValue();
      BigFraction bigFraction11 = bigFraction3.multiply(bigFraction1);
      bigFraction11.TWO_THIRDS.subtract((-2693L));
      bigFraction0.equals(bigFraction1);
      BigFraction bigFraction12 = bigFraction9.reduce();
      bigFraction8.THREE_FIFTHS.pow(bigInteger0);
      bigFraction12.ONE.multiply((-377));
      bigFraction12.subtract((-2693L));
      bigFraction2.doubleValue();
      bigFraction10.getDenominator();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction0.add(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = new BigFraction(0.0);
      bigFraction0.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = new BigFraction(863);
      bigFraction2.subtract(bigFraction0);
      bigFraction2.pow((long) 863);
      bigFraction1.hashCode();
      bigFraction1.toString();
      bigFraction0.MINUS_ONE.percentageValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction1.subtract(bigFraction0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-106.5813939), (-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-1), (-1));
      bigFraction2.toString();
      BigFraction bigFraction3 = bigFraction0.add((long) (-1));
      bigFraction3.subtract(bigInteger0);
      bigFraction0.longValue();
      BigFraction bigFraction4 = new BigFraction((-107L), (-3754.81818), (-1));
      bigFraction3.multiply(bigFraction2);
      bigFraction1.getNumerator();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-107.85345881373819), (-1));
      bigFraction0.add(2508);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction1.add(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = new BigFraction((-526));
      BigFraction bigFraction3 = bigFraction1.subtract(1380);
      bigFraction3.intValue();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = new BigFraction((double) 897);
      bigFraction0.ONE_THIRD.multiply(bigFraction1);
      bigFraction0.bigDecimalValue((-19));
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-106.5813939), (-1));
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.reciprocal();
      bigFraction1.MINUS_ONE.divide((-1));
      bigFraction1.bigDecimalValue();
      bigFraction0.divide(842L);
      bigFraction0.getDenominatorAsInt();
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.ONE_FIFTH.floatValue();
      bigFraction0.FOUR_FIFTHS.toString();
      bigFraction0.ONE_FIFTH.intValue();
      bigFraction0.TWO.doubleValue();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.toString();
      bigFraction0.TWO.getNumeratorAsLong();
      bigFraction0.toString();
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.multiply(bigInteger0);
      bigFraction0.TWO_QUARTERS.add(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.ONE_QUARTER.pow(542);
      bigFraction1.pow(0.0011285714285804715);
      bigFraction0.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction0.add(bigInteger1);
      bigFraction2.toString();
      bigFraction3.reduce();
      bigFraction2.bigDecimalValue(137, (-292));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      bigFraction0.bigDecimalValue();
      bigFraction0.reciprocal();
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = BigFraction.ONE;
      bigFraction0.equals(bigFraction2);
      bigFraction0.getDenominatorAsInt();
      bigFraction0.percentageValue();
      bigFraction1.bigDecimalValue(1, 1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5.249403429843369E-4);
      bigFraction0.subtract((BigFraction) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 721;
      BigFraction bigFraction0 = new BigFraction(721);
      BigFraction bigFraction1 = bigFraction0.subtract((BigFraction) null);
      // Undeclared exception!
      try { 
        bigFraction1.pow((long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = BigFraction.ONE;
      BigFraction bigFraction3 = BigFraction.ONE;
      bigFraction2.equals(bigFraction3);
      bigFraction0.getDenominatorAsInt();
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction1.ONE.subtract(bigFraction0);
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction0.divide(bigFraction1);
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction0.pow(8998403161718784L);
      bigFraction2.longValue();
      bigFraction1.getDenominatorAsInt();
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-106.5813939), (-1));
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.reciprocal();
      bigFraction1.bigDecimalValue();
      bigFraction1.percentageValue();
      BigDecimal bigDecimal0 = new BigDecimal((double) (-2147483647));
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      BigFraction bigFraction3 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction4 = BigFraction.ONE;
      bigFraction2.equals(bigFraction1);
      bigFraction0.getDenominatorAsInt();
      bigFraction1.percentageValue();
      bigFraction2.bigDecimalValue(1, 1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.percentageValue();
      BigInteger bigInteger0 = null;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.floatValue();
      bigFraction0.pow((-538));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.35411474181706704, 0.35411474181706704, 2062);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = new BigFraction((-1695.5), 2144627951);
      BigFraction bigFraction2 = new BigFraction(897);
      BigFraction bigFraction3 = bigFraction2.reciprocal();
      bigFraction0.bigDecimalValue((-1), 897);
      long long0 = (-9223372036854775808L);
      bigFraction3.divide(long0);
      int int0 = (-3544);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.divide(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1513));
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      bigFraction0.pow(757.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.add((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.multiply(7524581376L);
      bigFraction0.TWO_THIRDS.floatValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger0);
      bigFraction2.TWO_THIRDS.negate();
      bigFraction0.ZERO.pow(1294L);
      bigFraction2.longValue();
      bigFraction0.MINUS_ONE.toString();
      Random.setNextRandom(Integer.MAX_VALUE);
      BigFraction bigFraction3 = bigFraction1.add((long) Integer.MAX_VALUE);
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction3.abs();
      BigFraction bigFraction5 = bigFraction4.TWO_QUARTERS.negate();
      bigFraction4.getNumeratorAsInt();
      BigFraction bigFraction6 = bigFraction4.multiply(bigFraction1);
      bigFraction6.add(Integer.MAX_VALUE);
      bigFraction5.getNumerator();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.floatValue();
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.subtract(4368L);
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.subtract(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.ZERO.multiply(bigFraction1);
      bigFraction0.ONE.getDenominatorAsLong();
      bigFraction0.TWO.add(4368L);
      bigFraction0.TWO_THIRDS.pow(1379.1503);
      bigFraction0.doubleValue();
      int int0 = (-1592);
      bigFraction0.bigDecimalValue((-1592), (-1592));
      BigFraction bigFraction4 = bigFraction2.add(bigFraction3);
      // Undeclared exception!
      try { 
        bigFraction4.TWO.multiply(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = new BigFraction(765);
      BigFraction bigFraction3 = bigFraction1.subtract(bigFraction2);
      bigFraction3.negate();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.percentageValue();
      int int0 = 2146784824;
      // Undeclared exception!
      try { 
        bigFraction0.pow(2146784824);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = new BigFraction((-7278142539171889152L));
      BigFraction bigFraction3 = bigFraction1.subtract(bigFraction2);
      bigFraction0.negate();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(721, 721);
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction1.equals(bigFraction0);
      BigFraction bigFraction2 = new BigFraction(1.0);
      bigFraction0.add(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction((-1));
      bigFraction1.subtract(bigFraction0);
      BigFraction bigFraction2 = new BigFraction((-303L));
      bigFraction2.negate();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.divide((BigFraction) null);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.pow((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.ZERO.doubleValue();
      bigFraction0.subtract(2147297509);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.abs();
      BigInteger bigInteger0 = BigInteger.valueOf((-503L));
      bigFraction1.TWO_FIFTHS.reduce();
      bigFraction1.ONE.pow(bigInteger0);
      bigFraction1.add(3065L);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction1.MINUS_ONE.bigDecimalValue(3, 3);
      bigFraction1.divide(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction0.TWO.reduce();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(4503599627370496L);
      BigFraction bigFraction2 = bigFraction0.negate();
      bigFraction1.THREE_FIFTHS.longValue();
      bigFraction1.ONE_QUARTER.negate();
      BigFraction bigFraction3 = bigFraction2.multiply((-9223372036854775808L));
      bigFraction1.getDenominator();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-93);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction3.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(3, 3, 3);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1063.5229434), 7.041681569694413E68, 148);
      BigFraction bigFraction1 = new BigFraction((-1063.5229434));
      bigFraction1.percentageValue();
      bigFraction0.divide(148);
      bigFraction0.subtract((-1L));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = (-1);
      BigFraction bigFraction0 = new BigFraction(5.783203879030497E289, (-1));
      // Undeclared exception!
      try { 
        bigFraction0.ONE.subtract(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 57,832,038,790,304,970,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308, 1.7976931348623157E308, (-1389));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.ZERO.bigDecimalValue(4);
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.458843364504023E-8));
      bigFraction0.pow((-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction1.THREE_FIFTHS.bigDecimalValue(7);
      BigInteger bigInteger0 = null;
      try {  
      bigInteger0 = BigInteger.TEN;
      } catch(ArithmeticException e) {}
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.THREE_FIFTHS.compareTo((BigFraction) null);
      // Undeclared exception!
      try { 
        bigFraction0.floatValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-5);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.ZERO.pow(bigInteger0);
      bigFraction0.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.MINUS_ONE.negate();
      bigFraction0.ZERO.pow((-1510L));
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-503L));
      bigFraction1.floatValue();
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      bigFraction1.divide(bigFraction2);
      bigFraction1.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2975.8306669488743, 2769);
      BigFraction bigFraction1 = bigFraction0.pow((-503L));
      BigFraction bigFraction2 = new BigFraction((-1901.1556643682));
      bigFraction1.floatValue();
      bigFraction0.percentageValue();
      BigFraction bigFraction3 = new BigFraction((-1941.6));
      BigFraction bigFraction4 = new BigFraction((-2450), 0.4577725871391749, (-2147483646));
      bigFraction4.add(4503599627370496L);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-503L));
      BigFraction bigFraction2 = new BigFraction(8.227620163729258E-235);
      bigFraction1.floatValue();
      bigFraction0.percentageValue();
      BigFraction bigFraction3 = new BigFraction(60.0);
      BigFraction bigFraction4 = new BigFraction((-229.5897), (-503L), 2147482890);
      long long0 = 470L;
      bigFraction3.add(long0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1418, 312);
      bigFraction0.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2975.8306669488743, 2775);
      BigFraction bigFraction1 = bigFraction0.pow((-515L));
      bigFraction1.doubleValue();
      bigFraction1.bigDecimalValue(2775);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2975.8306669488743, 2769);
      BigFraction bigFraction1 = bigFraction0.pow((-503L));
      BigFraction bigFraction2 = new BigFraction((-1901.1556643682));
      bigFraction1.floatValue();
      bigFraction0.floatValue();
      bigFraction1.percentageValue();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2414.7), 100);
      BigFraction bigFraction1 = bigFraction0.pow((-503L));
      BigFraction bigFraction2 = new BigFraction(2339.68937639);
      bigFraction0.floatValue();
      BigFraction bigFraction3 = new BigFraction((-2414.7), 100);
      bigFraction3.floatValue();
      bigFraction1.percentageValue();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-503L));
      BigFraction bigFraction2 = new BigFraction((double) (-503L));
      bigFraction1.floatValue();
      bigFraction0.percentageValue();
      BigFraction bigFraction3 = new BigFraction(60.0);
      BigFraction bigFraction4 = new BigFraction(Float.POSITIVE_INFINITY);
      int int0 = 2543;
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract((-822L));
      long long0 = 1785L;
      bigFraction1.multiply(1785L);
      bigFraction0.ZERO.getNumeratorAsInt();
      BigFraction bigFraction2 = new BigFraction(0, 0);
      bigFraction2.TWO_FIFTHS.intValue();
      // Undeclared exception!
      try { 
        bigFraction2.multiply(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }
}
