/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 11:06:53 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-2380));
      // Undeclared exception!
      try { 
        bigFraction0.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow(2959);
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.divide(bigFraction0);
      bigFraction2.FOUR_FIFTHS.subtract(bigFraction1);
      bigFraction1.THREE_FIFTHS.multiply(bigInteger0);
      BigFraction.getReducedFraction(1195, 1195);
      BigFraction bigFraction3 = bigFraction1.add(bigFraction0);
      bigFraction3.TWO_THIRDS.getNumeratorAsLong();
      Object object0 = new Object();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.mod(bigInteger1);
      bigFraction2.ONE_THIRD.equals(object0);
      bigFraction0.ONE.intValue();
      BigFraction bigFraction4 = bigFraction0.TWO_QUARTERS.pow(bigInteger0);
      bigFraction0.FOUR_FIFTHS.hashCode();
      bigFraction4.ZERO.bigDecimalValue(1);
      BigFraction bigFraction5 = bigFraction3.divide(bigFraction4);
      BigFraction bigFraction6 = bigFraction0.add(6L);
      BigFraction bigFraction7 = bigFraction6.multiply(bigInteger0);
      bigFraction7.TWO_THIRDS.floatValue();
      BigFraction bigFraction8 = bigFraction3.subtract(bigInteger0);
      bigFraction8.ONE_THIRD.getNumeratorAsInt();
      bigFraction8.THREE_FIFTHS.multiply(1);
      BigFraction bigFraction9 = bigFraction0.negate();
      BigFraction bigFraction10 = bigFraction7.ONE_HALF.pow((long) 1);
      BigFraction bigFraction11 = bigFraction10.TWO.subtract(bigInteger0);
      bigFraction1.getDenominator();
      bigFraction7.floatValue();
      bigFraction11.ONE_FIFTH.toString();
      bigFraction2.toString();
      BigInteger bigInteger2 = bigFraction3.getNumerator();
      bigFraction11.multiply(bigInteger2);
      bigFraction9.getDenominatorAsInt();
      bigFraction5.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.add(0);
      BigFraction bigFraction1 = new BigFraction((double) 0);
      BigFraction bigFraction2 = BigFraction.ZERO;
      bigFraction2.toString();
      bigFraction1.getDenominatorAsLong();
      bigFraction2.getDenominatorAsLong();
      BigFraction bigFraction3 = new BigFraction((double) 0L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction1.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)90;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.ONE_HALF.hashCode();
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.reciprocal();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(24065407, (byte)90);
      bigFraction1.TWO_THIRDS.getField();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger1);
      bigFraction3.TWO_QUARTERS.doubleValue();
      Object object0 = new Object();
      bigFraction3.TWO_THIRDS.equals(object0);
      BigFraction bigFraction4 = bigFraction3.pow((int) (byte)4);
      BigFraction bigFraction5 = bigFraction4.reduce();
      BigFraction bigFraction6 = BigFraction.getReducedFraction(187, (byte)90);
      bigFraction6.add(bigInteger1);
      bigFraction4.bigDecimalValue();
      bigFraction0.getField();
      BigFraction bigFraction7 = bigFraction5.abs();
      bigFraction7.ONE_FIFTH.floatValue();
      BigFraction bigFraction8 = bigFraction2.add(bigFraction4);
      bigFraction8.TWO_FIFTHS.add((-2587L));
      BigFraction bigFraction9 = bigFraction1.add(183);
      bigFraction9.bigDecimalValue();
      bigFraction9.toString();
      bigFraction9.bigDecimalValue((-1), (int) (byte)4);
      bigFraction4.multiply((-3714));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.pow(3809L);
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      bigFraction2.getField();
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction4 = bigFraction2.multiply(bigFraction3);
      bigFraction4.longValue();
      bigFraction0.percentageValue();
      bigFraction3.bigDecimalValue();
      BigFraction bigFraction5 = bigFraction2.ONE.abs();
      bigFraction5.ZERO.longValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction6 = bigFraction4.ONE_HALF.subtract(bigInteger0);
      bigFraction6.ONE_HALF.getNumeratorAsInt();
      BigFraction bigFraction7 = BigFraction.TWO;
      bigFraction7.TWO_THIRDS.getDenominatorAsInt();
      BigFraction bigFraction8 = bigFraction4.subtract(bigInteger0);
      BigFraction bigFraction9 = bigFraction0.add(3809L);
      bigFraction9.MINUS_ONE.getNumeratorAsLong();
      bigFraction9.ONE_THIRD.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction3.divide(bigInteger1);
      BigFraction bigFraction10 = bigFraction9.TWO_THIRDS.add((-2066L));
      bigFraction1.equals(bigFraction2);
      bigFraction3.bigDecimalValue();
      bigFraction4.getNumeratorAsLong();
      bigFraction9.hashCode();
      BigFraction bigFraction11 = bigFraction2.subtract(bigFraction6);
      bigFraction11.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction2.subtract(bigFraction11);
      bigFraction6.divide(9007199254740990L);
      bigFraction4.toString();
      bigFraction8.bigDecimalValue(1);
      bigFraction1.negate();
      bigFraction10.bigDecimalValue(3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-5);
      byte byte0 = (byte)7;
      byteArray0[1] = (byte)7;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.add(411);
      BigFraction bigFraction2 = bigFraction1.ONE.negate();
      bigFraction2.MINUS_ONE.doubleValue();
      bigFraction2.ONE_FIFTH.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction1.TWO_QUARTERS.reduce();
      BigFraction bigFraction4 = bigFraction0.reciprocal();
      BigFraction bigFraction5 = bigFraction3.TWO_THIRDS.multiply((long) (byte) (-5));
      bigFraction5.THREE_FIFTHS.add((-1101L));
      bigFraction4.THREE_FIFTHS.floatValue();
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue((int) (byte)7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 0);
      Random.setNextRandom((-1208));
      bigFraction0.ONE_THIRD.floatValue();
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 0);
      bigFraction0.multiply((long) 0);
      bigFraction0.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.multiply(862720L);
      BigFraction bigFraction2 = bigFraction0.multiply(9258);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(961, 9258);
      bigFraction2.FOUR_FIFTHS.floatValue();
      bigFraction0.multiply(bigFraction2);
      bigFraction1.TWO.add(961);
      BigFraction bigFraction4 = bigFraction2.abs();
      BigFraction bigFraction5 = bigFraction1.subtract(1073741824L);
      bigFraction5.THREE_QUARTERS.getNumeratorAsInt();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction4.ONE_THIRD.hashCode();
      bigFraction4.ONE_FIFTH.subtract((long) 961);
      BigFraction bigFraction6 = BigFraction.TWO;
      bigInteger0.equals(bigFraction6);
      BigFraction bigFraction7 = bigFraction4.TWO.pow(bigInteger0);
      bigFraction7.THREE_FIFTHS.multiply((-2142981584));
      bigFraction4.multiply(207);
      BigFraction bigFraction8 = bigFraction0.multiply((-1530));
      bigFraction8.ONE_HALF.bigDecimalValue();
      BigFraction bigFraction9 = bigFraction8.subtract((-305L));
      bigFraction9.negate();
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue(2016, (-1530));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 0);
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.pow((long) (-734));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 2147483177;
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE.percentageValue();
      BigFraction bigFraction1 = new BigFraction(0.19622188806533813);
      try { 
        bigFraction1.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483167, 2147483167, (-24));
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)2;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.pow(bigInteger0);
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.add(bigInteger0);
      bigFraction0.toString();
      bigFraction1.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(2494.6229, (-176.6241), 2147483511);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,494.623 to fraction (1,609,914,540,211/645,353,869)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(6.861870970598542E106);
      // Undeclared exception!
      try { 
        bigFraction0.pow(2143297520);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2743.407246315762);
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483167);
      bigFraction0.divide((long) 2147483167);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(712.526349982);
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1090, 1090);
      bigFraction0.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      bigFraction2.bigDecimalValue((-418), 1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.088139242710895E-6);
      bigFraction0.TWO_FIFTHS.percentageValue();
      int int0 = (-276);
      BigFraction bigFraction1 = bigFraction0.multiply((-276));
      bigFraction1.ONE.getDenominatorAsLong();
      bigFraction1.ONE_FIFTH.percentageValue();
      bigFraction1.ZERO.floatValue();
      bigFraction0.ONE_FIFTH.reduce();
      BigFraction bigFraction2 = bigFraction1.pow((-1828L));
      bigFraction2.TWO_QUARTERS.add(bigFraction0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger("", (-276));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.THREE_FIFTHS.add(1044L);
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      bigFraction1.intValue();
      BigFraction bigFraction2 = bigFraction0.ZERO.add(10);
      bigFraction2.ONE_THIRD.getField();
      BigFraction bigFraction3 = bigFraction0.TWO_QUARTERS.divide(bigInteger0);
      bigFraction1.ONE_FIFTH.getDenominatorAsInt();
      BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.negate();
      bigFraction3.MINUS_ONE.multiply(bigFraction4);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-286));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(808.7695101804, (-1421));
      int int0 = (-438);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(808.7695101804, (-1421), (-438));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 808.77 to fraction after -438 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.divide((-9223372036854775808L));
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.pow(291);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1415.2954), 246);
      bigFraction0.toString();
      bigFraction0.bigDecimalValue(350, 5);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1415.2954), 246);
      bigFraction0.ONE_THIRD.subtract(19);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(4.1215410760803866E18, 8.136316299122392E-192, 19);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 4,121,541,076,080,386,600 to fraction (4,121,541,076,080,386,560/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 0);
      bigFraction0.toString();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(0, 350);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.THREE_FIFTHS.doubleValue();
      bigFraction0.THREE_FIFTHS.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.add(2200);
      BigFraction bigFraction2 = bigFraction0.negate();
      bigFraction2.ONE_HALF.pow((double) 2200);
      BigFraction bigFraction3 = bigFraction0.TWO_QUARTERS.subtract(1542L);
      bigFraction3.THREE_FIFTHS.getDenominatorAsInt();
      BigFraction bigFraction4 = bigFraction1.reciprocal();
      BigFraction bigFraction5 = bigFraction4.multiply(bigFraction0);
      bigFraction5.MINUS_ONE.longValue();
      BigFraction bigFraction6 = bigFraction0.ONE_HALF.add(bigFraction1);
      bigFraction1.TWO.pow(0L);
      bigFraction1.TWO.intValue();
      bigFraction0.getDenominatorAsLong();
      Object object0 = new Object();
      bigFraction0.MINUS_ONE.equals(object0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction6.ZERO.pow((double) 2);
      BigFraction bigFraction7 = bigFraction1.pow(bigInteger0);
      bigFraction0.ONE_FIFTH.pow(5);
      bigFraction7.ONE.longValue();
      bigFraction1.floatValue();
      bigFraction7.pow(2200);
      bigFraction7.getField();
      bigFraction6.THREE_QUARTERS.add(3L);
      BigFraction bigFraction8 = bigFraction0.subtract(bigInteger0);
      bigFraction6.add(bigInteger0);
      BigFraction bigFraction9 = bigFraction7.subtract(2200);
      BigFraction bigFraction10 = bigFraction9.TWO.divide(bigInteger0);
      bigFraction8.getDenominatorAsInt();
      bigFraction9.divide(bigInteger0);
      BigFraction bigFraction11 = bigFraction0.add(bigFraction10);
      bigFraction11.add(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow(2959);
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.divide(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.subtract(bigFraction1);
      bigFraction1.THREE_FIFTHS.multiply(bigInteger0);
      BigFraction bigFraction4 = BigFraction.getReducedFraction(1195, 1195);
      bigFraction1.TWO.getField();
      BigFraction bigFraction5 = bigFraction1.add(bigFraction0);
      bigFraction5.TWO_THIRDS.getNumeratorAsLong();
      Object object0 = new Object();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      bigFraction2.ONE_THIRD.equals(object0);
      bigFraction0.ONE.intValue();
      BigFraction bigFraction6 = bigFraction0.TWO_QUARTERS.pow(bigInteger0);
      bigFraction0.FOUR_FIFTHS.hashCode();
      bigFraction6.ZERO.bigDecimalValue(1);
      bigFraction5.divide(bigFraction6);
      BigFraction bigFraction7 = bigFraction0.add(6L);
      bigFraction7.multiply(bigInteger2);
      bigFraction3.floatValue();
      BigFraction bigFraction8 = bigFraction3.subtract(bigInteger2);
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction9 = bigFraction4.multiply(2959);
      bigFraction3.negate();
      bigFraction2.pow(1520L);
      BigFraction bigFraction10 = bigFraction8.subtract(bigInteger2);
      bigFraction10.getDenominator();
      bigFraction9.floatValue();
      bigFraction5.toString();
      bigFraction1.getNumerator();
      bigFraction4.multiply(bigInteger2);
      bigFraction9.getDenominatorAsInt();
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction0.pow((double) 0);
      bigFraction0.toString();
      bigFraction0.divide(100);
      BigFraction bigFraction2 = bigFraction1.add(2147352583);
      BigFraction bigFraction3 = bigFraction2.negate();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.subtract(9223372036854775807L);
      BigFraction bigFraction4 = bigFraction3.subtract(bigFraction1);
      bigFraction4.multiply((-202L));
      BigFraction bigFraction5 = new BigFraction(0, (-1270L));
      bigFraction5.add(bigFraction0);
      BigFraction bigFraction6 = BigFraction.TWO;
      BigFraction bigFraction7 = BigFraction.MINUS_ONE;
      bigFraction7.multiply(bigFraction3);
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue(2147352583, 2021161080);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.negate();
      bigFraction0.pow(1.0);
      bigFraction1.TWO_QUARTERS.toString();
      BigFraction bigFraction2 = bigFraction0.divide(Integer.MAX_VALUE);
      BigFraction bigFraction3 = bigFraction2.ZERO.add(927);
      BigFraction bigFraction4 = bigFraction2.THREE_FIFTHS.negate();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.subtract((long) Integer.MAX_VALUE);
      BigFraction bigFraction5 = bigFraction2.subtract(bigFraction4);
      BigFraction bigFraction6 = bigFraction2.multiply((-3958705157555305932L));
      bigFraction6.add(bigFraction5);
      bigFraction1.pow((double) 927);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-2147449162));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.7835721669653157E-296);
      // Undeclared exception!
      try { 
        bigFraction0.ONE.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-859.134218884));
      bigFraction0.floatValue();
      BigFraction bigFraction1 = bigFraction0.pow((-3103));
      bigFraction0.percentageValue();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(2679, (-1));
      BigFraction bigFraction3 = new BigFraction((long) (-3103));
      bigFraction3.getNumeratorAsInt();
      Object object0 = new Object();
      bigFraction3.equals(object0);
      bigFraction0.percentageValue();
      bigFraction2.getNumeratorAsLong();
      bigFraction1.doubleValue();
      BigFraction.getReducedFraction((-3103), 2679);
      BigFraction bigFraction4 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction5 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction6 = BigFraction.THREE_FIFTHS;
      bigFraction5.subtract(bigFraction6);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction7 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.compareTo(bigFraction6);
      BigFraction bigFraction8 = BigFraction.THREE_QUARTERS;
      bigFraction8.equals(bigFraction5);
      bigFraction4.floatValue();
      bigFraction4.negate();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1463.9150854587);
      bigFraction0.getDenominatorAsInt();
      bigFraction0.ONE_THIRD.getNumeratorAsInt();
      bigFraction0.subtract(2047L);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((-98L), (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction0.subtract(bigInteger1);
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      bigFraction0.subtract(bigFraction2);
      BigFraction bigFraction3 = bigFraction0.multiply(136052736L);
      BigFraction bigFraction4 = BigFraction.THREE_QUARTERS;
      bigFraction3.add(bigFraction4);
      BigFraction bigFraction5 = BigFraction.TWO;
      bigFraction3.multiply(bigFraction5);
      bigFraction5.bigDecimalValue(4, 4);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.negate();
      bigFraction0.pow(1.0);
      bigFraction1.TWO_QUARTERS.toString();
      BigFraction bigFraction2 = bigFraction0.divide(Integer.MAX_VALUE);
      BigFraction bigFraction3 = bigFraction2.ZERO.add(927);
      BigFraction bigFraction4 = bigFraction2.THREE_FIFTHS.negate();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.subtract((long) Integer.MAX_VALUE);
      BigFraction bigFraction5 = bigFraction2.subtract(bigFraction4);
      BigFraction bigFraction6 = bigFraction2.multiply((-3958705157555305932L));
      bigFraction6.add(bigFraction5);
      BigFraction bigFraction7 = BigFraction.TWO;
      bigFraction1.multiply(bigFraction5);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(Integer.MAX_VALUE, 2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract(21);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.pow(1);
      bigFraction3.equals(bigFraction1);
      bigFraction1.percentageValue();
      bigFraction2.doubleValue();
      BigFraction.getReducedFraction(1, 637);
      bigFraction0.equals(bigFraction3);
      BigFraction bigFraction4 = BigFraction.THREE_FIFTHS;
      bigFraction4.getNumeratorAsLong();
      BigFraction bigFraction5 = BigFraction.THREE_FIFTHS;
      bigFraction0.compareTo(bigFraction5);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 284);
      bigFraction0.divide(2139127680);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.subtract((-2338));
      bigFraction0.percentageValue();
      bigFraction0.equals(" / ");
      BigFraction bigFraction2 = bigFraction0.subtract((-2338));
      bigFraction0.longValue();
      BigFraction bigFraction3 = BigFraction.TWO;
      bigFraction0.equals(bigFraction3);
      bigFraction1.getNumeratorAsInt();
      bigFraction0.add(3222);
      bigFraction2.THREE_FIFTHS.hashCode();
      BigFraction bigFraction4 = bigFraction0.reduce();
      bigFraction3.getNumeratorAsInt();
      bigFraction2.subtract(2338);
      bigFraction4.subtract(bigFraction1);
      BigFraction bigFraction5 = BigFraction.ZERO;
      bigFraction5.pow(3222);
      bigFraction3.equals("NEGATIVE_COMPLEX_MODULE");
      bigFraction4.percentageValue();
      bigFraction3.doubleValue();
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(2283, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1954L));
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.add(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction1);
      bigFraction3.THREE_FIFTHS.floatValue();
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.multiply((-1954L));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction4.pow(bigInteger0);
      BigFraction bigFraction5 = BigFraction.FOUR_FIFTHS;
      bigFraction1.getDenominatorAsInt();
      bigFraction4.getNumeratorAsLong();
      bigFraction2.add(bigFraction0);
      bigFraction5.floatValue();
      bigFraction4.intValue();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.negate();
      bigFraction0.pow(1.0);
      bigFraction1.TWO_QUARTERS.toString();
      BigFraction bigFraction2 = bigFraction0.divide(Integer.MAX_VALUE);
      BigFraction bigFraction3 = bigFraction2.ZERO.add(927);
      bigFraction2.THREE_FIFTHS.negate();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction1.THREE_QUARTERS.divide(bigFraction4);
      BigFraction bigFraction5 = bigFraction1.add(bigInteger0);
      BigFraction bigFraction6 = bigFraction0.reduce();
      BigFraction bigFraction7 = bigFraction5.reciprocal();
      bigFraction7.reciprocal();
      bigFraction3.add(bigInteger0);
      bigFraction7.add(bigFraction6);
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue(2147481627, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow(2959);
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.divide(bigFraction0);
      bigFraction2.FOUR_FIFTHS.subtract(bigFraction1);
      bigFraction1.THREE_FIFTHS.multiply(bigInteger0);
      BigFraction.getReducedFraction(1195, 1195);
      bigFraction1.TWO.getField();
      BigFraction bigFraction3 = bigFraction1.add(bigFraction0);
      bigFraction3.TWO_THIRDS.getNumeratorAsLong();
      Object object0 = new Object();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.mod(bigInteger1);
      bigFraction2.ONE_THIRD.equals(object0);
      bigFraction0.ONE.intValue();
      BigFraction bigFraction4 = bigFraction0.TWO_QUARTERS.pow(bigInteger0);
      bigFraction0.FOUR_FIFTHS.hashCode();
      bigFraction4.ZERO.bigDecimalValue(1);
      bigFraction3.divide(bigFraction4);
      BigFraction bigFraction5 = bigFraction0.add(6L);
      BigFraction bigFraction6 = bigFraction5.multiply(bigInteger0);
      bigFraction6.TWO_THIRDS.floatValue();
      BigFraction bigFraction7 = bigFraction3.subtract(bigInteger0);
      bigFraction7.ONE_THIRD.getNumeratorAsInt();
      bigFraction7.THREE_FIFTHS.multiply(1);
      BigFraction bigFraction8 = bigFraction0.negate();
      BigFraction bigFraction9 = bigFraction6.ONE_HALF.pow((long) 1);
      BigFraction bigFraction10 = bigFraction9.TWO.subtract(bigInteger0);
      bigFraction1.getDenominator();
      bigFraction6.floatValue();
      bigFraction10.ONE_FIFTH.toString();
      bigFraction2.toString();
      BigInteger bigInteger2 = bigFraction3.getNumerator();
      bigFraction10.multiply(bigInteger2);
      bigFraction8.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(519.0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.negate();
      bigFraction1.ONE_QUARTER.floatValue();
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      bigFraction1.TWO_QUARTERS.negate();
      bigFraction1.equals(bigFraction2);
      BigFraction bigFraction3 = BigFraction.getReducedFraction((-784), (-1));
      bigFraction3.ONE.abs();
      bigFraction3.divide((long) (-1));
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(2653);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE.multiply(0);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.add(314);
      BigFraction bigFraction3 = bigFraction0.ONE_FIFTH.abs();
      bigFraction3.ONE_THIRD.pow((-428.36163294532));
      bigFraction1.ONE_HALF.floatValue();
      BigFraction bigFraction4 = bigFraction0.THREE_QUARTERS.pow((-3103));
      bigFraction4.ONE_HALF.percentageValue();
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-3103), (-3103));
      bigFraction5.ONE_HALF.getNumeratorAsInt();
      bigFraction4.ONE_HALF.equals(bigFraction5);
      bigFraction0.percentageValue();
      bigFraction5.getNumeratorAsLong();
      bigFraction5.doubleValue();
      BigFraction bigFraction6 = BigFraction.getReducedFraction(7, 2147481627);
      BigFraction bigFraction7 = bigFraction0.subtract(bigFraction4);
      bigFraction7.subtract(bigFraction6);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction8 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction7.compareTo(bigFraction2);
      bigFraction4.equals(bigFraction1);
      bigFraction7.floatValue();
      bigFraction4.negate();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = new BigFraction(519.0);
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.negate();
      bigFraction2.ONE_QUARTER.floatValue();
      BigFraction bigFraction3 = bigFraction0.THREE_QUARTERS.multiply(bigFraction1);
      BigFraction bigFraction4 = bigFraction0.abs();
      BigFraction bigFraction5 = BigFraction.FOUR_FIFTHS;
      bigFraction4.TWO_QUARTERS.negate();
      bigFraction0.ONE_QUARTER.intValue();
      bigFraction4.equals(bigFraction5);
      bigFraction1.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.subtract(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction6 = bigFraction1.divide(bigInteger0);
      bigFraction5.bigDecimalValue();
      bigFraction3.getNumeratorAsLong();
      bigFraction5.subtract(bigFraction0);
      bigFraction1.getDenominatorAsLong();
      bigFraction1.divide(2147483647L);
      bigFraction6.toString();
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue((-153));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE.multiply(0);
      bigFraction1.TWO_QUARTERS.add(314);
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.abs();
      bigFraction2.ONE_THIRD.pow((-428.36163294532));
      bigFraction1.ONE_HALF.floatValue();
      BigFraction bigFraction3 = bigFraction0.THREE_QUARTERS.pow((-3103));
      bigFraction3.ONE_HALF.percentageValue();
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-3103), (-3103));
      bigFraction4.ONE_HALF.getNumeratorAsInt();
      bigFraction3.ONE_HALF.equals(bigFraction4);
      bigFraction0.percentageValue();
      bigFraction4.getNumeratorAsLong();
      bigFraction4.doubleValue();
      BigFraction bigFraction5 = BigFraction.getReducedFraction(7, 2147481627);
      bigFraction4.getDenominatorAsInt();
      bigFraction5.getNumeratorAsLong();
      BigFraction bigFraction6 = null;
      try {
        bigFraction6 = new BigFraction((-3103), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, (-1722));
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.multiply((long) 1);
      bigFraction0.add(bigFraction1);
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.doubleValue();
      bigFraction0.getNumeratorAsInt();
      bigFraction0.TWO_FIFTHS.getNumeratorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction1.TWO_FIFTHS.intValue();
      bigFraction1.TWO_FIFTHS.subtract((long) 0);
      bigFraction0.TWO.intValue();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigFraction1.TWO_THIRDS.multiply(bigInteger1);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction2.TWO_THIRDS.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = new BigFraction(519.0);
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.negate();
      bigFraction2.ONE_QUARTER.floatValue();
      bigFraction0.THREE_QUARTERS.multiply(bigFraction1);
      bigFraction0.abs();
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction4 = bigFraction3.negate();
      bigFraction0.intValue();
      BigFraction bigFraction5 = BigFraction.TWO_FIFTHS;
      Object object0 = new Object();
      bigFraction5.equals(object0);
      BigFraction.getReducedFraction((-1), (-1));
      BigFraction bigFraction6 = BigFraction.FOUR_FIFTHS;
      bigFraction2.abs();
      bigFraction4.pow((double) 0.25F);
      BigFraction bigFraction7 = new BigFraction((-1));
      bigFraction7.divide((-784));
      bigFraction3.equals(bigFraction6);
      bigFraction6.bigDecimalValue(0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = new BigFraction(519.0);
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.negate();
      bigFraction2.ONE_QUARTER.floatValue();
      BigFraction bigFraction3 = bigFraction0.THREE_QUARTERS.multiply(bigFraction1);
      bigFraction0.abs();
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      bigFraction0.negate();
      bigFraction4.intValue();
      Object object0 = new Object();
      bigFraction3.equals(object0);
      BigFraction.getReducedFraction((-1), 7);
      BigInteger bigInteger0 = null;
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = new BigFraction(519.0);
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.negate();
      bigFraction2.ONE_QUARTER.floatValue();
      BigFraction bigFraction3 = bigFraction0.THREE_QUARTERS.multiply(bigFraction1);
      bigFraction0.intValue();
      bigFraction3.subtract((long) 0);
      bigFraction3.intValue();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = null;
      // Undeclared exception!
      try { 
        bigFraction3.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = new BigFraction(519.0);
      BigFraction bigFraction2 = BigFraction.TWO_FIFTHS;
      bigFraction2.ONE_FIFTH.multiply((-735));
      bigFraction0.floatValue();
      BigFraction bigFraction3 = bigFraction0.THREE_QUARTERS.multiply(bigFraction1);
      BigFraction bigFraction4 = bigFraction0.abs();
      BigFraction bigFraction5 = BigFraction.FOUR_FIFTHS;
      bigFraction4.TWO_QUARTERS.negate();
      bigFraction3.getNumeratorAsInt();
      BigFraction bigFraction6 = BigFraction.TWO;
      bigFraction6.getDenominatorAsInt();
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction4.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1415.2954), 246);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(1);
      bigFraction1.TWO_THIRDS.percentageValue();
      bigFraction0.TWO.equals("NEGATIVE_COMPLEX_MODULE");
      BigFraction bigFraction2 = bigFraction1.ONE.subtract(1);
      bigFraction0.longValue();
      bigFraction1.equals(bigFraction0);
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction2.add((-1));
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      BigFraction bigFraction4 = bigFraction1.reduce();
      bigFraction4.TWO.divide(bigInteger0);
      bigFraction2.getNumeratorAsInt();
      bigFraction4.subtract((-151));
      bigFraction3.bigDecimalValue();
      bigFraction4.getNumeratorAsLong();
      BigFraction bigFraction5 = BigFraction.ONE_THIRD;
      bigFraction5.subtract(bigFraction3);
      bigFraction0.getDenominatorAsLong();
      bigFraction2.divide((-2136L));
      bigFraction0.toString();
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(1015);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction1.getField();
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction3 = bigFraction2.multiply(bigFraction1);
      bigFraction3.longValue();
      bigFraction0.percentageValue();
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction1.ONE.abs();
      bigFraction4.ZERO.longValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction5 = bigFraction3.ONE_HALF.subtract(bigInteger0);
      bigFraction5.ONE_HALF.getNumeratorAsInt();
      BigFraction bigFraction6 = BigFraction.TWO;
      bigFraction6.TWO_THIRDS.getDenominatorAsInt();
      BigFraction bigFraction7 = bigFraction3.subtract(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction8 = bigFraction2.divide(bigInteger1);
      bigFraction8.ONE.divide(1);
      bigFraction8.ZERO.divide(bigFraction2);
      bigFraction2.bigDecimalValue();
      bigFraction3.getNumeratorAsLong();
      BigFraction bigFraction9 = bigFraction1.subtract(bigFraction5);
      bigFraction9.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction5.divide(9007199254740990L);
      bigFraction3.toString();
      bigFraction7.bigDecimalValue(1);
      bigFraction8.doubleValue();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      String string0 = "";
      int int0 = 1098;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)99;
      byte byte0 = (byte) (-4);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1463.9150854587);
      bigFraction0.getDenominatorAsInt();
      bigFraction0.ONE_THIRD.getNumeratorAsInt();
      BigInteger bigInteger0 = BigInteger.valueOf(136052736L);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.modInverse(bigInteger1);
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.add((long) 1);
      bigFraction2.pow((double) 1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.pow(3809L);
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      bigFraction2.getField();
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction4 = BigFraction.ONE_FIFTH;
      bigFraction4.longValue();
      bigFraction0.percentageValue();
      bigFraction3.bigDecimalValue();
      BigFraction bigFraction5 = bigFraction2.ONE.abs();
      bigFraction5.ZERO.longValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction6 = bigFraction4.ONE_HALF.subtract(bigInteger0);
      bigFraction6.ONE_HALF.getNumeratorAsInt();
      BigFraction bigFraction7 = BigFraction.TWO;
      bigFraction7.TWO_THIRDS.getDenominatorAsInt();
      bigFraction1.TWO.compareTo(bigFraction7);
      BigFraction bigFraction8 = bigFraction4.subtract(bigInteger0);
      BigFraction bigFraction9 = bigFraction0.add(3809L);
      bigFraction9.MINUS_ONE.getNumeratorAsLong();
      bigFraction9.ONE_THIRD.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction3.divide(bigInteger1);
      bigFraction9.TWO_THIRDS.add((-2066L));
      bigFraction1.equals(bigFraction2);
      bigFraction7.bigDecimalValue();
      bigFraction4.getNumeratorAsLong();
      bigFraction9.hashCode();
      BigFraction bigFraction10 = bigFraction2.subtract(bigFraction6);
      bigFraction10.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction2.subtract(bigFraction10);
      bigFraction6.divide(9007199254740990L);
      bigFraction4.toString();
      bigFraction8.bigDecimalValue(1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1025, 1025);
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.multiply(bigFraction0);
      bigFraction2.ONE_HALF.subtract((long) 1025);
      bigFraction2.ONE_FIFTH.longValue();
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.reduce();
      bigFraction0.ONE_QUARTER.pow((-4022L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction2.add(bigInteger0);
      bigFraction3.getDenominator();
      long long0 = 0L;
      // Undeclared exception!
      try { 
        bigFraction4.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1025, 1025);
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.multiply(bigFraction0);
      bigFraction2.ONE_HALF.subtract((long) 1025);
      bigFraction2.ONE_FIFTH.longValue();
      bigFraction2.ONE_THIRD.reduce();
      BigFraction bigFraction3 = bigFraction0.ONE_QUARTER.pow((-4022L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.pow(bigInteger0);
      BigFraction.getReducedFraction(1025, 489707172);
      bigFraction0.equals(bigInteger0);
      bigFraction3.getNumeratorAsLong();
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = 1906;
      BigFraction bigFraction0 = new BigFraction((-1015L), 33216L);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-859.134218884));
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.pow((-1548L));
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      bigFraction2.TWO_QUARTERS.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction0.pow(2707L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction3.pow(bigInteger0);
      bigFraction1.pow((double) 2707L);
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue(3125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1025, 1025);
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.multiply(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.ONE_HALF.subtract((long) 1025);
      bigFraction2.ONE_FIFTH.longValue();
      BigFraction bigFraction4 = bigFraction2.ONE_THIRD.reduce();
      bigFraction3.doubleValue();
      BigFraction.getReducedFraction((-3428), 1025);
      BigFraction bigFraction5 = bigFraction0.subtract(bigFraction4);
      bigFraction4.subtract(bigFraction5);
      BigFraction bigFraction6 = BigFraction.getReducedFraction(1025, 1025);
      bigFraction6.divide((-259));
      bigFraction3.divide((-141));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE.multiply(0);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.add(314);
      BigFraction bigFraction3 = bigFraction0.ONE_FIFTH.abs();
      bigFraction3.ONE_THIRD.pow((-428.36163294532));
      bigFraction1.ONE_HALF.floatValue();
      BigFraction bigFraction4 = bigFraction0.THREE_QUARTERS.pow((-3103));
      bigFraction4.ONE_HALF.percentageValue();
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-3103), (-3103));
      bigFraction5.ONE_HALF.getNumeratorAsInt();
      bigFraction4.ONE_HALF.equals(bigFraction5);
      bigFraction0.percentageValue();
      bigFraction5.getNumeratorAsLong();
      bigFraction5.doubleValue();
      BigFraction bigFraction6 = BigFraction.getReducedFraction(7, 2147481627);
      BigFraction bigFraction7 = bigFraction0.subtract(bigFraction4);
      bigFraction7.subtract(bigFraction6);
      BigFraction bigFraction8 = bigFraction2.divide((-1));
      // Undeclared exception!
      try { 
        bigFraction8.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE.multiply(0);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.add(314);
      BigFraction bigFraction3 = bigFraction0.ONE_FIFTH.abs();
      bigFraction3.ONE_THIRD.pow((-428.36163294532));
      bigFraction1.ONE_HALF.floatValue();
      BigFraction bigFraction4 = bigFraction0.THREE_QUARTERS.pow((-3103));
      bigFraction4.ONE_HALF.percentageValue();
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-3103), (-3103));
      bigFraction5.ONE_HALF.getNumeratorAsInt();
      bigFraction4.ONE_HALF.equals(bigFraction5);
      bigFraction0.percentageValue();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction6 = bigFraction0.multiply(515);
      BigFraction bigFraction7 = bigFraction0.ONE_HALF.reduce();
      bigFraction7.TWO_THIRDS.reciprocal();
      bigFraction3.TWO.add(0);
      bigFraction0.THREE_FIFTHS.getNumeratorAsLong();
      bigFraction1.compareTo(bigFraction2);
      bigFraction3.divide(bigFraction6);
      bigFraction4.abs();
      bigFraction5.pow((-3714.099));
      bigFraction0.divide((-2003));
      bigFraction7.getDenominator();
      Object object0 = new Object();
      bigFraction3.equals(object0);
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue((-1322));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-832.878421723125));
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1415.2954), 246);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(1);
      bigFraction1.TWO_THIRDS.percentageValue();
      bigFraction0.TWO.equals("NEGATIVE_COMPLEX_MODULE");
      BigFraction bigFraction2 = bigFraction1.ONE.subtract(1);
      bigFraction0.longValue();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction2.add((-1));
      bigFraction2.compareTo(bigFraction3);
      BigFraction bigFraction4 = bigFraction3.add((-1415L));
      bigFraction0.getNumeratorAsLong();
      bigFraction4.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.divide(bigInteger0);
      Object object0 = new Object();
      bigFraction3.equals(object0);
      bigFraction2.bigDecimalValue();
      bigFraction2.hashCode();
      bigFraction0.getDenominatorAsLong();
      bigFraction1.subtract(bigFraction3);
      bigFraction1.toString();
      BigFraction bigFraction5 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue((-1826));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = new BigFraction(519.0);
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.negate();
      bigFraction2.ONE_QUARTER.floatValue();
      bigFraction2.THREE_QUARTERS.compareTo(bigFraction0);
      bigFraction0.THREE_QUARTERS.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.abs();
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      bigFraction3.TWO_QUARTERS.negate();
      bigFraction0.ONE_QUARTER.intValue();
      bigFraction3.equals(bigFraction4);
      BigFraction.getReducedFraction((-784), (-1));
      // Undeclared exception!
      try { 
        bigFraction1.divide((long) 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-859.134218884));
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.pow((-1548L));
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.divide(3125);
      bigFraction2.TWO_QUARTERS.getNumeratorAsLong();
      bigFraction1.TWO_QUARTERS.doubleValue();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(3125, (-3428));
      bigFraction3.TWO_FIFTHS.subtract(bigFraction0);
      BigFraction bigFraction4 = bigFraction0.subtract(bigFraction3);
      bigFraction4.divide(3125);
      bigFraction1.divide(4);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)47;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
      bigInteger1.equals(bigFraction0);
      bigFraction0.MINUS_ONE.reciprocal();
      bigFraction0.getDenominator();
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.divide((int) (byte)0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1073741824L));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.ZERO.divide((int) (byte)71);
      bigFraction1.ONE_FIFTH.pow(629);
      BigFraction bigFraction4 = bigFraction2.divide(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.ONE_FIFTH.add(0L);
      // Undeclared exception!
      try { 
        bigFraction5.ZERO.divide(bigFraction3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = (-1);
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), (-2372));
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.FOUR_FIFTHS.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.ONE_FIFTH.pow(5047L);
      int int1 = (-916);
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.reduce();
      BigFraction bigFraction5 = bigFraction4.THREE_FIFTHS.add((-1));
      // Undeclared exception!
      try { 
        bigFraction5.FOUR_FIFTHS.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      int int0 = (-2348);
      BigFraction bigFraction1 = bigFraction0.multiply((-2348));
      bigFraction1.divide(bigFraction0);
      bigFraction0.getDenominator();
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      int int1 = (-337);
      // Undeclared exception!
      try { 
        bigFraction2.TWO_THIRDS.bigDecimalValue((-337), (-2387));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE.divide(4402L);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.TWO_FIFTHS.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.pow(bigInteger0);
      bigFraction2.ONE_THIRD.reciprocal();
      bigFraction2.TWO_FIFTHS.abs();
      BigFraction bigFraction3 = bigFraction1.ONE_THIRD.add(bigInteger0);
      int int0 = 2;
      BigFraction bigFraction4 = bigFraction3.MINUS_ONE.multiply(2);
      bigFraction4.FOUR_FIFTHS.subtract(2603L);
      BigFraction bigFraction5 = bigFraction3.ONE_THIRD.subtract(bigFraction0);
      bigFraction5.TWO.divide(bigInteger0);
      int int1 = (-2287);
      // Undeclared exception!
      try { 
        bigFraction5.TWO.bigDecimalValue((-2287), 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.39433568716049194, 0.39433568716049194, 645);
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction1.MINUS_ONE.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction1.ONE_HALF.bigDecimalValue(Integer.MAX_VALUE, 1427);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, (-1722));
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = new BigFraction((-3679.0));
      bigFraction0.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.abs();
      bigFraction1.TWO_FIFTHS.abs();
      BigFraction.getReducedFraction(930, 1);
      bigFraction0.subtract((-213L));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(0);
      bigFraction0.TWO_THIRDS.compareTo(bigFraction1);
      bigFraction0.ONE_QUARTER.multiply(3566);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.multiply((-2996));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = new BigFraction(519.0);
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.negate();
      bigFraction2.ONE_QUARTER.floatValue();
      bigFraction2.THREE_QUARTERS.compareTo(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.THREE_QUARTERS.multiply(bigFraction1);
      BigFraction bigFraction4 = bigFraction0.abs();
      BigFraction bigFraction5 = BigFraction.FOUR_FIFTHS;
      bigFraction4.TWO_QUARTERS.negate();
      bigFraction0.ONE_QUARTER.intValue();
      bigFraction4.equals(bigFraction5);
      BigFraction bigFraction6 = BigFraction.getReducedFraction((-784), (-1));
      BigFraction bigFraction7 = bigFraction3.add(bigFraction6);
      bigFraction6.ONE.abs();
      bigFraction7.pow(519.0);
      BigFraction bigFraction8 = bigFraction7.divide((-1));
      bigFraction3.getDenominator();
      bigFraction6.equals(bigFraction8);
      // Undeclared exception!
      try { 
        bigFraction7.bigDecimalValue(2004);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1415.2954), 246);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(1);
      bigFraction1.TWO_THIRDS.percentageValue();
      bigFraction0.TWO.equals("NEGATIVE_COMPLEX_MODULE");
      BigFraction bigFraction2 = bigFraction1.ONE.subtract(1);
      bigFraction0.longValue();
      bigFraction1.equals(bigFraction0);
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction2.add((-1));
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      BigFraction bigFraction4 = bigFraction1.reduce();
      BigFraction bigFraction5 = bigFraction4.TWO.divide(bigInteger0);
      bigFraction5.multiply((long) 1);
      bigFraction2.getNumeratorAsInt();
      bigFraction0.TWO_FIFTHS.getNumeratorAsInt();
      BigFraction bigFraction6 = bigFraction4.subtract((-151));
      BigFraction bigFraction7 = bigFraction3.subtract(bigFraction2);
      BigFraction bigFraction8 = bigFraction7.TWO.pow((-447));
      bigFraction0.equals(bigFraction1);
      bigFraction2.getDenominator();
      bigFraction1.percentageValue();
      bigFraction2.doubleValue();
      BigFraction.getReducedFraction(0, 1075);
      bigFraction6.equals(bigFraction2);
      bigFraction4.getNumeratorAsLong();
      bigFraction8.compareTo(bigFraction7);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction1.ONE_HALF.pow((-3013L));
      bigFraction0.compareTo(bigFraction1);
      bigFraction0.MINUS_ONE.reduce();
      bigFraction0.ONE_FIFTH.pow((double) (-1));
      bigFraction1.ONE_HALF.intValue();
      bigFraction0.ONE_FIFTH.percentageValue();
      BigFraction.getReducedFraction((-1), (-655));
      bigFraction0.getNumerator();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction1.TWO.divide(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.add(2408L);
      bigFraction0.subtract(bigFraction1);
      bigFraction0.subtract(bigFraction1);
      bigFraction1.negate();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction1.ONE_HALF.percentageValue();
      bigFraction1.TWO_FIFTHS.percentageValue();
      bigFraction1.ONE_FIFTH.reciprocal();
      bigFraction0.equals(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.abs();
      BigFraction.getReducedFraction((-170), 1);
      bigFraction0.THREE_FIFTHS.getDenominatorAsLong();
      bigFraction1.floatValue();
      bigFraction0.TWO_THIRDS.compareTo(bigFraction3);
      bigFraction3.ONE.doubleValue();
      // Undeclared exception!
      try { 
        bigFraction2.ONE.bigDecimalValue(658);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0, 1776.61514205, (-116));
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      bigFraction1.ONE_HALF.divide(bigFraction2);
      bigFraction0.THREE_FIFTHS.add(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.bigDecimalValue((-936), 91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = (-926);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-1547.0), (-926));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1,547 to fraction (-9,223,372,036,854,774,260/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 0;
      int int1 = Integer.MAX_VALUE;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, Integer.MAX_VALUE);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.divide(2228L);
      bigFraction1.FOUR_FIFTHS.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction1.abs();
      bigFraction2.ONE_HALF.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction1.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.subtract(bigFraction1);
      bigFraction2.ONE_THIRD.multiply(27L);
      bigFraction0.getNumeratorAsInt();
      bigFraction0.pow(1);
      bigFraction2.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.ZERO.divide(1500L);
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-1239), (-157));
      bigFraction2.MINUS_ONE.negate();
      bigFraction2.TWO_QUARTERS.pow(0);
      bigFraction0.getNumeratorAsLong();
      bigFraction1.THREE_FIFTHS.longValue();
      bigFraction0.THREE_QUARTERS.reciprocal();
      BigFraction bigFraction3 = bigFraction1.multiply(1075);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction4 = bigFraction3.TWO_FIFTHS.subtract(bigInteger0);
      bigFraction4.ONE_FIFTH.divide(bigFraction2);
      BigFraction bigFraction5 = bigFraction4.ONE_HALF.pow((-1239));
      bigFraction5.THREE_FIFTHS.subtract(214);
      bigFraction3.divide(1075);
      bigFraction3.getDenominator();
      // Undeclared exception!
      try { 
        bigFraction3.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.pow(3809L);
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      bigFraction2.getField();
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction4 = bigFraction2.multiply(bigFraction3);
      bigFraction4.longValue();
      bigFraction0.percentageValue();
      bigFraction3.bigDecimalValue();
      BigFraction bigFraction5 = bigFraction2.ONE.abs();
      bigFraction5.ZERO.longValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction6 = bigFraction4.ONE_HALF.subtract(bigInteger0);
      bigFraction6.ONE_HALF.getNumeratorAsInt();
      BigFraction bigFraction7 = BigFraction.TWO;
      bigFraction7.TWO_THIRDS.getDenominatorAsInt();
      bigFraction1.TWO.compareTo(bigFraction7);
      BigFraction bigFraction8 = bigFraction4.subtract(bigInteger0);
      BigFraction bigFraction9 = bigFraction0.add(3809L);
      bigFraction9.MINUS_ONE.getNumeratorAsLong();
      bigFraction9.ONE_THIRD.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction3.divide(bigInteger1);
      bigFraction9.TWO_THIRDS.add((-2066L));
      bigFraction1.equals(bigFraction2);
      bigFraction3.bigDecimalValue();
      bigFraction4.getNumeratorAsLong();
      bigFraction9.hashCode();
      BigFraction bigFraction10 = bigFraction2.subtract(bigFraction6);
      bigFraction10.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction2.subtract(bigFraction10);
      bigFraction6.divide(9007199254740990L);
      bigFraction4.toString();
      bigFraction8.bigDecimalValue(1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1025, 1025);
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.multiply(bigFraction0);
      bigFraction2.ONE_HALF.subtract((long) 1025);
      bigFraction2.ONE_FIFTH.longValue();
      bigFraction2.ONE_THIRD.reduce();
      BigFraction bigFraction3 = bigFraction0.ONE_QUARTER.pow((-4022L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.pow(bigInteger0);
      bigFraction2.pow(0.0);
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 1415;
      BigFraction bigFraction0 = new BigFraction(1415, 1415);
      bigFraction0.FOUR_FIFTHS.percentageValue();
      bigFraction0.ONE_FIFTH.bigDecimalValue();
      bigFraction0.TWO_FIFTHS.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-643));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1);
      bigFraction0.FOUR_FIFTHS.bigDecimalValue(1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte) (-26);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.ONE_QUARTER.subtract(bigInteger0);
      bigFraction0.getNumeratorAsLong();
      bigFraction0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE.multiply(0);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.add(314);
      BigFraction bigFraction3 = bigFraction0.ONE_FIFTH.abs();
      bigFraction3.ONE_THIRD.pow((-428.36163294532));
      bigFraction1.ONE_HALF.floatValue();
      BigFraction bigFraction4 = bigFraction0.THREE_QUARTERS.pow((-3103));
      bigFraction4.ONE_HALF.percentageValue();
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-3103), (-3103));
      bigFraction5.ONE_HALF.getNumeratorAsInt();
      bigFraction4.ONE_HALF.equals(bigFraction5);
      bigFraction0.percentageValue();
      bigFraction0.getNumeratorAsInt();
      int int0 = 515;
      BigFraction bigFraction6 = bigFraction0.multiply(515);
      BigFraction bigFraction7 = bigFraction0.ONE_HALF.reduce();
      bigFraction7.TWO_THIRDS.reciprocal();
      bigFraction3.TWO.add(0);
      bigFraction0.THREE_FIFTHS.getNumeratorAsLong();
      bigFraction1.compareTo(bigFraction2);
      bigFraction3.divide(bigFraction6);
      long long0 = (-1657L);
      int int1 = 1906;
      // Undeclared exception!
      try { 
        bigFraction1.FOUR_FIFTHS.bigDecimalValue(1, 1906);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ONE_HALF.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(9007199254740990L);
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.TWO.subtract(52);
      bigFraction3.ONE_THIRD.subtract(bigInteger0);
      bigFraction2.ONE_QUARTER.multiply(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction1.ZERO.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1954L), (-1954L));
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.add(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction1);
      bigFraction3.THREE_FIFTHS.floatValue();
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.multiply((-1954L));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction4.pow(bigInteger0);
      bigFraction3.pow((-1954L));
      bigFraction1.getDenominatorAsInt();
      bigFraction4.getNumeratorAsLong();
      bigFraction2.add(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-331), 442);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.THREE_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract((-1259L));
      bigFraction1.ONE_HALF.doubleValue();
      bigFraction0.TWO_FIFTHS.pow((double) 442);
      bigFraction0.THREE_QUARTERS.getField();
      int int0 = 1175;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1175, 442);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.longValue();
      bigFraction0.subtract(1362);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte)74;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 343;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 343);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-13);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      int int0 = bigFraction2.intValue();
      assertEquals((byte) (-13), bigFraction1.byteValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.021996184153141E185, 1.021996184153141E185, 1090);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 102,199,618,415,314,100,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((-4104), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.bigDecimalValue((-4886), (-4886));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
