/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 11:17:52 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(44L);
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.subtract(3);
      BigFraction bigFraction3 = bigFraction2.ONE_HALF.reduce();
      BigFraction bigFraction4 = bigFraction0.negate();
      BigFraction bigFraction5 = bigFraction0.divide(bigFraction4);
      bigFraction5.ONE_HALF.toString();
      bigFraction5.TWO.add(3);
      bigFraction0.ZERO.equals(bigFraction5);
      bigFraction4.compareTo(bigFraction0);
      bigFraction1.getDenominatorAsLong();
      bigFraction0.ONE_QUARTER.getDenominatorAsLong();
      bigFraction4.compareTo(bigFraction0);
      bigFraction3.THREE_FIFTHS.divide(bigFraction5);
      bigFraction1.getNumerator();
      bigFraction4.subtract((-1073741824L));
      bigFraction3.divide(4503599627370496L);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.ONE.multiply(bigInteger0);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-35);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.TWO_FIFTHS.hashCode();
      bigFraction0.ONE_FIFTH.getDenominatorAsInt();
      bigFraction0.TWO_QUARTERS.toString();
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(673);
      bigFraction1.TWO_FIFTHS.longValue();
      bigFraction0.MINUS_ONE.equals("1 / 2");
      BigFraction bigFraction2 = bigFraction0.pow((-220L));
      bigFraction1.ONE_THIRD.equals(bigFraction2);
      Random.setNextRandom(3);
      bigFraction1.getDenominatorAsLong();
      bigFraction2.floatValue();
      BigFraction bigFraction3 = bigFraction0.subtract((-1L));
      bigFraction3.bigDecimalValue();
      BigFraction bigFraction4 = BigFraction.getReducedFraction(673, 673);
      bigFraction4.ONE_THIRD.getNumeratorAsInt();
      bigFraction4.TWO_THIRDS.intValue();
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue(673);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      BigFraction bigFraction0 = new BigFraction((-9223372036854775808L));
      bigFraction0.intValue();
      double double0 = (-1.0);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.FOUR_FIFTHS.subtract((-1040L));
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO.multiply(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.TWO_THIRDS.add(bigInteger0);
      bigFraction3.ONE_HALF.hashCode();
      BigFraction bigFraction4 = BigFraction.getReducedFraction(944, 212);
      bigFraction4.ONE_HALF.hashCode();
      BigFraction bigFraction5 = bigFraction2.FOUR_FIFTHS.add(bigFraction3);
      bigFraction5.FOUR_FIFTHS.doubleValue();
      bigFraction2.TWO_FIFTHS.intValue();
      BigFraction bigFraction6 = bigFraction0.THREE_FIFTHS.pow((-1040L));
      bigFraction6.TWO_FIFTHS.hashCode();
      bigFraction3.ZERO.equals(bigInteger0);
      bigFraction2.THREE_QUARTERS.hashCode();
      bigFraction1.ONE_FIFTH.multiply(0);
      bigFraction0.reduce();
      bigFraction2.abs();
      bigFraction0.floatValue();
      bigFraction1.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction3.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Random.setNextRandom(4191);
      BigFraction bigFraction0 = new BigFraction(5102L, (long) 4191);
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.ONE.subtract(bigFraction1);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(4191, 4191, mockRandom0);
      bigFraction2.THREE_QUARTERS.add(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.pow((long) 4191);
      BigFraction bigFraction4 = bigFraction3.abs();
      BigFraction bigFraction5 = bigFraction2.multiply(4);
      bigFraction5.ONE_QUARTER.add((-350L));
      bigFraction2.getField();
      bigFraction4.getNumerator();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-41), (-41));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      bigFraction0.THREE_QUARTERS.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.subtract(bigInteger0);
      byteArray0[1] = (byte)117;
      bigFraction0.THREE_FIFTHS.floatValue();
      byteArray0[2] = (byte) (-80);
      bigFraction0.FOUR_FIFTHS.getField();
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-93);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.longValue();
      BigFraction bigFraction2 = bigFraction0.add(bigInteger1);
      bigFraction1.getNumerator();
      bigFraction2.compareTo(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.divide((-1));
      bigFraction3.floatValue();
      BigFraction bigFraction4 = bigFraction3.MINUS_ONE.subtract(373);
      BigFraction bigFraction5 = bigFraction1.divide((long) (byte) (-80));
      BigInteger bigInteger2 = bigFraction2.getNumerator();
      bigFraction4.TWO_FIFTHS.toString();
      bigFraction4.floatValue();
      Object object0 = new Object();
      bigFraction2.ONE_FIFTH.equals(object0);
      bigFraction4.multiply(bigFraction5);
      bigFraction1.divide(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(7, 2145511670);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.toString();
      bigFraction0.hashCode();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(291, 3540);
      BigFraction bigFraction2 = bigFraction1.add(0);
      bigFraction1.toString();
      bigFraction1.doubleValue();
      bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction0);
      BigFraction bigFraction4 = new BigFraction((long) 291);
      bigFraction4.floatValue();
      bigFraction1.getDenominatorAsInt();
      bigFraction3.getDenominatorAsInt();
      BigFraction bigFraction5 = new BigFraction(6960.959426623, 254);
      bigFraction3.multiply((long) 254);
      bigFraction4.floatValue();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = new BigFraction(8);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction2.reduce();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1149.005959343744);
      BigFraction bigFraction1 = bigFraction0.pow(37);
      bigFraction1.add(9218868437227405312L);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.subtract(100);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      double double0 = (-8.925958555729115E-9);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = new BigFraction(1);
      bigFraction0.equals(bigFraction1);
      bigFraction1.equals(bigFraction0);
      bigFraction1.floatValue();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = new BigFraction((-4.7559175309753334E156));
      bigFraction1.getNumerator();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction0.TWO_QUARTERS.equals(bigFraction1);
      bigFraction0.equals((Object) null);
      bigFraction0.equals((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.toString();
      bigFraction0.doubleValue();
      Object object0 = new Object();
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction0.compareTo(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.ONE_HALF.reciprocal();
      bigFraction0.ONE_FIFTH.bigDecimalValue(1);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1, 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.toString();
      bigFraction1.TWO.add(80);
      bigFraction1.toString();
      bigFraction1.THREE_QUARTERS.doubleValue();
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.ZERO.multiply(bigFraction0);
      bigFraction0.subtract(bigFraction2);
      BigFraction bigFraction4 = new BigFraction(1821.2113766166829, 1.4444444423133973E-4, 80);
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue(1, 80);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2591.0, 2591.0, 113);
      BigFraction bigFraction1 = new BigFraction(1.8376017791642605E-8);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.reduce();
      bigFraction1.getDenominatorAsLong();
      bigFraction1.multiply(bigFraction0);
      bigFraction1.subtract(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, (-7278142539171889152L));
      bigFraction0.percentageValue();
      bigFraction0.intValue();
      BigFraction bigFraction1 = new BigFraction((double) 0);
      bigFraction1.floatValue();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.toString();
      bigFraction0.floatValue();
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_THIRD.getNumeratorAsInt();
      bigFraction0.ONE_FIFTH.floatValue();
      BigFraction bigFraction1 = new BigFraction(0.2F);
      bigFraction0.multiply(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.bigDecimalValue(7, 7);
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.abs();
      bigFraction2.multiply(bigFraction1);
      bigFraction1.THREE_QUARTERS.add(bigFraction0);
      BigFraction bigFraction3 = bigFraction1.THREE_QUARTERS.multiply(864);
      bigFraction3.ONE_QUARTER.percentageValue();
      bigFraction1.THREE_FIFTHS.bigDecimalValue();
      bigFraction0.multiply(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction1.THREE_FIFTHS.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3385.064334176));
      BigFraction bigFraction1 = bigFraction0.add(2781);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.toString();
      bigFraction0.doubleValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger1);
      bigFraction2.subtract(bigFraction1);
      bigFraction1.floatValue();
      bigFraction1.getDenominatorAsInt();
      BigInteger bigInteger2 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction2.divide(bigInteger2);
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      bigFraction4.getDenominatorAsInt();
      bigFraction3.multiply(100L);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.toString();
      bigFraction0.floatValue();
      BigFraction bigFraction1 = new BigFraction(0.25F);
      bigFraction1.getDenominatorAsInt();
      bigFraction1.ONE_FIFTH.getDenominatorAsLong();
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      bigFraction2.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 388;
      BigFraction bigFraction0 = new BigFraction(5.843333333359624E-4, 388);
      bigFraction0.ONE_QUARTER.floatValue();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.divide(bigFraction1);
      bigFraction2.ONE_HALF.pow(388);
      BigInteger bigInteger0 = null;
      try { 
        bigFraction0.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, (-7278142539171889152L));
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction0.intValue();
      bigFraction0.getNumeratorAsLong();
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction2 = BigFraction.TWO;
      bigFraction2.equals(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(0.32440409609999676);
      bigFraction0.ZERO.pow(9007199254740990L);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction0.getNumeratorAsInt();
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 136L);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.MINUS_ONE.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ONE.add(bigInteger0);
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction2 = new BigFraction(136L);
      bigFraction0.floatValue();
      BigFraction bigFraction3 = new BigFraction((double) 136L);
      bigFraction3.getDenominatorAsInt();
      bigFraction0.pow(136L);
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction((double) 136L, (-2322));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 136 to fraction (-135/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, (-7278142539171889152L));
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction0.intValue();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction2 = new BigFraction(40265318400L);
      bigFraction0.floatValue();
      BigFraction bigFraction3 = new BigFraction((-1566.3669044), 1);
      bigFraction3.ONE.getField();
      BigFraction bigFraction4 = BigFraction.THREE_FIFTHS;
      BigFraction.getReducedFraction(0, 37);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction4.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, (-7278142539171889152L));
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction0.intValue();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction2 = new BigFraction(40265318400L);
      bigFraction0.floatValue();
      BigFraction bigFraction3 = BigFraction.TWO;
      bigFraction1.equals(bigFraction0);
      bigFraction1.divide(1);
      // Undeclared exception!
      try { 
        bigFraction1.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.equals(bigFraction0);
      bigFraction0.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, (-7278142539171889152L));
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-2042), 1);
      bigFraction2.TWO_THIRDS.multiply(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction2.divide(bigInteger0);
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      bigFraction4.multiply(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, (-7278142539171889152L));
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction0.intValue();
      bigFraction0.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.valueOf((-1L));
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.negate();
      Object object0 = new Object();
      bigFraction3.equals(object0);
      BigFraction bigFraction4 = bigFraction2.divide(1200L);
      bigFraction2.floatValue();
      BigFraction bigFraction5 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction6 = bigFraction2.pow((-1983L));
      bigFraction4.reduce();
      bigFraction5.pow(3912);
      bigFraction6.negate();
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction.getReducedFraction(2147483644, 2147483644);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.ONE_HALF.reciprocal();
      bigFraction0.ONE_FIFTH.bigDecimalValue(1);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1, 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.toString();
      bigFraction0.TWO_FIFTHS.hashCode();
      bigFraction1.TWO.add(80);
      bigInteger0.toString();
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction2);
      BigFraction bigFraction4 = bigFraction3.ONE_QUARTER.subtract(bigInteger0);
      bigFraction2.negate();
      bigFraction3.THREE_FIFTHS.equals("1");
      bigFraction4.TWO.divide((-259L));
      bigFraction3.ZERO.floatValue();
      bigFraction1.THREE_QUARTERS.pow(bigInteger0);
      BigFraction bigFraction5 = bigFraction0.pow(3952090531849364496L);
      bigFraction5.THREE_FIFTHS.reduce();
      // Undeclared exception!
      try { 
        bigFraction3.THREE_FIFTHS.pow(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-4000), 1909);
      bigFraction0.longValue();
      BigFraction bigFraction1 = bigFraction0.pow(19200L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = BigFraction.ZERO;
      bigFraction2.pow(bigInteger0);
      bigFraction1.add(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3385.064334176));
      bigFraction0.subtract(bigFraction0);
      bigFraction0.multiply(16);
      bigFraction0.bigDecimalValue(2, 2);
      bigFraction0.multiply((long) 16);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 175L);
      bigFraction0.longValue();
      bigFraction0.toString();
      bigFraction0.percentageValue();
      bigFraction0.bigDecimalValue();
      bigFraction0.pow(697L);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction((-154L), (-154L));
      bigFraction0.percentageValue();
      BigFraction bigFraction2 = BigFraction.ONE;
      BigFraction bigFraction3 = BigFraction.ZERO;
      bigFraction3.intValue();
      bigFraction3.getNumeratorAsLong();
      BigFraction bigFraction4 = new BigFraction(40265318400L);
      bigFraction1.floatValue();
      bigFraction2.getDenominatorAsInt();
      BigFraction bigFraction5 = new BigFraction((-2017.389), 5);
      BigFraction bigFraction6 = BigFraction.THREE_FIFTHS;
      bigFraction0.subtract(bigFraction4);
      BigFraction bigFraction7 = BigFraction.getReducedFraction(1, (-2042));
      bigFraction4.getNumeratorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-7);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction8 = BigFraction.ONE_HALF;
      BigFraction bigFraction9 = bigFraction8.pow(bigInteger0);
      bigFraction9.pow((-1501));
      bigFraction4.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction7.bigDecimalValue((-2042), (int) (byte) (-7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, (-7278142539171889152L));
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction1.FOUR_FIFTHS.subtract((long) 1);
      bigFraction0.intValue();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction2 = new BigFraction(40265318400L);
      bigFraction0.floatValue();
      bigFraction2.getDenominatorAsInt();
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction((double) 40265318400L, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 40,265,318,400 to fraction (40,265,318,400/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, (-7278142539171889152L));
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction1.ONE_FIFTH.toString();
      bigFraction0.intValue();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction2 = new BigFraction((-26.50469570546972), 1856.0, 2319);
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(1026, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(5, 1);
      BigFraction bigFraction1 = bigFraction0.divide((long) 1);
      BigFraction bigFraction2 = new BigFraction(337.245096, 5);
      bigFraction2.TWO_QUARTERS.reciprocal();
      bigFraction2.ZERO.divide((long) 1);
      bigFraction2.intValue();
      BigFraction.getReducedFraction(2147481900, 319);
      bigFraction1.doubleValue();
      bigFraction2.multiply(673);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction((-1388L));
      bigFraction1.percentageValue();
      BigFraction bigFraction2 = BigFraction.ONE;
      BigFraction bigFraction3 = bigFraction1.multiply(bigFraction2);
      bigFraction3.intValue();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction4 = new BigFraction(2147483648L);
      bigFraction3.floatValue();
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction((double) (-1388), (-3585));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1,388 to fraction (1,389/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.multiply(2465L);
      bigFraction1.subtract(bigInteger0);
      bigFraction1.add((-2664));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.hashCode();
      bigFraction0.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger0);
      bigFraction2.pow((double) 3L);
      BigFraction bigFraction3 = bigFraction0.negate();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction3.divide(bigFraction0);
      bigFraction1.add(bigFraction4);
      bigFraction3.percentageValue();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-27);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.multiply(4499201580859392L);
      bigFraction1.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, (-7278142539171889152L));
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction0.intValue();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction2 = new BigFraction(40265318400L);
      bigFraction0.floatValue();
      bigFraction2.getDenominatorAsInt();
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction((double) 40265318400L, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 40,265,318,400 to fraction (40,265,318,400/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)125;
      byteArray0[8] = (byte)54;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.add((long) (byte)65);
      bigFraction0.bigDecimalValue();
      bigFraction2.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction0.abs();
      bigFraction3.pow((double) (byte)54);
      bigFraction3.longValue();
      BigFraction bigFraction4 = bigFraction2.negate();
      BigFraction bigFraction5 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction6 = BigFraction.ONE_HALF;
      bigFraction6.divide(bigFraction4);
      bigFraction0.add(bigFraction2);
      BigFraction bigFraction7 = BigFraction.THREE_QUARTERS;
      bigFraction6.percentageValue();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 1909);
      bigFraction0.TWO.pow((double) 1909);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(5, 1);
      bigFraction1.divide(9218868437227405312L);
      bigFraction0.longValue();
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction2 = new BigFraction(337.245096, 5);
      bigFraction2.TWO_QUARTERS.reciprocal();
      bigFraction2.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction1.pow(bigInteger0);
      bigFraction3.divide(19200L);
      bigFraction2.intValue();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_FIFTH.floatValue();
      BigFraction bigFraction1 = new BigFraction((-1.634864487421458E-8));
      BigFraction.getReducedFraction(2147476657, 4681);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.pow(bigInteger0);
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.ONE_FIFTH.multiply((-1L));
      bigFraction0.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483647L);
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.multiply(bigFraction1);
      bigFraction2.ONE_FIFTH.intValue();
      bigFraction2.TWO.getNumeratorAsLong();
      BigFraction bigFraction3 = new BigFraction(2147483647L);
      bigFraction3.FOUR_FIFTHS.floatValue();
      BigFraction bigFraction4 = bigFraction3.add(985L);
      bigFraction0.bigDecimalValue();
      bigFraction4.getDenominatorAsLong();
      bigFraction2.abs();
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction(1.0, 1061);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(2319);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toString(973);
      bigFraction1.toString();
      bigFraction1.divide((long) (-4000));
      bigFraction1.longValue();
      bigFraction1.getDenominator();
      bigFraction0.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-4000), 1909);
      BigFraction bigFraction1 = bigFraction0.divide((long) 1909);
      bigFraction1.longValue();
      BigFraction bigFraction2 = bigFraction1.pow(0L);
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction1);
      bigFraction3.multiply(1909);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(2, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.getNumeratorAsInt();
      bigFraction0.equals((Object) null);
      bigFraction0.hashCode();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction1.negate();
      BigFraction.getReducedFraction(113, 2143910463);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2143910463, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483647L);
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.multiply(bigFraction1);
      bigFraction2.ONE_FIFTH.intValue();
      bigFraction2.TWO.getNumeratorAsLong();
      BigFraction bigFraction3 = new BigFraction(2147483647L);
      bigFraction3.FOUR_FIFTHS.floatValue();
      bigFraction2.TWO_THIRDS.getDenominatorAsInt();
      BigFraction bigFraction4 = BigFraction.getReducedFraction(3, 1947);
      bigFraction0.subtract(bigFraction4);
      bigFraction2.ONE_QUARTER.longValue();
      BigFraction bigFraction5 = BigFraction.getReducedFraction(1947, 3552);
      bigFraction5.TWO.getNumeratorAsInt();
      BigFraction bigFraction6 = BigFraction.getReducedFraction(1121, 1372);
      BigFraction bigFraction7 = bigFraction6.TWO_FIFTHS.subtract((long) 3);
      bigFraction7.ONE.bigDecimalValue();
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction8 = BigFraction.getReducedFraction(2, 3);
      bigFraction8.THREE_FIFTHS.getField();
      bigFraction5.getField();
      bigFraction1.doubleValue();
      BigFraction.getReducedFraction(1372, 1121);
      bigFraction6.getDenominatorAsInt();
      bigFraction3.add(426);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      int int0 = (-2120);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.multiply((-2120));
      bigFraction1.THREE_FIFTHS.longValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = new BigFraction((-2120));
      bigFraction1.toString();
      bigFraction2.FOUR_FIFTHS.percentageValue();
      bigFraction1.FOUR_FIFTHS.hashCode();
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction(80.0, (-2120), (-2120));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 80 to fraction (-79/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction.getReducedFraction(1224, 461);
      BigFraction bigFraction1 = bigFraction0.divide(9218868437227405312L);
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction2.longValue();
      bigFraction1.getDenominator();
      bigFraction1.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5153960755200L);
      bigFraction0.floatValue();
      bigFraction0.hashCode();
      bigFraction0.hashCode();
      bigFraction0.getDenominatorAsInt();
      bigFraction0.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger0);
      bigFraction2.pow((-3599.364704732712));
      bigFraction2.longValue();
      BigFraction bigFraction3 = bigFraction0.negate();
      bigFraction1.divide(bigFraction2);
      BigFraction bigFraction4 = bigFraction1.add(bigFraction0);
      bigFraction4.percentageValue();
      BigFraction bigFraction5 = bigFraction3.pow(203L);
      bigFraction5.ONE_THIRD.pow((-346L));
      bigFraction4.subtract(bigFraction3);
      BigFraction bigFraction6 = BigFraction.ONE_FIFTH;
      bigFraction6.multiply(1);
      bigFraction6.floatValue();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ZERO.percentageValue();
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.ONE_HALF.percentageValue();
      bigFraction0.ONE_HALF.add(1874);
      bigFraction1.ZERO.percentageValue();
      BigFraction bigFraction2 = bigFraction0.TWO.multiply(bigFraction1);
      bigFraction2.ONE.intValue();
      bigFraction0.toString();
      bigFraction1.getField();
      bigFraction0.ONE_THIRD.floatValue();
      bigFraction1.intValue();
      bigFraction1.longValue();
      bigFraction0.getDenominator();
      BigFraction bigFraction3 = bigFraction1.multiply(0L);
      // Undeclared exception!
      try { 
        bigFraction3.THREE_FIFTHS.pow(2146387917);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_FIFTH.floatValue();
      bigFraction0.ONE_THIRD.hashCode();
      bigFraction0.ONE_QUARTER.hashCode();
      bigFraction0.getDenominatorAsInt();
      bigFraction0.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ONE.pow(bigInteger0);
      bigFraction1.ONE_THIRD.pow(0.0);
      bigFraction0.longValue();
      BigFraction bigFraction3 = bigFraction0.negate();
      BigFraction bigFraction4 = bigFraction0.divide(bigFraction1);
      bigFraction4.add(bigFraction3);
      bigFraction4.FOUR_FIFTHS.percentageValue();
      BigFraction bigFraction5 = bigFraction4.multiply(bigInteger0);
      bigFraction4.MINUS_ONE.getDenominatorAsLong();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction5.ONE_HALF.getNumeratorAsInt();
      bigFraction1.multiply(bigInteger1);
      bigFraction5.multiply(bigFraction2);
      bigFraction0.getDenominator();
      BigFraction bigFraction6 = null;
      try {
        bigFraction6 = new BigFraction((-1309.4945), (-1.0), 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -1,309.495 to fraction after 0 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction(1433.664879071432, 1433.664879071432, (-47));
      BigFraction.getReducedFraction((-47), (-1));
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.abs();
      BigFraction bigFraction3 = bigFraction2.divide(bigFraction0);
      bigFraction3.bigDecimalValue(3, 3);
      bigFraction1.subtract((long) (-1));
      bigFraction2.getDenominatorAsLong();
      bigFraction1.reduce();
      bigFraction0.toString();
      bigFraction2.getDenominator();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 150L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction0.divide(bigInteger1);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction1.add(9218868437227405312L);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-231L));
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction3 = bigFraction2.subtract((-231L));
      bigFraction2.bigDecimalValue(1);
      bigFraction3.longValue();
      BigFraction bigFraction4 = bigFraction0.divide(1);
      BigFraction bigFraction5 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction6 = bigFraction5.pow(1);
      bigFraction5.getNumeratorAsInt();
      BigFraction bigFraction7 = BigFraction.ONE_FIFTH;
      bigFraction7.pow(0.4938860535621643);
      bigFraction6.intValue();
      BigFraction bigFraction8 = BigFraction.FOUR_FIFTHS;
      bigFraction8.pow(1);
      bigFraction1.equals(bigFraction2);
      bigFraction1.doubleValue();
      bigFraction4.getField();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-415.4537341085));
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.add(4503599627370496L);
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction1.ZERO.abs();
      // Undeclared exception!
      try { 
        bigFraction2.ONE_QUARTER.bigDecimalValue((-239));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_FIFTH.floatValue();
      bigFraction0.ONE_THIRD.hashCode();
      bigFraction0.ONE_QUARTER.hashCode();
      bigFraction0.getDenominatorAsInt();
      bigFraction0.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      bigFraction1.ONE.pow(bigInteger0);
      bigFraction1.ONE_THIRD.pow(0.0);
      bigFraction0.longValue();
      BigFraction bigFraction2 = bigFraction0.negate();
      BigFraction bigFraction3 = bigFraction0.divide(bigFraction1);
      bigFraction3.add(bigFraction2);
      bigFraction3.FOUR_FIFTHS.percentageValue();
      BigFraction bigFraction4 = bigFraction3.pow(2171L);
      bigFraction2.subtract(bigFraction1);
      bigFraction4.multiply(5);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = 0L;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(2819561105158720014L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2895.05545131), 1.0, (-1));
      bigFraction0.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.FOUR_FIFTHS.pow(bigInteger0);
      int int0 = 1;
      BigFraction.getReducedFraction((-819), 1);
      bigFraction0.TWO_THIRDS.toString();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1920.060793939664, 1441);
      bigFraction0.TWO.getNumeratorAsInt();
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction2 = bigFraction1.ONE.subtract(bigFraction0);
      bigFraction2.TWO.subtract(1);
      bigFraction1.ONE_HALF.subtract(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.divide(bigFraction1);
      bigFraction3.equals(bigFraction0);
      bigFraction3.ONE_HALF.bigDecimalValue(2);
      bigFraction3.floatValue();
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2749.829861150207), 0.0, 1683);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ZERO.add(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.multiply(bigFraction0);
      BigFraction.getReducedFraction(1683, 1683);
      BigFraction.getReducedFraction(147, 1683);
      bigFraction2.ZERO.equals(bigFraction1);
      bigFraction2.THREE_FIFTHS.toString();
      bigFraction1.THREE_FIFTHS.getNumeratorAsInt();
      BigInteger bigInteger1 = bigFraction0.getDenominator();
      BigFraction bigFraction4 = bigFraction1.multiply(bigInteger1);
      bigFraction4.TWO_FIFTHS.equals(bigFraction3);
      BigFraction bigFraction5 = bigFraction4.add(bigInteger1);
      bigFraction0.THREE_FIFTHS.compareTo(bigFraction3);
      BigFraction.getReducedFraction(3, 1);
      bigFraction5.MINUS_ONE.add(0L);
      bigFraction4.getDenominator();
      bigFraction5.percentageValue();
      bigFraction2.pow((double) 3);
      bigFraction3.toString();
      bigFraction3.negate();
      BigFraction bigFraction6 = bigFraction2.abs();
      BigFraction bigFraction7 = bigFraction6.reciprocal();
      bigFraction3.doubleValue();
      bigFraction7.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.MINUS_ONE.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 1020;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-933.182), (-2429.2747), 1020);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -933.182 to fraction (-113,887,098,548,904/122,041,679,489)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483647L);
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.multiply(bigFraction1);
      bigFraction2.ONE_FIFTH.intValue();
      bigFraction2.TWO.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.abs();
      bigFraction3.FOUR_FIFTHS.floatValue();
      bigFraction2.TWO_THIRDS.getDenominatorAsInt();
      int int0 = 1947;
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction((double) 2147483647L, 1947);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-5175);
      BigFraction bigFraction0 = new BigFraction((-5175), 3293);
      BigFraction bigFraction1 = null;
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.multiply((-4521L));
      bigFraction0.MINUS_ONE.floatValue();
      // Undeclared exception!
      try { 
        bigFraction2.THREE_QUARTERS.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.ONE_FIFTH.getNumeratorAsInt();
      bigFraction0.THREE_QUARTERS.equals((Object) null);
      bigFraction0.hashCode();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction1.negate();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(366, 366);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.FOUR_FIFTHS.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.ZERO.pow(0);
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.reciprocal();
      BigFractionField bigFractionField0 = bigFraction3.MINUS_ONE.getField();
      BigFraction bigFraction4 = bigFraction2.THREE_QUARTERS.reduce();
      BigFraction bigFraction5 = bigFraction4.TWO_QUARTERS.add((-1325));
      BigFraction bigFraction6 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction7 = bigFraction5.TWO_FIFTHS.subtract((long) (-1325));
      bigFraction7.ZERO.negate();
      BigFraction bigFraction8 = bigFraction6.ONE_FIFTH.add(bigInteger0);
      bigFraction1.getDenominatorAsInt();
      bigFraction3.equals(bigFractionField0);
      bigFraction3.add(37);
      bigFraction2.multiply(2041);
      BigFraction bigFraction9 = bigFraction8.divide(bigFraction6);
      bigFraction8.ONE_HALF.reciprocal();
      bigFraction9.equals(" / ");
      bigFraction3.multiply(bigInteger0);
      bigFraction5.getNumeratorAsInt();
      bigFraction8.add(0);
      bigFraction9.hashCode();
      BigFraction.getReducedFraction(37, 299);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = 1L;
      BigFraction bigFraction0 = new BigFraction(1L);
      int int0 = 0;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ZERO.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.add((-1143));
      BigFraction bigFraction3 = bigFraction0.pow(0);
      bigFraction3.longValue();
      bigFraction2.pow(503L);
      bigFraction2.bigDecimalValue();
      bigFraction2.ZERO.doubleValue();
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.negate();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(771, 37);
      int int0 = 629;
      BigFraction bigFraction2 = bigFraction1.multiply(629);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.multiply((-4090L));
      BigFraction bigFraction4 = bigFraction3.ONE_THIRD.divide((long) 771);
      bigFraction4.MINUS_ONE.reciprocal();
      bigFraction4.TWO_THIRDS.getDenominatorAsInt();
      Object object0 = new Object();
      bigFraction2.MINUS_ONE.equals(object0);
      bigFraction1.reduce();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1566, 1178);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction.getReducedFraction(100, 100);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      bigFraction2.MINUS_ONE.bigDecimalValue(2);
      int int0 = 625;
      BigFraction bigFraction3 = bigFraction1.ONE_THIRD.pow(625);
      bigFraction3.TWO_FIFTHS.getNumeratorAsInt();
      bigFraction3.ONE_HALF.getDenominatorAsLong();
      bigFraction1.hashCode();
      bigFraction3.MINUS_ONE.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(625);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.372568630242375E-8, 1133.7488831484936, 1904);
      bigFraction0.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.pow((-3311));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_QUARTER.intValue();
      bigFraction0.FOUR_FIFTHS.getDenominatorAsInt();
      bigFraction0.longValue();
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = 0L;
      BigFraction bigFraction0 = new BigFraction(0L);
      bigFraction0.getDenominator();
      // Undeclared exception!
      try { 
        bigFraction0.pow((-2766L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_FIFTH.floatValue();
      bigFraction0.ONE_THIRD.hashCode();
      bigFraction0.ONE_QUARTER.hashCode();
      bigFraction0.getDenominatorAsInt();
      bigFraction0.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      bigFraction1.ONE.pow(bigInteger0);
      bigFraction1.ONE_THIRD.pow(0.0);
      bigFraction0.longValue();
      BigFraction bigFraction2 = bigFraction0.negate();
      BigFraction bigFraction3 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.add(bigFraction2);
      bigFraction3.FOUR_FIFTHS.percentageValue();
      bigFraction3.pow(2171L);
      BigFraction bigFraction5 = BigFraction.MINUS_ONE;
      bigFraction4.equals(bigFraction5);
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.ONE_HALF.divide(474L);
      bigFraction0.ONE_FIFTH.multiply(bigFraction2);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.FOUR_FIFTHS.divide(bigInteger0);
      bigFraction3.ONE_FIFTH.percentageValue();
      // Undeclared exception!
      try { 
        bigFraction3.TWO_THIRDS.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.negate();
      bigFraction2.ONE.compareTo(bigFraction1);
      bigFraction0.TWO.subtract(bigFraction2);
      // Undeclared exception!
      try { 
        bigFraction1.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.bigDecimalValue();
      bigFraction0.TWO_FIFTHS.reciprocal();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction1.TWO_THIRDS.getNumeratorAsInt();
      bigFraction1.ZERO.subtract(2360L);
      bigFraction0.ONE_THIRD.bigDecimalValue(0);
      bigFraction0.compareTo(bigFraction1);
      bigFraction1.ONE_FIFTH.add(37);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.abs();
      bigFraction1.THREE_QUARTERS.toString();
      BigFraction bigFraction4 = bigFraction2.subtract((-1));
      bigFraction4.THREE_FIFTHS.reciprocal();
      bigFraction4.ONE_HALF.longValue();
      bigFraction2.TWO_THIRDS.getField();
      bigFraction4.ONE_QUARTER.pow(0.0);
      BigFraction bigFraction5 = bigFraction2.multiply(100L);
      bigFraction4.percentageValue();
      BigFraction bigFraction6 = bigFraction5.add(bigFraction3);
      bigFraction6.THREE_FIFTHS.toString();
      bigFraction1.TWO_THIRDS.divide(bigInteger0);
      BigFraction bigFraction7 = bigFraction6.THREE_FIFTHS.multiply(2732);
      bigFraction7.ZERO.negate();
      bigFraction0.toString();
      bigFraction6.divide((-1));
      bigFraction1.multiply(1129);
      bigFraction7.multiply(0);
      bigFraction0.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.subtract(1359);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-780), (-780));
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-780));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = null;
      bigFraction0.ONE.percentageValue();
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger0);
      bigFraction1.ONE_FIFTH.pow(735.086);
      bigFraction2.ONE_QUARTER.getNumeratorAsInt();
      bigFraction2.FOUR_FIFTHS.getNumeratorAsLong();
      int int0 = (-314);
      BigFraction bigFraction3 = BigFraction.getReducedFraction((-314), 1);
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.reciprocal();
      bigFraction4.FOUR_FIFTHS.getNumeratorAsLong();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction(1433.664879071432, 1433.664879071432, (-47));
      BigFraction.getReducedFraction((-47), (-1));
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.abs();
      BigFraction bigFraction3 = bigFraction2.divide(bigFraction0);
      bigFraction3.bigDecimalValue(3, 3);
      BigFraction bigFraction4 = bigFraction1.subtract((long) (-1));
      bigFraction4.toString();
      bigFraction1.getNumerator();
      bigFraction0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.add((-488));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.divide(bigInteger0);
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = 2608L;
      BigFraction bigFraction0 = new BigFraction(2608L);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-3169), 251);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(422L, (-302932621132653753L));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-55);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.subtract(2573L);
      bigFraction2.ONE_FIFTH.bigDecimalValue();
      bigFraction2.ONE_HALF.abs();
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.pow(2573L);
      bigFraction3.ONE_QUARTER.negate();
      bigFraction0.THREE_FIFTHS.doubleValue();
      bigFraction0.floatValue();
      bigFraction1.pow(4231.52420534);
      bigFraction3.subtract(1501);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 1909;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 1909);
      bigFraction0.TWO.pow((double) 1909);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract((-367L));
      // Undeclared exception!
      try { 
        bigFraction1.ONE_THIRD.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 0.0, (-2097));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3044L);
      bigFraction0.FOUR_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.pow(981L);
      bigFraction1.ONE_THIRD.getDenominatorAsInt();
      bigFraction1.ONE_QUARTER.compareTo(bigFraction0);
      bigFraction0.FOUR_FIFTHS.pow(4.3750396394525074E48);
      bigFraction1.THREE_FIFTHS.bigDecimalValue();
      bigFraction0.THREE_FIFTHS.pow((-1244.53749));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.TWO_FIFTHS.multiply(bigInteger0);
      bigFraction0.doubleValue();
      bigFraction0.ONE_HALF.compareTo(bigFraction1);
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction0.multiply(3044L);
      bigFraction2.TWO.floatValue();
      bigFraction2.getNumeratorAsLong();
      bigFraction2.bigDecimalValue(1, 1);
      BigFraction bigFraction3 = bigFraction2.reciprocal();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction3.ONE.pow(7910884519577875640L);
      BigFraction bigFraction4 = bigFraction3.subtract(bigInteger1);
      bigFraction4.getDenominator();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      int int0 = (-2120);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.multiply((-2120));
      bigFraction1.THREE_FIFTHS.longValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger0);
      bigFraction2.ONE_QUARTER.toString();
      bigFraction2.FOUR_FIFTHS.percentageValue();
      BigFraction bigFraction3 = bigFraction0.subtract(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction3.ONE_HALF.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(139L);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.negate();
      BigFraction bigFraction2 = bigFraction1.ZERO.subtract((long) 1);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short) (-1), bigFraction2.shortValue());
      
      bigFraction1.MINUS_ONE.bigDecimalValue(1);
      bigFraction1.FOUR_FIFTHS.longValue();
      BigFraction bigFraction3 = bigFraction0.ONE_QUARTER.divide(100);
      BigFraction bigFraction4 = bigFraction3.THREE_QUARTERS.pow(1);
      bigFraction4.TWO_FIFTHS.getNumeratorAsInt();
      assertEquals((byte)0, bigFraction4.byteValue());
      
      double double0 = bigFraction3.TWO.pow(0.0);
      assertEquals(1.0, double0, 0.01);
      
      bigFraction0.TWO_FIFTHS.intValue();
      BigFraction bigFraction5 = bigFraction0.pow(100);
      bigFraction5.ONE_THIRD.equals(bigFraction0);
      assertEquals((short)22449, bigFraction5.shortValue());
      
      double double1 = bigFraction0.doubleValue();
      assertEquals(139.0, double1, 0.01);
      
      bigFraction3.getField();
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-415.4537341085));
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }
}
