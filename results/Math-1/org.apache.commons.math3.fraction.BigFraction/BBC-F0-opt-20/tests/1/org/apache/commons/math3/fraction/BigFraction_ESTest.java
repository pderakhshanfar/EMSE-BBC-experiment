/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:26:25 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1230), (-1884));
      BigFraction bigFraction1 = bigFraction0.pow(662L);
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.negate();
      bigFraction1.TWO_QUARTERS.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction0.multiply((-2703L));
      BigFraction bigFraction4 = bigFraction3.TWO_QUARTERS.multiply((-1884));
      bigFraction0.divide((-1230));
      bigFraction4.getNumerator();
      BigFraction bigFraction5 = bigFraction3.add((long) (-1884));
      bigFraction5.ZERO.pow(2287.490705080188);
      bigFraction1.doubleValue();
      bigFraction2.getDenominatorAsLong();
      bigFraction5.multiply(1L);
      BigFraction bigFraction6 = bigFraction2.divide(bigFraction4);
      bigFraction6.divide(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.subtract(1081113804);
      bigFraction1.ONE_THIRD.multiply((int) (byte) (-8));
      bigFraction0.doubleValue();
      bigFraction1.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, 1.9380053117856733E-12, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = new BigFraction(1.2160992719555806E-37);
      bigFraction0.bigDecimalValue(2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger1);
      bigFraction1.pow((-2955.839594474389));
      int int0 = 0;
      bigFraction1.subtract(0);
      bigFraction1.bigDecimalValue();
      bigFraction0.bigDecimalValue(0, 0);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert NaN value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.divide(1882);
      bigFraction0.doubleValue();
      bigFraction1.getDenominator();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(629, (-2138754038));
      BigFraction bigFraction1 = bigFraction0.pow(629);
      bigFraction1.floatValue();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3.9036541111764032E-140);
      BigFraction bigFraction1 = bigFraction0.pow(2159);
      bigFraction1.floatValue();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-1052L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2145369981));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)53;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.MINUS_ONE.divide(bigInteger0);
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2980.9798033495));
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsLong();
      bigFraction0.multiply(2130836487);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.add((-635));
      BigFraction.getReducedFraction(623, 1292);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-3549), (-3549));
      BigFraction bigFraction1 = new BigFraction(0.0);
      bigFraction0.add((-3549));
      // Undeclared exception!
      try { 
        bigFraction1.pow((-3549));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-3549), (-3549));
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.abs();
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.ONE.pow((-801L));
      bigFraction0.THREE_FIFTHS.floatValue();
      bigFraction0.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction1.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(1082.859336509, 613566731);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1,082.859 to fraction (3,771,992,147/3,483,363)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(1229L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2364.10474));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.multiply((-440L));
      BigFraction bigFraction2 = bigFraction0.abs();
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      bigFraction1.getNumeratorAsLong();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction0.pow((-948L));
      bigFraction1.multiply((-192));
      BigFraction bigFraction5 = bigFraction4.negate();
      BigFraction bigFraction6 = BigFraction.THREE_QUARTERS;
      bigFraction6.floatValue();
      BigFraction bigFraction7 = bigFraction2.pow((-1836));
      bigFraction5.divide(bigFraction1);
      bigFraction5.longValue();
      BigFraction bigFraction8 = bigFraction1.subtract((-5693143597362656061L));
      BigFraction bigFraction9 = bigFraction1.add((-815));
      bigFraction5.multiply((-815));
      BigFraction bigFraction10 = bigFraction7.divide((long) (-1836));
      bigFraction10.ONE_QUARTER.multiply(2183L);
      bigFraction8.subtract(1492L);
      bigFraction5.multiply((-1841));
      bigFraction2.doubleValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction9.multiply(bigInteger0);
      Random.setNextRandom((-1143));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.MINUS_ONE.divide(1991L);
      bigFraction0.MINUS_ONE.toString();
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = BigFraction.TWO_THIRDS;
      bigFraction1.equals(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.THREE_FIFTHS.multiply(bigInteger0);
      bigFraction1.add((-3823));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.THREE_QUARTERS.bigDecimalValue();
      bigFraction0.toString();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(52, 52);
      Object object0 = new Object();
      bigFraction1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3212.6, 2924);
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction0.ONE_THIRD.divide(bigFraction1);
      bigFraction1.divide((-299));
      bigFraction0.toString();
      bigFraction1.doubleValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = new BigFraction((-4035746434778044925L), 3306L);
      BigFraction bigFraction3 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction4 = BigFraction.ONE;
      BigFraction bigFraction5 = new BigFraction((-680L));
      bigFraction2.equals(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(1495);
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.add(1495);
      bigFraction1.ZERO.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction1.TWO_THIRDS.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction1.reduce();
      BigFraction bigFraction5 = bigFraction4.ONE_FIFTH.add(bigInteger0);
      BigFraction bigFraction6 = bigFraction4.add(bigFraction3);
      bigFraction6.ZERO.subtract(2147433455);
      BigFraction bigFraction7 = bigFraction6.reduce();
      bigFraction7.percentageValue();
      bigFraction5.getDenominatorAsInt();
      bigFraction6.divide(bigFraction7);
      bigFraction2.add((-559));
      bigFraction0.subtract(bigFraction5);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(1495);
      BigFraction bigFraction2 = BigFraction.ONE_QUARTER;
      bigFraction1.ZERO.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction1.TWO_THIRDS.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction1.reduce();
      bigFraction4.ONE_FIFTH.add(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.add(bigFraction3);
      BigFraction bigFraction6 = bigFraction5.ZERO.subtract(2147433455);
      BigFraction bigFraction7 = bigFraction5.reduce();
      bigFraction0.getDenominatorAsInt();
      bigFraction3.percentageValue();
      BigFraction bigFraction8 = new BigFraction(9007199252291584L);
      bigFraction8.getDenominatorAsInt();
      bigFraction8.bigDecimalValue(1);
      BigFraction bigFraction9 = BigFraction.TWO_QUARTERS;
      bigFraction0.divide(bigFraction9);
      bigFraction6.add(2147433455);
      bigFraction7.subtract(bigFraction9);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.THREE_FIFTHS.floatValue();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = bigFraction0.multiply(43757504);
      BigFraction bigFraction2 = bigFraction1.add(9007199238684672L);
      bigFraction1.add(bigFraction2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = new BigFraction(bigInteger0);
      bigFraction1.equals(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction.getReducedFraction(1096, 1096);
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.subtract((long) 1096);
      BigFraction bigFraction2 = BigFraction.ZERO;
      bigFraction1.subtract(bigFraction2);
      // Undeclared exception!
      try { 
        bigFraction2.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction2.reciprocal();
      bigFraction2.equals(bigFraction1);
      bigFraction1.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(2147483549, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(1495);
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.add(1495);
      bigFraction1.ZERO.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction1.TWO_THIRDS.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction1.reduce();
      bigFraction4.ONE_FIFTH.add(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.add(bigFraction3);
      bigFraction5.ZERO.subtract(2147433455);
      bigFraction4.reduce();
      bigFraction2.getDenominatorAsInt();
      bigFraction1.percentageValue();
      bigFraction3.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue(1468);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1840700268), (-1431655764));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction2 = BigFraction.TWO;
      BigFraction bigFraction3 = bigFraction0.divide(bigFraction2);
      BigFraction bigFraction4 = bigFraction0.subtract(bigInteger1);
      bigFraction3.MINUS_ONE.getNumeratorAsInt();
      BigFraction bigFraction5 = bigFraction0.divide((-563));
      bigFraction5.ONE_HALF.intValue();
      bigFraction5.getField();
      BigFraction bigFraction6 = bigFraction0.multiply((long) (-1431655764));
      bigFraction6.ONE_FIFTH.getField();
      bigFraction3.add(8990362982940672L);
      BigInteger bigInteger2 = bigFraction0.getDenominator();
      bigFraction1.percentageValue();
      bigFraction4.floatValue();
      bigFraction0.pow(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction(244L, 244L);
      BigFraction bigFraction2 = bigFraction0.negate();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.multiply(bigInteger0);
      bigFraction1.getField();
      bigFraction1.pow((-14));
      bigFraction2.reciprocal();
      BigFraction bigFraction3 = bigFraction1.divide((long) 494);
      bigFraction1.pow(1L);
      bigFraction3.TWO_THIRDS.subtract(bigInteger0);
      BigFraction bigFraction4 = new BigFraction((long) 2084);
      bigFraction0.pow(bigInteger0);
      bigFraction2.percentageValue();
      bigFraction1.longValue();
      bigFraction1.getDenominator();
      bigFraction3.add(539);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(9, (-366));
      BigFraction bigFraction1 = bigFraction0.subtract((long) (-366));
      BigFraction bigFraction2 = bigFraction0.ONE.subtract(bigFraction1);
      bigFraction0.FOUR_FIFTHS.reciprocal();
      bigFraction1.THREE_QUARTERS.equals(bigFraction2);
      bigFraction1.getDenominatorAsLong();
      BigFraction.getReducedFraction((-366), (-1130));
      bigFraction1.add((long) (-366));
      BigFraction bigFraction3 = BigFraction.TWO_FIFTHS;
      int int0 = (-78);
      bigFraction3.ZERO.add((-78));
      bigFraction3.add(bigFraction2);
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.floatValue();
      bigFraction0.percentageValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.pow(0L);
      bigFraction2.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.THREE_FIFTHS.floatValue();
      bigFraction0.getNumerator();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = bigFraction0.multiply(43757504);
      bigFraction1.add(9007199238684672L);
      bigFraction0.subtract(4);
      BigFraction bigFraction2 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction3 = new BigFraction(0.0);
      bigFraction3.compareTo(bigFraction2);
      BigFraction bigFraction4 = BigFraction.ONE_THIRD;
      bigFraction0.reduce();
      BigFraction bigFraction5 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue(4, 43757504);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.ONE_HALF.subtract(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction0.add(bigInteger1);
      bigFraction0.negate();
      bigFraction0.getField();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.abs();
      bigFraction0.getNumerator();
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(2145239673, (-1055));
      BigFraction bigFraction3 = bigFraction0.subtract(60L);
      BigFraction bigFraction4 = bigFraction2.add(2140442718);
      bigFraction2.doubleValue();
      bigFraction0.hashCode();
      bigFraction2.pow(0.0);
      bigFraction3.getNumerator();
      bigFraction4.getNumeratorAsInt();
      bigFraction2.ZERO.floatValue();
      BigFraction bigFraction5 = bigFraction2.multiply((-22));
      BigFraction bigFraction6 = bigFraction4.add(60L);
      BigFraction bigFraction7 = bigFraction3.subtract(1548);
      BigFraction bigFraction8 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction9 = new BigFraction((double) 1163997417);
      bigFraction7.compareTo(bigFraction5);
      bigFraction2.reduce();
      BigFraction bigFraction10 = BigFraction.TWO;
      bigFraction6.bigDecimalValue(1399, 5);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-3100), (-3100));
      BigFraction bigFraction2 = bigFraction1.subtract(1156L);
      BigFraction bigFraction3 = bigFraction0.add(23);
      bigFraction2.doubleValue();
      bigFraction3.hashCode();
      bigFraction1.pow((double) 60L);
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      bigFraction2.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction1.multiply(Integer.MAX_VALUE);
      BigFraction bigFraction5 = new BigFraction(bigInteger0);
      BigFraction bigFraction6 = BigFraction.ONE_HALF;
      bigFraction2.subtract(5);
      BigFraction bigFraction7 = BigFraction.ONE_QUARTER;
      bigFraction6.TWO_THIRDS.compareTo(bigFraction4);
      BigFraction bigFraction8 = new BigFraction((double) (-3100));
      bigFraction6.compareTo(bigFraction1);
      BigFraction bigFraction9 = BigFraction.ONE_THIRD;
      BigFraction bigFraction10 = new BigFraction(9218868437227405312L);
      bigFraction10.reduce();
      BigFraction bigFraction11 = BigFraction.TWO;
      bigFraction11.ONE_THIRD.multiply((long) Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        bigFraction8.bigDecimalValue(1548, 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.THREE_FIFTHS.floatValue();
      BigFraction bigFraction1 = bigFraction0.subtract(13L);
      BigFraction bigFraction2 = bigFraction1.add(52);
      bigFraction1.doubleValue();
      bigFraction1.hashCode();
      bigFraction2.pow((-1.882201085012735E-7));
      bigFraction2.getNumerator();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction2.add(301L);
      BigFraction bigFraction4 = bigFraction3.subtract((-4234));
      BigFraction bigFraction5 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction6 = new BigFraction((double) 1);
      bigFraction5.compareTo(bigFraction1);
      BigFraction bigFraction7 = BigFraction.ONE_THIRD;
      bigFraction6.reduce();
      BigFraction bigFraction8 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue(2639, 1548);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = new BigFraction((-2725.2325287693484), 1096);
      BigFraction bigFraction2 = BigFraction.THREE_QUARTERS;
      bigFraction2.getNumeratorAsInt();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction0.pow(1096);
      bigFraction0.getField();
      BigFraction bigFraction4 = bigFraction0.divide(4503599627370495L);
      bigFraction3.intValue();
      BigFraction bigFraction5 = bigFraction3.subtract((-45));
      bigFraction4.multiply((-1816));
      BigFraction.getReducedFraction((-1816), 3700);
      BigFraction bigFraction6 = BigFraction.getReducedFraction((-45), 214);
      bigFraction0.multiply(bigFraction6);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction7 = BigFraction.ONE_HALF;
      bigFraction7.multiply(bigFraction5);
      // Undeclared exception!
      try { 
        bigFraction7.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.MINUS_ONE.hashCode();
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = bigFraction0.TWO.add(4607182418800017408L);
      BigFraction bigFraction2 = bigFraction1.TWO.add(bigFraction0);
      bigFraction2.ONE_HALF.doubleValue();
      BigFraction bigFraction3 = bigFraction0.multiply((-2400L));
      bigFraction0.getNumeratorAsLong();
      bigFraction1.toString();
      BigFraction bigFraction4 = new BigFraction(100.0, 0.5, (-880));
      bigFraction3.compareTo(bigFraction0);
      bigFraction1.FOUR_FIFTHS.subtract((-1));
      BigDecimal bigDecimal0 = new BigDecimal(0.5);
      bigFraction0.abs();
      BigFraction bigFraction5 = bigFraction3.abs();
      bigFraction5.ONE_THIRD.doubleValue();
      BigFraction bigFraction6 = bigFraction1.divide((-9223372036854775808L));
      bigFraction6.ONE_THIRD.equals("4607182418800017410");
      // Undeclared exception!
      try { 
        bigFraction6.TWO_QUARTERS.bigDecimalValue(1318, 829);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      bigFraction1.pow(0.7674712306516085);
      BigFraction bigFraction2 = bigFraction0.subtract(629);
      int int0 = 4;
      int int1 = 9;
      bigFraction1.bigDecimalValue(9, 4);
      bigFraction2.subtract(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2364.10474));
      bigFraction0.divide((-1621L));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction1.MINUS_ONE.bigDecimalValue();
      bigFraction1.add(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction(244L, 244L);
      BigFraction bigFraction2 = bigFraction0.multiply(494);
      BigFraction bigFraction3 = bigFraction0.negate();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.multiply(bigInteger0);
      bigFraction2.getField();
      BigFraction bigFraction4 = new BigFraction(2084);
      bigFraction4.pow((-14));
      bigFraction3.reciprocal();
      bigFraction2.divide((long) 494);
      bigFraction1.pow(1L);
      BigFraction bigFraction5 = new BigFraction((long) 2084);
      bigFraction5.hashCode();
      bigFraction2.pow(bigInteger0);
      bigFraction4.percentageValue();
      bigFraction1.longValue();
      bigFraction1.getDenominator();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = BigFraction.THREE_FIFTHS;
      bigFraction0.divide(bigFraction2);
      bigFraction1.bigDecimalValue();
      bigFraction2.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.pow((-1976.7));
      bigFraction0.getNumerator();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction1.multiply(2);
      bigFraction0.add((-794L));
      int int0 = (-2461);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(1.7976931348623157E308, 0.0, 5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.abs();
      bigFraction0.getNumerator();
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(2145239673, (-1055));
      BigFraction bigFraction3 = bigFraction0.subtract(60L);
      BigFraction bigFraction4 = bigFraction2.add(2140442718);
      bigFraction2.doubleValue();
      bigFraction0.hashCode();
      bigFraction2.pow(0.0);
      bigFraction3.getNumerator();
      bigFraction4.getNumeratorAsInt();
      bigFraction2.multiply(0);
      BigFraction bigFraction5 = bigFraction4.add(60L);
      bigFraction3.subtract(1548);
      BigFraction bigFraction6 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction7 = new BigFraction((double) 5);
      bigFraction7.compareTo(bigFraction6);
      BigFraction bigFraction8 = BigFraction.ONE_THIRD;
      bigFraction8.reduce();
      BigFraction bigFraction9 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue(1030, (-1055));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      bigFraction2.ONE.hashCode();
      bigFraction2.THREE_FIFTHS.getNumeratorAsInt();
      bigFraction2.THREE_FIFTHS.doubleValue();
      bigFraction1.ONE_THIRD.getDenominatorAsInt();
      bigFraction0.percentageValue();
      bigFraction0.doubleValue();
      BigFraction bigFraction3 = bigFraction2.reduce();
      bigFraction3.bigDecimalValue(3);
      BigFraction bigFraction4 = bigFraction2.MINUS_ONE.add(2819561105158720014L);
      BigFraction bigFraction5 = bigFraction4.TWO_THIRDS.reduce();
      // Undeclared exception!
      try { 
        bigFraction5.TWO_FIFTHS.pow((-2142614069));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.add(bigInteger0);
      bigFraction1.pow(1.7976931348623157E308);
      int int0 = 2531;
      bigFraction1.subtract(2531);
      int int1 = 0;
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(Integer.MAX_VALUE, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.add((-2172));
      bigFraction1.equals(bigFraction1);
      bigFraction2.getDenominatorAsLong();
      bigFraction1.pow(5L);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2042.85));
      BigFraction bigFraction1 = bigFraction0.multiply((-440L));
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.abs();
      BigFraction bigFraction3 = bigFraction1.ZERO.multiply((-440L));
      bigFraction3.MINUS_ONE.getNumeratorAsLong();
      bigFraction2.ZERO.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction2.ONE_QUARTER.pow((-440L));
      BigFraction bigFraction5 = bigFraction4.THREE_QUARTERS.multiply((-1836));
      bigFraction5.equals(bigFraction3);
      bigFraction1.ONE_THIRD.divide(1586L);
      BigFraction bigFraction6 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction6.multiply(bigInteger0);
      bigFraction5.getField();
      bigFraction0.pow(3545);
      bigFraction1.reciprocal();
      bigFraction0.divide((long) 3545);
      bigFraction6.pow((long) 3545);
      bigFraction6.hashCode();
      bigFraction0.MINUS_ONE.floatValue();
      bigFraction0.pow(bigInteger0);
      bigFraction2.percentageValue();
      bigFraction4.longValue();
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(238.1792, (-344));
      BigFraction bigFraction1 = bigFraction0.divide((-1));
      bigFraction1.toString();
      bigFraction1.doubleValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
      bigFraction1.TWO_THIRDS.pow(238.1792);
      BigFraction bigFraction3 = bigFraction1.TWO.subtract((-1));
      bigFraction3.TWO_FIFTHS.bigDecimalValue(4, 4);
      BigFraction bigFraction4 = bigFraction1.subtract(bigFraction0);
      bigFraction4.THREE_FIFTHS.bigDecimalValue();
      BigFraction bigFraction5 = bigFraction4.divide(bigFraction0);
      bigFraction0.doubleValue();
      bigFraction5.subtract((long) (-1));
      bigFraction0.multiply(566);
      bigFraction4.ONE_HALF.negate();
      bigFraction5.negate();
      bigFraction2.floatValue();
      BigFraction bigFraction6 = bigFraction0.pow(566);
      bigFraction6.divide(bigFraction4);
      bigFraction3.bigDecimalValue();
      bigFraction3.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ONE.subtract(100L);
      bigFraction0.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(75);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2042.85));
      BigFraction bigFraction1 = bigFraction0.multiply((-440L));
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.abs();
      BigFraction bigFraction3 = bigFraction1.ZERO.multiply((-440L));
      bigFraction3.MINUS_ONE.getNumeratorAsLong();
      bigFraction2.ZERO.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction2.ONE_QUARTER.pow((-440L));
      BigFraction bigFraction5 = bigFraction4.THREE_QUARTERS.multiply((-1836));
      bigFraction5.equals(bigFraction3);
      bigFraction1.ONE.negate();
      bigFraction1.floatValue();
      BigFraction bigFraction6 = bigFraction1.pow(0);
      bigFraction6.divide(bigFraction2);
      BigFraction bigFraction7 = null;
      try {
        bigFraction7 = new BigFraction((-1836), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = new BigFraction((-2725.2325287693484), 393);
      bigFraction2.toString();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(28, 393);
      bigFraction3.add(1403L);
      bigFraction0.add(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction4 = bigFraction2.divide(bigFraction3);
      bigFraction2.doubleValue();
      BigFraction bigFraction5 = bigFraction2.subtract(695L);
      BigFraction bigFraction6 = bigFraction5.multiply(566);
      BigFraction bigFraction7 = bigFraction0.negate();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction8 = bigFraction5.multiply(bigInteger0);
      bigFraction5.getField();
      BigFraction bigFraction9 = bigFraction7.pow(566);
      bigFraction4.reciprocal();
      BigFraction bigFraction10 = bigFraction9.divide((long) 566);
      BigFraction bigFraction11 = bigFraction6.pow((long) 566);
      BigFraction bigFraction12 = BigFraction.TWO_QUARTERS;
      bigFraction12.hashCode();
      bigFraction8.pow(bigInteger0);
      bigFraction1.percentageValue();
      bigFraction11.longValue();
      bigFraction10.getDenominator();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)9;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.MINUS_ONE.intValue();
      bigFraction2.FOUR_FIFTHS.add(bigInteger0);
      bigFraction2.FOUR_FIFTHS.add((-2172));
      bigFraction1.equals(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigInteger bigInteger1 = bigInteger0.not();
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.add(bigInteger0);
      bigFraction0.pow(2533L);
      BigFraction bigFraction2 = bigFraction0.multiply(1954);
      BigFraction bigFraction3 = bigFraction2.negate();
      bigFraction1.floatValue();
      BigFraction bigFraction4 = bigFraction0.pow(2479);
      BigFraction bigFraction5 = bigFraction0.divide(bigFraction4);
      bigFraction3.longValue();
      BigFraction bigFraction6 = BigFraction.ZERO;
      BigFraction bigFraction7 = new BigFraction((-4035746434778044925L));
      BigFraction bigFraction8 = BigFraction.MINUS_ONE;
      bigFraction8.THREE_FIFTHS.floatValue();
      bigFraction8.multiply((-543));
      BigFraction bigFraction9 = BigFraction.TWO;
      bigFraction9.divide((long) (-1836));
      BigFraction bigFraction10 = bigFraction5.add(2479);
      bigFraction1.subtract((-3427L));
      bigFraction3.multiply(2479);
      bigFraction10.doubleValue();
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction4.multiply(bigInteger1);
      bigFraction5.getNumeratorAsLong();
      bigFraction1.multiply((long) (-1836));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2042.85));
      BigFraction bigFraction1 = bigFraction0.multiply((-440L));
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.abs();
      BigFraction bigFraction3 = bigFraction1.ZERO.multiply((-440L));
      bigFraction3.MINUS_ONE.getNumeratorAsLong();
      bigFraction2.ZERO.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction0.add(9007199254740990L);
      bigFraction2.reduce();
      int int0 = (-819);
      BigFraction.getReducedFraction((-1493), (-819));
      bigFraction4.getField();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction4.pow(bigInteger0);
      bigFraction2.multiply(bigFraction3);
      // Undeclared exception!
      try { 
        bigFraction4.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigInteger0.not();
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.add(bigInteger0);
      bigFraction1.getNumeratorAsLong();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.pow(7L);
      BigFraction bigFraction3 = bigFraction0.multiply((-1836));
      BigFraction bigFraction4 = bigFraction2.negate();
      bigFraction3.floatValue();
      bigFraction0.pow(613);
      BigFraction bigFraction5 = bigFraction3.divide(bigFraction2);
      bigFraction0.longValue();
      bigFraction4.subtract(7L);
      bigFraction4.multiply(100);
      BigFraction bigFraction6 = bigFraction0.divide(116L);
      bigFraction5.add(613);
      bigFraction6.subtract(515396075520L);
      bigFraction2.multiply(613);
      bigFraction1.doubleValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction6.multiply(bigInteger1);
      bigFraction0.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = new BigFraction((-2007.98277), 0.48539000000005217, (-368));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.THREE_QUARTERS.getNumeratorAsLong();
      bigFraction1.add(bigFraction0);
      BigFraction.getReducedFraction(225, (-1238));
      bigFraction1.add((-2172));
      bigFraction0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction0.add(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.add((-2172));
      BigFraction bigFraction3 = BigFraction.ONE_FIFTH;
      bigFraction0.equals(bigFraction3);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction2.pow(bigInteger0);
      bigFraction4.multiply((long) (-2172));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ONE_HALF.bigDecimalValue();
      bigFraction0.floatValue();
      int int0 = 291;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte)28;
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte)28, byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid signum value
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.abs();
      bigFraction0.getNumerator();
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(2145239673, (-1055));
      BigFraction bigFraction3 = bigFraction0.subtract(60L);
      BigFraction bigFraction4 = bigFraction3.add(1296);
      bigFraction2.doubleValue();
      bigFraction0.hashCode();
      bigFraction4.pow((-344.0));
      bigFraction2.getNumerator();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction5 = bigFraction3.multiply(5);
      bigFraction1.add(5L);
      bigFraction5.subtract((-2461));
      BigFraction bigFraction6 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction7 = new BigFraction((double) 60L);
      bigFraction7.compareTo(bigFraction4);
      bigFraction7.reduce();
      BigFraction bigFraction8 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction8.bigDecimalValue(1296, 1296);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(4503599627370496L);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.add(94);
      bigFraction2.TWO_THIRDS.multiply(94);
      bigFraction1.ONE.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction0.reduce();
      bigFraction0.compareTo(bigFraction1);
      bigFraction3.getDenominatorAsInt();
      BigFraction bigFraction4 = bigFraction0.add(1073741824L);
      bigFraction4.MINUS_ONE.subtract(bigFraction0);
      BigFraction.getReducedFraction(5, 94);
      BigFraction bigFraction5 = bigFraction4.pow(1);
      bigFraction4.add((-2694L));
      bigFraction0.divide(bigInteger1);
      bigFraction5.subtract(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 555;
      BigFraction bigFraction0 = new BigFraction(555);
      BigFraction bigFraction1 = bigFraction0.subtract((-338));
      bigFraction0.hashCode();
      bigFraction1.hashCode();
      bigFraction0.ONE_FIFTH.getDenominatorAsInt();
      BigFraction bigFraction2 = bigFraction1.ZERO.add(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction2.TWO.pow(bigInteger0);
      bigFraction3.ONE_QUARTER.reciprocal();
      long long0 = 1495L;
      bigFraction0.TWO_QUARTERS.subtract(1495L);
      BigFraction bigFraction4 = bigFraction0.divide((-1));
      bigFraction1.getNumerator();
      BigFraction bigFraction5 = bigFraction4.reciprocal();
      bigFraction5.TWO_QUARTERS.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(555, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(228);
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = new BigFraction((-1), 470);
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.abs();
      bigFraction1.TWO_THIRDS.equals(bigFraction3);
      bigFraction1.divide(651);
      bigFraction2.FOUR_FIFTHS.bigDecimalValue();
      BigFraction bigFraction5 = BigFraction.getReducedFraction(651, 228);
      bigFraction5.getDenominatorAsLong();
      bigFraction2.subtract(bigFraction5);
      BigFraction bigFraction6 = bigFraction1.divide(bigFraction0);
      bigFraction6.TWO_FIFTHS.doubleValue();
      bigFraction6.TWO_QUARTERS.multiply(bigFraction5);
      bigFraction1.THREE_QUARTERS.getField();
      bigFraction0.FOUR_FIFTHS.getNumeratorAsInt();
      bigFraction6.getNumeratorAsLong();
      bigFraction2.pow(651);
      bigFraction5.ONE_THIRD.getField();
      bigFraction2.divide(9223372036854775807L);
      bigFraction5.intValue();
      bigFraction2.TWO_THIRDS.subtract(37);
      bigFraction2.multiply(1088);
      BigFraction.getReducedFraction(2, 651);
      bigFraction6.THREE_QUARTERS.multiply(bigFraction2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.THREE_FIFTHS.multiply(bigFraction4);
      // Undeclared exception!
      try { 
        bigFraction6.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1446.7871427566, (-3.482412195764625E-92), 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 1,446.787 to fraction after 1 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1654L);
      BigFraction bigFraction1 = bigFraction0.add((-3512299194304650054L));
      bigFraction1.doubleValue();
      bigFraction1.reduce();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      int int0 = 2238;
      BigFraction bigFraction1 = bigFraction0.TWO.pow(2238);
      bigFraction1.TWO_QUARTERS.percentageValue();
      bigFraction0.ONE.longValue();
      bigFraction0.getNumeratorAsInt();
      bigFraction0.longValue();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(1, 1);
      BigFraction bigFraction3 = bigFraction1.add(bigFraction2);
      Object object0 = new Object();
      bigFraction3.THREE_FIFTHS.equals(object0);
      bigFraction3.TWO_FIFTHS.reciprocal();
      bigFraction3.ONE_HALF.getField();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction3.ONE_FIFTH.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(43);
      bigFraction0.TWO_THIRDS.intValue();
      bigFraction0.getNumeratorAsInt();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.longValue();
      bigFraction0.intValue();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.multiply(3675L);
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.add(bigFraction0);
      bigFraction0.ONE.doubleValue();
      bigFraction2.ONE_THIRD.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.divide(3L);
      bigFraction3.THREE_QUARTERS.doubleValue();
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      bigFraction1.pow(246.0);
      bigInteger0.floatValue();
      BigFraction bigFraction4 = bigFraction1.subtract(bigFraction2);
      BigFraction bigFraction5 = bigFraction0.divide(bigInteger0);
      bigFraction5.TWO_FIFTHS.subtract(3L);
      BigFraction bigFraction6 = bigFraction1.add(598L);
      BigFraction bigFraction7 = bigFraction4.abs();
      bigFraction7.ONE_HALF.getDenominatorAsInt();
      bigFraction2.add(bigFraction6);
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(113236205062349959L);
      bigFraction0.TWO_QUARTERS.toString();
      BigFraction bigFraction1 = bigFraction0.add(4882);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(4882);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 52;
      BigFraction bigFraction0 = new BigFraction(52);
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.ONE_QUARTER.percentageValue();
      bigFraction1.ONE_FIFTH.floatValue();
      bigFraction1.getDenominator();
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.reciprocal();
      bigFraction2.THREE_FIFTHS.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction1.abs();
      bigFraction1.TWO_THIRDS.subtract(52);
      // Undeclared exception!
      try { 
        bigFraction3.ZERO.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.MINUS_ONE.hashCode();
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = bigFraction0.TWO.add(4607182418800017408L);
      BigFraction bigFraction2 = bigFraction1.TWO.add(bigFraction0);
      bigFraction2.ONE_HALF.doubleValue();
      BigFraction bigFraction3 = bigFraction0.multiply((-2400L));
      bigFraction0.getNumeratorAsLong();
      bigFraction1.toString();
      bigFraction0.TWO.pow((-880));
      bigFraction3.compareTo(bigFraction0);
      bigFraction1.FOUR_FIFTHS.subtract((-1));
      int int0 = 1318;
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue(1318);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigInteger bigInteger1 = bigInteger0.not();
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.add(2533L);
      BigFraction bigFraction3 = bigFraction0.reduce();
      int int0 = (-1493);
      BigFraction.getReducedFraction(530, (-1493));
      bigFraction3.getField();
      bigFraction2.pow(bigInteger1);
      bigFraction3.multiply(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction1.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = null;
      bigFraction0.TWO_THIRDS.longValue();
      try { 
        bigFraction0.THREE_FIFTHS.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1099L), (-1099L));
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-3621), (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.add((-1));
      BigFraction bigFraction3 = bigFraction1.FOUR_FIFTHS.subtract((-1L));
      BigFraction bigFraction4 = bigFraction3.MINUS_ONE.subtract(bigFraction0);
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-1), (-3621));
      BigFraction bigFraction6 = bigFraction5.THREE_FIFTHS.add(bigInteger0);
      bigFraction6.FOUR_FIFTHS.pow(591);
      bigFraction0.getDenominatorAsInt();
      bigFraction0.multiply(1688L);
      bigFraction2.doubleValue();
      BigFraction bigFraction7 = bigFraction3.THREE_FIFTHS.pow((-1227L));
      BigFraction bigFraction8 = bigFraction1.ONE_HALF.multiply(37);
      bigFraction8.ONE_THIRD.toString();
      BigFraction bigFraction9 = bigFraction4.TWO_FIFTHS.divide((-1));
      bigFraction9.ONE_QUARTER.negate();
      bigFraction0.pow(1.086550235748291);
      bigFraction2.doubleValue();
      bigFraction4.equals(bigFraction3);
      BigFraction bigFraction10 = bigFraction2.multiply((-248L));
      bigFraction10.ONE_FIFTH.longValue();
      bigFraction7.reciprocal();
      bigFraction6.divide(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-3621), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(238.1792, (-344));
      BigFraction bigFraction1 = bigFraction0.divide((-1));
      bigFraction1.toString();
      bigFraction1.doubleValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.FOUR_FIFTHS.add(bigInteger0);
      bigFraction1.TWO_THIRDS.pow(238.1792);
      BigFraction bigFraction2 = bigFraction1.TWO.subtract((-1));
      bigFraction2.TWO_FIFTHS.bigDecimalValue(4, 4);
      BigFraction bigFraction3 = bigFraction1.subtract(bigFraction0);
      bigFraction3.THREE_FIFTHS.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction3.divide(bigFraction0);
      bigFraction0.doubleValue();
      BigFraction bigFraction5 = bigFraction4.subtract((long) (-1));
      BigFraction bigFraction6 = bigFraction0.multiply(566);
      BigFraction bigFraction7 = bigFraction3.ONE_HALF.negate();
      bigFraction7.ONE.multiply(bigInteger0);
      bigFraction1.getField();
      bigFraction5.pow((-344));
      BigFraction bigFraction8 = bigFraction6.reciprocal();
      BigFraction bigFraction9 = bigFraction8.divide((long) 566);
      BigFraction bigFraction10 = bigFraction0.pow((long) (-1));
      bigFraction10.TWO.hashCode();
      bigFraction1.pow(bigInteger0);
      bigFraction0.percentageValue();
      bigFraction9.longValue();
      bigFraction7.getDenominator();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.pow((-6.364563771711373E-8));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5, 5);
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.reciprocal();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.ONE_QUARTER.intValue();
      bigFraction2.THREE_QUARTERS.divide(bigInteger0);
      bigFraction2.TWO_FIFTHS.bigDecimalValue(1);
      BigFraction bigFraction3 = bigFraction0.subtract(0L);
      bigFraction0.compareTo(bigFraction1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-113);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigFraction3.ZERO.pow((int) (byte)103);
      BigFraction bigFraction4 = bigFraction3.add(bigInteger1);
      BigFraction bigFraction5 = bigFraction4.ONE_QUARTER.subtract((long) (byte) (-113));
      bigFraction0.getField();
      bigFraction1.add((long) (byte) (-113));
      BigFraction bigFraction6 = bigFraction3.multiply((int) (byte)1);
      bigFraction6.ONE_FIFTH.floatValue();
      bigFraction6.MINUS_ONE.divide(bigFraction1);
      bigFraction3.add((int) (byte)103);
      bigFraction5.negate();
      bigFraction4.subtract((long) (byte) (-113));
      bigFraction1.divide((-6142L));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.FOUR_FIFTHS.add((-2172));
      bigFraction1.equals(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1504.3086613916));
      bigFraction0.divide(1L);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.equals("zsy9@BzP-|U!*CWf");
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      bigFraction2.multiply(bigInteger0);
      BigInteger bigInteger1 = bigFraction0.getNumerator();
      BigFraction bigFraction3 = bigFraction1.multiply((-4035746434778044925L));
      BigFraction.getReducedFraction((-191), (-191));
      bigFraction3.subtract(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, (-134.2291587414), 2694);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ONE_HALF.bigDecimalValue();
      bigFraction0.ONE_QUARTER.floatValue();
      bigFraction0.getNumerator();
      bigFraction0.ONE_FIFTH.getDenominatorAsInt();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1698, (-734));
      BigFraction bigFraction2 = bigFraction0.subtract(553L);
      BigFraction bigFraction3 = bigFraction2.THREE_FIFTHS.add((-1));
      bigFraction0.doubleValue();
      bigFraction1.THREE_QUARTERS.hashCode();
      bigFraction2.FOUR_FIFTHS.pow(0.0);
      bigFraction2.getNumerator();
      bigFraction0.getNumeratorAsInt();
      bigFraction2.multiply(1698);
      BigFraction bigFraction4 = bigFraction1.add((long) 0);
      BigFraction bigFraction5 = bigFraction4.subtract(988);
      BigFraction bigFraction6 = BigFraction.ONE_QUARTER;
      bigFraction5.THREE_QUARTERS.compareTo(bigFraction6);
      bigFraction3.reduce();
      // Undeclared exception!
      try { 
        bigFraction6.bigDecimalValue(1940, 1698);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.reduce();
      bigFraction0.getNumeratorAsInt();
      bigFraction1.THREE_FIFTHS.bigDecimalValue(0);
      bigFraction1.ONE_THIRD.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction1.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(956L);
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction1.ONE_THIRD.subtract((-664L));
      bigFraction2.ONE.hashCode();
      bigFraction1.equals(bigFraction2);
      BigFraction bigFraction3 = bigFraction1.pow((-2459));
      assertEquals((byte)0, bigFraction3.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(9, (-4267));
      BigFraction bigFraction1 = bigFraction0.subtract((long) (-4267));
      BigFraction bigFraction2 = bigFraction0.ONE.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.FOUR_FIFTHS.reciprocal();
      bigFraction1.THREE_QUARTERS.equals(bigFraction2);
      bigFraction1.getDenominatorAsLong();
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction1.divide(1215);
      bigFraction3.longValue();
      BigFraction bigFraction5 = bigFraction4.add(bigFraction2);
      // Undeclared exception!
      try { 
        bigFraction5.TWO.bigDecimalValue(9, (-4267));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4398046511103L, 2495L);
      int int0 = (-472);
      BigFraction bigFraction1 = bigFraction0.pow((-472));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.add(1275L);
      bigFraction2.THREE_QUARTERS.divide(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.ZERO.subtract(0);
      BigFraction bigFraction5 = bigFraction3.ONE.negate();
      BigFraction bigFraction6 = bigFraction1.abs();
      bigFraction6.intValue();
      bigFraction6.toString();
      BigFraction bigFraction7 = bigFraction6.negate();
      bigFraction7.ONE.multiply(bigFraction5);
      BigFraction bigFraction8 = BigFraction.getReducedFraction(0, (-472));
      bigFraction8.MINUS_ONE.toString();
      bigFraction8.ONE_THIRD.divide(bigInteger0);
      BigFraction bigFraction9 = bigFraction6.pow(bigInteger0);
      bigFraction4.TWO.doubleValue();
      BigFraction bigFraction10 = bigFraction5.ZERO.reduce();
      bigFraction10.THREE_FIFTHS.subtract(bigFraction9);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1011, 1011);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, 1);
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.divide(bigFraction1);
      assertEquals((byte)1, bigFraction2.byteValue());
      
      bigFraction0.bigDecimalValue();
      long long0 = bigFraction0.getNumeratorAsLong();
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-975), (-658));
      BigFraction bigFraction1 = new BigFraction((-2941));
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertEquals((short) (-2939), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.TWO_FIFTHS.add(bigInteger0);
      BigFraction bigFraction1 = new BigFraction(1882.48539, 1882.48539, (-3085));
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction2.byteValue());
      
      bigFraction1.hashCode();
      assertEquals((byte)90, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2042.85));
      BigFraction bigFraction1 = bigFraction0.multiply((-440L));
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.abs();
      BigFraction bigFraction3 = bigFraction1.ZERO.multiply((-440L));
      bigFraction3.MINUS_ONE.getNumeratorAsLong();
      bigFraction2.ZERO.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction2.ONE_QUARTER.pow((-440L));
      bigFraction4.THREE_QUARTERS.multiply((-1836));
      bigFraction1.ONE.negate();
      float float0 = bigFraction1.floatValue();
      assertEquals(898854.0F, float0, 0.01F);
      
      BigFraction bigFraction5 = bigFraction1.pow(0);
      BigFraction bigFraction6 = bigFraction5.ONE.divide(bigFraction4);
      bigFraction6.TWO_QUARTERS.longValue();
      assertEquals((byte)1, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      
      BigFraction bigFraction7 = bigFraction2.subtract((long) 0);
      bigFraction0.multiply((-543));
      BigFraction bigFraction8 = bigFraction7.divide((-440L));
      bigFraction3.add(0);
      bigFraction3.subtract(0L);
      BigFraction bigFraction9 = bigFraction8.multiply(1);
      double double0 = bigFraction9.doubleValue();
      assertEquals((-0.0011363636363636363), double0, 0.01);
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction10 = bigFraction1.multiply(bigInteger0);
      bigFraction10.getNumeratorAsLong();
      assertFalse(bigFraction10.equals((Object)bigFraction6));
  }
}
