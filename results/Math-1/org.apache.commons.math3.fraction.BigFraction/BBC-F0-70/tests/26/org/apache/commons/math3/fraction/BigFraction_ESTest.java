/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 09 19:19:55 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertEquals((short) (-2), bigFraction3.shortValue());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.pow(0L);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction((double) 0);
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction2, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1249);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)1250, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = new BigFraction(133L);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals((short) (-132), bigFraction2.shortValue());
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1152.649421176829);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals((short)1153, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.0619101524353027);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(bigInteger0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(133L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      assertEquals((byte)123, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract((-5634L));
      assertEquals((byte)2, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(981, 981);
      BigFraction bigFraction1 = bigFraction0.subtract(133L);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short) (-132), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.subtract(Integer.MAX_VALUE);
      assertEquals((short)2, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.subtract(0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.subtract(2);
      assertEquals((byte) (-1), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.reduce();
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.reduce();
      assertEquals((short) (-1), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(133L);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-0.20561118008722812), 1);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow(bigInteger0);
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-76.5308179298));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((short) (-76), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      BigFraction bigFraction1 = bigFraction0.pow((-2345L));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-1), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1647), (-2455));
      BigFraction bigFraction1 = bigFraction0.pow((-1476));
      assertEquals((byte) (-51), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.pow(1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-431L), 890L);
      double double0 = bigFraction0.ZERO.pow(1.7827257129423813E-8);
      assertEquals(0.0, double0, 0.01);
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.subtract(975);
      double double0 = bigFraction1.pow((-1.0));
      assertEquals((-0.0010258514567090685), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      double double0 = bigFraction0.percentageValue();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      double double0 = bigFraction0.percentageValue();
      assertEquals((-100.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-91);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(bigInteger0);
      assertEquals((short) (-32768), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.negate();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-49);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction1.multiply(bigInteger0);
      assertEquals((short)20155, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1575));
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(121L);
      assertEquals((short)60, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1668.0583619));
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(4294967295L);
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1668), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.divide(5296);
      BigFraction bigFraction2 = bigFraction1.multiply(264);
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      BigFraction bigFraction1 = bigFraction0.ONE.pow((long) (-1));
      BigFraction bigFraction2 = bigFraction1.multiply((-1));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short) (-1), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-218), 1);
      bigFraction0.ONE_FIFTH.longValue();
      assertEquals((short) (-218), bigFraction0.shortValue());
      assertEquals((byte)38, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-0.20561118008722812), 1);
      long long0 = bigFraction0.longValue();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      int int0 = bigFraction0.ONE_HALF.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2515.55));
      int int0 = bigFraction0.intValue();
      assertEquals((-2515), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-174), 33);
      assertEquals((byte) (-5), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-9223372036854775808L));
      BigFraction bigFraction1 = bigFraction0.subtract((-9223372036854775808L));
      long long0 = bigFraction1.getNumeratorAsLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      int int0 = bigFraction0.TWO.getNumeratorAsInt();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1023, 446);
      BigFraction bigFraction1 = bigFraction0.divide((-269L));
      int int0 = bigFraction1.getNumeratorAsInt();
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((-1023), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-218), 1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.add(bigInteger0);
      BigInteger bigInteger1 = bigFraction1.getNumerator();
      assertEquals((byte)38, bigFraction0.byteValue());
      assertEquals((short)9, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-218), 1);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((short) (-218), bigInteger0.shortValue());
      assertEquals((byte)38, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2515.55));
      BigFraction bigFraction1 = bigFraction0.negate();
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      assertEquals((short)2515, bigFraction1.shortValue());
      assertEquals((short) (-13107), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(481L);
      long long0 = bigFraction1.getDenominatorAsLong();
      assertEquals((-1669188453488825723L), long0);
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1152.649421176829);
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals((short)1152, bigFraction0.shortValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-76.5308179298));
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      int int0 = bigFraction2.getDenominatorAsInt();
      assertEquals((-1697331495), int0);
      assertEquals((short) (-76), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((short)2, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-9223372036854775808L));
      BigFraction bigFraction1 = bigFraction0.subtract((-9223372036854775808L));
      double double0 = bigFraction1.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      double double0 = bigFraction0.doubleValue();
      assertEquals(0.8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      assertEquals((byte) (-1), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-431L), 890L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.add((-431L));
      BigFraction bigFraction2 = bigFraction1.divide(bigInteger0);
      assertEquals((short) (-43), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.divide(1L);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-0.20561118008722812), 1);
      BigFraction bigFraction1 = bigFraction0.divide((long) 1);
      assertEquals((short) (-1), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.TWO.multiply(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.divide(1);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = new BigFraction((-0.20561118008722812), 1);
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.negate();
      int int0 = bigFraction1.compareTo(bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)14;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(3542, (int) (byte)0);
      assertEquals((short)3584, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(0);
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(0);
      assertEquals((byte) (-1), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-431L), 890L);
      bigFraction0.MINUS_ONE.bigDecimalValue();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((byte)1, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-218), 1);
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertEquals((byte)76, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.1004278077575267E-8, 1);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)18;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertEquals((short)18, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigFraction bigFraction2 = bigFraction1.negate();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction2.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.negate();
      assertTrue(bigFraction4.equals((Object)bigFraction1));
      assertEquals((short)2, bigFraction4.shortValue());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.add(0L);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.add((-2402L));
      assertEquals((short) (-2401), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.add(2);
      assertEquals((short)2, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.add((-1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.add((-6));
      assertEquals((short) (-5), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1023, 446);
      BigFraction bigFraction1 = bigFraction0.subtract((-2145963842));
      BigFraction bigFraction2 = bigFraction1.abs();
      assertEquals((byte)68, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(3400, 3400);
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1687.77458806);
      bigFraction0.abs();
      assertEquals((short)1687, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3.530656968851287E-8, (-1));
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(3400, 3400);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow((-3050L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.pow((-923));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-776));
      // Undeclared exception!
      try { 
        bigFraction0.pow((-2147483647));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((-356), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, 138);
      // Undeclared exception!
      try { 
        bigFraction0.TWO_THIRDS.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1668.0583619));
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1668), (-1668));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2147483560, 2147483560);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2147483560, 5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(3570);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_THIRDS.bigDecimalValue(7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.0619101524353027);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      try { 
        bigFraction0.THREE_QUARTERS.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(2530L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.subtract(bigInteger0);
      assertEquals((short) (-9), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2515.55));
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertEquals((short) (-29001), bigFraction1.shortValue());
      assertEquals((byte)45, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertEquals((short)5, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      boolean boolean0 = bigFraction1.equals(bigFraction0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      boolean boolean0 = bigFraction0.ONE_FIFTH.equals(bigFraction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      boolean boolean0 = bigFraction0.equals(bigFraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      double double0 = bigFraction0.MINUS_ONE.doubleValue();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.0619101524353027);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.divide(bigInteger0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.reciprocal();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction1.divide(bigInteger0);
      assertEquals((byte)1, bigFraction2.byteValue());
      assertTrue(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 0);
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      String string0 = bigFraction0.ONE_THIRD.toString();
      assertEquals("1 / 3", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.0619101524353027);
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(481L);
      float float0 = bigFraction1.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.pow((-923));
      assertEquals((short)20923, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow(0);
      assertEquals((byte)1, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction((double) 0);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-9223372036854775808L));
      BigFraction bigFraction1 = bigFraction0.subtract((-9223372036854775808L));
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(266, (-356));
      BigFraction bigFraction1 = bigFraction0.pow((-533L));
      float float0 = bigFraction1.floatValue();
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      assertEquals((short)26652, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      float float0 = bigFraction0.ONE_QUARTER.floatValue();
      assertEquals(0.25F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      boolean boolean0 = bigFraction1.equals(bigFraction0);
      assertEquals((byte)1, bigFraction1.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      Object object0 = new Object();
      boolean boolean0 = bigFraction0.TWO_THIRDS.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction((double) 0);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-76.5308179298));
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.9279594746502846E161);
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add(bigFraction0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(3400, 3400);
      BigFraction bigFraction1 = new BigFraction(0.061910152435302734, 1, 3400);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertSame(bigFraction2, bigFraction0);
      assertEquals((short)1, bigFraction2.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2515.55));
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.1004278077575267E-8, 1);
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-431L), 890L);
      BigFraction bigFraction1 = bigFraction0.abs();
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-304.5425128), 106);
      assertEquals((byte) (-48), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2584.1, 903);
      assertEquals((byte)24, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-9.785306155980342E-26), (-1342.231704279), 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -0 to fraction after 0 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) 4, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 4 to fraction (-3/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.7976931348623157E308, (-1922.452587134), 1908874353);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      double double0 = bigFraction0.pow(2.2185957416622524E-48);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-25));
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals((-25L), long0);
      assertEquals((short) (-25), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 0);
      BigFraction bigFraction1 = bigFraction0.ONE.reduce();
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2147483560, 2147483560);
      BigFraction bigFraction1 = bigFraction0.divide((long) 2147483560);
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short) (-88), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      int int0 = bigFraction0.TWO_QUARTERS.getDenominatorAsInt();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.multiply(274877896704L);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 0);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(0);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(2, 2);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-9223372036854775808L));
      bigFraction0.TWO.longValue();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.0619101524353027);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.9279594746502846E161);
      bigFraction0.ONE_QUARTER.hashCode();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      long long0 = bigFraction0.FOUR_FIFTHS.getDenominatorAsLong();
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 0);
      double double0 = bigFraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.19101357460021973, 2147483613, 274);
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.9279594746502846E161);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.1004278077575267E-8, 1);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.add((long) (byte)4);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)3, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.subtract((long) 2);
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue(2, 2);
      assertEquals((short) (-2), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-9223372036854775808L));
      BigFraction bigFraction1 = bigFraction0.divide(Integer.MAX_VALUE);
      assertEquals((short) (-2), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertNotNull(bigFractionField0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.multiply(856);
      assertEquals((short)570, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1575));
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(3400, 3400);
      int int0 = bigFraction0.intValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }
}
