/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 12:32:17 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(709);
      BigFraction bigFraction2 = new BigFraction(563);
      BigFraction bigFraction3 = bigFraction1.MINUS_ONE.add(bigFraction2);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.ONE_HALF.subtract(bigInteger0);
      bigFraction1.getField();
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-2564), 21);
      bigFraction0.multiply(205);
      bigFraction4.bigDecimalValue(21, 4);
      bigFraction0.multiply((-626L));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ONE_THIRD.multiply(bigInteger0);
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.ONE_FIFTH.add(bigFraction2);
      BigFraction bigFraction4 = bigFraction3.MINUS_ONE.divide(bigFraction2);
      bigFraction4.MINUS_ONE.pow(4L);
      bigFraction0.THREE_FIFTHS.getField();
      bigFraction1.getNumerator();
      int int0 = (-1470);
      bigFraction0.ONE_FIFTH.reciprocal();
      int int1 = 0;
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((-1470), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = (-3470L);
      BigFraction bigFraction0 = new BigFraction((-9223372036854775808L), (-3470L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.TWO.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.pow((-339L));
      BigFraction bigFraction3 = bigFraction1.divide(bigFraction2);
      bigFraction1.TWO_THIRDS.doubleValue();
      bigFraction3.ONE_FIFTH.add((-9223372036854775808L));
      bigFraction1.getField();
      bigFraction0.TWO.getDenominatorAsInt();
      bigFraction2.subtract(100);
      // Undeclared exception!
      try { 
        bigFraction1.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)83;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      bigFraction0.TWO_FIFTHS.getNumeratorAsLong();
      bigFraction0.THREE_QUARTERS.reduce();
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.divide(bigInteger0);
      bigFraction2.ZERO.negate();
      // Undeclared exception!
      try { 
        bigFraction1.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(0);
      bigFraction0.THREE_QUARTERS.subtract(0);
      bigFraction0.pow((long) 0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)2;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.divide((-21L));
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction1.add(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.892856346657855E140);
      BigFraction bigFraction1 = bigFraction0.ONE.add(bigFraction0);
      bigFraction1.abs();
      bigFraction1.divide((-1443));
      bigFraction0.divide(9154082963658192752L);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.pow((-2492.247593504354));
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction1.add(Integer.MAX_VALUE);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(Integer.MAX_VALUE, (-632.4454), 614);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-2586));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-1));
      bigFraction0.subtract((long) (-1));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 1481;
      Random.setNextRandom(1481);
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.percentageValue();
      bigFraction0.equals(bigFraction0);
      BigFraction bigFraction1 = bigFraction0.divide(4647714815446351872L);
      bigFraction1.subtract(4647714815446351872L);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      double double0 = 0.0;
      bigFraction0.TWO_THIRDS.intValue();
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.MINUS_ONE.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2051));
      bigFraction0.intValue();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.toString();
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2880);
      bigFraction0.ZERO.getNumeratorAsInt();
      BigFraction bigFraction1 = new BigFraction((double) 2880);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1949.3388965);
      bigFraction0.getDenominatorAsLong();
      bigFraction0.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.multiply(bigFraction1);
      bigFraction1.ONE_HALF.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.ONE_THIRD.multiply(bigFraction1);
      BigFraction bigFraction5 = bigFraction4.ZERO.add(bigFraction3);
      bigFraction5.MINUS_ONE.multiply(2);
      BigFraction bigFraction6 = bigFraction5.ONE_FIFTH.divide((-369L));
      bigFraction2.TWO.floatValue();
      bigFraction1.TWO_THIRDS.divide(bigInteger0);
      bigFraction5.FOUR_FIFTHS.percentageValue();
      bigFraction4.THREE_FIFTHS.add(bigFraction3);
      BigFraction bigFraction7 = bigFraction0.multiply((-3840L));
      bigFraction2.reciprocal();
      bigFraction7.pow(bigInteger0);
      BigFraction bigFraction8 = bigFraction6.add(2);
      bigFraction1.add((-369L));
      bigFraction4.subtract(bigFraction8);
      bigFraction2.getNumerator();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 113);
      bigFraction0.equals("-e<0");
      bigFraction0.bigDecimalValue(5, 5);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.ONE.floatValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.TWO_QUARTERS.multiply((-1550L));
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.multiply(bigInteger0);
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
      BigFraction bigFraction4 = bigFraction2.ONE.divide(56);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction5 = bigFraction3.TWO.subtract(bigInteger1);
      BigFraction bigFraction6 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction7 = bigFraction5.TWO_FIFTHS.subtract(bigFraction6);
      bigFraction0.intValue();
      Object object0 = new Object();
      bigFraction1.equals(object0);
      BigFraction bigFraction8 = bigFraction4.subtract(bigInteger1);
      BigFraction bigFraction9 = new BigFraction(bigInteger1);
      bigFraction7.ZERO.equals(bigFraction9);
      bigFraction8.MINUS_ONE.getField();
      BigFraction bigFraction10 = bigFraction8.multiply(bigInteger0);
      bigFraction10.FOUR_FIFTHS.multiply(bigInteger1);
      bigFraction10.ONE.floatValue();
      BigFraction bigFraction11 = bigFraction4.pow(56);
      BigFraction.getReducedFraction(56, 56);
      // Undeclared exception!
      try { 
        bigFraction11.bigDecimalValue((-343));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.reduce();
      Object object0 = new Object();
      bigFraction1.ONE_THIRD.getDenominatorAsLong();
      bigFraction0.equals(object0);
      bigFraction1.reduce();
      bigFraction1.getField();
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.add(bigInteger0);
      bigFraction2.divide(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.divide((-467));
      BigFraction bigFraction2 = bigFraction0.multiply((-467));
      BigFraction bigFraction3 = bigFraction1.pow((long) (-467));
      bigFraction3.doubleValue();
      bigFraction2.pow(1);
      bigFraction2.add(1);
      BigFraction bigFraction4 = new BigFraction(2436.7782703144135, 629, (-606));
      bigFraction3.divide(1313);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.pow(488);
      bigFraction1.pow((double) (-1));
      BigFraction bigFraction2 = bigFraction1.add(488);
      BigFraction bigFraction3 = bigFraction2.add(bigFraction0);
      bigFraction3.subtract(bigFraction0);
      bigFraction3.getDenominatorAsInt();
      bigFraction0.multiply(9218868437227405312L);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction1.FOUR_FIFTHS.toString();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.multiply(bigInteger0);
      bigFraction1.FOUR_FIFTHS.percentageValue();
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction1);
      bigFraction3.TWO.toString();
      int int0 = (-1094);
      bigFraction1.FOUR_FIFTHS.toString();
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(0, (-1094));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.divide(bigFraction1);
      bigFraction2.bigDecimalValue(4);
      bigFraction2.getField();
      BigFraction bigFraction3 = bigFraction0.pow((-1131));
      Object object0 = new Object();
      bigFraction3.toString();
      bigFraction1.getNumerator();
      bigFraction1.getDenominator();
      BigFraction bigFraction4 = new BigFraction((-3363.323024), 5);
      bigFraction4.percentageValue();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.pow(1435);
      Object object0 = new Object();
      BigFraction bigFraction2 = BigFraction.ONE;
      Object object1 = new Object();
      bigFraction2.equals(object1);
      BigFraction bigFraction3 = bigFraction2.reduce();
      bigFraction1.getField();
      BigFraction bigFraction4 = new BigFraction(0, (-1131));
      bigFraction0.getDenominatorAsLong();
      bigFraction1.getDenominatorAsInt();
      bigFraction3.subtract((-3000L));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = new BigFraction((-1434));
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      bigFraction1.subtract(bigFraction2);
      bigFraction2.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      BigFraction bigFraction1 = bigFraction0.reduce();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(2147483631, 2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.divide(bigFraction1);
      bigFraction2.bigDecimalValue(4);
      bigFraction2.getField();
      BigFraction bigFraction3 = bigFraction0.pow((-1131));
      Object object0 = new Object();
      bigFraction2.equals(bigFraction1);
      bigFraction3.reduce();
      bigFraction0.getField();
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = new BigFraction(1885.5042058344707, (-1569));
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.pow(1637);
      bigFraction1.add(100);
      bigFraction0.add(bigFraction2);
      bigFraction1.reduce();
      BigFraction bigFraction4 = BigFraction.ONE_FIFTH;
      bigFraction4.getField();
      bigFraction3.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-1569));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction1.pow((double) (-43));
      BigFraction bigFraction2 = bigFraction1.add(488);
      BigFraction bigFraction3 = new BigFraction((-1.0), 488, 488);
      BigFraction bigFraction4 = bigFraction2.add(bigFraction3);
      bigFraction4.toString();
      bigFraction3.getNumerator();
      bigFraction3.longValue();
      bigFraction4.getDenominator();
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction(1885.5042058344707, (-1569));
      bigFraction0.pow((double) 1637);
      bigFraction0.add(1637);
      BigFraction bigFraction2 = new BigFraction(Double.NaN, 0.0, 1521);
      // Undeclared exception!
      try { 
        bigFraction1.add(bigFraction2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.MINUS_ONE.toString();
      BigFraction bigFraction1 = bigFraction0.subtract(1297L);
      BigFraction bigFraction2 = bigFraction1.negate();
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.multiply(bigFraction0);
      BigFraction bigFraction4 = bigFraction2.TWO_FIFTHS.add((-7278142539171889152L));
      BigFraction bigFraction5 = bigFraction0.TWO_FIFTHS.reciprocal();
      BigFraction bigFraction6 = bigFraction2.TWO_FIFTHS.reciprocal();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction7 = bigFraction2.ONE_THIRD.subtract(bigInteger0);
      BigFraction bigFraction8 = bigFraction1.TWO_QUARTERS.multiply(bigFraction7);
      BigFraction bigFraction9 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction10 = BigFraction.getReducedFraction(100, 100);
      BigFraction bigFraction11 = bigFraction7.ONE_FIFTH.subtract(bigFraction9);
      bigFraction2.FOUR_FIFTHS.pow(100);
      BigFraction bigFraction12 = bigFraction2.pow(1297L);
      bigFraction12.doubleValue();
      bigFraction12.ONE_QUARTER.equals(bigFraction6);
      bigFraction7.ONE_HALF.getDenominatorAsLong();
      bigFraction0.divide(bigInteger0);
      bigFraction5.THREE_QUARTERS.longValue();
      bigFraction8.ONE_HALF.pow((double) 1297L);
      bigFraction5.subtract(950);
      bigFraction8.multiply(bigInteger0);
      bigFraction7.getDenominatorAsLong();
      bigFraction11.multiply(bigFraction3);
      BigFraction.getReducedFraction(950, 100);
      bigFraction4.intValue();
      bigFraction10.getNumeratorAsInt();
      bigFraction9.bigDecimalValue(1);
      bigFraction9.doubleValue();
      bigFraction10.pow(bigInteger0);
      bigFraction6.getDenominatorAsInt();
      bigFraction6.pow(2616.5832718);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.divide(1);
      BigFraction bigFraction2 = bigFraction0.ZERO.multiply((-1));
      BigFraction bigFraction3 = bigFraction0.pow((long) 1);
      bigFraction3.MINUS_ONE.doubleValue();
      BigFraction bigFraction4 = bigFraction2.pow(1);
      BigFraction bigFraction5 = bigFraction1.add((-1));
      bigFraction5.add(bigFraction1);
      bigFraction1.toString();
      bigFraction5.getNumerator();
      bigFraction4.longValue();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction0.divide(2147483646);
      BigFraction bigFraction2 = bigFraction0.multiply(2147483646);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(2147483646, (-1));
      bigFraction3.pow((long) (-1));
      bigFraction0.doubleValue();
      bigFraction3.pow(0.5);
      int int0 = 4;
      MockRandom mockRandom0 = new MockRandom();
      bigFraction2.divide(bigFraction1);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(0, 0, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      BigFraction bigFraction1 = bigFraction0.reduce();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(649, 649);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      int int0 = (-1);
      BigFraction bigFraction1 = bigFraction0.pow((-1));
      bigFraction1.pow((double) (-1));
      bigFraction1.add((-1));
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(0.2, (-1), (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.2 to fraction after -1 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.pow(488);
      bigFraction1.pow((double) (-1));
      BigFraction bigFraction2 = bigFraction1.add(488);
      bigFraction2.add(bigFraction1);
      bigFraction0.toString();
      bigFraction1.getNumerator();
      bigFraction0.longValue();
      bigFraction1.getDenominator();
      bigFraction2.percentageValue();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = new BigFraction(1885.5042058344707, (-1569));
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction1.subtract(3856L);
      BigFraction bigFraction3 = new BigFraction(4.8970605348586105E-8);
      bigFraction0.doubleValue();
      BigFraction bigFraction4 = BigFraction.ONE_QUARTER;
      bigFraction1.subtract(3856L);
      bigFraction2.divide((-1676));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction5 = BigFraction.ONE_QUARTER;
      bigFraction5.divide(bigInteger0);
      bigFraction4.multiply(bigInteger0);
      bigFraction0.getDenominator();
      BigFraction.getReducedFraction((-2147483645), (-1828));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.pow((-5766));
      bigFraction0.pow(4.4422779589171113E-190);
      BigFraction bigFraction2 = bigFraction1.add((-652));
      BigFraction bigFraction3 = new BigFraction((-652), 659.0388606348077, 3179);
      BigFraction bigFraction4 = bigFraction2.add(bigFraction1);
      bigFraction2.toString();
      bigFraction4.getNumerator();
      BigFraction bigFraction5 = BigFraction.ONE;
      bigFraction5.longValue();
      bigFraction5.getDenominator();
      bigFraction5.percentageValue();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = new BigFraction(1885.5042058344707, (-1569));
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction1.subtract(3856L);
      bigFraction1.divide(2147483646);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction1.divide(bigInteger0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction4 = bigFraction3.multiply(bigInteger1);
      BigFraction.getReducedFraction((byte) (-1), 1);
      bigFraction4.divide(bigFraction2);
      bigFraction0.multiply((-1569));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.pow(488);
      bigFraction1.pow((double) (-1));
      bigFraction1.add(488);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(Double.POSITIVE_INFINITY, 488, 488);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert \u221E to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.pow(1637);
      bigFraction1.TWO.pow((double) (-1607));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction3.divide(bigInteger0);
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-815), 1637);
      bigFraction4.multiply(bigInteger0);
      bigFraction2.getDenominator();
      BigFraction.getReducedFraction((-3335), (-3335));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      bigFraction0.subtract(2743L);
      BigFraction bigFraction3 = bigFraction1.pow(2743L);
      BigFraction bigFraction4 = bigFraction2.add(1073741824);
      BigFraction bigFraction5 = new BigFraction((double) 1928L);
      bigFraction5.doubleValue();
      bigFraction1.getField();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction3.subtract(bigInteger0);
      BigFraction bigFraction6 = bigFraction4.divide(bigInteger0);
      bigFraction2.doubleValue();
      bigFraction1.negate();
      BigFraction bigFraction7 = BigFraction.TWO_QUARTERS;
      bigFraction7.subtract(1073741824);
      BigFraction bigFraction8 = BigFraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        bigFraction6.bigDecimalValue(7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(907L, 907L);
      bigFraction0.TWO_FIFTHS.divide(907L);
      bigFraction0.reduce();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      int int0 = 1;
      bigFraction0.divide(1);
      BigFraction bigFraction1 = bigFraction0.ZERO.multiply((-1));
      bigFraction0.pow((long) 1);
      bigFraction1.doubleValue();
      bigFraction1.pow((-243.6303));
      MockRandom mockRandom0 = new MockRandom();
      BigFraction bigFraction2 = new BigFraction(2592.0);
      // Undeclared exception!
      try { 
        bigFraction2.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.divide(1);
      BigFraction bigFraction2 = bigFraction0.pow((long) 1);
      bigFraction2.doubleValue();
      MockRandom mockRandom0 = new MockRandom();
      bigFraction0.divide(bigFraction2);
      BigInteger bigInteger0 = new BigInteger(4, 432, mockRandom0);
      BigFraction bigFraction3 = bigFraction1.add((long) 1);
      // Undeclared exception!
      try { 
        bigFraction3.TWO_FIFTHS.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.subtract(2743L);
      bigFraction1.pow(2743L);
      BigFraction bigFraction4 = bigFraction3.divide(129);
      BigFraction bigFraction5 = BigFraction.ONE_QUARTER;
      bigFraction4.equals((Object) null);
      bigFraction3.getNumeratorAsLong();
      BigFraction bigFraction6 = bigFraction1.subtract(129);
      BigFraction bigFraction7 = BigFraction.ONE_QUARTER;
      bigFraction7.divide(1097);
      bigFraction6.longValue();
      bigFraction6.longValue();
      bigFraction2.toString();
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.divide(175);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.subtract(2743L);
      BigFraction bigFraction4 = bigFraction1.pow(2743L);
      bigFraction2.add(1073741824);
      BigFraction bigFraction5 = new BigFraction((double) 1928L);
      bigFraction5.doubleValue();
      BigFraction bigFraction6 = BigFraction.ONE_QUARTER;
      bigFraction6.subtract(2069L);
      bigFraction4.divide((-1828));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.divide(bigInteger0);
      BigFraction bigFraction7 = bigFraction4.multiply(bigInteger0);
      bigFraction7.getDenominator();
      BigFraction.getReducedFraction(1073741824, (-2147483645));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(907L, 907L);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.divide(907L);
      bigFraction1.ZERO.divide(270);
      bigFraction1.THREE_FIFTHS.reduce();
      bigFraction0.ONE_HALF.percentageValue();
      bigFraction0.MINUS_ONE.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction0.divide((-38));
      BigFraction bigFraction3 = BigFraction.ONE_QUARTER;
      bigFraction2.ONE_FIFTH.equals(bigFraction3);
      bigFraction0.TWO_THIRDS.getNumeratorAsLong();
      bigFraction2.subtract((-1536));
      BigFraction bigFraction4 = bigFraction3.divide(175);
      bigFraction4.TWO.longValue();
      bigFraction4.THREE_QUARTERS.longValue();
      bigFraction0.toString();
      bigFraction3.bigDecimalValue();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)16;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction3.THREE_QUARTERS.add(bigInteger0);
      bigFraction2.doubleValue();
      bigFraction4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.divide(1);
      bigFraction0.ZERO.multiply((-1));
      BigFraction bigFraction2 = bigFraction0.pow((long) 1);
      bigFraction2.MINUS_ONE.doubleValue();
      bigFraction0.TWO_THIRDS.pow((double) 1);
      BigFraction bigFraction3 = bigFraction1.pow((-175L));
      BigFraction bigFraction4 = bigFraction0.TWO_FIFTHS.add(bigFraction2);
      BigFraction bigFraction5 = BigFraction.getReducedFraction(1075, 1);
      BigFraction bigFraction6 = bigFraction5.subtract(bigFraction2);
      BigFraction bigFraction7 = bigFraction5.multiply((long) 1075);
      bigFraction4.longValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.subtract(bigInteger0);
      BigFraction bigFraction8 = bigFraction7.reduce();
      bigFraction5.ONE_QUARTER.subtract((-1));
      bigFraction8.reduce();
      BigFraction bigFraction9 = BigFraction.ONE_THIRD;
      bigFraction2.equals(bigFraction9);
      bigFraction6.pow((-1290.4));
      BigFraction bigFraction10 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction11 = bigFraction10.divide((long) 1075);
      BigFraction bigFraction12 = bigFraction11.negate();
      BigFraction bigFraction13 = new BigFraction(1, (-1));
      Object object0 = new Object();
      bigFraction2.equals(object0);
      bigFraction10.getNumerator();
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      bigFraction12.multiply(bigFraction1);
      bigFraction8.abs();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction0.pow(1637);
      bigFraction1.TWO.pow((double) (-1607));
      BigFraction bigFraction3 = bigFraction2.add((-1607));
      BigFraction bigFraction4 = bigFraction2.add(bigFraction1);
      bigFraction1.toString();
      bigFraction4.getNumerator();
      bigFraction0.longValue();
      bigFraction3.getDenominator();
      bigFraction2.percentageValue();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.divide(409);
      bigFraction0.divide(849L);
      bigFraction0.subtract(409);
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)108;
      byte byte1 = (byte)93;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte)108;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((double) (byte)27, 2147474946);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 27 to fraction (9,223,372,036,854,775,782/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigDecimal bigDecimal0 = bigFraction0.ONE_QUARTER.bigDecimalValue((-1), 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.multiply(bigInteger0);
      bigFraction1.ONE_FIFTH.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.add((-1));
      bigFraction1.THREE_FIFTHS.subtract(bigFraction2);
      BigFraction bigFraction3 = bigFraction0.multiply(0L);
      bigFraction2.TWO_THIRDS.longValue();
      BigFraction bigFraction4 = bigFraction1.subtract(bigInteger0);
      bigFraction4.reduce();
      bigFraction4.MINUS_ONE.reduce();
      bigFraction2.equals(bigDecimal0);
      bigFraction0.pow((double) 2440);
      BigFraction bigFraction5 = bigFraction1.divide(4294967295L);
      bigFraction5.MINUS_ONE.negate();
      bigFraction3.multiply(381L);
      bigFraction3.equals(bigFraction5);
      bigFraction0.getNumerator();
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.divide(1);
      BigFraction bigFraction2 = bigFraction0.ZERO.multiply((-1));
      BigFraction bigFraction3 = bigFraction0.pow((long) 1);
      bigFraction3.MINUS_ONE.doubleValue();
      bigFraction0.TWO_THIRDS.pow((double) 1);
      BigFraction bigFraction4 = bigFraction1.pow((-175L));
      BigFraction bigFraction5 = bigFraction0.TWO_FIFTHS.add(bigFraction3);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction6 = bigFraction5.add(bigInteger0);
      BigFraction bigFraction7 = BigFraction.ONE_THIRD;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction3.divide(bigInteger0);
      BigFraction bigFraction8 = BigFraction.ZERO;
      bigFraction8.subtract((long) (byte) (-99));
      bigFraction2.divide(bigFraction1);
      bigFraction6.getNumeratorAsLong();
      BigFraction bigFraction9 = BigFraction.ONE_FIFTH;
      bigFraction4.divide(bigFraction5);
      bigFraction4.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction7.bigDecimalValue(909, (int) (byte) (-99));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1200.7551881));
      assertNotNull(bigFraction0);
      assertEquals((short) (-1200), bigFraction0.shortValue());
      assertEquals((byte)80, bigFraction0.byteValue());
      
      int int0 = 420;
      BigFraction bigFraction1 = new BigFraction(420, (-896));
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.subtract(bigFraction1);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short) (-1200), bigFraction0.shortValue());
      assertEquals((byte)80, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = bigFraction2.THREE_FIFTHS.divide((long) (-896));
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertEquals((short) (-1200), bigFraction0.shortValue());
      assertEquals((byte)80, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      
      int int1 = bigFraction2.THREE_FIFTHS.hashCode();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(int1 == int0);
      assertEquals((short) (-1200), bigFraction0.shortValue());
      assertEquals((byte)80, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      
      double double0 = bigFraction1.THREE_FIFTHS.pow((-1200.7551881));
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = bigFraction0.equals(object0);
      assertFalse(boolean0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertEquals((short) (-1200), bigFraction0.shortValue());
      assertEquals((byte)80, bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      
      double double1 = bigFraction1.TWO_QUARTERS.percentageValue();
      assertEquals(50.0, double1, 0.01);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      
      // Undeclared exception!
      try { 
        bigFraction2.pow(2144428905);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertNotNull(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      assertNotNull(bigFraction2);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = bigFraction0.subtract(2743L);
      assertNotNull(bigFraction3);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)74, bigFraction3.byteValue());
      assertEquals((short) (-2742), bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      
      BigFraction bigFraction4 = bigFraction1.pow(2743L);
      assertNotNull(bigFraction4);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      
      BigFraction bigFraction5 = bigFraction2.add(1073741824);
      assertNotNull(bigFraction5);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      
      BigFraction bigFraction6 = new BigFraction((double) 1928L);
      assertNotNull(bigFraction6);
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertEquals((byte) (-120), bigFraction6.byteValue());
      assertEquals((short)1928, bigFraction6.shortValue());
      
      double double0 = bigFraction6.doubleValue();
      assertEquals(1928.0, double0, 0.01);
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertEquals((byte) (-120), bigFraction6.byteValue());
      assertEquals((short)1928, bigFraction6.shortValue());
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction3);
      
      BigFractionField bigFractionField0 = bigFraction1.getField();
      assertNotNull(bigFractionField0);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-16896), bigInteger0.shortValue());
      
      BigFraction bigFraction7 = bigFraction4.subtract(bigInteger0);
      assertEquals(2, byteArray0.length);
      assertNotNull(bigFraction7);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0}, byteArray0);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-16896), bigInteger0.shortValue());
      assertEquals((short)16896, bigFraction7.shortValue());
      assertEquals((byte)0, bigFraction7.byteValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction7);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction5);
      
      BigFraction bigFraction8 = bigFraction5.divide(bigInteger0);
      assertEquals(2, byteArray0.length);
      assertNotNull(bigFraction8);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0}, byteArray0);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction7));
      assertFalse(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction7));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-16896), bigInteger0.shortValue());
      assertEquals((short)1986, bigFraction8.shortValue());
      assertEquals((byte) (-62), bigFraction8.byteValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction8);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction8);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction5);
      
      double double1 = bigFraction2.doubleValue();
      assertEquals(0.26666666666666666, double1, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction8));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction7));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction8);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction7);
      
      BigFraction bigFraction9 = bigFraction1.negate();
      assertNotNull(bigFraction9);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction9.equals((Object)bigFraction5));
      assertFalse(bigFraction9.equals((Object)bigFraction0));
      assertFalse(bigFraction9.equals((Object)bigFraction8));
      assertFalse(bigFraction9.equals((Object)bigFraction6));
      assertFalse(bigFraction9.equals((Object)bigFraction4));
      assertFalse(bigFraction9.equals((Object)bigFraction3));
      assertFalse(bigFraction9.equals((Object)bigFraction2));
      assertFalse(bigFraction9.equals((Object)bigFraction1));
      assertFalse(bigFraction9.equals((Object)bigFraction7));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction9.shortValue());
      assertEquals((byte)0, bigFraction9.byteValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction9, bigFraction5);
      assertNotSame(bigFraction9, bigFraction0);
      assertNotSame(bigFraction9, bigFraction8);
      assertNotSame(bigFraction9, bigFraction6);
      assertNotSame(bigFraction9, bigFraction4);
      assertNotSame(bigFraction9, bigFraction3);
      assertNotSame(bigFraction9, bigFraction2);
      assertNotSame(bigFraction9, bigFraction1);
      assertNotSame(bigFraction9, bigFraction7);
      
      BigFraction bigFraction10 = bigFraction7.pow((int) (byte) (-66));
      bigFraction8.multiply(bigInteger0);
      Object object0 = new Object();
      bigFraction1.equals(object0);
      BigFraction bigFraction11 = bigFraction7.reduce();
      bigFraction3.getField();
      bigFraction11.TWO_QUARTERS.add(bigFraction3);
      bigFraction11.floatValue();
      bigFraction11.getDenominatorAsLong();
      bigFraction10.bigDecimalValue(3);
      bigFraction3.toString();
      bigFraction10.getDenominator();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(1);
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      
      BigFraction bigFraction1 = new BigFraction(715.2138849839121);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction1.pow(389);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)2668, bigFraction2.shortValue());
      assertEquals((byte)108, bigFraction2.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      long long0 = bigFraction2.longValue();
      assertEquals(2108975432305085036L, long0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)2668, bigFraction2.shortValue());
      assertEquals((byte)108, bigFraction2.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = bigFraction1.FOUR_FIFTHS.pow(820L);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      
      BigFraction bigFraction4 = bigFraction3.TWO_THIRDS.multiply(1);
      assertNotNull(bigFraction4);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      
      BigFraction bigFraction5 = bigFraction0.add(bigFraction1);
      assertNotNull(bigFraction5);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)714, bigFraction5.shortValue());
      assertEquals((byte) (-54), bigFraction5.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction1);
      
      int int0 = bigFraction3.ONE.intValue();
      assertEquals(1, int0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigFraction bigFraction6 = bigFraction5.pow(bigInteger0);
      assertNotNull(bigFraction6);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertTrue(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)714, bigFraction5.shortValue());
      assertEquals((byte) (-54), bigFraction5.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)714, bigFraction6.shortValue());
      assertEquals((byte) (-54), bigFraction6.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction4);
      
      BigFraction bigFraction7 = new BigFraction(825.5745965);
      assertNotNull(bigFraction7);
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertEquals((short)825, bigFraction7.shortValue());
      assertEquals((byte)57, bigFraction7.byteValue());
      
      BigFraction bigFraction8 = bigFraction7.multiply(bigInteger0);
      assertNotNull(bigFraction8);
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertTrue(bigFraction8.equals((Object)bigFraction7));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)825, bigFraction7.shortValue());
      assertEquals((byte)57, bigFraction7.byteValue());
      assertEquals((short)825, bigFraction8.shortValue());
      assertEquals((byte)57, bigFraction8.byteValue());
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction2);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger1, bigInteger0);
      
      BigFraction bigFraction9 = bigFraction6.add(bigInteger1);
      assertNotNull(bigFraction9);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction5.equals((Object)bigFraction7));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction8));
      assertTrue(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction8));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction7));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertTrue(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction9.equals((Object)bigFraction4));
      assertTrue(bigFraction9.equals((Object)bigFraction5));
      assertFalse(bigFraction9.equals((Object)bigFraction1));
      assertFalse(bigFraction9.equals((Object)bigFraction3));
      assertFalse(bigFraction9.equals((Object)bigFraction2));
      assertFalse(bigFraction9.equals((Object)bigFraction8));
      assertFalse(bigFraction9.equals((Object)bigFraction0));
      assertTrue(bigFraction9.equals((Object)bigFraction6));
      assertFalse(bigFraction9.equals((Object)bigFraction7));
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)714, bigFraction5.shortValue());
      assertEquals((byte) (-54), bigFraction5.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)714, bigFraction6.shortValue());
      assertEquals((byte) (-54), bigFraction6.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte) (-54), bigFraction9.byteValue());
      assertEquals((short)714, bigFraction9.shortValue());
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction8);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction9);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction8);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction9);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction7);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction9, bigFraction4);
      assertNotSame(bigFraction9, bigFraction1);
      assertNotSame(bigFraction9, bigFraction3);
      assertNotSame(bigFraction9, bigFraction2);
      assertNotSame(bigFraction9, bigFraction5);
      assertNotSame(bigFraction9, bigFraction6);
      assertNotSame(bigFraction9, bigFraction8);
      assertNotSame(bigFraction9, bigFraction0);
      assertNotSame(bigFraction9, bigFraction7);
      
      long long1 = bigFraction7.getNumeratorAsLong();
      assertEquals(7261830947585835L, long1);
      assertTrue(bigFraction7.equals((Object)bigFraction8));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction9));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(long1 == long0);
      assertEquals((short)825, bigFraction7.shortValue());
      assertEquals((byte)57, bigFraction7.byteValue());
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction9);
      assertNotSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction3);
      
      BigDecimal bigDecimal1 = bigFraction3.bigDecimalValue(1075, 1);
      assertNotNull(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction9));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction8));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction3, bigFraction9);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction8);
      
      BigFractionField bigFractionField0 = bigFraction7.getField();
      assertNotNull(bigFractionField0);
      assertTrue(bigFraction7.equals((Object)bigFraction8));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction9));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertEquals((short)825, bigFraction7.shortValue());
      assertEquals((byte)57, bigFraction7.byteValue());
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction9);
      assertNotSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction3);
      
      BigFraction bigFraction10 = BigFraction.TWO_QUARTERS;
      assertNotNull(bigFraction10);
      assertFalse(bigFraction10.equals((Object)bigFraction1));
      assertFalse(bigFraction10.equals((Object)bigFraction7));
      assertFalse(bigFraction10.equals((Object)bigFraction5));
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      assertFalse(bigFraction10.equals((Object)bigFraction9));
      assertFalse(bigFraction10.equals((Object)bigFraction2));
      assertFalse(bigFraction10.equals((Object)bigFraction3));
      assertFalse(bigFraction10.equals((Object)bigFraction0));
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      assertFalse(bigFraction10.equals((Object)bigFraction4));
      assertEquals((short)0, bigFraction10.shortValue());
      assertEquals((byte)0, bigFraction10.byteValue());
      assertNotSame(bigFraction10, bigFraction1);
      assertNotSame(bigFraction10, bigFraction7);
      assertNotSame(bigFraction10, bigFraction5);
      assertNotSame(bigFraction10, bigFraction8);
      assertNotSame(bigFraction10, bigFraction9);
      assertNotSame(bigFraction10, bigFraction2);
      assertNotSame(bigFraction10, bigFraction3);
      assertNotSame(bigFraction10, bigFraction0);
      assertNotSame(bigFraction10, bigFraction6);
      assertNotSame(bigFraction10, bigFraction4);
      
      BigFraction bigFraction11 = bigFraction10.add(820L);
      assertNotNull(bigFraction11);
      assertFalse(bigFraction10.equals((Object)bigFraction1));
      assertFalse(bigFraction10.equals((Object)bigFraction7));
      assertFalse(bigFraction10.equals((Object)bigFraction5));
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      assertFalse(bigFraction10.equals((Object)bigFraction9));
      assertFalse(bigFraction10.equals((Object)bigFraction2));
      assertFalse(bigFraction10.equals((Object)bigFraction3));
      assertFalse(bigFraction10.equals((Object)bigFraction0));
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      assertFalse(bigFraction10.equals((Object)bigFraction4));
      assertFalse(bigFraction11.equals((Object)bigFraction7));
      assertFalse(bigFraction11.equals((Object)bigFraction9));
      assertFalse(bigFraction11.equals((Object)bigFraction5));
      assertFalse(bigFraction11.equals((Object)bigFraction6));
      assertFalse(bigFraction11.equals((Object)bigFraction3));
      assertFalse(bigFraction11.equals((Object)bigFraction0));
      assertFalse(bigFraction11.equals((Object)bigFraction8));
      assertFalse(bigFraction11.equals((Object)bigFraction10));
      assertFalse(bigFraction11.equals((Object)bigFraction1));
      assertFalse(bigFraction11.equals((Object)bigFraction4));
      assertFalse(bigFraction11.equals((Object)bigFraction2));
      assertEquals((short)0, bigFraction10.shortValue());
      assertEquals((byte)0, bigFraction10.byteValue());
      assertEquals((short)820, bigFraction11.shortValue());
      assertEquals((byte)52, bigFraction11.byteValue());
      assertNotSame(bigFraction10, bigFraction1);
      assertNotSame(bigFraction10, bigFraction7);
      assertNotSame(bigFraction10, bigFraction5);
      assertNotSame(bigFraction10, bigFraction8);
      assertNotSame(bigFraction10, bigFraction9);
      assertNotSame(bigFraction10, bigFraction2);
      assertNotSame(bigFraction10, bigFraction3);
      assertNotSame(bigFraction10, bigFraction0);
      assertNotSame(bigFraction10, bigFraction6);
      assertNotSame(bigFraction10, bigFraction4);
      assertNotSame(bigFraction10, bigFraction11);
      assertNotSame(bigFraction11, bigFraction7);
      assertNotSame(bigFraction11, bigFraction9);
      assertNotSame(bigFraction11, bigFraction5);
      assertNotSame(bigFraction11, bigFraction6);
      assertNotSame(bigFraction11, bigFraction3);
      assertNotSame(bigFraction11, bigFraction0);
      assertNotSame(bigFraction11, bigFraction8);
      assertNotSame(bigFraction11, bigFraction10);
      assertNotSame(bigFraction11, bigFraction1);
      assertNotSame(bigFraction11, bigFraction4);
      assertNotSame(bigFraction11, bigFraction2);
      
      BigDecimal bigDecimal2 = bigFraction6.bigDecimalValue();
      assertNotNull(bigDecimal2);
      assertFalse(bigFraction0.equals((Object)bigFraction10));
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction11));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction11));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction10));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigFraction5.equals((Object)bigFraction7));
      assertFalse(bigFraction5.equals((Object)bigFraction11));
      assertFalse(bigFraction5.equals((Object)bigFraction10));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction8));
      assertTrue(bigFraction5.equals((Object)bigFraction6));
      assertTrue(bigFraction5.equals((Object)bigFraction9));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction8));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction7));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertTrue(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction10));
      assertFalse(bigFraction6.equals((Object)bigFraction11));
      assertTrue(bigFraction6.equals((Object)bigFraction9));
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)714, bigDecimal2.shortValue());
      assertEquals((byte) (-54), bigDecimal2.byteValue());
      assertEquals((short)714, bigFraction5.shortValue());
      assertEquals((byte) (-54), bigFraction5.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)714, bigFraction6.shortValue());
      assertEquals((byte) (-54), bigFraction6.byteValue());
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction11);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction11);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction10);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction5, bigFraction11);
      assertNotSame(bigFraction5, bigFraction10);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction8);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction9);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction8);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction9);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction7);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction10);
      assertNotSame(bigFraction6, bigFraction11);
      
      BigFraction bigFraction12 = new BigFraction(2108975432305085036L);
      assertNotNull(bigFraction12);
      assertFalse(bigFraction12.equals((Object)bigFraction5));
      assertFalse(bigFraction12.equals((Object)bigFraction0));
      assertFalse(bigFraction12.equals((Object)bigFraction6));
      assertFalse(bigFraction12.equals((Object)bigFraction7));
      assertFalse(bigFraction12.equals((Object)bigFraction11));
      assertFalse(bigFraction12.equals((Object)bigFraction2));
      assertFalse(bigFraction12.equals((Object)bigFraction9));
      assertFalse(bigFraction12.equals((Object)bigFraction1));
      assertFalse(bigFraction12.equals((Object)bigFraction10));
      assertFalse(bigFraction12.equals((Object)bigFraction4));
      assertFalse(bigFraction12.equals((Object)bigFraction3));
      assertFalse(bigFraction12.equals((Object)bigFraction8));
      assertEquals((byte)108, bigFraction12.byteValue());
      assertEquals((short)2668, bigFraction12.shortValue());
      
      BigFraction bigFraction13 = bigFraction12.abs();
      assertNotNull(bigFraction13);
      assertFalse(bigFraction12.equals((Object)bigFraction5));
      assertFalse(bigFraction12.equals((Object)bigFraction0));
      assertFalse(bigFraction12.equals((Object)bigFraction6));
      assertFalse(bigFraction12.equals((Object)bigFraction7));
      assertFalse(bigFraction12.equals((Object)bigFraction11));
      assertFalse(bigFraction12.equals((Object)bigFraction2));
      assertFalse(bigFraction12.equals((Object)bigFraction9));
      assertFalse(bigFraction12.equals((Object)bigFraction1));
      assertFalse(bigFraction12.equals((Object)bigFraction10));
      assertFalse(bigFraction12.equals((Object)bigFraction4));
      assertFalse(bigFraction12.equals((Object)bigFraction3));
      assertFalse(bigFraction12.equals((Object)bigFraction8));
      assertFalse(bigFraction13.equals((Object)bigFraction5));
      assertFalse(bigFraction13.equals((Object)bigFraction0));
      assertFalse(bigFraction13.equals((Object)bigFraction6));
      assertFalse(bigFraction13.equals((Object)bigFraction7));
      assertFalse(bigFraction13.equals((Object)bigFraction11));
      assertFalse(bigFraction13.equals((Object)bigFraction2));
      assertFalse(bigFraction13.equals((Object)bigFraction9));
      assertFalse(bigFraction13.equals((Object)bigFraction1));
      assertFalse(bigFraction13.equals((Object)bigFraction10));
      assertFalse(bigFraction13.equals((Object)bigFraction4));
      assertFalse(bigFraction13.equals((Object)bigFraction3));
      assertFalse(bigFraction13.equals((Object)bigFraction8));
      assertEquals((byte)108, bigFraction12.byteValue());
      assertEquals((short)2668, bigFraction12.shortValue());
      assertEquals((byte)108, bigFraction13.byteValue());
      assertEquals((short)2668, bigFraction13.shortValue());
      assertNotSame(bigFraction12, bigFraction5);
      assertNotSame(bigFraction12, bigFraction11);
      assertNotSame(bigFraction12, bigFraction2);
      assertSame(bigFraction12, bigFraction13);
      assertNotSame(bigFraction12, bigFraction4);
      assertNotSame(bigFraction12, bigFraction0);
      assertNotSame(bigFraction12, bigFraction6);
      assertNotSame(bigFraction12, bigFraction7);
      assertNotSame(bigFraction12, bigFraction9);
      assertNotSame(bigFraction12, bigFraction1);
      assertNotSame(bigFraction12, bigFraction10);
      assertNotSame(bigFraction12, bigFraction3);
      assertNotSame(bigFraction12, bigFraction8);
      assertNotSame(bigFraction13, bigFraction5);
      assertNotSame(bigFraction13, bigFraction11);
      assertNotSame(bigFraction13, bigFraction2);
      assertNotSame(bigFraction13, bigFraction1);
      assertNotSame(bigFraction13, bigFraction10);
      assertNotSame(bigFraction13, bigFraction3);
      assertSame(bigFraction13, bigFraction12);
      assertNotSame(bigFraction13, bigFraction8);
      assertNotSame(bigFraction13, bigFraction0);
      assertNotSame(bigFraction13, bigFraction6);
      assertNotSame(bigFraction13, bigFraction7);
      assertNotSame(bigFraction13, bigFraction9);
      assertNotSame(bigFraction13, bigFraction4);
      
      boolean boolean0 = bigFraction11.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(bigFraction10.equals((Object)bigFraction7));
      assertFalse(bigFraction10.equals((Object)bigFraction13));
      assertFalse(bigFraction10.equals((Object)bigFraction5));
      assertFalse(bigFraction10.equals((Object)bigFraction2));
      assertFalse(bigFraction10.equals((Object)bigFraction0));
      assertFalse(bigFraction10.equals((Object)bigFraction4));
      assertFalse(bigFraction10.equals((Object)bigFraction1));
      assertFalse(bigFraction10.equals((Object)bigFraction9));
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      assertFalse(bigFraction10.equals((Object)bigFraction12));
      assertFalse(bigFraction10.equals((Object)bigFraction3));
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      assertFalse(bigFraction10.equals((Object)bigFraction11));
      assertFalse(bigFraction11.equals((Object)bigFraction7));
      assertFalse(bigFraction11.equals((Object)bigFraction9));
      assertFalse(bigFraction11.equals((Object)bigFraction13));
      assertFalse(bigFraction11.equals((Object)bigFraction6));
      assertFalse(bigFraction11.equals((Object)bigFraction3));
      assertFalse(bigFraction11.equals((Object)bigFraction0));
      assertFalse(bigFraction11.equals((Object)bigFraction10));
      assertFalse(bigFraction11.equals((Object)bigFraction4));
      assertFalse(bigFraction11.equals((Object)bigFraction2));
      assertFalse(bigFraction11.equals((Object)bigFraction5));
      assertFalse(bigFraction11.equals((Object)bigFraction8));
      assertFalse(bigFraction11.equals((Object)bigFraction1));
      assertFalse(bigFraction11.equals((Object)bigFraction12));
      assertEquals((short)0, bigFraction10.shortValue());
      assertEquals((byte)0, bigFraction10.byteValue());
      assertEquals((short)820, bigFraction11.shortValue());
      assertEquals((byte)52, bigFraction11.byteValue());
      assertNotSame(bigFraction10, bigFraction7);
      assertNotSame(bigFraction10, bigFraction13);
      assertNotSame(bigFraction10, bigFraction5);
      assertNotSame(bigFraction10, bigFraction2);
      assertNotSame(bigFraction10, bigFraction0);
      assertNotSame(bigFraction10, bigFraction4);
      assertNotSame(bigFraction10, bigFraction1);
      assertNotSame(bigFraction10, bigFraction9);
      assertNotSame(bigFraction10, bigFraction8);
      assertNotSame(bigFraction10, bigFraction12);
      assertNotSame(bigFraction10, bigFraction3);
      assertNotSame(bigFraction10, bigFraction6);
      assertNotSame(bigFraction10, bigFraction11);
      assertNotSame(bigFraction11, bigFraction7);
      assertNotSame(bigFraction11, bigFraction9);
      assertNotSame(bigFraction11, bigFraction13);
      assertNotSame(bigFraction11, bigFraction6);
      assertNotSame(bigFraction11, bigFraction3);
      assertNotSame(bigFraction11, bigFraction0);
      assertNotSame(bigFraction11, bigFraction10);
      assertNotSame(bigFraction11, bigFraction4);
      assertNotSame(bigFraction11, bigFraction2);
      assertNotSame(bigFraction11, bigFraction5);
      assertNotSame(bigFraction11, bigFraction8);
      assertNotSame(bigFraction11, bigFraction1);
      assertNotSame(bigFraction11, bigFraction12);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(1);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      
      BigFraction bigFraction1 = new BigFraction(715.2138849839121);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction1.pow(389);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte)108, bigFraction2.byteValue());
      assertEquals((short)2668, bigFraction2.shortValue());
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      long long0 = bigFraction2.longValue();
      assertEquals(2108975432305085036L, long0);
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte)108, bigFraction2.byteValue());
      assertEquals((short)2668, bigFraction2.shortValue());
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = bigFraction1.FOUR_FIFTHS.pow(820L);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      
      BigFraction bigFraction4 = bigFraction3.TWO_THIRDS.multiply(1);
      assertNotNull(bigFraction4);
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      
      BigFraction bigFraction5 = bigFraction0.add(bigFraction1);
      assertNotNull(bigFraction5);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((short)717, bigFraction5.shortValue());
      assertEquals((byte) (-51), bigFraction5.byteValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      
      int int0 = bigFraction3.ONE.intValue();
      assertEquals(1, int0);
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigFraction bigFraction6 = bigFraction5.pow(bigInteger0);
      assertNotNull(bigFraction6);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertTrue(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((short)717, bigFraction5.shortValue());
      assertEquals((byte) (-51), bigFraction5.byteValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)717, bigFraction6.shortValue());
      assertEquals((byte) (-51), bigFraction6.byteValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction3);
      
      BigFraction bigFraction7 = bigFraction6.MINUS_ONE.abs();
      assertNotNull(bigFraction7);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertTrue(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertTrue(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((short)717, bigFraction5.shortValue());
      assertEquals((byte) (-51), bigFraction5.byteValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)717, bigFraction6.shortValue());
      assertEquals((byte) (-51), bigFraction6.byteValue());
      assertEquals((byte)1, bigFraction7.byteValue());
      assertEquals((short)1, bigFraction7.shortValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction7);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction0);
      
      int int1 = bigFraction5.ONE_QUARTER.compareTo(bigFraction3);
      assertEquals(1, int1);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction7));
      assertTrue(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertTrue(int1 == int0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)717, bigFraction5.shortValue());
      assertEquals((byte) (-51), bigFraction5.byteValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction1);
      
      BigFraction bigFraction8 = bigFraction5.ONE_QUARTER.pow(389);
      assertNotNull(bigFraction8);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction7));
      assertTrue(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((short)717, bigFraction5.shortValue());
      assertEquals((byte) (-51), bigFraction5.byteValue());
      assertEquals((short)0, bigFraction8.shortValue());
      assertEquals((byte)0, bigFraction8.byteValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction5, bigFraction8);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction8, bigFraction3);
      
      long long1 = bigFraction0.longValue();
      assertEquals(2L, long1);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(long1 == long0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction8);
      
      BigFraction bigFraction9 = bigFraction1.add(bigInteger0);
      assertNotNull(bigFraction9);
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction9.equals((Object)bigFraction4));
      assertFalse(bigFraction9.equals((Object)bigFraction0));
      assertFalse(bigFraction9.equals((Object)bigFraction7));
      assertFalse(bigFraction9.equals((Object)bigFraction8));
      assertFalse(bigFraction9.equals((Object)bigFraction2));
      assertFalse(bigFraction9.equals((Object)bigFraction3));
      assertFalse(bigFraction9.equals((Object)bigFraction6));
      assertFalse(bigFraction9.equals((Object)bigFraction5));
      assertFalse(bigFraction9.equals((Object)bigFraction1));
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte) (-52), bigFraction9.byteValue());
      assertEquals((short)716, bigFraction9.shortValue());
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction9, bigFraction4);
      assertNotSame(bigFraction9, bigFraction0);
      assertNotSame(bigFraction9, bigFraction7);
      assertNotSame(bigFraction9, bigFraction8);
      assertNotSame(bigFraction9, bigFraction2);
      assertNotSame(bigFraction9, bigFraction3);
      assertNotSame(bigFraction9, bigFraction6);
      assertNotSame(bigFraction9, bigFraction5);
      assertNotSame(bigFraction9, bigFraction1);
      
      BigFraction bigFraction10 = BigFraction.ONE_HALF;
      assertNotNull(bigFraction10);
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      assertFalse(bigFraction10.equals((Object)bigFraction2));
      assertFalse(bigFraction10.equals((Object)bigFraction3));
      assertFalse(bigFraction10.equals((Object)bigFraction4));
      assertFalse(bigFraction10.equals((Object)bigFraction0));
      assertFalse(bigFraction10.equals((Object)bigFraction7));
      assertFalse(bigFraction10.equals((Object)bigFraction1));
      assertFalse(bigFraction10.equals((Object)bigFraction9));
      assertFalse(bigFraction10.equals((Object)bigFraction5));
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      assertEquals((byte)0, bigFraction10.byteValue());
      assertEquals((short)0, bigFraction10.shortValue());
      assertNotSame(bigFraction10, bigFraction8);
      assertNotSame(bigFraction10, bigFraction2);
      assertNotSame(bigFraction10, bigFraction3);
      assertNotSame(bigFraction10, bigFraction4);
      assertNotSame(bigFraction10, bigFraction0);
      assertNotSame(bigFraction10, bigFraction7);
      assertNotSame(bigFraction10, bigFraction1);
      assertNotSame(bigFraction10, bigFraction9);
      assertNotSame(bigFraction10, bigFraction5);
      assertNotSame(bigFraction10, bigFraction6);
      
      BigDecimal bigDecimal1 = bigFraction10.bigDecimalValue();
      assertNotNull(bigDecimal1);
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      assertFalse(bigFraction10.equals((Object)bigFraction2));
      assertFalse(bigFraction10.equals((Object)bigFraction3));
      assertFalse(bigFraction10.equals((Object)bigFraction4));
      assertFalse(bigFraction10.equals((Object)bigFraction0));
      assertFalse(bigFraction10.equals((Object)bigFraction7));
      assertFalse(bigFraction10.equals((Object)bigFraction1));
      assertFalse(bigFraction10.equals((Object)bigFraction9));
      assertFalse(bigFraction10.equals((Object)bigFraction5));
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigFraction10.byteValue());
      assertEquals((short)0, bigFraction10.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotSame(bigFraction10, bigFraction8);
      assertNotSame(bigFraction10, bigFraction2);
      assertNotSame(bigFraction10, bigFraction3);
      assertNotSame(bigFraction10, bigFraction4);
      assertNotSame(bigFraction10, bigFraction0);
      assertNotSame(bigFraction10, bigFraction7);
      assertNotSame(bigFraction10, bigFraction1);
      assertNotSame(bigFraction10, bigFraction9);
      assertNotSame(bigFraction10, bigFraction5);
      assertNotSame(bigFraction10, bigFraction6);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      BigFraction bigFraction11 = bigFraction1.abs();
      assertNotNull(bigFraction11);
      assertFalse(bigFraction11.equals((Object)bigFraction4));
      assertFalse(bigFraction11.equals((Object)bigFraction10));
      assertFalse(bigFraction11.equals((Object)bigFraction0));
      assertFalse(bigFraction11.equals((Object)bigFraction6));
      assertFalse(bigFraction11.equals((Object)bigFraction8));
      assertFalse(bigFraction11.equals((Object)bigFraction7));
      assertFalse(bigFraction11.equals((Object)bigFraction3));
      assertFalse(bigFraction11.equals((Object)bigFraction2));
      assertFalse(bigFraction11.equals((Object)bigFraction9));
      assertFalse(bigFraction11.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction10));
      assertEquals((byte) (-53), bigFraction11.byteValue());
      assertEquals((short)715, bigFraction11.shortValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertNotSame(bigFraction11, bigFraction4);
      assertNotSame(bigFraction11, bigFraction10);
      assertNotSame(bigFraction11, bigFraction0);
      assertNotSame(bigFraction11, bigFraction6);
      assertNotSame(bigFraction11, bigFraction8);
      assertNotSame(bigFraction11, bigFraction7);
      assertSame(bigFraction11, bigFraction1);
      assertNotSame(bigFraction11, bigFraction3);
      assertNotSame(bigFraction11, bigFraction2);
      assertNotSame(bigFraction11, bigFraction9);
      assertNotSame(bigFraction11, bigFraction5);
      assertNotSame(bigFraction1, bigFraction5);
      assertSame(bigFraction1, bigFraction11);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction10);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = bigFraction4.equals(object0);
      assertFalse(boolean0);
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction10));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction8));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction9));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertFalse(bigFraction3.equals((Object)bigFraction10));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction11));
      assertFalse(bigFraction4.equals((Object)bigFraction8));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction7));
      assertFalse(bigFraction4.equals((Object)bigFraction6));
      assertFalse(bigFraction4.equals((Object)bigFraction10));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction11));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction9));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotSame(bigFraction1, bigFraction5);
      assertSame(bigFraction1, bigFraction11);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction10);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction8);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction9);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction10);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction11);
      assertNotSame(bigFraction4, bigFraction8);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction7);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction4, bigFraction10);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction11);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction9);
      assertNotSame(bigFraction4, bigFraction5);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertNotNull(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      assertNotNull(bigFraction2);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)4, bigFraction2.shortValue());
      assertEquals((byte)4, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = new BigFraction((long) 1637);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertEquals((byte)101, bigFraction3.byteValue());
      assertEquals((short)1637, bigFraction3.shortValue());
      
      BigFraction bigFraction4 = bigFraction3.pow(1637);
      assertNotNull(bigFraction4);
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertEquals((byte)101, bigFraction3.byteValue());
      assertEquals((short)1637, bigFraction3.shortValue());
      assertEquals((short) (-32107), bigFraction4.shortValue());
      assertEquals((byte) (-107), bigFraction4.byteValue());
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction0);
      
      BigFraction bigFraction5 = bigFraction2.add(1637);
      assertNotNull(bigFraction5);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)4, bigFraction2.shortValue());
      assertEquals((byte)4, bigFraction2.byteValue());
      assertEquals((byte)105, bigFraction5.byteValue());
      assertEquals((short)1641, bigFraction5.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      
      BigFraction bigFraction6 = bigFraction3.add(bigFraction0);
      assertNotNull(bigFraction6);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte)101, bigFraction3.byteValue());
      assertEquals((short)1637, bigFraction3.shortValue());
      assertEquals((byte)103, bigFraction6.byteValue());
      assertEquals((short)1639, bigFraction6.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction1);
      
      String string0 = bigFraction4.toString();
      assertNotNull(string0);
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction6));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertEquals((byte)101, bigFraction3.byteValue());
      assertEquals((short)1637, bigFraction3.shortValue());
      assertEquals((short) (-32107), bigFraction4.shortValue());
      assertEquals((byte) (-107), bigFraction4.byteValue());
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction5);
      
      BigInteger bigInteger0 = bigFraction2.getNumerator();
      assertNotNull(bigInteger0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)4, bigFraction2.shortValue());
      assertEquals((byte)4, bigFraction2.byteValue());
      assertEquals((short)4, bigInteger0.shortValue());
      assertEquals((byte)4, bigInteger0.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction6);
      
      long long0 = bigFraction1.longValue();
      assertEquals(2L, long0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      
      BigInteger bigInteger1 = bigFraction5.getDenominator();
      assertNotNull(bigInteger1);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)4, bigFraction2.shortValue());
      assertEquals((byte)4, bigFraction2.byteValue());
      assertEquals((byte)105, bigFraction5.byteValue());
      assertEquals((short)1641, bigFraction5.shortValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1079L, 1079L);
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      assertNotNull(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.divide(bigFraction1);
      assertNotNull(bigFraction2);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      BigFraction bigFraction3 = bigFraction0.multiply(2281);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)2281, bigFraction3.shortValue());
      assertEquals((byte) (-23), bigFraction3.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      
      BigFraction bigFraction4 = bigFraction3.reciprocal();
      assertNotNull(bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)2281, bigFraction3.shortValue());
      assertEquals((byte) (-23), bigFraction3.byteValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      
      BigFraction bigFraction5 = bigFraction4.ZERO.divide(2281);
      assertNotNull(bigFraction5);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)2281, bigFraction3.shortValue());
      assertEquals((byte) (-23), bigFraction3.byteValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      
      int int0 = bigFraction3.getNumeratorAsInt();
      assertEquals(2281, int0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)2281, bigFraction3.shortValue());
      assertEquals((byte) (-23), bigFraction3.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      
      int int1 = bigFraction4.THREE_FIFTHS.intValue();
      assertEquals(0, int1);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(int1 == int0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)2281, bigFraction3.shortValue());
      assertEquals((byte) (-23), bigFraction3.byteValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      
      String string0 = bigFraction2.FOUR_FIFTHS.toString();
      assertEquals("4 / 5", string0);
      assertNotNull(string0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction1);
      
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(2281, (-28));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      long long0 = bigFraction0.ZERO.getNumeratorAsLong();
      assertEquals(0L, long0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = bigInteger0.equals(object0);
      assertFalse(boolean0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.subtract(bigInteger0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction1.ONE_HALF.bigDecimalValue();
      assertNotNull(bigDecimal0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotSame(bigInteger1, bigInteger0);
      
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger1);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)5, bigFraction2.shortValue());
      assertEquals((byte)5, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      int int0 = bigFraction2.TWO.compareTo(bigFraction0);
      assertEquals(1, int0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)5, bigFraction2.shortValue());
      assertEquals((byte)5, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      // Undeclared exception!
      try { 
        bigFraction2.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      int int0 = bigFraction0.TWO_THIRDS.intValue();
      assertEquals(0, int0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(0.0, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.divide(bigFraction1);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      BigInteger bigInteger0 = new BigInteger(4, 4, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte)11, bigInteger0.byteValue());
      assertEquals((short)11, bigInteger0.shortValue());
      
      BigFraction bigFraction3 = bigFraction0.TWO.add(bigInteger0);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)11, bigInteger0.byteValue());
      assertEquals((short)11, bigInteger0.shortValue());
      assertEquals((short)13, bigFraction3.shortValue());
      assertEquals((byte)13, bigFraction3.byteValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      
      BigFraction bigFraction4 = bigFraction3.ONE_THIRD.abs();
      assertNotNull(bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)11, bigInteger0.byteValue());
      assertEquals((short)11, bigInteger0.shortValue());
      assertEquals((short)13, bigFraction3.shortValue());
      assertEquals((byte)13, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      
      BigFraction bigFraction5 = bigFraction0.abs();
      assertNotNull(bigFraction5);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertSame(bigFraction5, bigFraction1);
      assertSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1200.7551881));
      assertNotNull(bigFraction0);
      assertEquals((short) (-1200), bigFraction0.shortValue());
      assertEquals((byte)80, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = new BigFraction(420, (-896));
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.subtract(bigFraction1);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short) (-1200), bigFraction0.shortValue());
      assertEquals((byte)80, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = bigFraction2.THREE_FIFTHS.divide((long) (-896));
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertEquals((short) (-1200), bigFraction0.shortValue());
      assertEquals((byte)80, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      
      bigFraction2.THREE_FIFTHS.hashCode();
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short) (-1200), bigFraction0.shortValue());
      assertEquals((byte)80, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      double double0 = bigFraction1.THREE_FIFTHS.pow((-1200.7551881));
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = bigFraction0.equals(object0);
      assertFalse(boolean0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertEquals((short) (-1200), bigFraction0.shortValue());
      assertEquals((byte)80, bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      
      double double1 = bigFraction1.TWO_QUARTERS.percentageValue();
      assertEquals(50.0, double1, 0.01);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      
      BigFraction bigFraction4 = bigFraction1.subtract(1928L);
      assertNotNull(bigFraction4);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short) (-1928), bigFraction4.shortValue());
      assertEquals((byte)120, bigFraction4.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      
      BigFraction bigFraction5 = bigFraction4.pow((long) (-896));
      assertNotNull(bigFraction5);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short) (-1928), bigFraction4.shortValue());
      assertEquals((byte)120, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction4);
      
      BigFraction bigFraction6 = bigFraction5.THREE_QUARTERS.add(420);
      assertNotNull(bigFraction6);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short) (-1928), bigFraction4.shortValue());
      assertEquals((byte)120, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((byte) (-92), bigFraction6.byteValue());
      assertEquals((short)420, bigFraction6.shortValue());
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction3);
      
      double double2 = bigFraction2.TWO.doubleValue();
      assertEquals(2.0, double2, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((short) (-1200), bigFraction0.shortValue());
      assertEquals((byte)80, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      
      BigFractionField bigFractionField0 = bigFraction5.ONE_FIFTH.getField();
      assertNotNull(bigFractionField0);
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction6));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction6));
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short) (-1928), bigFraction4.shortValue());
      assertEquals((byte)120, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction6);
      
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract(4503599627370496L);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-1), 3370);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      BigFraction bigFraction3 = bigFraction1.THREE_FIFTHS.divide(bigInteger0);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      
      String string0 = bigFraction1.toString();
      assertEquals("-13510798882111487 / 3", string0);
      assertNotNull(string0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      
      long long0 = bigFraction0.longValue();
      assertEquals(0L, long0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertNotSame(bigInteger1, bigInteger0);
      
      BigFraction bigFraction4 = bigFraction0.add(bigInteger1);
      assertNotNull(bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction4.byteValue());
      assertEquals((short)1, bigFraction4.shortValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      
      double double0 = bigFraction4.ONE_QUARTER.pow((double) 0L);
      assertEquals(1.0, double0, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction4.byteValue());
      assertEquals((short)1, bigFraction4.shortValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      
      BigFraction bigFraction5 = BigFraction.ONE_FIFTH;
      assertNotNull(bigFraction5);
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      
      BigFraction bigFraction6 = bigFraction0.MINUS_ONE.subtract(bigFraction5);
      assertNotNull(bigFraction6);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((byte) (-1), bigFraction6.byteValue());
      assertEquals((short) (-1), bigFraction6.shortValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction5);
      
      BigFraction bigFraction7 = bigFraction4.multiply(0L);
      assertNotNull(bigFraction7);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction4.equals((Object)bigFraction6));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction4.byteValue());
      assertEquals((short)1, bigFraction4.shortValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertEquals((byte)0, bigFraction7.byteValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction7);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction1);
      
      String string1 = bigFraction0.toString();
      assertEquals("1 / 3", string1);
      assertNotNull(string1);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(string1.equals((Object)string0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      
      BigFraction bigFraction8 = bigFraction5.ONE_THIRD.subtract(6722166367014452318L);
      assertNotNull(bigFraction8);
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction7));
      assertFalse(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short) (-31837), bigFraction8.shortValue());
      assertEquals((byte) (-93), bigFraction8.byteValue());
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction8);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction5);
      
      BigFraction bigFraction9 = bigFraction1.subtract((-1));
      assertNotNull(bigFraction9);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction9.equals((Object)bigFraction2));
      assertFalse(bigFraction9.equals((Object)bigFraction0));
      assertFalse(bigFraction9.equals((Object)bigFraction8));
      assertFalse(bigFraction9.equals((Object)bigFraction3));
      assertFalse(bigFraction9.equals((Object)bigFraction6));
      assertFalse(bigFraction9.equals((Object)bigFraction7));
      assertFalse(bigFraction9.equals((Object)bigFraction4));
      assertFalse(bigFraction9.equals((Object)bigFraction5));
      assertFalse(bigFraction9.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)2, bigFraction9.shortValue());
      assertEquals((byte)2, bigFraction9.byteValue());
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction9, bigFraction2);
      assertNotSame(bigFraction9, bigFraction0);
      assertNotSame(bigFraction9, bigFraction8);
      assertNotSame(bigFraction9, bigFraction3);
      assertNotSame(bigFraction9, bigFraction6);
      assertNotSame(bigFraction9, bigFraction7);
      assertNotSame(bigFraction9, bigFraction4);
      assertNotSame(bigFraction9, bigFraction5);
      assertNotSame(bigFraction9, bigFraction1);
      
      double double1 = bigFraction6.doubleValue();
      assertEquals((-1.2), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction8));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction7));
      assertFalse(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction9));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction7));
      assertFalse(bigFraction6.equals((Object)bigFraction9));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction8));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((byte) (-1), bigFraction6.byteValue());
      assertEquals((short) (-1), bigFraction6.shortValue());
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction8);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction9);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction7);
      assertNotSame(bigFraction6, bigFraction9);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction8);
      
      BigFraction bigFraction10 = bigFraction1.divide(bigInteger1);
      assertNotNull(bigFraction10);
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction10.equals((Object)bigFraction2));
      assertTrue(bigFraction10.equals((Object)bigFraction1));
      assertFalse(bigFraction10.equals((Object)bigFraction5));
      assertFalse(bigFraction10.equals((Object)bigFraction4));
      assertFalse(bigFraction10.equals((Object)bigFraction0));
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      assertFalse(bigFraction10.equals((Object)bigFraction7));
      assertFalse(bigFraction10.equals((Object)bigFraction3));
      assertFalse(bigFraction10.equals((Object)bigFraction9));
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)1, bigFraction10.byteValue());
      assertEquals((short)1, bigFraction10.shortValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction10, bigFraction2);
      assertNotSame(bigFraction10, bigFraction5);
      assertNotSame(bigFraction10, bigFraction4);
      assertNotSame(bigFraction10, bigFraction1);
      assertNotSame(bigFraction10, bigFraction0);
      assertNotSame(bigFraction10, bigFraction8);
      assertNotSame(bigFraction10, bigFraction7);
      assertNotSame(bigFraction10, bigFraction3);
      assertNotSame(bigFraction10, bigFraction9);
      assertNotSame(bigFraction10, bigFraction6);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction10);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigInteger1, bigInteger0);
      
      float float0 = bigFraction4.floatValue();
      assertEquals(1.3333334F, float0, 0.01F);
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction10));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction4.equals((Object)bigFraction6));
      assertFalse(bigFraction4.equals((Object)bigFraction9));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction10));
      assertFalse(bigFraction4.equals((Object)bigFraction7));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction8));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction4.byteValue());
      assertEquals((short)1, bigFraction4.shortValue());
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction4, bigFraction9);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction10);
      assertNotSame(bigFraction4, bigFraction7);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction8);
      assertNotSame(bigFraction4, bigFraction3);
      
      double double2 = bigFraction4.pow((double) 3370);
      assertEquals(Double.NaN, double2, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction10));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction4.equals((Object)bigFraction6));
      assertFalse(bigFraction4.equals((Object)bigFraction9));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction10));
      assertFalse(bigFraction4.equals((Object)bigFraction7));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction8));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction4.byteValue());
      assertEquals((short)1, bigFraction4.shortValue());
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction4, bigFraction9);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction10);
      assertNotSame(bigFraction4, bigFraction7);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction8);
      assertNotSame(bigFraction4, bigFraction3);
      
      // Undeclared exception!
      try { 
        bigFraction6.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = new BigFraction((-1624), 242);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-6), bigFraction1.byteValue());
      assertEquals((short) (-6), bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-6), bigFraction1.byteValue());
      assertEquals((short) (-6), bigFraction1.shortValue());
      assertEquals((short)7, bigFraction2.shortValue());
      assertEquals((byte)7, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = bigFraction1.ONE.add(937L);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertEquals((byte) (-6), bigFraction1.byteValue());
      assertEquals((short) (-6), bigFraction1.shortValue());
      assertEquals((short)938, bigFraction3.shortValue());
      assertEquals((byte) (-86), bigFraction3.byteValue());
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigFraction bigFraction4 = bigFraction2.TWO_FIFTHS.subtract(bigInteger0);
      assertNotNull(bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-6), bigFraction1.byteValue());
      assertEquals((short) (-6), bigFraction1.shortValue());
      assertEquals((short)7, bigFraction2.shortValue());
      assertEquals((byte)7, bigFraction2.byteValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      
      BigFraction bigFraction5 = bigFraction4.ONE_QUARTER.add(bigFraction1);
      assertNotNull(bigFraction5);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-6), bigFraction1.byteValue());
      assertEquals((short) (-6), bigFraction1.shortValue());
      assertEquals((short)7, bigFraction2.shortValue());
      assertEquals((byte)7, bigFraction2.byteValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short) (-6), bigFraction5.shortValue());
      assertEquals((byte) (-6), bigFraction5.byteValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction1);
      
      BigFraction bigFraction6 = bigFraction2.ONE_FIFTH.add(bigInteger0);
      assertNotNull(bigFraction6);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-6), bigFraction1.byteValue());
      assertEquals((short) (-6), bigFraction1.shortValue());
      assertEquals((short)7, bigFraction2.shortValue());
      assertEquals((byte)7, bigFraction2.byteValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction6.shortValue());
      assertEquals((byte)1, bigFraction6.byteValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction2);
      
      float float0 = bigFraction6.ZERO.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-6), bigFraction1.byteValue());
      assertEquals((short) (-6), bigFraction1.shortValue());
      assertEquals((short)7, bigFraction2.shortValue());
      assertEquals((byte)7, bigFraction2.byteValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction6.shortValue());
      assertEquals((byte)1, bigFraction6.byteValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction2);
      
      BigFraction bigFraction7 = bigFraction2.ZERO.multiply((-1624));
      assertNotNull(bigFraction7);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-6), bigFraction1.byteValue());
      assertEquals((short) (-6), bigFraction1.shortValue());
      assertEquals((short)7, bigFraction2.shortValue());
      assertEquals((byte)7, bigFraction2.byteValue());
      assertEquals((byte)0, bigFraction7.byteValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction1);
      
      BigFraction bigFraction8 = bigFraction7.ZERO.subtract(430);
      assertNotNull(bigFraction8);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction7));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-6), bigFraction1.byteValue());
      assertEquals((short) (-6), bigFraction1.shortValue());
      assertEquals((short)7, bigFraction2.shortValue());
      assertEquals((byte)7, bigFraction2.byteValue());
      assertEquals((byte)0, bigFraction7.byteValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertEquals((byte)82, bigFraction8.byteValue());
      assertEquals((short) (-430), bigFraction8.shortValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction8);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction7);
      
      // Undeclared exception!
      try { 
        bigFraction2.ZERO.bigDecimalValue((-1624));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = (-2413);
      int int1 = 1;
      BigFraction bigFraction0 = new BigFraction((-2413), 1);
      assertNotNull(bigFraction0);
      assertEquals((short) (-2413), bigFraction0.shortValue());
      assertEquals((byte) (-109), bigFraction0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.multiply(bigInteger0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short) (-2413), bigFraction0.shortValue());
      assertEquals((byte) (-109), bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction0.TWO.multiply(bigFraction1);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short) (-2413), bigFraction0.shortValue());
      assertEquals((byte) (-109), bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = bigFraction1.ZERO.divide((long) 1);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertEquals((short) (-2413), bigFraction0.shortValue());
      assertEquals((byte) (-109), bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.pow((-2413));
      assertNotNull(bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertEquals((short) (-2413), bigFraction0.shortValue());
      assertEquals((byte) (-109), bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      
      int int2 = 892;
      BigFraction bigFraction5 = bigFraction3.THREE_QUARTERS.add(892);
      assertNotNull(bigFraction5);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertEquals((short) (-2413), bigFraction0.shortValue());
      assertEquals((byte) (-109), bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((short)892, bigFraction5.shortValue());
      assertEquals((byte)124, bigFraction5.byteValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      
      BigFraction bigFraction6 = bigFraction5.FOUR_FIFTHS.pow(bigInteger0);
      assertNotNull(bigFraction6);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertEquals((short) (-2413), bigFraction0.shortValue());
      assertEquals((byte) (-109), bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((short)892, bigFraction5.shortValue());
      assertEquals((byte)124, bigFraction5.byteValue());
      assertEquals((short)1, bigFraction6.shortValue());
      assertEquals((byte)1, bigFraction6.byteValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction2);
      
      long long0 = bigFraction0.TWO.longValue();
      assertEquals(2L, long0);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertEquals((short) (-2413), bigFraction0.shortValue());
      assertEquals((byte) (-109), bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = (-4131);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(4.4422779589171113E-190, (-4131));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertNotNull(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      assertNotNull(bigFraction2);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      BigFraction bigFraction3 = bigFraction1.pow(1637);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      
      BigFraction bigFraction4 = bigFraction3.add(1637);
      assertNotNull(bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)1637, bigFraction4.shortValue());
      assertEquals((byte)101, bigFraction4.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      
      BigFraction bigFraction5 = bigFraction4.add(bigFraction1);
      assertNotNull(bigFraction5);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)1637, bigFraction4.shortValue());
      assertEquals((byte)101, bigFraction4.byteValue());
      assertEquals((byte)101, bigFraction5.byteValue());
      assertEquals((short)1637, bigFraction5.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      
      String string0 = bigFraction3.toString();
      assertEquals("1 / 11155626777518421046468221581720255306064803463385822666304742714964168935480056559870192135894956097335115800819428672252814538145002169823659903684377794055617552836221216017623848009447449184343743786591857399977897589485319289033288462241137185417439191058869725872123496130910254144789890336580835012847695695204874386799016998996497682114410079207733432162818667941785408837764331935101507036975236084671071750344462123634003752957032109325440433393738642043883668792642740181899328357502770622474872970078330101314449480418104548785606832016441451898746018308135648130894550797126237693458820204391444381519025517478172328242680995443010975695218553240564223957160806345115896802168764257351305939103977633243207759051263069491038650213665864331549441648516113771300362773363", string0);
      assertNotNull(string0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction5);
      
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      assertNotNull(bigInteger0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      
      long long0 = bigFraction5.longValue();
      assertEquals(1637L, long0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)1637, bigFraction4.shortValue());
      assertEquals((byte)101, bigFraction4.byteValue());
      assertEquals((byte)101, bigFraction5.byteValue());
      assertEquals((short)1637, bigFraction5.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      
      BigInteger bigInteger1 = bigFraction5.getDenominator();
      assertNotNull(bigInteger1);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)1637, bigFraction4.shortValue());
      assertEquals((byte)101, bigFraction4.byteValue());
      assertEquals((byte)101, bigFraction5.byteValue());
      assertEquals((short)1637, bigFraction5.shortValue());
      assertEquals((byte)115, bigInteger1.byteValue());
      assertEquals((short) (-7309), bigInteger1.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 2440;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-3701.55996), (-3701.55996), 2440);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -3,701.56 to fraction (-25,534,608,059,399/6,898,337,008)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1781.6745673));
      assertNotNull(bigFraction0);
      assertEquals((short) (-1781), bigFraction0.shortValue());
      assertEquals((byte)11, bigFraction0.byteValue());
      
      long long0 = bigFraction0.ONE.longValue();
      assertEquals(1L, long0);
      assertEquals((short) (-1781), bigFraction0.shortValue());
      assertEquals((byte)11, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = BigFraction.getReducedFraction(892, (-1));
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-124), bigFraction1.byteValue());
      assertEquals((short) (-892), bigFraction1.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      
      double double0 = bigFraction1.ONE_QUARTER.doubleValue();
      assertEquals(0.25, double0, 0.01);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-124), bigFraction1.byteValue());
      assertEquals((short) (-892), bigFraction1.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction0.multiply(1554L);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short) (-1781), bigFraction0.shortValue());
      assertEquals((byte)11, bigFraction0.byteValue());
      assertEquals((byte) (-82), bigFraction2.byteValue());
      assertEquals((short) (-16210), bigFraction2.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.pow(52);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertEquals((short) (-1781), bigFraction0.shortValue());
      assertEquals((byte)11, bigFraction0.byteValue());
      assertEquals((byte) (-82), bigFraction2.byteValue());
      assertEquals((short) (-16210), bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      
      double double1 = bigFraction3.ONE_HALF.doubleValue();
      assertEquals(0.5, double1, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((short) (-1781), bigFraction0.shortValue());
      assertEquals((byte)11, bigFraction0.byteValue());
      assertEquals((byte) (-82), bigFraction2.byteValue());
      assertEquals((short) (-16210), bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      
      long long1 = bigFraction2.getNumeratorAsLong();
      assertEquals((-3044242338286277919L), long1);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(long1 == long0);
      assertEquals((short) (-1781), bigFraction0.shortValue());
      assertEquals((byte)11, bigFraction0.byteValue());
      assertEquals((byte) (-82), bigFraction2.byteValue());
      assertEquals((short) (-16210), bigFraction2.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      
      long long2 = bigFraction0.getNumeratorAsLong();
      assertEquals((-3917943807318247L), long2);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((short) (-1781), bigFraction0.shortValue());
      assertEquals((byte)11, bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      
      String string0 = bigFraction3.ONE.toString();
      assertEquals("1", string0);
      assertNotNull(string0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertEquals((short) (-1781), bigFraction0.shortValue());
      assertEquals((byte)11, bigFraction0.byteValue());
      assertEquals((byte) (-82), bigFraction2.byteValue());
      assertEquals((short) (-16210), bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      
      BigFraction bigFraction4 = bigFraction0.reduce();
      assertNotNull(bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertEquals((short) (-1781), bigFraction0.shortValue());
      assertEquals((byte)11, bigFraction0.byteValue());
      assertEquals((byte)11, bigFraction4.byteValue());
      assertEquals((short) (-1781), bigFraction4.shortValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      
      BigDecimal bigDecimal0 = bigFraction4.bigDecimalValue();
      assertNotNull(bigDecimal0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertEquals((short) (-1781), bigFraction0.shortValue());
      assertEquals((byte)11, bigFraction0.byteValue());
      assertEquals((byte)11, bigFraction4.byteValue());
      assertEquals((short) (-1781), bigFraction4.shortValue());
      assertEquals((short) (-1781), bigDecimal0.shortValue());
      assertEquals((byte)11, bigDecimal0.byteValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      
      float float0 = bigFraction0.floatValue();
      assertEquals((-1781.6746F), float0, 0.01F);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertEquals((short) (-1781), bigFraction0.shortValue());
      assertEquals((byte)11, bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      
      int int0 = 453;
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      int int0 = (-270);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.negate();
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.negate();
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = new BigFraction((-270));
      assertNotNull(bigFraction3);
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertEquals((short) (-270), bigFraction3.shortValue());
      assertEquals((byte) (-14), bigFraction3.byteValue());
      
      BigFractionField bigFractionField0 = bigFraction3.FOUR_FIFTHS.getField();
      assertNotNull(bigFractionField0);
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertEquals((short) (-270), bigFraction3.shortValue());
      assertEquals((byte) (-14), bigFraction3.byteValue());
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      
      BigFraction bigFraction4 = bigFraction0.THREE_FIFTHS.add(bigFraction3);
      assertNotNull(bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short) (-270), bigFraction3.shortValue());
      assertEquals((byte) (-14), bigFraction3.byteValue());
      assertEquals((short) (-269), bigFraction4.shortValue());
      assertEquals((byte) (-13), bigFraction4.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      
      float float0 = bigFraction4.floatValue();
      assertEquals((-269.4F), float0, 0.01F);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short) (-270), bigFraction3.shortValue());
      assertEquals((byte) (-14), bigFraction3.byteValue());
      assertEquals((short) (-269), bigFraction4.shortValue());
      assertEquals((byte) (-13), bigFraction4.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      
      boolean boolean0 = bigFraction3.ONE_QUARTER.equals(bigFraction0);
      assertFalse(boolean0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short) (-270), bigFraction3.shortValue());
      assertEquals((byte) (-14), bigFraction3.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      
      String string0 = bigFraction0.ONE.toString();
      assertEquals("1", string0);
      assertNotNull(string0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertNotNull(bigDecimal0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      
      long long0 = bigFraction3.getDenominatorAsLong();
      assertEquals(1L, long0);
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertEquals((short) (-270), bigFraction3.shortValue());
      assertEquals((byte) (-14), bigFraction3.byteValue());
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      
      float float1 = bigFraction1.floatValue();
      assertEquals((-0.33333334F), float1, 0.01F);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      
      BigInteger bigInteger0 = null;
      try { 
        bigFraction1.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.ZERO.abs();
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction0.ONE.reciprocal();
      assertNotNull(bigFraction2);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertNotNull(bigDecimal0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertSame(bigFraction0, bigFraction1);
      
      BigFraction bigFraction3 = bigFraction2.pow((-3726));
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      
      BigFraction bigFraction4 = bigFraction1.subtract(bigFraction2);
      assertNotNull(bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short) (-1), bigFraction4.shortValue());
      assertEquals((byte) (-1), bigFraction4.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      
      BigFraction bigFraction5 = bigFraction0.negate();
      assertNotNull(bigFraction5);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertTrue(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-29);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(1982, byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid signum value
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      long long0 = bigFraction0.TWO.getDenominatorAsLong();
      assertEquals(1L, long0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.ONE.subtract((-907));
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)908, bigFraction1.shortValue());
      assertEquals((byte) (-116), bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      long long1 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      bigFraction0.TWO_FIFTHS.hashCode();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      boolean boolean0 = bigFraction0.equals("E+WW\\^q&xpU\"5");
      assertFalse(boolean0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.pow(5);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      int int0 = bigFraction1.THREE_FIFTHS.getDenominatorAsInt();
      assertEquals(5, int0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.add(5);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)5, bigFraction2.shortValue());
      assertEquals((byte)5, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      BigFraction bigFraction3 = bigFraction0.ONE_THIRD.add(5);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)5, bigFraction3.shortValue());
      assertEquals((byte)5, bigFraction3.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      
      String string0 = bigFraction2.THREE_FIFTHS.toString();
      assertEquals("3 / 5", string0);
      assertNotNull(string0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)5, bigFraction2.shortValue());
      assertEquals((byte)5, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      BigFractionField bigFractionField0 = bigFraction2.TWO_THIRDS.getField();
      assertNotNull(bigFractionField0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)5, bigFraction2.shortValue());
      assertEquals((byte)5, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      int int1 = bigFraction2.TWO.intValue();
      assertEquals(2, int1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(int1 == int0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)5, bigFraction2.shortValue());
      assertEquals((byte)5, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      BigDecimal bigDecimal0 = bigFraction0.TWO_THIRDS.bigDecimalValue(2);
      assertNotNull(bigDecimal0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      
      BigDecimal bigDecimal1 = bigFraction1.bigDecimalValue();
      assertNotNull(bigDecimal1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      long long0 = bigFraction2.ONE_FIFTH.getNumeratorAsLong();
      assertEquals(1L, long0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)5, bigFraction2.shortValue());
      assertEquals((byte)5, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      BigFraction bigFraction4 = BigFraction.getReducedFraction(5, 845);
      assertNotNull(bigFraction4);
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      
      BigFraction bigFraction5 = bigFraction0.ONE.subtract(bigFraction2);
      assertNotNull(bigFraction5);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)5, bigFraction2.shortValue());
      assertEquals((byte)5, bigFraction2.byteValue());
      assertEquals((short) (-4), bigFraction5.shortValue());
      assertEquals((byte) (-4), bigFraction5.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      
      BigFraction bigFraction6 = bigFraction5.TWO_THIRDS.subtract(bigFraction2);
      assertNotNull(bigFraction6);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)5, bigFraction2.shortValue());
      assertEquals((byte)5, bigFraction2.byteValue());
      assertEquals((short) (-4), bigFraction5.shortValue());
      assertEquals((byte) (-4), bigFraction5.byteValue());
      assertEquals((short) (-4), bigFraction6.shortValue());
      assertEquals((byte) (-4), bigFraction6.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction3);
      
      BigInteger bigInteger0 = bigFraction2.getNumerator();
      assertNotNull(bigInteger0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertEquals((short)16649, bigInteger0.shortValue());
      assertEquals((byte)9, bigInteger0.byteValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)5, bigFraction2.shortValue());
      assertEquals((byte)5, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction6);
      
      BigFraction bigFraction7 = bigFraction1.negate();
      assertNotNull(bigFraction7);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction7.byteValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction8 = bigFraction7.TWO_QUARTERS.add((long) 845);
      assertNotNull(bigFraction8);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction7.byteValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertEquals((byte)77, bigFraction8.byteValue());
      assertEquals((short)845, bigFraction8.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction9 = bigFraction7.add(bigInteger0);
      assertNotNull(bigFraction9);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction8));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction9.equals((Object)bigFraction7));
      assertFalse(bigFraction9.equals((Object)bigFraction0));
      assertFalse(bigFraction9.equals((Object)bigFraction1));
      assertFalse(bigFraction9.equals((Object)bigFraction4));
      assertFalse(bigFraction9.equals((Object)bigFraction6));
      assertFalse(bigFraction9.equals((Object)bigFraction2));
      assertFalse(bigFraction9.equals((Object)bigFraction3));
      assertFalse(bigFraction9.equals((Object)bigFraction5));
      assertFalse(bigFraction9.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction8));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction7));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertEquals((short)16649, bigInteger0.shortValue());
      assertEquals((byte)9, bigInteger0.byteValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction7.byteValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertEquals((short)16648, bigFraction9.shortValue());
      assertEquals((byte)8, bigFraction9.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)5, bigFraction2.shortValue());
      assertEquals((byte)5, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction9);
      assertNotSame(bigFraction9, bigFraction7);
      assertNotSame(bigFraction9, bigFraction0);
      assertNotSame(bigFraction9, bigFraction1);
      assertNotSame(bigFraction9, bigFraction4);
      assertNotSame(bigFraction9, bigFraction6);
      assertNotSame(bigFraction9, bigFraction2);
      assertNotSame(bigFraction9, bigFraction3);
      assertNotSame(bigFraction9, bigFraction5);
      assertNotSame(bigFraction9, bigFraction8);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction8);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction9);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction6);
      
      BigInteger bigInteger1 = bigFraction2.getNumerator();
      assertNotNull(bigInteger1);
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction8));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction9));
      assertFalse(bigFraction2.equals((Object)bigFraction7));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)9, bigInteger1.byteValue());
      assertEquals((short)16649, bigInteger1.shortValue());
      assertEquals((short)5, bigFraction2.shortValue());
      assertEquals((byte)5, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction2, bigFraction8);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction9);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction6);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      int int0 = (-1607);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.divide((-1607));
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.divide(849L);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = bigFraction2.TWO.subtract((-1607));
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)73, bigFraction3.byteValue());
      assertEquals((short)1609, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)78;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)108, (byte)27, (byte) (-99), (byte)78}, byteArray0);
      assertEquals((short) (-25266), bigInteger0.shortValue());
      assertEquals((byte)78, bigInteger0.byteValue());
      
      BigFraction bigFraction4 = bigFraction3.ONE_QUARTER.add(bigInteger0);
      assertEquals(6, byteArray0.length);
      assertNotNull(bigFraction4);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)108, (byte)27, (byte) (-99), (byte)78}, byteArray0);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)73, bigFraction3.byteValue());
      assertEquals((short)1609, bigFraction3.shortValue());
      assertEquals((short) (-25266), bigInteger0.shortValue());
      assertEquals((byte)78, bigInteger0.byteValue());
      assertEquals((short) (-25266), bigFraction4.shortValue());
      assertEquals((byte)78, bigFraction4.byteValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      
      BigFraction bigFraction5 = BigFraction.ONE_THIRD;
      assertNotNull(bigFraction5);
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger1, bigInteger0);
      
      // Undeclared exception!
      try { 
        bigFraction5.FOUR_FIFTHS.divide(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 17;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(17, 17);
      assertNotNull(bigFraction0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      
      // Undeclared exception!
      try { 
        bigFraction0.TWO_QUARTERS.bigDecimalValue(17, 2192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.multiply(9007199254740990L);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFractionField bigFractionField0 = bigFraction1.MINUS_ONE.getField();
      assertNotNull(bigFractionField0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction1.TWO_FIFTHS.bigDecimalValue(0);
      assertNotNull(bigDecimal0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      double double0 = bigFraction1.ONE.doubleValue();
      assertEquals(1.0, double0, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      String string0 = bigFraction0.toString();
      assertEquals("4 / 5", string0);
      assertNotNull(string0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.pow(0);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      BigFraction bigFraction3 = bigFraction2.reduce();
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      
      BigFraction bigFraction4 = bigFraction3.TWO_QUARTERS.subtract(0);
      assertNotNull(bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      
      long long0 = bigFraction4.TWO_THIRDS.longValue();
      assertEquals(0L, long0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      
      BigFraction bigFraction5 = bigFraction4.ONE.pow(0);
      assertNotNull(bigFraction5);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertTrue(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertTrue(bigFraction5.equals((Object)bigFraction2));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)1, bigFraction5.shortValue());
      assertEquals((byte)1, bigFraction5.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = bigFraction1.ONE_THIRD.getDenominatorAsInt();
      assertEquals(3, int0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      
      boolean boolean0 = bigFraction1.equals(object0);
      assertFalse(boolean0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      
      double double1 = bigFraction3.doubleValue();
      assertEquals(1.0, double1, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertTrue(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertTrue(bigFraction3.equals((Object)bigFraction5));
      assertEquals(double1, double0, 0.01);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction5);
      
      BigInteger bigInteger0 = bigFraction3.getDenominator();
      assertNotNull(bigInteger0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertTrue(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertTrue(bigFraction3.equals((Object)bigFraction5));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction5);
      
      int int1 = bigFraction1.hashCode();
      assertFalse(int1 == int0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      
      BigFraction bigFraction6 = bigFraction2.negate();
      assertNotNull(bigFraction6);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertTrue(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction6.byteValue());
      assertEquals((short) (-1), bigFraction6.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction5);
      
      boolean boolean1 = bigFraction5.equals(bigFraction1);
      assertFalse(boolean1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertTrue(boolean1 == boolean0);
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertTrue(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertTrue(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction6));
      assertTrue(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertTrue(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)1, bigFraction5.shortValue());
      assertEquals((byte)1, bigFraction5.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      
      BigFraction bigFraction7 = bigFraction2.add(275);
      assertNotNull(bigFraction7);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertTrue(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((short)276, bigFraction7.shortValue());
      assertEquals((byte)20, bigFraction7.byteValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction5);
      
      BigFraction bigFraction8 = bigFraction0.add(bigInteger0);
      assertNotNull(bigFraction8);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction7));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertTrue(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertTrue(bigFraction3.equals((Object)bigFraction5));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((short)1, bigFraction8.shortValue());
      assertEquals((byte)1, bigFraction8.byteValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction8);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction3, bigFraction8);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction6);
      
      double double2 = bigFraction8.pow((double) 0);
      assertEquals(1.0, double2, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction7));
      assertFalse(bigFraction2.equals((Object)bigFraction8));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertTrue(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction8));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertTrue(bigFraction3.equals((Object)bigFraction5));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((short)1, bigFraction8.shortValue());
      assertEquals((byte)1, bigFraction8.byteValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction8);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction3, bigFraction8);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction6);
      
      float float0 = bigFraction8.floatValue();
      assertEquals(1.8F, float0, 0.01F);
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction7));
      assertFalse(bigFraction2.equals((Object)bigFraction8));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertTrue(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction8));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertTrue(bigFraction3.equals((Object)bigFraction5));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((short)1, bigFraction8.shortValue());
      assertEquals((byte)1, bigFraction8.byteValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction8);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction3, bigFraction8);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction6);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 1823;
      BigFraction bigFraction0 = new BigFraction(1823, 1823);
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.negate();
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.reciprocal();
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short) (-1), bigFraction3.shortValue());
      assertEquals((byte) (-1), bigFraction3.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-83);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)71, (byte) (-83)}, byteArray0);
      assertEquals((byte) (-83), bigInteger0.byteValue());
      assertEquals((short)18349, bigInteger0.shortValue());
      
      BigFraction bigFraction4 = bigFraction3.TWO.pow(bigInteger0);
      assertEquals(4, byteArray0.length);
      assertNotNull(bigFraction4);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)71, (byte) (-83)}, byteArray0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short) (-1), bigFraction3.shortValue());
      assertEquals((byte) (-1), bigFraction3.byteValue());
      assertEquals((byte) (-83), bigInteger0.byteValue());
      assertEquals((short)18349, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      
      long long0 = bigFraction0.THREE_QUARTERS.longValue();
      assertEquals(0L, long0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      
      // Undeclared exception!
      try { 
        bigFraction1.ONE.bigDecimalValue((-10));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertNotNull(bigFraction0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        bigFraction0.TWO.bigDecimalValue(1173);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.divide(bigInteger0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.add((long) 2910);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)94, bigFraction2.byteValue());
      assertEquals((short)2910, bigFraction2.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger1 = new BigInteger(2910, 1, mockRandom0);
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)69, bigInteger1.byteValue());
      assertEquals((short)581, bigInteger1.shortValue());
      
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger1);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)69, bigInteger1.byteValue());
      assertEquals((short)581, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(1, int0);
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.pow((long) 2910);
      assertNotNull(bigFraction4);
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)69, bigInteger1.byteValue());
      assertEquals((short)581, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      
      double double0 = bigFraction3.doubleValue();
      assertEquals(1.0, double0, 0.01);
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)69, bigInteger1.byteValue());
      assertEquals((short)581, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      
      int int1 = bigFraction3.getDenominatorAsInt();
      assertEquals(1, int1);
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertTrue(int1 == int0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)69, bigInteger1.byteValue());
      assertEquals((short)581, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      
      BigFraction bigFraction5 = bigFraction3.TWO_THIRDS.multiply((long) 1);
      assertNotNull(bigFraction5);
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertTrue(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)69, bigInteger1.byteValue());
      assertEquals((short)581, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      
      BigFraction bigFraction6 = bigFraction5.subtract(bigInteger1);
      assertNotNull(bigFraction6);
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertTrue(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)69, bigInteger1.byteValue());
      assertEquals((short)581, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte) (-68), bigFraction6.byteValue());
      assertEquals((short) (-580), bigFraction6.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction1);
      
      int int2 = bigFraction6.TWO_QUARTERS.hashCode();
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertTrue(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)69, bigInteger1.byteValue());
      assertEquals((short)581, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte) (-68), bigFraction6.byteValue());
      assertEquals((short) (-580), bigFraction6.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction1);
      
      BigFraction bigFraction7 = BigFraction.TWO;
      assertNotNull(bigFraction7);
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertEquals((byte)2, bigFraction7.byteValue());
      assertEquals((short)2, bigFraction7.shortValue());
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction4);
      
      BigFraction bigFraction8 = bigFraction4.FOUR_FIFTHS.add(bigFraction7);
      assertNotNull(bigFraction8);
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction7));
      assertFalse(bigFraction4.equals((Object)bigFraction6));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)69, bigInteger1.byteValue());
      assertEquals((short)581, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)2, bigFraction7.byteValue());
      assertEquals((short)2, bigFraction7.shortValue());
      assertEquals((byte)2, bigFraction8.byteValue());
      assertEquals((short)2, bigFraction8.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction8);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction8);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction7);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction0);
      
      BigFraction bigFraction9 = bigFraction3.THREE_QUARTERS.add((-255));
      assertNotNull(bigFraction9);
      assertFalse(bigFraction9.equals((Object)bigFraction4));
      assertFalse(bigFraction9.equals((Object)bigFraction3));
      assertFalse(bigFraction9.equals((Object)bigFraction6));
      assertFalse(bigFraction9.equals((Object)bigFraction1));
      assertFalse(bigFraction9.equals((Object)bigFraction8));
      assertFalse(bigFraction9.equals((Object)bigFraction2));
      assertFalse(bigFraction9.equals((Object)bigFraction5));
      assertFalse(bigFraction9.equals((Object)bigFraction7));
      assertFalse(bigFraction9.equals((Object)bigFraction0));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction8));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertEquals((byte)2, bigFraction9.byteValue());
      assertEquals((short) (-254), bigFraction9.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)69, bigInteger1.byteValue());
      assertEquals((short)581, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertNotSame(bigFraction9, bigFraction4);
      assertNotSame(bigFraction9, bigFraction3);
      assertNotSame(bigFraction9, bigFraction6);
      assertNotSame(bigFraction9, bigFraction1);
      assertNotSame(bigFraction9, bigFraction8);
      assertNotSame(bigFraction9, bigFraction2);
      assertNotSame(bigFraction9, bigFraction5);
      assertNotSame(bigFraction9, bigFraction7);
      assertNotSame(bigFraction9, bigFraction0);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction9);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction8);
      
      BigFraction bigFraction10 = bigFraction3.multiply(bigInteger0);
      assertNotNull(bigFraction10);
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction10.equals((Object)bigFraction3));
      assertFalse(bigFraction10.equals((Object)bigFraction9));
      assertTrue(bigFraction10.equals((Object)bigFraction0));
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      assertFalse(bigFraction10.equals((Object)bigFraction7));
      assertFalse(bigFraction10.equals((Object)bigFraction4));
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      assertFalse(bigFraction10.equals((Object)bigFraction2));
      assertFalse(bigFraction10.equals((Object)bigFraction5));
      assertFalse(bigFraction10.equals((Object)bigFraction1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertFalse(bigFraction3.equals((Object)bigFraction9));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction8));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)1, bigFraction10.shortValue());
      assertEquals((byte)1, bigFraction10.byteValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)69, bigInteger1.byteValue());
      assertEquals((short)581, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction10, bigFraction9);
      assertNotSame(bigFraction10, bigFraction6);
      assertNotSame(bigFraction10, bigFraction0);
      assertNotSame(bigFraction10, bigFraction7);
      assertNotSame(bigFraction10, bigFraction4);
      assertNotSame(bigFraction10, bigFraction8);
      assertNotSame(bigFraction10, bigFraction2);
      assertNotSame(bigFraction10, bigFraction5);
      assertNotSame(bigFraction10, bigFraction1);
      assertNotSame(bigFraction10, bigFraction3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction10);
      assertNotSame(bigFraction3, bigFraction9);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction8);
      
      BigFraction bigFraction11 = bigFraction10.add((long) 1);
      assertNotNull(bigFraction11);
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction10));
      assertTrue(bigFraction10.equals((Object)bigFraction3));
      assertFalse(bigFraction10.equals((Object)bigFraction9));
      assertTrue(bigFraction10.equals((Object)bigFraction0));
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      assertFalse(bigFraction10.equals((Object)bigFraction7));
      assertFalse(bigFraction10.equals((Object)bigFraction4));
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      assertFalse(bigFraction10.equals((Object)bigFraction2));
      assertFalse(bigFraction10.equals((Object)bigFraction5));
      assertFalse(bigFraction10.equals((Object)bigFraction1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction11.equals((Object)bigFraction3));
      assertFalse(bigFraction11.equals((Object)bigFraction10));
      assertFalse(bigFraction11.equals((Object)bigFraction6));
      assertFalse(bigFraction11.equals((Object)bigFraction4));
      assertFalse(bigFraction11.equals((Object)bigFraction5));
      assertFalse(bigFraction11.equals((Object)bigFraction1));
      assertFalse(bigFraction11.equals((Object)bigFraction2));
      assertFalse(bigFraction11.equals((Object)bigFraction8));
      assertTrue(bigFraction11.equals((Object)bigFraction7));
      assertFalse(bigFraction11.equals((Object)bigFraction9));
      assertFalse(bigFraction11.equals((Object)bigFraction0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertFalse(bigFraction3.equals((Object)bigFraction9));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertTrue(bigFraction3.equals((Object)bigFraction10));
      assertFalse(bigFraction3.equals((Object)bigFraction8));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)1, bigFraction10.shortValue());
      assertEquals((byte)1, bigFraction10.byteValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)2, bigFraction11.byteValue());
      assertEquals((short)2, bigFraction11.shortValue());
      assertEquals((byte)69, bigInteger1.byteValue());
      assertEquals((short)581, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction11);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction10, bigFraction11);
      assertNotSame(bigFraction10, bigFraction9);
      assertNotSame(bigFraction10, bigFraction6);
      assertNotSame(bigFraction10, bigFraction0);
      assertNotSame(bigFraction10, bigFraction7);
      assertNotSame(bigFraction10, bigFraction4);
      assertNotSame(bigFraction10, bigFraction8);
      assertNotSame(bigFraction10, bigFraction2);
      assertNotSame(bigFraction10, bigFraction5);
      assertNotSame(bigFraction10, bigFraction1);
      assertNotSame(bigFraction10, bigFraction3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction11, bigFraction3);
      assertNotSame(bigFraction11, bigFraction10);
      assertNotSame(bigFraction11, bigFraction7);
      assertNotSame(bigFraction11, bigFraction6);
      assertNotSame(bigFraction11, bigFraction4);
      assertNotSame(bigFraction11, bigFraction5);
      assertNotSame(bigFraction11, bigFraction1);
      assertNotSame(bigFraction11, bigFraction2);
      assertNotSame(bigFraction11, bigFraction8);
      assertNotSame(bigFraction11, bigFraction9);
      assertNotSame(bigFraction11, bigFraction0);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction10);
      assertNotSame(bigFraction3, bigFraction9);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction11);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction8);
      
      double double1 = bigFraction1.ONE_THIRD.pow((double) 1);
      assertEquals(0.3333333333333333, double1, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction11));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction10));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction10));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction11));
      assertTrue(bigFraction1.equals((Object)bigFraction5));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction11);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction10);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction11);
      
      BigFraction bigFraction12 = bigFraction7.THREE_FIFTHS.multiply(2910);
      assertNotNull(bigFraction12);
      assertFalse(bigFraction12.equals((Object)bigFraction11));
      assertFalse(bigFraction12.equals((Object)bigFraction9));
      assertFalse(bigFraction12.equals((Object)bigFraction5));
      assertFalse(bigFraction12.equals((Object)bigFraction8));
      assertFalse(bigFraction12.equals((Object)bigFraction2));
      assertFalse(bigFraction12.equals((Object)bigFraction1));
      assertFalse(bigFraction12.equals((Object)bigFraction3));
      assertFalse(bigFraction12.equals((Object)bigFraction0));
      assertFalse(bigFraction12.equals((Object)bigFraction4));
      assertFalse(bigFraction12.equals((Object)bigFraction10));
      assertFalse(bigFraction12.equals((Object)bigFraction6));
      assertFalse(bigFraction12.equals((Object)bigFraction7));
      assertFalse(bigFraction7.equals((Object)bigFraction8));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction9));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction10));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertTrue(bigFraction7.equals((Object)bigFraction11));
      assertEquals((short)1746, bigFraction12.shortValue());
      assertEquals((byte) (-46), bigFraction12.byteValue());
      assertEquals((byte)2, bigFraction7.byteValue());
      assertEquals((short)2, bigFraction7.shortValue());
      assertNotSame(bigFraction12, bigFraction11);
      assertNotSame(bigFraction12, bigFraction9);
      assertNotSame(bigFraction12, bigFraction5);
      assertNotSame(bigFraction12, bigFraction8);
      assertNotSame(bigFraction12, bigFraction2);
      assertNotSame(bigFraction12, bigFraction1);
      assertNotSame(bigFraction12, bigFraction3);
      assertNotSame(bigFraction12, bigFraction0);
      assertNotSame(bigFraction12, bigFraction4);
      assertNotSame(bigFraction12, bigFraction10);
      assertNotSame(bigFraction12, bigFraction6);
      assertNotSame(bigFraction12, bigFraction7);
      assertNotSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction11);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction9);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction10);
      assertNotSame(bigFraction7, bigFraction12);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction4);
      
      BigFraction bigFraction13 = bigFraction10.TWO_QUARTERS.add((-3512299194304650054L));
      assertNotNull(bigFraction13);
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction12));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction11));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction10));
      assertFalse(bigFraction10.equals((Object)bigFraction11));
      assertTrue(bigFraction10.equals((Object)bigFraction3));
      assertFalse(bigFraction10.equals((Object)bigFraction9));
      assertFalse(bigFraction10.equals((Object)bigFraction12));
      assertTrue(bigFraction10.equals((Object)bigFraction0));
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      assertFalse(bigFraction10.equals((Object)bigFraction7));
      assertFalse(bigFraction10.equals((Object)bigFraction4));
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      assertFalse(bigFraction10.equals((Object)bigFraction2));
      assertFalse(bigFraction10.equals((Object)bigFraction5));
      assertFalse(bigFraction10.equals((Object)bigFraction1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction13.equals((Object)bigFraction11));
      assertFalse(bigFraction13.equals((Object)bigFraction9));
      assertFalse(bigFraction13.equals((Object)bigFraction5));
      assertFalse(bigFraction13.equals((Object)bigFraction0));
      assertFalse(bigFraction13.equals((Object)bigFraction8));
      assertFalse(bigFraction13.equals((Object)bigFraction6));
      assertFalse(bigFraction13.equals((Object)bigFraction1));
      assertFalse(bigFraction13.equals((Object)bigFraction12));
      assertFalse(bigFraction13.equals((Object)bigFraction7));
      assertFalse(bigFraction13.equals((Object)bigFraction10));
      assertFalse(bigFraction13.equals((Object)bigFraction2));
      assertFalse(bigFraction13.equals((Object)bigFraction3));
      assertFalse(bigFraction13.equals((Object)bigFraction4));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction12));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertFalse(bigFraction3.equals((Object)bigFraction9));
      assertFalse(bigFraction3.equals((Object)bigFraction11));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertTrue(bigFraction3.equals((Object)bigFraction10));
      assertFalse(bigFraction3.equals((Object)bigFraction8));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)1, bigFraction10.shortValue());
      assertEquals((byte)1, bigFraction10.byteValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte) (-69), bigFraction13.byteValue());
      assertEquals((short) (-23365), bigFraction13.shortValue());
      assertEquals((byte)69, bigInteger1.byteValue());
      assertEquals((short)581, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction12);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction11);
      assertNotSame(bigFraction0, bigFraction13);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction10, bigFraction11);
      assertNotSame(bigFraction10, bigFraction9);
      assertNotSame(bigFraction10, bigFraction12);
      assertNotSame(bigFraction10, bigFraction0);
      assertNotSame(bigFraction10, bigFraction4);
      assertNotSame(bigFraction10, bigFraction2);
      assertNotSame(bigFraction10, bigFraction3);
      assertNotSame(bigFraction10, bigFraction13);
      assertNotSame(bigFraction10, bigFraction6);
      assertNotSame(bigFraction10, bigFraction7);
      assertNotSame(bigFraction10, bigFraction8);
      assertNotSame(bigFraction10, bigFraction5);
      assertNotSame(bigFraction10, bigFraction1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction13, bigFraction11);
      assertNotSame(bigFraction13, bigFraction9);
      assertNotSame(bigFraction13, bigFraction5);
      assertNotSame(bigFraction13, bigFraction0);
      assertNotSame(bigFraction13, bigFraction8);
      assertNotSame(bigFraction13, bigFraction6);
      assertNotSame(bigFraction13, bigFraction1);
      assertNotSame(bigFraction13, bigFraction12);
      assertNotSame(bigFraction13, bigFraction7);
      assertNotSame(bigFraction13, bigFraction10);
      assertNotSame(bigFraction13, bigFraction2);
      assertNotSame(bigFraction13, bigFraction3);
      assertNotSame(bigFraction13, bigFraction4);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction3, bigFraction12);
      assertNotSame(bigFraction3, bigFraction9);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction11);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction13);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction10);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction8);
      
      double double2 = bigFraction4.pow(0.0);
      assertEquals(1.0, double2, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction12));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertTrue(bigFraction0.equals((Object)bigFraction10));
      assertFalse(bigFraction0.equals((Object)bigFraction11));
      assertFalse(bigFraction0.equals((Object)bigFraction13));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertFalse(bigFraction3.equals((Object)bigFraction12));
      assertFalse(bigFraction3.equals((Object)bigFraction9));
      assertFalse(bigFraction3.equals((Object)bigFraction11));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction13));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertTrue(bigFraction3.equals((Object)bigFraction10));
      assertFalse(bigFraction3.equals((Object)bigFraction8));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction8));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction7));
      assertFalse(bigFraction4.equals((Object)bigFraction12));
      assertFalse(bigFraction4.equals((Object)bigFraction6));
      assertFalse(bigFraction4.equals((Object)bigFraction11));
      assertFalse(bigFraction4.equals((Object)bigFraction9));
      assertFalse(bigFraction4.equals((Object)bigFraction10));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction13));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)69, bigInteger1.byteValue());
      assertEquals((short)581, bigInteger1.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction12);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction11);
      assertNotSame(bigFraction0, bigFraction13);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction3, bigFraction12);
      assertNotSame(bigFraction3, bigFraction9);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction11);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction13);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction10);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction8);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction8);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction7);
      assertNotSame(bigFraction4, bigFraction12);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction4, bigFraction11);
      assertNotSame(bigFraction4, bigFraction9);
      assertNotSame(bigFraction4, bigFraction10);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction13);
      
      boolean boolean0 = bigFraction2.equals("");
      assertFalse(boolean0);
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction12));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertTrue(bigFraction0.equals((Object)bigFraction10));
      assertFalse(bigFraction0.equals((Object)bigFraction11));
      assertFalse(bigFraction0.equals((Object)bigFraction13));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction12));
      assertFalse(bigFraction1.equals((Object)bigFraction13));
      assertTrue(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction10));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction11));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction13));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction11));
      assertFalse(bigFraction2.equals((Object)bigFraction9));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction12));
      assertFalse(bigFraction2.equals((Object)bigFraction8));
      assertFalse(bigFraction2.equals((Object)bigFraction10));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction7));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)94, bigFraction2.byteValue());
      assertEquals((short)2910, bigFraction2.shortValue());
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction12);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction11);
      assertNotSame(bigFraction0, bigFraction13);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction12);
      assertNotSame(bigFraction1, bigFraction13);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction10);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction11);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction13);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction11);
      assertNotSame(bigFraction2, bigFraction9);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction12);
      assertNotSame(bigFraction2, bigFraction8);
      assertNotSame(bigFraction2, bigFraction10);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction7);
      
      BigFraction bigFraction14 = bigFraction7.divide((long) 1);
      assertNotNull(bigFraction14);
      assertFalse(bigFraction14.equals((Object)bigFraction3));
      assertFalse(bigFraction14.equals((Object)bigFraction4));
      assertFalse(bigFraction14.equals((Object)bigFraction12));
      assertFalse(bigFraction14.equals((Object)bigFraction5));
      assertFalse(bigFraction14.equals((Object)bigFraction2));
      assertFalse(bigFraction14.equals((Object)bigFraction8));
      assertTrue(bigFraction14.equals((Object)bigFraction11));
      assertFalse(bigFraction14.equals((Object)bigFraction9));
      assertFalse(bigFraction14.equals((Object)bigFraction0));
      assertFalse(bigFraction14.equals((Object)bigFraction13));
      assertFalse(bigFraction14.equals((Object)bigFraction10));
      assertFalse(bigFraction14.equals((Object)bigFraction6));
      assertFalse(bigFraction14.equals((Object)bigFraction1));
      assertTrue(bigFraction14.equals((Object)bigFraction7));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction9));
      assertFalse(bigFraction7.equals((Object)bigFraction13));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction8));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction10));
      assertFalse(bigFraction7.equals((Object)bigFraction12));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertTrue(bigFraction7.equals((Object)bigFraction11));
      assertEquals((byte)2, bigFraction14.byteValue());
      assertEquals((short)2, bigFraction14.shortValue());
      assertEquals((byte)2, bigFraction7.byteValue());
      assertEquals((short)2, bigFraction7.shortValue());
      assertNotSame(bigFraction14, bigFraction3);
      assertNotSame(bigFraction14, bigFraction4);
      assertNotSame(bigFraction14, bigFraction12);
      assertNotSame(bigFraction14, bigFraction5);
      assertNotSame(bigFraction14, bigFraction2);
      assertNotSame(bigFraction14, bigFraction8);
      assertNotSame(bigFraction14, bigFraction9);
      assertNotSame(bigFraction14, bigFraction11);
      assertNotSame(bigFraction14, bigFraction0);
      assertNotSame(bigFraction14, bigFraction13);
      assertNotSame(bigFraction14, bigFraction10);
      assertNotSame(bigFraction14, bigFraction7);
      assertNotSame(bigFraction14, bigFraction6);
      assertNotSame(bigFraction14, bigFraction1);
      assertNotSame(bigFraction7, bigFraction11);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction9);
      assertNotSame(bigFraction7, bigFraction13);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction14);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction10);
      assertNotSame(bigFraction7, bigFraction12);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(1);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      
      BigFraction bigFraction1 = new BigFraction(715.2138849839121);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction1.pow(389);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((short)2668, bigFraction2.shortValue());
      assertEquals((byte)108, bigFraction2.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      long long0 = bigFraction2.longValue();
      assertEquals(2108975432305085036L, long0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((short)2668, bigFraction2.shortValue());
      assertEquals((byte)108, bigFraction2.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      BigFraction bigFraction3 = bigFraction1.FOUR_FIFTHS.pow(820L);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      
      BigFraction bigFraction4 = bigFraction3.TWO_THIRDS.multiply(1);
      assertNotNull(bigFraction4);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      
      BigFraction bigFraction5 = bigFraction0.add(bigFraction1);
      assertNotNull(bigFraction5);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-51), bigFraction5.byteValue());
      assertEquals((short)717, bigFraction5.shortValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      
      int int0 = bigFraction3.ONE.intValue();
      assertEquals(1, int0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigFraction bigFraction6 = bigFraction5.pow(bigInteger0);
      assertNotNull(bigFraction6);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertTrue(bigFraction6.equals((Object)bigFraction5));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-51), bigFraction5.byteValue());
      assertEquals((short)717, bigFraction5.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)717, bigFraction6.shortValue());
      assertEquals((byte) (-51), bigFraction6.byteValue());
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction2);
      
      BigFraction bigFraction7 = bigFraction6.MINUS_ONE.abs();
      assertNotNull(bigFraction7);
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertTrue(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertTrue(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-51), bigFraction5.byteValue());
      assertEquals((short)717, bigFraction5.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)717, bigFraction6.shortValue());
      assertEquals((byte) (-51), bigFraction6.byteValue());
      assertEquals((short)1, bigFraction7.shortValue());
      assertEquals((byte)1, bigFraction7.byteValue());
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction6, bigFraction7);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction6);
      
      int int1 = bigFraction5.ONE_QUARTER.compareTo(bigFraction3);
      assertEquals(1, int1);
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertTrue(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction7));
      assertTrue(int1 == int0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((byte) (-51), bigFraction5.byteValue());
      assertEquals((short)717, bigFraction5.shortValue());
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction7);
      
      BigFraction bigFraction8 = bigFraction5.ONE_QUARTER.pow(389);
      assertNotNull(bigFraction8);
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertTrue(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-51), bigFraction5.byteValue());
      assertEquals((short)717, bigFraction5.shortValue());
      assertEquals((short)0, bigFraction8.shortValue());
      assertEquals((byte)0, bigFraction8.byteValue());
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction8);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction2);
      
      long long1 = bigFraction0.longValue();
      assertEquals(2L, long1);
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(long1 == long0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      
      BigFraction bigFraction9 = bigFraction1.add(bigInteger0);
      assertNotNull(bigFraction9);
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction9.equals((Object)bigFraction1));
      assertFalse(bigFraction9.equals((Object)bigFraction7));
      assertFalse(bigFraction9.equals((Object)bigFraction3));
      assertFalse(bigFraction9.equals((Object)bigFraction8));
      assertFalse(bigFraction9.equals((Object)bigFraction4));
      assertFalse(bigFraction9.equals((Object)bigFraction0));
      assertFalse(bigFraction9.equals((Object)bigFraction5));
      assertFalse(bigFraction9.equals((Object)bigFraction2));
      assertFalse(bigFraction9.equals((Object)bigFraction6));
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)716, bigFraction9.shortValue());
      assertEquals((byte) (-52), bigFraction9.byteValue());
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction9, bigFraction1);
      assertNotSame(bigFraction9, bigFraction7);
      assertNotSame(bigFraction9, bigFraction3);
      assertNotSame(bigFraction9, bigFraction8);
      assertNotSame(bigFraction9, bigFraction4);
      assertNotSame(bigFraction9, bigFraction0);
      assertNotSame(bigFraction9, bigFraction5);
      assertNotSame(bigFraction9, bigFraction2);
      assertNotSame(bigFraction9, bigFraction6);
      
      boolean boolean0 = bigFraction9.equals(bigFraction7);
      assertFalse(boolean0);
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertTrue(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction9));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction8));
      assertFalse(bigFraction5.equals((Object)bigFraction7));
      assertFalse(bigFraction6.equals((Object)bigFraction7));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction8));
      assertFalse(bigFraction6.equals((Object)bigFraction9));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertTrue(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction9));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction8));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction9.equals((Object)bigFraction1));
      assertFalse(bigFraction9.equals((Object)bigFraction7));
      assertFalse(bigFraction9.equals((Object)bigFraction3));
      assertFalse(bigFraction9.equals((Object)bigFraction8));
      assertFalse(bigFraction9.equals((Object)bigFraction4));
      assertFalse(bigFraction9.equals((Object)bigFraction0));
      assertFalse(bigFraction9.equals((Object)bigFraction5));
      assertFalse(bigFraction9.equals((Object)bigFraction2));
      assertFalse(bigFraction9.equals((Object)bigFraction6));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-51), bigFraction5.byteValue());
      assertEquals((short)717, bigFraction5.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)717, bigFraction6.shortValue());
      assertEquals((byte) (-51), bigFraction6.byteValue());
      assertEquals((short)1, bigFraction7.shortValue());
      assertEquals((byte)1, bigFraction7.byteValue());
      assertEquals((short)716, bigFraction9.shortValue());
      assertEquals((byte) (-52), bigFraction9.byteValue());
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction9);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction8);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction6, bigFraction7);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction8);
      assertNotSame(bigFraction6, bigFraction9);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction7, bigFraction9);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction9, bigFraction1);
      assertNotSame(bigFraction9, bigFraction7);
      assertNotSame(bigFraction9, bigFraction3);
      assertNotSame(bigFraction9, bigFraction8);
      assertNotSame(bigFraction9, bigFraction4);
      assertNotSame(bigFraction9, bigFraction0);
      assertNotSame(bigFraction9, bigFraction5);
      assertNotSame(bigFraction9, bigFraction2);
      assertNotSame(bigFraction9, bigFraction6);
      
      int int2 = bigFraction0.compareTo(bigFraction8);
      assertEquals(1, int2);
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertTrue(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction9));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction8));
      assertFalse(bigFraction5.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction9));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-51), bigFraction5.byteValue());
      assertEquals((short)717, bigFraction5.shortValue());
      assertEquals((short)0, bigFraction8.shortValue());
      assertEquals((byte)0, bigFraction8.byteValue());
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction9);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction8);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction9);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction2);
      
      BigFraction bigFraction10 = bigFraction5.add(bigInteger0);
      assertNotNull(bigFraction10);
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction10.equals((Object)bigFraction7));
      assertFalse(bigFraction10.equals((Object)bigFraction9));
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      assertFalse(bigFraction10.equals((Object)bigFraction5));
      assertFalse(bigFraction10.equals((Object)bigFraction2));
      assertFalse(bigFraction10.equals((Object)bigFraction1));
      assertFalse(bigFraction10.equals((Object)bigFraction0));
      assertFalse(bigFraction10.equals((Object)bigFraction3));
      assertFalse(bigFraction10.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertTrue(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction9));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction8));
      assertFalse(bigFraction5.equals((Object)bigFraction7));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)718, bigFraction10.shortValue());
      assertEquals((byte) (-50), bigFraction10.byteValue());
      assertEquals((byte) (-53), bigFraction1.byteValue());
      assertEquals((short)715, bigFraction1.shortValue());
      assertEquals((byte) (-51), bigFraction5.byteValue());
      assertEquals((short)717, bigFraction5.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction10, bigFraction7);
      assertNotSame(bigFraction10, bigFraction9);
      assertNotSame(bigFraction10, bigFraction8);
      assertNotSame(bigFraction10, bigFraction6);
      assertNotSame(bigFraction10, bigFraction5);
      assertNotSame(bigFraction10, bigFraction2);
      assertNotSame(bigFraction10, bigFraction1);
      assertNotSame(bigFraction10, bigFraction0);
      assertNotSame(bigFraction10, bigFraction3);
      assertNotSame(bigFraction10, bigFraction4);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction10);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction10);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction9);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction8);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction7);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = 430.079447776762;
      int int0 = Integer.MAX_VALUE;
      BigFraction bigFraction0 = new BigFraction(430.079447776762, 1618.7082384, Integer.MAX_VALUE);
      assertNotNull(bigFraction0);
      assertEquals((short)430, bigFraction0.shortValue());
      assertEquals((byte) (-82), bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(702L);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)430, bigFraction0.shortValue());
      assertEquals((byte) (-82), bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.ZERO.add(0L);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)430, bigFraction0.shortValue());
      assertEquals((byte) (-82), bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = bigFraction2.ONE_HALF.subtract(Integer.MAX_VALUE);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertEquals((short)430, bigFraction0.shortValue());
      assertEquals((byte) (-82), bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)2, bigFraction3.byteValue());
      assertEquals((short)2, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      
      BigFraction bigFraction4 = bigFraction0.subtract(5537L);
      assertNotNull(bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertEquals((short)430, bigFraction0.shortValue());
      assertEquals((byte) (-82), bigFraction0.byteValue());
      assertEquals((short) (-5107), bigFraction4.shortValue());
      assertEquals((byte)13, bigFraction4.byteValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      
      // Undeclared exception!
      try { 
        bigFraction4.TWO_FIFTHS.bigDecimalValue(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1278);
      assertNotNull(bigFraction0);
      assertEquals((byte) (-2), bigFraction0.byteValue());
      assertEquals((short)1278, bigFraction0.shortValue());
      
      int int0 = bigFraction0.ONE.getDenominatorAsInt();
      assertEquals(1, int0);
      assertEquals((byte) (-2), bigFraction0.byteValue());
      assertEquals((short)1278, bigFraction0.shortValue());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-37);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)74, (byte) (-1), (byte) (-64), (byte) (-45), (byte) (-62), (byte)1, (byte) (-37)}, byteArray0);
      assertEquals((short)475, bigInteger0.shortValue());
      assertEquals((byte) (-37), bigInteger0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.subtract(bigInteger0);
      assertEquals(8, byteArray0.length);
      assertNotNull(bigFraction1);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)74, (byte) (-1), (byte) (-64), (byte) (-45), (byte) (-62), (byte)1, (byte) (-37)}, byteArray0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-2), bigFraction0.byteValue());
      assertEquals((short)1278, bigFraction0.shortValue());
      assertEquals((short)475, bigInteger0.shortValue());
      assertEquals((byte) (-37), bigInteger0.byteValue());
      assertEquals((short) (-475), bigFraction1.shortValue());
      assertEquals((byte)37, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = BigFraction.ZERO;
      assertNotNull(bigFraction2);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      double double0 = bigFraction2.ONE_THIRD.pow((double) (byte) (-1));
      assertEquals(3.0, double0, 0.01);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      float float0 = bigFraction2.TWO_THIRDS.floatValue();
      assertEquals(0.6666667F, float0, 0.01F);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction2);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)1278, bigFraction3.shortValue());
      assertEquals((byte) (-2), bigFraction3.byteValue());
      assertEquals((byte) (-2), bigFraction0.byteValue());
      assertEquals((short)1278, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertSame(bigFraction3, bigFraction0);
      assertSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      int int1 = bigFraction3.compareTo(bigFraction2);
      assertEquals(1, int1);
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(int1 == int0);
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)1278, bigFraction3.shortValue());
      assertEquals((byte) (-2), bigFraction3.byteValue());
      assertEquals((byte) (-2), bigFraction0.byteValue());
      assertEquals((short)1278, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertSame(bigFraction3, bigFraction0);
      assertSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      double double1 = bigFraction0.pow((-3334.3818767496923));
      assertEquals(0.0, double1, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((byte) (-2), bigFraction0.byteValue());
      assertEquals((short)1278, bigFraction0.shortValue());
      assertSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      
      double double2 = bigFraction1.pow(496.87285282006394);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)74, (byte) (-1), (byte) (-64), (byte) (-45), (byte) (-62), (byte)1, (byte) (-37)}, byteArray0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-2), bigFraction0.byteValue());
      assertEquals((short)1278, bigFraction0.shortValue());
      assertEquals((short)475, bigInteger0.shortValue());
      assertEquals((byte) (-37), bigInteger0.byteValue());
      assertEquals((short) (-475), bigFraction1.shortValue());
      assertEquals((byte)37, bigFraction1.byteValue());
      assertSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction4 = bigFraction3.pow((int) (byte) (-37));
      assertNotNull(bigFraction4);
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)1278, bigFraction3.shortValue());
      assertEquals((byte) (-2), bigFraction3.byteValue());
      assertEquals((byte) (-2), bigFraction0.byteValue());
      assertEquals((short)1278, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction4);
      assertSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      
      BigFraction bigFraction5 = bigFraction2.multiply(8);
      assertNotNull(bigFraction5);
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertTrue(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      
      BigFraction bigFraction6 = BigFraction.getReducedFraction((-2314), 1075);
      assertNotNull(bigFraction6);
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertEquals((byte) (-2), bigFraction6.byteValue());
      assertEquals((short) (-2), bigFraction6.shortValue());
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = 2103L;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(2103L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.divide((-1));
      assertNotNull(bigFraction2);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      BigFraction bigFraction3 = bigFraction0.MINUS_ONE.subtract(bigFraction1);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction3.shortValue());
      assertEquals((byte) (-1), bigFraction3.byteValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      
      BigFraction bigFraction4 = bigFraction0.multiply(1039L);
      assertNotNull(bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((byte) (-15), bigFraction4.byteValue());
      assertEquals((short) (-1039), bigFraction4.shortValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-1), (-1));
      assertNotNull(bigFraction5);
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertEquals((short)1, bigFraction5.shortValue());
      assertEquals((byte)1, bigFraction5.byteValue());
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction0);
      
      BigFraction bigFraction6 = bigFraction1.THREE_QUARTERS.subtract(bigFraction0);
      assertNotNull(bigFraction6);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)1, bigFraction6.byteValue());
      assertEquals((short)1, bigFraction6.shortValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction1);
      
      BigDecimal bigDecimal0 = bigFraction6.ONE_THIRD.bigDecimalValue(0);
      assertNotNull(bigDecimal0);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)1, bigFraction6.byteValue());
      assertEquals((short)1, bigFraction6.shortValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction1);
      
      BigFractionField bigFractionField0 = bigFraction6.getField();
      assertNotNull(bigFractionField0);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)1, bigFraction6.byteValue());
      assertEquals((short)1, bigFraction6.shortValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction1);
      
      BigFraction bigFraction7 = bigFraction4.subtract(5);
      assertNotNull(bigFraction7);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction6));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((byte) (-15), bigFraction4.byteValue());
      assertEquals((short) (-1039), bigFraction4.shortValue());
      assertEquals((byte) (-20), bigFraction7.byteValue());
      assertEquals((short) (-1044), bigFraction7.shortValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction7);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction3);
      
      BigDecimal bigDecimal1 = bigFraction7.bigDecimalValue(5);
      assertNotNull(bigDecimal1);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction6));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction7));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((byte) (-15), bigFraction4.byteValue());
      assertEquals((short) (-1039), bigFraction4.shortValue());
      assertEquals((byte) (-20), bigFraction7.byteValue());
      assertEquals((short) (-1044), bigFraction7.shortValue());
      assertEquals((short) (-1044), bigDecimal1.shortValue());
      assertEquals((byte) (-20), bigDecimal1.byteValue());
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction7);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      String string0 = bigFraction2.toString();
      assertEquals("-1 / 3", string0);
      assertNotNull(string0);
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction7));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction5);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      long long0 = bigFraction0.ONE_QUARTER.longValue();
      assertEquals(0L, long0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.add(2087);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)2086, bigFraction1.shortValue());
      assertEquals((byte)38, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      int int0 = 37;
      BigFractionField bigFractionField0 = bigFraction1.TWO_FIFTHS.getField();
      assertNotNull(bigFractionField0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)2086, bigFraction1.shortValue());
      assertEquals((byte)38, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction0.add(37);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)37, bigFraction2.shortValue());
      assertEquals((byte)37, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.reduce();
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)37, bigFraction2.shortValue());
      assertEquals((byte)37, bigFraction2.byteValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      
      BigFractionField bigFractionField1 = bigFraction2.MINUS_ONE.getField();
      assertNotNull(bigFractionField1);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)37, bigFraction2.shortValue());
      assertEquals((byte)37, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertSame(bigFractionField1, bigFractionField0);
      
      BigFraction bigFraction4 = bigFraction0.TWO_QUARTERS.multiply(bigFraction2);
      assertNotNull(bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)37, bigFraction2.shortValue());
      assertEquals((byte)37, bigFraction2.byteValue());
      assertEquals((short)18, bigFraction4.shortValue());
      assertEquals((byte)18, bigFraction4.byteValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      
      BigFraction bigFraction5 = BigFraction.TWO_QUARTERS;
      assertNotNull(bigFraction5);
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      
      boolean boolean0 = bigFraction1.equals(bigFraction5);
      assertFalse(boolean0);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)2086, bigFraction1.shortValue());
      assertEquals((byte)38, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      
      // Undeclared exception!
      try { 
        bigFraction5.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      int int0 = 1;
      BigFraction bigFraction1 = bigFraction0.divide(1);
      assertNotNull(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction0.ZERO.multiply((-1));
      assertNotNull(bigFraction2);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      BigFraction bigFraction3 = bigFraction0.pow((long) 1);
      assertNotNull(bigFraction3);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      
      double double0 = bigFraction3.MINUS_ONE.doubleValue();
      assertEquals((-1.0), double0, 0.01);
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      
      double double1 = bigFraction0.TWO_THIRDS.pow((double) 1);
      assertEquals(0.6666666666666666, double1, 0.01);
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      
      BigFraction bigFraction4 = bigFraction1.pow((-175L));
      assertNotNull(bigFraction4);
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)11365, bigFraction4.shortValue());
      assertEquals((byte)101, bigFraction4.byteValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      
      BigFraction bigFraction5 = bigFraction0.TWO_FIFTHS.add(bigFraction3);
      assertNotNull(bigFraction5);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((short)1, bigFraction5.shortValue());
      assertEquals((byte)1, bigFraction5.byteValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction4);
      
      BigFraction bigFraction6 = BigFraction.getReducedFraction(1075, 1);
      assertNotNull(bigFraction6);
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertEquals((byte)51, bigFraction6.byteValue());
      assertEquals((short)1075, bigFraction6.shortValue());
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction0);
      
      BigFraction bigFraction7 = bigFraction5.THREE_FIFTHS.add(0L);
      assertNotNull(bigFraction7);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((short)1, bigFraction5.shortValue());
      assertEquals((byte)1, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertEquals((byte)0, bigFraction7.byteValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction4);
      
      double double2 = bigFraction3.pow(1.2038281262953917E-213);
      assertEquals(1.0, double2, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      
      int int1 = bigFraction1.intValue();
      assertEquals(0, int1);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(int1 == int0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction4);
      
      long long0 = bigFraction6.getNumeratorAsLong();
      assertEquals(1075L, long0);
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction7));
      assertEquals((byte)51, bigFraction6.byteValue());
      assertEquals((short)1075, bigFraction6.shortValue());
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction7);
      
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertNotNull(bigFractionField0);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      
      double double3 = bigFraction6.percentageValue();
      assertEquals(107500.0, double3, 0.01);
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction7));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((byte)51, bigFraction6.byteValue());
      assertEquals((short)1075, bigFraction6.shortValue());
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction7);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.min(bigInteger1);
      BigFraction bigFraction2 = bigFraction1.ONE.subtract(bigInteger0);
      bigFraction0.compareTo(bigFraction1);
      bigFraction0.percentageValue();
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction0.abs();
      BigFraction bigFraction4 = bigFraction3.FOUR_FIFTHS.subtract(bigFraction0);
      bigFraction3.TWO_QUARTERS.divide((long) (-1));
      bigFraction4.THREE_FIFTHS.getNumeratorAsLong();
      BigInteger bigInteger2 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        bigFraction2.FOUR_FIFTHS.divide(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4503599627370496L, 4503599627370496L);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction0.compareTo(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.subtract(618L);
      BigFraction.getReducedFraction(0, 1);
      bigFraction0.ONE_FIFTH.reduce();
      // Undeclared exception!
      try { 
        bigFraction3.ONE_QUARTER.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-2922), (-2922));
      bigFraction0.ONE_FIFTH.intValue();
      bigFraction0.ONE_HALF.intValue();
      double double0 = bigFraction0.percentageValue();
      assertEquals(100.0, double0, 0.01);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO.reduce();
      BigFraction bigFraction3 = bigFraction0.ONE.reciprocal();
      BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.add(bigInteger0);
      bigFraction3.ONE.getNumeratorAsInt();
      BigFraction bigFraction5 = bigFraction0.add(4);
      assertEquals((byte)5, bigFraction5.byteValue());
      
      BigFraction bigFraction6 = bigFraction1.multiply(bigFraction0);
      BigFraction bigFraction7 = bigFraction2.subtract(0);
      BigFraction bigFraction8 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction9 = bigFraction7.TWO.add(bigFraction8);
      assertEquals((short)2, bigFraction9.shortValue());
      
      BigInteger bigInteger1 = bigFraction6.getDenominator();
      BigFraction.getReducedFraction((-174), 421);
      BigFraction bigFraction10 = bigFraction0.divide(bigInteger1);
      bigFraction4.pow(bigInteger1);
      bigFraction7.pow(bigInteger1);
      assertFalse(bigFraction7.equals((Object)bigFraction9));
      
      BigFraction bigFraction11 = BigFraction.getReducedFraction(0, (-1));
      BigFraction bigFraction12 = bigFraction10.abs();
      bigFraction12.bigDecimalValue();
      bigFraction12.negate();
      assertSame(bigFraction12, bigFraction10);
      assertTrue(bigFraction6.equals((Object)bigFraction1));
      assertSame(bigFraction6, bigFraction11);
      
      BigFraction bigFraction13 = BigFraction.getReducedFraction(2522, (-1));
      assertFalse(bigFraction13.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9007199254740990L, 9007199254740990L);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.divide(1070);
      bigFraction1.TWO.reduce();
      bigFraction0.doubleValue();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)49;
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(1070, byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid signum value
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.shortValueExact();
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertEquals((short)10, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.abs();
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.add(196);
      BigFraction bigFraction3 = bigFraction1.THREE_FIFTHS.multiply(3482);
      BigFraction bigFraction4 = bigFraction0.TWO_FIFTHS.reduce();
      BigFraction bigFraction5 = bigFraction0.TWO_FIFTHS.negate();
      BigFraction bigFraction6 = bigFraction0.ZERO.divide(811);
      bigFraction0.ZERO.intValue();
      bigFraction4.TWO_QUARTERS.multiply(811);
      bigFraction6.TWO.hashCode();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction7 = bigFraction6.ONE_HALF.pow(bigInteger0);
      bigFraction7.TWO_QUARTERS.intValue();
      bigFraction0.percentageValue();
      bigFraction0.THREE_QUARTERS.divide(2856);
      BigFraction bigFraction8 = bigFraction6.multiply(bigFraction0);
      bigFraction6.equals(bigFraction4);
      bigFraction4.ONE_THIRD.reduce();
      bigFraction0.getNumerator();
      BigFraction bigFraction9 = bigFraction4.add(bigFraction5);
      bigFraction9.THREE_QUARTERS.reduce();
      bigFraction8.pow(bigInteger0);
      bigFraction5.intValue();
      bigFraction2.equals(bigFraction3);
      bigFraction9.getField();
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue(811);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = (-1);
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-247), (-1));
      bigFraction0.getDenominator();
      BigFraction bigFraction1 = bigFraction0.multiply((-2782));
      bigFraction1.TWO.multiply(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction1.ZERO.pow((-1853L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2552L, 681L);
      BigFraction bigFraction1 = new BigFraction(1329, 1046);
      bigFraction0.TWO.subtract(bigFraction1);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }
}
