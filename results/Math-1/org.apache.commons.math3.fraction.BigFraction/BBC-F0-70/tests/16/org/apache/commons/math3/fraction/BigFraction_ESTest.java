/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 09 19:21:53 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.floatValue();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-33);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.THREE_QUARTERS.divide(2147450880);
      bigFraction1.doubleValue();
      bigFraction1.reduce();
      bigFraction1.bigDecimalValue(3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.floatValue();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-33);
      bigFraction0.FOUR_FIFTHS.multiply(4);
      byteArray0[1] = (byte) (-33);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.doubleValue();
      bigFraction0.bigDecimalValue((-51), 3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.THREE_QUARTERS.pow((-3269));
      BigFraction bigFraction1 = bigFraction0.pow(909);
      bigFraction0.FOUR_FIFTHS.add((long) 909);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.floatValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.subtract(bigInteger0);
      bigFraction2.toString();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2226.47066700253));
      bigFraction0.MINUS_ONE.longValue();
      bigFraction0.FOUR_FIFTHS.floatValue();
      bigFraction0.bigDecimalValue(281, 4);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(6.018519401550515E-4);
      BigFraction bigFraction1 = bigFraction0.divide((-1977));
      bigFraction1.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4059.59921576992), 767);
      bigFraction0.divide((-3757L));
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.floatValue();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-33);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.TWO_THIRDS.multiply(bigFraction0);
      bigFraction0.getNumerator();
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-2277), (-2884));
      bigFraction2.FOUR_FIFTHS.add((long) (byte) (-33));
      BigFraction bigFraction3 = BigFraction.ONE_FIFTH;
      bigFraction3.floatValue();
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.ONE.pow(0L);
      bigFraction0.pow((-1L));
      bigFraction0.divide(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.floatValue();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-33);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = new BigFraction(0.0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction1.pow(bigInteger1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1506.0);
      bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.pow((long) (-77));
      bigFraction1.MINUS_ONE.bigDecimalValue(5, 5);
      bigFraction1.TWO_QUARTERS.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.subtract((-77));
      bigFraction2.ZERO.toString();
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction((double) (-77), 2132673415);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -77 to fraction (-9,223,372,036,854,775,730/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.floatValue();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-74);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction0.getNumerator();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(443, (-2277));
      bigFraction1.floatValue();
      bigFraction2.getDenominatorAsLong();
      BigFraction bigFraction3 = new BigFraction(735.299638571, (-2277));
      bigFraction1.subtract(bigFraction2);
      bigFraction0.multiply((-1867L));
      bigFraction3.ONE_THIRD.pow(735.299638571);
      bigFraction3.multiply((-1867L));
      bigFraction3.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((int) (byte) (-74), 3889);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(6.273021738252282E-4);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getNumeratorAsLong();
      bigFraction0.getField();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction0.ONE_FIFTH.equals(bigFraction1);
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.pow(847L);
      bigFraction1.multiply(bigFraction0);
      bigFraction1.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)54;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction1.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      int int0 = 55;
      int int1 = 1347;
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.pow(2147483626);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.getDenominatorAsLong();
      bigFraction0.add((-2148));
      bigFraction0.add(0);
      Random.setNextRandom((-2148));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.pow(1L);
      bigFraction0.compareTo(bigFraction1);
      bigFraction1.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5.524744954836658E-8, (-1929));
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.divide((long) (-1929));
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1367, (-1929), mockRandom0);
      BigFraction bigFraction4 = bigFraction1.multiply(bigInteger0);
      bigFraction3.percentageValue();
      bigFraction4.getNumerator();
      bigFraction3.hashCode();
      bigFraction4.floatValue();
      bigFraction1.getDenominatorAsLong();
      bigFraction0.ONE_THIRD.divide((long) 1893);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5.524744954836658E-8, (-1929));
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      bigFraction0.doubleValue();
      BigFraction bigFraction2 = bigFraction1.negate();
      try { 
        bigFraction2.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.pow(1L);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-3070));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction2.ONE_FIFTH.divide(bigInteger0);
      bigFraction3.ONE_QUARTER.getNumeratorAsInt();
      bigFraction2.pow((double) 3L);
      bigFraction0.TWO_FIFTHS.subtract(629);
      BigFraction bigFraction4 = BigFraction.getReducedFraction(629, 5);
      bigFraction4.longValue();
      BigFraction bigFraction5 = bigFraction1.TWO.add(bigInteger0);
      BigFraction bigFraction6 = bigFraction1.add(bigInteger0);
      bigFraction6.MINUS_ONE.pow((-3345));
      bigFraction4.MINUS_ONE.intValue();
      BigFraction bigFraction7 = bigFraction4.ONE_THIRD.reciprocal();
      BigFraction bigFraction8 = bigFraction4.ZERO.subtract(bigFraction3);
      BigFraction bigFraction9 = bigFraction4.subtract(bigFraction2);
      BigFraction bigFraction10 = bigFraction1.TWO.add(bigFraction8);
      bigFraction9.ONE_FIFTH.subtract(1);
      BigFraction bigFraction11 = bigFraction4.reduce();
      bigFraction1.toString();
      bigFraction11.getNumeratorAsLong();
      BigFraction bigFraction12 = bigFraction2.subtract(bigInteger0);
      BigFraction bigFraction13 = bigFraction5.reciprocal();
      bigFraction12.add(5);
      bigFraction13.negate();
      bigFraction5.bigDecimalValue();
      Random.setNextRandom(629);
      bigFraction10.subtract(2147483637);
      bigFraction7.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(3663, 3663);
      bigFraction0.doubleValue();
      bigFraction0.toString();
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction1.ONE.reduce();
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction4 = bigFraction1.add(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction5 = bigFraction2.multiply(bigInteger1);
      bigFraction5.TWO_QUARTERS.divide(bigInteger0);
      bigFraction2.ONE_QUARTER.pow(2528.289985359);
      bigFraction0.MINUS_ONE.reduce();
      BigFraction bigFraction6 = bigFraction5.FOUR_FIFTHS.add(2035);
      bigFraction3.compareTo(bigFraction4);
      bigFraction6.TWO.reciprocal();
      bigFraction2.add(580074089);
      bigFraction6.divide(4);
      // Undeclared exception!
      try { 
        bigFraction6.bigDecimalValue(3663, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1300.477, 2.3713798664443718E-8, 1385);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction0.MINUS_ONE.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(1385);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1300.477, 2.3713798664443718E-8, 1385);
      bigFraction0.floatValue();
      BigFraction bigFraction1 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction1.ZERO.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction0.doubleValue();
      bigFraction1.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5.524744954836658E-8, (-1929));
      BigFraction bigFraction1 = new BigFraction((-1929), 9223372036854775807L);
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      bigFraction0.percentageValue();
      bigFraction2.divide(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction((double) 9223372036854775807L, 523);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 9,223,372,036,854,776,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(987.748121, 987.748121, 0);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction1.doubleValue();
      BigFraction bigFraction2 = bigFraction1.subtract(4503599627370495L);
      BigFraction bigFraction3 = bigFraction2.pow(0);
      BigFraction bigFraction4 = bigFraction2.add(9193070505571053912L);
      bigFraction4.pow(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)64;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction5 = bigFraction3.multiply(bigInteger0);
      bigFraction4.compareTo(bigFraction0);
      bigFraction5.doubleValue();
      bigFraction2.hashCode();
      bigFraction2.getDenominatorAsInt();
      BigFraction bigFraction6 = bigFraction1.add(bigFraction2);
      BigFraction bigFraction7 = BigFraction.getReducedFraction(151, (-933));
      bigFraction6.divide(bigFraction7);
      bigFraction7.pow((-545L));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.ZERO.bigDecimalValue(1);
      BigFraction bigFraction1 = new BigFraction(0.0);
      BigFraction bigFraction2 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction3 = BigFraction.TWO;
      BigFraction bigFraction4 = BigFraction.getReducedFraction(236, 2147483579);
      bigFraction4.pow((long) 236);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 0;
      BigFraction.getReducedFraction(0, 0);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction2.negate();
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction2.pow(bigInteger0);
      BigFraction bigFraction4 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction5 = new BigFraction(bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.divide((-358L));
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = BigFraction.getReducedFraction(2, (-1));
      bigFraction2.percentageValue();
      BigFraction bigFraction4 = bigFraction0.abs();
      bigFraction4.getField();
      bigFraction3.divide(bigInteger0);
      Random.setNextRandom(2147483473);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5.524744954836658E-8, (-1929));
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      bigFraction1.divide((long) (-1929));
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      bigFraction2.pow(3052L);
      bigFraction2.bigDecimalValue();
      BigFraction.getReducedFraction((-1929), 2147483622);
      BigFraction bigFraction3 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction4 = BigFraction.TWO;
      BigFraction bigFraction5 = bigFraction0.multiply((-1929));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction5.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1506.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger0);
      bigFraction1.equals(bigFraction0);
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(0, mockRandom0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.getNumerator();
      // Undeclared exception!
      try { 
        bigFraction0.pow((long) (-77));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.getNumerator();
      bigFraction0.pow((long) (-1416));
      bigFraction0.bigDecimalValue();
      BigFraction.getReducedFraction((-1416), (-591));
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction0.reciprocal();
      bigFraction1.multiply((-591));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.percentageValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.getDenominatorAsInt();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1506.0);
      bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.pow((long) (-77));
      bigFraction1.TWO_QUARTERS.bigDecimalValue();
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-77), (-77));
      bigFraction2.THREE_QUARTERS.getDenominatorAsInt();
      BigFraction bigFraction3 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction4 = bigFraction1.reciprocal();
      bigFraction4.multiply((-77));
      bigFraction4.getDenominator();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5.524744954836658E-8, (-1929));
      BigFraction bigFraction1 = new BigFraction((-1408.223));
      bigFraction0.percentageValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-1929), (-1929));
      bigFraction0.percentageValue();
      BigFraction bigFraction3 = bigFraction1.abs();
      BigFraction bigFraction4 = BigFraction.ONE_QUARTER;
      bigFraction4.getField();
      bigFraction3.divide(bigInteger0);
      bigFraction2.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-5);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)86;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction0.add(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.divide((long) (byte)86);
      BigFraction bigFraction3 = bigFraction1.subtract(bigFraction2);
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      bigFraction4.add(bigFraction1);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger2 = new BigInteger(1456, (byte) (-5), mockRandom0);
      BigFraction bigFraction5 = bigFraction3.multiply(bigInteger0);
      bigFraction5.getNumeratorAsInt();
      bigFraction5.percentageValue();
      bigFraction5.getNumerator();
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(987.748121, 987.748121, 0);
      bigFraction0.ONE_QUARTER.percentageValue();
      bigFraction0.TWO_THIRDS.floatValue();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 1075);
      bigFraction0.percentageValue();
      bigFraction0.abs();
      bigFraction1.getField();
      // Undeclared exception!
      try { 
        bigFraction1.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.percentageValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.getDenominatorAsInt();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.divide(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1713), (-453));
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1506.0);
      bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.pow((long) (-77));
      bigFraction1.TWO_QUARTERS.bigDecimalValue();
      BigFraction.getReducedFraction((-77), (-77));
      BigFraction bigFraction2 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction3 = bigFraction1.reciprocal();
      bigFraction3.multiply((-77));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1506.0);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.pow((long) (-77));
      bigFraction1.TWO_QUARTERS.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.subtract((-77));
      bigFraction2.ZERO.floatValue();
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.add((-167));
      bigFraction3.ONE_QUARTER.bigDecimalValue();
      bigFraction4.TWO_QUARTERS.intValue();
      BigFraction bigFraction5 = bigFraction0.ONE_THIRD.abs();
      bigFraction5.ONE_QUARTER.getField();
      BigFraction bigFraction6 = bigFraction4.TWO_THIRDS.divide(142);
      BigFraction bigFraction7 = bigFraction0.abs();
      BigFraction bigFraction8 = bigFraction6.add(bigInteger0);
      bigFraction8.THREE_FIFTHS.pow((long) (-167));
      bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction9 = BigFraction.FOUR_FIFTHS;
      bigFraction4.multiply(bigFraction7);
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(987.748121, 987.748121, 0);
      bigFraction0.ONE_QUARTER.percentageValue();
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction1.equals(bigFraction0);
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      bigFraction2.percentageValue();
      bigFraction0.abs();
      bigFraction2.ZERO.reduce();
      bigFraction1.intValue();
      BigFraction bigFraction3 = BigFraction.ZERO;
      bigFraction0.getField();
      BigInteger bigInteger0 = BigInteger.valueOf(0);
      // Undeclared exception!
      try { 
        bigFraction2.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(37, 37);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.pow(4398046511103L);
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction1.subtract((-77));
      bigFraction0.floatValue();
      bigFraction1.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.add(392);
      bigFraction1.percentageValue();
      bigFraction2.getNumerator();
      int int0 = 2145388542;
      BigFraction.getReducedFraction(2145388542, 37);
      bigFraction3.hashCode();
      bigFraction3.floatValue();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction((double) 980, 1408);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 980 to fraction (-979/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.percentageValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(37, 1);
      bigFraction0.percentageValue();
      BigFraction bigFraction2 = bigFraction1.abs();
      bigFraction1.getField();
      bigFraction2.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1561), 37);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction1);
      bigFraction1.negate();
      BigFraction bigFraction4 = bigFraction0.add(bigFraction3);
      BigFraction bigFraction5 = BigFraction.MINUS_ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction4.pow(bigInteger1);
      BigFraction bigFraction6 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction7 = new BigFraction(5228.449);
      bigFraction7.toString();
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction4.subtract(bigInteger2);
      BigFraction bigFraction8 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction9 = new BigFraction((long) (-1561));
      bigFraction9.multiply(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1380, (-1932), mockRandom0);
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.pow((double) (-1932));
      bigFraction0.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5.524744954836658E-8, (-1929));
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.divide((long) (-1929));
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction0);
      bigFraction3.add(bigFraction1);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1380, (-1929), mockRandom0);
      BigFraction bigFraction4 = bigFraction1.multiply(bigInteger0);
      bigFraction1.getNumeratorAsInt();
      bigFraction3.percentageValue();
      bigFraction4.getNumerator();
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction5 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = new BigFraction(1);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((double) 1, (-77));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1506.0);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.pow((long) (-77));
      bigFraction1.TWO_QUARTERS.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.subtract((-77));
      bigFraction2.ZERO.floatValue();
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.add((-167));
      bigFraction4.percentageValue();
      bigFraction1.getNumerator();
      BigFraction.getReducedFraction(2518, 1300);
      bigFraction3.hashCode();
      bigFraction1.floatValue();
      bigFraction3.getDenominatorAsLong();
      BigFraction bigFraction5 = new BigFraction(518.46717194, 980);
      bigFraction4.subtract(bigFraction5);
      BigFraction bigFraction6 = bigFraction2.multiply((long) (-167));
      bigFraction6.longValue();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.7481209999999692, 0.7481209999999692, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.748 to fraction after 0 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(987.748121, 987.748121, 0);
      bigFraction0.ONE_QUARTER.percentageValue();
      bigFraction0.TWO_THIRDS.floatValue();
      bigFraction0.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction((-2002), 1010);
      bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      bigFraction1.multiply(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction2.divide((long) 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = (-693);
      BigFraction bigFraction0 = new BigFraction((-693));
      bigFraction0.THREE_FIFTHS.getField();
      bigFraction0.MINUS_ONE.percentageValue();
      bigFraction0.TWO_FIFTHS.pow(1.865532840383821E-5);
      bigFraction0.TWO.bigDecimalValue();
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.multiply((-2620));
      bigFraction1.TWO_FIFTHS.divide(68L);
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.negate();
      bigFraction2.MINUS_ONE.abs();
      int int1 = (-2541);
      bigFraction0.MINUS_ONE.pow((-2541));
      bigFraction1.MINUS_ONE.subtract(2133071006);
      BigFraction bigFraction3 = bigFraction2.THREE_FIFTHS.add(1366L);
      // Undeclared exception!
      try { 
        bigFraction3.THREE_QUARTERS.bigDecimalValue(1156, (-693));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(37, 37);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      bigFraction1.multiply(bigFraction2);
      BigFraction bigFraction3 = bigFraction0.negate();
      bigFraction1.add(bigFraction3);
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction0.pow(bigInteger0);
      BigFraction bigFraction5 = BigFraction.TWO_THIRDS;
      bigFraction3.toString();
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction4.subtract(bigInteger1);
      BigFraction bigFraction6 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction2.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = new BigFraction(1);
      BigFraction bigFraction1 = new BigFraction((double) 1);
      bigFraction1.percentageValue();
      bigFraction1.negate();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction1.TWO_THIRDS.negate();
      BigFraction bigFraction3 = bigFraction0.ONE_HALF.add(bigFraction1);
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction2.subtract(bigInteger0);
      bigFraction2.compareTo(bigFraction4);
      BigFraction bigFraction5 = BigFraction.TWO;
      BigFraction bigFraction6 = BigFraction.TWO_THIRDS;
      bigFraction1.divide(bigFraction6);
      bigFraction3.getDenominatorAsLong();
      bigFraction0.bigDecimalValue(1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(987.748121, 987.748121, 0);
      bigFraction0.ONE_QUARTER.percentageValue();
      bigFraction0.TWO_THIRDS.floatValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(0, 0);
      bigFraction2.compareTo(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction2.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1506.0);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.pow((long) (-77));
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.subtract((-77));
      bigFraction1.floatValue();
      BigFraction bigFraction3 = bigFraction1.pow(bigInteger0);
      BigFraction bigFraction4 = BigFraction.ZERO;
      bigFraction1.percentageValue();
      bigFraction4.getNumerator();
      BigFraction.getReducedFraction((-2766), 2518);
      bigFraction3.hashCode();
      bigFraction0.floatValue();
      bigFraction3.getDenominatorAsLong();
      BigFraction bigFraction5 = new BigFraction(184.137122328156, (-2119951805));
      bigFraction2.subtract(bigFraction4);
      bigFraction3.multiply(0L);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0, 1501.009217, 47);
      BigFraction bigFraction1 = new BigFraction((-2145260579), (-77));
      bigFraction0.equals(bigFraction1);
      bigFraction0.percentageValue();
      bigFraction0.abs();
      bigFraction1.intValue();
      bigFraction1.getField();
      BigInteger.valueOf(27860527);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1713), (-453));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.divide((-1));
      bigFraction2.TWO_QUARTERS.add(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.reciprocal();
      bigFraction3.TWO.multiply(bigInteger0);
      bigFraction3.add((long) (-1));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = BigFraction.getReducedFraction(0, 5753);
      BigFraction bigFraction3 = bigFraction0.ONE_THIRD.divide(bigFraction1);
      BigFraction bigFraction4 = bigFraction2.reduce();
      bigFraction0.MINUS_ONE.multiply((-515L));
      bigFraction3.negate();
      bigFraction1.add(bigFraction0);
      BigFraction bigFraction5 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction5.pow(bigInteger0);
      BigFraction bigFraction6 = BigFraction.TWO_THIRDS;
      bigFraction4.toString();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction0.subtract(bigInteger1);
      BigFraction bigFraction7 = BigFraction.FOUR_FIFTHS;
      bigFraction7.TWO_QUARTERS.add(282);
      BigFraction bigFraction8 = BigFraction.ONE;
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5.524744954836658E-8, (-1929));
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.divide((long) (-1929));
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1380, (-1929), mockRandom0);
      BigFraction bigFraction4 = bigFraction1.multiply(bigInteger0);
      bigFraction1.getNumeratorAsInt();
      bigFraction3.percentageValue();
      bigFraction4.getNumerator();
      BigFraction.getReducedFraction(0, 1893);
      bigFraction3.hashCode();
      bigFraction4.floatValue();
      bigFraction1.getDenominatorAsLong();
      bigFraction4.subtract(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = BigFraction.getReducedFraction(0, 5753);
      BigFraction bigFraction3 = bigFraction0.ONE_THIRD.divide(bigFraction1);
      bigFraction3.ONE.reduce();
      bigFraction0.MINUS_ONE.multiply((-515L));
      BigFraction bigFraction4 = bigFraction0.multiply(3409L);
      BigFraction bigFraction5 = bigFraction4.multiply(4208363204685324176L);
      bigFraction4.THREE_FIFTHS.reciprocal();
      bigFraction2.getDenominatorAsLong();
      BigFraction bigFraction6 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction6.multiply(bigInteger0);
      bigFraction0.getNumeratorAsInt();
      bigFraction5.percentageValue();
      bigFraction0.getNumerator();
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((-87), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1774), 825);
      bigFraction0.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(825);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(37, 37);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction1.percentageValue();
      bigFraction0.ZERO.equals(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.TWO_THIRDS.add(bigInteger0);
      bigFraction0.divide(bigInteger0);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(33.333333333333336, (-3841.901), 1385);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 33.333 to fraction (4,691,249,611,844,267/140,737,488,355,328)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      int int0 = 2145671425;
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(2145671425);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2392L), (-2392L));
      BigFraction bigFraction1 = BigFraction.getReducedFraction(2079, 2079);
      bigFraction1.MINUS_ONE.equals(bigFraction0);
      bigFraction0.TWO_FIFTHS.percentageValue();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-49);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.add(bigInteger0);
      BigFraction bigFraction2 = BigFraction.ONE_THIRD;
      BigFraction bigFraction3 = bigFraction2.add(bigInteger0);
      bigFraction3.add((long) (byte)47);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((int) (byte)47);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)64;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction1.compareTo(bigFraction0);
      bigFraction0.doubleValue();
      bigFraction0.hashCode();
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction2.add(bigFraction0);
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((byte)64, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.TWO_THIRDS.percentageValue();
      bigFraction0.ONE_HALF.floatValue();
      bigFraction0.MINUS_ONE.pow((double) (-846));
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = bigFraction0.add((-225));
      BigFraction bigFraction2 = BigFraction.getReducedFraction(258, (-3157));
      bigFraction0.THREE_QUARTERS.getDenominatorAsLong();
      bigFraction1.percentageValue();
      bigFraction0.floatValue();
      bigFraction1.getDenominatorAsInt();
      bigFraction1.bigDecimalValue();
      BigFraction bigFraction3 = BigFraction.TWO;
      bigFraction2.divide(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      MockRandom mockRandom0 = new MockRandom();
      bigFraction0.pow((double) 49);
      bigFraction0.bigDecimalValue();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)47;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      bigFraction1.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.add((long) (byte)35);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(2147305418);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1506.0);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.pow((long) (-77));
      bigFraction1.TWO_QUARTERS.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.subtract((-77));
      MockRandom mockRandom0 = new MockRandom((-77));
      BigInteger bigInteger1 = new BigInteger(3, 3, mockRandom0);
      BigFraction bigFraction3 = bigFraction2.multiply(bigInteger0);
      bigFraction0.getNumeratorAsInt();
      bigFraction3.percentageValue();
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      bigFraction4.getNumerator();
      BigFraction bigFraction5 = BigFraction.getReducedFraction(2147483473, 2144);
      bigFraction3.hashCode();
      bigFraction1.floatValue();
      bigFraction5.getDenominatorAsLong();
      bigFraction2.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction1.TWO_THIRDS.negate();
      bigFraction0.ONE_HALF.add(bigFraction1);
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.pow(bigInteger0);
      BigFraction bigFraction4 = BigFraction.TWO_THIRDS;
      bigFraction4.toString();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction2.subtract(bigInteger0);
      BigFraction bigFraction5 = BigFraction.FOUR_FIFTHS;
      bigFraction2.multiply(bigFraction5);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = (-1);
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), (-1));
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(375, 49, mockRandom0);
      BigFraction bigFraction1 = bigFraction0.ONE.multiply(bigInteger0);
      bigFraction0.FOUR_FIFTHS.getNumeratorAsInt();
      bigFraction0.percentageValue();
      bigFraction0.getNumerator();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(4, 1893);
      bigFraction2.TWO_FIFTHS.hashCode();
      bigFraction2.floatValue();
      bigFraction0.getDenominatorAsLong();
      bigFraction2.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = (-1929);
      BigFraction bigFraction0 = new BigFraction(5.524744954836658E-8, (-1929));
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1713), (-453));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.multiply(bigInteger0);
      bigFraction0.divide((-1));
      bigFraction1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      long long0 = 0L;
      BigFraction bigFraction1 = new BigFraction(0L);
      bigFraction0.ONE_THIRD.subtract(bigFraction1);
      bigFraction0.TWO_QUARTERS.percentageValue();
      bigFraction0.MINUS_ONE.getNumeratorAsInt();
      BigFraction bigFraction2 = BigFraction.ONE_QUARTER;
      bigFraction0.THREE_FIFTHS.negate();
      BigFraction bigFraction3 = bigFraction0.THREE_FIFTHS.add(bigFraction2);
      BigFraction bigFraction4 = bigFraction0.multiply((long) (-1));
      bigFraction4.ONE.multiply((long) (-1));
      bigFraction2.FOUR_FIFTHS.getDenominatorAsInt();
      BigFraction bigFraction5 = bigFraction0.MINUS_ONE.negate();
      bigFraction5.FOUR_FIFTHS.bigDecimalValue();
      bigFraction0.intValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction6 = bigFraction3.subtract(bigInteger0);
      bigFraction6.ONE_FIFTH.subtract(bigInteger0);
      int int0 = 1;
      bigFraction3.ONE_FIFTH.subtract(bigFraction5);
      BigFraction bigFraction7 = bigFraction0.add(1);
      bigFraction0.FOUR_FIFTHS.getField();
      // Undeclared exception!
      try { 
        bigFraction7.ONE_THIRD.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2392L), (-2392L));
      BigFraction bigFraction1 = BigFraction.getReducedFraction(2079, 2079);
      bigFraction1.MINUS_ONE.equals(bigFraction0);
      bigFraction0.TWO_FIFTHS.percentageValue();
      BigFraction bigFraction2 = bigFraction0.abs();
      bigFraction2.intValue();
      bigFraction0.getField();
      BigInteger bigInteger0 = BigInteger.valueOf(1);
      bigFraction1.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 37;
      BigFraction bigFraction0 = new BigFraction(37, 37);
      BigFraction bigFraction1 = new BigFraction((double) 37);
      bigFraction1.percentageValue();
      bigFraction0.TWO_FIFTHS.negate();
      bigFraction0.ZERO.equals(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.TWO_THIRDS.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      bigFraction2.TWO_FIFTHS.multiply(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      bigFraction1.TWO.longValue();
      bigFraction1.TWO_QUARTERS.floatValue();
      bigFraction1.negate();
      BigFraction bigFraction2 = bigFraction0.subtract(791);
      bigFraction1.add(362);
      long long0 = 40L;
      bigFraction0.THREE_QUARTERS.multiply(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction2.ONE_FIFTH.bigDecimalValue(52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction1.TWO_THIRDS.negate();
      bigFraction0.ONE_HALF.add(bigFraction1);
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction2.subtract(bigInteger0);
      bigFraction2.compareTo(bigFraction3);
      bigFraction3.TWO_QUARTERS.reciprocal();
      bigFraction2.subtract((long) 1);
      bigFraction3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = BigFraction.getReducedFraction(0, 5753);
      BigFraction bigFraction3 = bigFraction0.ONE_THIRD.divide(bigFraction1);
      bigFraction3.ONE.reduce();
      bigFraction0.MINUS_ONE.multiply((-515L));
      BigFraction bigFraction4 = bigFraction0.multiply(3409L);
      BigFraction bigFraction5 = bigFraction4.multiply(4208363204685324176L);
      bigFraction4.THREE_FIFTHS.reciprocal();
      byte[] byteArray0 = new byte[1];
      bigFraction2.getDenominatorAsLong();
      byteArray0[0] = (byte)117;
      BigInteger bigInteger0 = new BigInteger(1, byteArray0);
      BigFraction bigFraction6 = bigFraction0.ONE_HALF.add(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction7 = bigFraction0.multiply(bigInteger1);
      bigFraction7.TWO_QUARTERS.reciprocal();
      bigFraction5.TWO.pow(bigInteger1);
      bigFraction7.getDenominator();
      bigFraction0.TWO.subtract(bigFraction4);
      // Undeclared exception!
      try { 
        bigFraction6.bigDecimalValue(440);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.ONE_HALF.equals(bigFraction1);
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction2.TWO.bigDecimalValue((-1784));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1543.9288);
      BigFraction bigFraction1 = new BigFraction(1543.9288, 0.0, 237);
      bigFraction1.THREE_QUARTERS.divide(1075);
      BigFraction bigFraction2 = bigFraction1.ONE.add(2304);
      BigFraction bigFraction3 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.pow((-1685L));
      BigFraction bigFraction5 = bigFraction2.multiply(2459);
      bigFraction2.THREE_QUARTERS.floatValue();
      bigFraction2.multiply((long) 2304);
      bigFraction4.equals(bigFraction5);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2451.2027, 2451.2027, (-1));
      bigFraction0.FOUR_FIFTHS.longValue();
      BigFraction bigFraction1 = bigFraction0.TWO.multiply((-1));
      bigFraction0.ONE_THIRD.getField();
      bigFraction0.getNumeratorAsLong();
      bigFraction0.ONE_THIRD.getDenominatorAsLong();
      bigFraction0.floatValue();
      bigFraction0.subtract(984);
      bigFraction0.reciprocal();
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      BigFraction bigFraction3 = bigFraction2.add((-1));
      bigFraction3.ZERO.subtract(0L);
      BigFraction.getReducedFraction(984, (-3812));
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(984, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = 864L;
      BigFraction bigFraction0 = new BigFraction(864L, 864L);
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = (-1);
      int int1 = 1075;
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), 1075);
      bigFraction0.TWO_FIFTHS.hashCode();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.MINUS_ONE.add(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      bigFraction0.MINUS_ONE.percentageValue();
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.multiply(bigInteger0);
      bigFraction2.THREE_FIFTHS.reduce();
      bigFraction2.ONE_FIFTH.multiply(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction1.ONE_QUARTER.bigDecimalValue((-1), (-774));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(319, 319);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.reciprocal();
      bigFraction1.THREE_FIFTHS.negate();
      bigFraction0.reciprocal();
      bigFraction1.equals(bigFraction0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)51;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      long long0 = (-227L);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.subtract((-227L));
      // Undeclared exception!
      try { 
        bigFraction1.TWO_THIRDS.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(432L, 432L);
      Object object0 = new Object();
      bigFraction0.TWO_FIFTHS.equals(object0);
      bigFraction0.THREE_QUARTERS.longValue();
      bigFraction0.ONE_QUARTER.intValue();
      bigFraction0.toString();
      bigFraction0.getNumeratorAsLong();
      bigFraction0.FOUR_FIFTHS.getNumeratorAsInt();
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.multiply(bigFraction1);
      bigFraction2.ONE.divide((-1324L));
      bigFraction0.ONE_QUARTER.getDenominatorAsLong();
      bigFraction0.bigDecimalValue();
      bigFraction0.getField();
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
      bigFraction3.ONE_HALF.doubleValue();
      BigFraction bigFraction4 = bigFraction3.THREE_QUARTERS.subtract((-2672L));
      BigFraction bigFraction5 = bigFraction4.ONE.negate();
      BigFraction bigFraction6 = bigFraction3.FOUR_FIFTHS.add(bigFraction0);
      BigFraction bigFraction7 = bigFraction6.ONE_QUARTER.add(bigFraction5);
      bigFraction6.ONE.getNumeratorAsLong();
      bigFraction0.compareTo(bigFraction3);
      bigFraction0.bigDecimalValue();
      bigFraction0.reduce();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.subtract(bigInteger0);
      bigFraction4.hashCode();
      BigFraction bigFraction8 = bigFraction2.reduce();
      bigFraction1.add(bigFraction8);
      bigFraction7.equals("");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 1871;
      BigFraction bigFraction0 = new BigFraction(1871);
      BigFraction bigFraction1 = bigFraction0.multiply((long) 1871);
      bigFraction1.TWO_THIRDS.negate();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = BigFraction.getReducedFraction(760, 760);
      // Undeclared exception!
      try { 
        bigFraction2.THREE_QUARTERS.bigDecimalValue(1023, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.ONE_THIRD.percentageValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.TWO_THIRDS.subtract(2407L);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.FOUR_FIFTHS.bigDecimalValue();
      bigFraction0.intValue();
      int int0 = 1;
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(987.748121, 987.748121, 0);
      bigFraction0.ONE_QUARTER.percentageValue();
      bigFraction0.TWO_THIRDS.floatValue();
      bigFraction0.getDenominatorAsInt();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.divide(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4095L);
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1300.477, 2.3713798664443718E-8, 1385);
      bigFraction0.equals("Oi}t7iv");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1358.40100603);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)115;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4163L));
      bigFraction0.ONE_FIFTH.multiply((-1048L));
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.negate();
      bigFraction0.doubleValue();
      bigFraction0.FOUR_FIFTHS.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction1.divide((-3982));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction1.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.multiply(bigFraction2);
      bigFraction4.ONE_FIFTH.abs();
      bigFraction3.divide((-3982));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.getNumeratorAsInt();
      BigFraction.getReducedFraction(3, 1);
      bigFraction0.subtract(1);
      int int0 = 3951;
      // Undeclared exception!
      try { 
        bigFraction0.TWO.bigDecimalValue(3, 3951);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1506.0);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.pow((long) (-77));
      bigFraction1.TWO_QUARTERS.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.subtract((-77));
      bigFraction2.ZERO.floatValue();
      assertEquals((short)1583, bigFraction2.shortValue());
      
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.add((-167));
      bigFraction3.ONE_QUARTER.bigDecimalValue();
      bigFraction4.TWO_QUARTERS.intValue();
      BigFraction bigFraction5 = bigFraction0.ONE_THIRD.abs();
      bigFraction5.ONE_QUARTER.getField();
      BigFraction bigFraction6 = bigFraction4.TWO_THIRDS.divide(142);
      BigFraction bigFraction7 = bigFraction0.abs();
      BigFraction bigFraction8 = bigFraction6.add(bigInteger0);
      bigFraction8.THREE_FIFTHS.pow((long) (-167));
      BigFraction bigFraction9 = bigFraction6.subtract(0);
      BigFraction bigFraction10 = bigFraction9.TWO_FIFTHS.divide(bigFraction1);
      assertTrue(bigFraction6.equals((Object)bigFraction9));
      assertEquals((byte)0, bigFraction10.byteValue());
      
      BigFraction bigFraction11 = bigFraction0.divide(453);
      assertEquals((byte)3, bigFraction11.byteValue());
      
      float float0 = bigFraction4.floatValue();
      assertEquals((-166.5F), float0, 0.01F);
      assertEquals((short)1506, bigInteger0.shortValue());
      assertSame(bigFraction0, bigFraction7);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.getNumeratorAsLong();
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      double double0 = bigFraction0.TWO_THIRDS.percentageValue();
      assertEquals(66.66666666666667, double0, 0.01);
      
      float float0 = bigFraction0.ONE_HALF.floatValue();
      assertEquals(0.5F, float0, 0.01F);
      
      double double1 = bigFraction0.MINUS_ONE.pow((double) (-846));
      assertEquals(1.0, double1, 0.01);
      
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.divide((-846));
      bigFraction0.doubleValue();
      BigFraction bigFraction2 = bigFraction1.add((-225));
      BigFraction bigFraction3 = BigFraction.getReducedFraction(258, (-3157));
      bigFraction1.THREE_QUARTERS.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction0.reciprocal();
      bigFraction1.doubleValue();
      BigFraction bigFraction5 = bigFraction0.subtract((long) (-846));
      bigFraction0.pow((-846));
      bigFraction4.MINUS_ONE.add((long) (-2779));
      BigFraction bigFraction6 = bigFraction4.pow((-2779));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigFraction6.TWO_THIRDS.multiply(bigInteger1);
      bigFraction6.ONE_QUARTER.compareTo(bigFraction3);
      bigFraction0.doubleValue();
      bigFraction0.hashCode();
      bigFraction5.getDenominatorAsInt();
      BigFraction bigFraction7 = bigFraction2.add(bigFraction5);
      assertEquals((short)630, bigFraction7.shortValue());
      
      BigFraction bigFraction8 = BigFraction.getReducedFraction((-3157), (-1298));
      BigFraction bigFraction9 = bigFraction8.divide(bigFraction1);
      assertEquals((byte) (-28), bigFraction9.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction7));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.hashCode();
      bigFraction0.getNumeratorAsLong();
      bigFraction0.getNumerator();
      long long0 = 0L;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((-1L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1081.899756);
      bigFraction0.ONE_THIRD.hashCode();
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0, 1501.009217, 47);
      BigFraction bigFraction1 = bigFraction0.subtract(347);
      assertEquals((short) (-347), bigFraction1.shortValue());
      
      int int0 = bigFraction0.getDenominatorAsInt();
      int int1 = bigFraction0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = (-1973);
      BigFraction bigFraction0 = new BigFraction((-1878.96), (-1973));
      bigFraction0.intValue();
      BigFraction bigFraction1 = bigFraction0.ONE.subtract((long) 869);
      bigFraction1.THREE_FIFTHS.hashCode();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(869, (-1973));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction1.subtract(1);
      BigFraction bigFraction3 = bigFraction0.ONE.divide(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.TWO.multiply(295L);
      BigFraction bigFraction5 = bigFraction4.ONE_QUARTER.divide((long) 1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction5.MINUS_ONE.multiply(bigInteger0);
      bigFraction0.percentageValue();
      BigFraction bigFraction6 = bigFraction4.add(bigFraction5);
      BigFraction bigFraction7 = bigFraction6.pow(1112);
      bigFraction2.longValue();
      bigFraction1.TWO.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction3.divide(bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction7.bigDecimalValue(1112);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.divide(4405);
      BigFraction bigFraction2 = bigFraction0.subtract(2333);
      bigFraction1.ONE_QUARTER.doubleValue();
      bigFraction2.getNumerator();
      bigFraction2.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction0.ZERO.subtract(bigFraction2);
      BigFraction bigFraction4 = bigFraction3.TWO.divide((-1052L));
      // Undeclared exception!
      try { 
        bigFraction4.ZERO.bigDecimalValue((-1), 2528);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      int int0 = 3471;
      BigFraction bigFraction1 = bigFraction0.divide(3471);
      BigFraction bigFraction2 = bigFraction0.multiply((-1));
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.subtract(3471);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction3.ONE_FIFTH.subtract(bigInteger0);
      bigFraction1.percentageValue();
      bigFraction1.hashCode();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((-4680), mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }
}
