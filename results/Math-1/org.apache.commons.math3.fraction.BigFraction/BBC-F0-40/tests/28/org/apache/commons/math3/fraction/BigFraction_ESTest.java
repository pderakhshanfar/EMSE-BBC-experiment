/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 12:57:58 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction2 = bigFraction1.divide((-2783));
      bigFraction2.getDenominator();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147482102, 2147482102, 2147482102);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction1.ONE_FIFTH.bigDecimalValue(2147482102, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147482080, 2147482080, 2147482080);
      BigFraction bigFraction1 = new BigFraction(2147482080, 2147482080, 2147482080);
      // Undeclared exception!
      try { 
        bigFraction1.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.floatValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.multiply(bigInteger0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(3202, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.1068990230560303);
      BigFraction bigFraction1 = bigFraction0.pow((-47L));
      bigFraction1.floatValue();
      BigFraction.getReducedFraction((-3432), (-3432));
      Random.setNextRandom((-2576));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(2385L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.divide(bigInteger0);
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      bigFraction1.getNumeratorAsInt();
      BigFraction bigFraction2 = new BigFraction(0.0, 3, 3);
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-76);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction2.pow(bigInteger1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.pow((long) (-983));
      bigFraction0.floatValue();
      BigInteger bigInteger0 = BigInteger.valueOf((-1310L));
      bigFraction1.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow((long) (-980));
      bigFraction1.percentageValue();
      bigFraction1.THREE_QUARTERS.toString();
      bigFraction1.floatValue();
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(Float.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert infinite value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.ONE_FIFTH.longValue();
      // Undeclared exception!
      try { 
        bigFraction0.TWO.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(215.0, 215.0, (-1466));
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.multiply(bigFraction0);
      bigFraction1.MINUS_ONE.compareTo(bigFraction0);
      bigFraction0.ONE_HALF.compareTo(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.signum();
      BigFraction bigFraction3 = bigFraction0.subtract(bigInteger0);
      bigFraction3.bigDecimalValue();
      bigFraction0.reduce();
      // Undeclared exception!
      try { 
        bigFraction2.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction0.equals(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.pow((long) (-980));
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction1.percentageValue();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-89);
      byte byte0 = (byte) (-83);
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(100, 100);
      bigFraction1.getNumeratorAsLong();
      BigFraction bigFraction2 = new BigFraction((double) 2146427335);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-980L));
      int int0 = 2139192205;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.pow(2139192205);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = null;
      try { 
        bigFraction0.MINUS_ONE.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction1.pow(bigInteger1);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = BigFraction.ONE_FIFTH;
      bigFraction3.subtract(bigFraction2);
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction(1.7976931348623157E308, 1.5902118682861328, 769452849);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow((-1334L));
      bigFraction0.TWO_QUARTERS.equals(bigFraction1);
      BigFraction bigFraction2 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.pow(1L);
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-980), (-980));
      bigFraction4.doubleValue();
      bigFraction1.doubleValue();
      Random.setNextRandom(352);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.pow((double) (-7));
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction0.FOUR_FIFTHS.add((-1389L));
      bigFraction0.pow(bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction0.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow((-1334L));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.percentageValue();
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction2.subtract(bigFraction1);
      BigFraction bigFraction3 = new BigFraction(0.0);
      bigFraction3.getDenominatorAsLong();
      bigFraction2.subtract((-980));
      bigFraction3.longValue();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction0.pow((double) (-1334L));
      bigFraction1.divide(bigFraction0);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert NaN value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.pow((-1334L));
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigFraction bigFraction2 = bigFraction0.add(4503599627370496L);
      bigFraction2.reciprocal();
      BigFraction bigFraction3 = BigFraction.ONE_QUARTER;
      bigFraction3.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction1.pow((-805L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.pow((long) 3054);
      bigFraction1.pow(2342.9);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.divide(bigFraction2);
      bigFraction2.getDenominatorAsInt();
      bigFraction0.add(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.hashCode();
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.pow((-1.0));
      BigFraction bigFraction2 = null;
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      int int0 = 65;
      BigFraction bigFraction1 = bigFraction0.pow((-1334L));
      BigFraction bigFraction2 = BigFraction.ZERO;
      bigFraction2.percentageValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction3.divide((long) (-980));
      bigFraction1.floatValue();
      BigFraction bigFraction4 = BigFraction.TWO_QUARTERS;
      bigFraction4.getNumeratorAsLong();
      bigFraction1.getField();
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(406);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.pow((long) 3054);
      bigFraction0.percentageValue();
      BigFraction bigFraction2 = bigFraction1.negate();
      BigFraction bigFraction3 = bigFraction1.reciprocal();
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction3.pow(bigInteger0);
      bigFraction4.subtract(bigFraction2);
      bigFraction2.subtract(bigFraction4);
      bigFraction0.getDenominatorAsInt();
      bigFraction0.subtract(3054);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.divide((long) (-980));
      bigFraction0.TWO.bigDecimalValue();
      bigFraction0.equals(bigFraction0);
      bigFraction1.TWO_QUARTERS.add(6);
      BigFraction bigFraction2 = bigFraction0.add(65);
      bigFraction2.THREE_FIFTHS.pow((long) 65);
      BigFraction bigFraction3 = bigFraction0.ONE_QUARTER.reduce();
      bigFraction3.MINUS_ONE.intValue();
      BigFraction bigFraction4 = BigFraction.ONE_QUARTER;
      bigFraction1.multiply(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-274.6196));
      BigDecimal bigDecimal0 = new BigDecimal((-274.6196));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = BigFraction.ZERO;
      bigFraction1.subtract(bigFraction2);
      // Undeclared exception!
      try { 
        bigFraction2.pow((-499));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.negate();
      BigFraction bigFraction3 = bigFraction1.subtract(bigFraction0);
      bigFraction0.pow(550);
      BigFraction bigFraction4 = bigFraction2.divide(bigFraction3);
      BigFraction bigFraction5 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction6 = new BigFraction((long) 550);
      bigFraction6.toString();
      bigFraction6.bigDecimalValue();
      bigFraction4.add((long) 550);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-274.6196));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.pow((long) 3054);
      bigFraction0.negate();
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction0.pow(3054);
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction2.subtract(3054);
      bigFraction1.add(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = new BigFraction(1, 1);
      bigFraction0.THREE_FIFTHS.doubleValue();
      BigFraction bigFraction1 = bigFraction0.multiply(2916L);
      bigFraction1.ONE_HALF.pow((long) 1);
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-274.6196));
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom();
      bigFraction0.floatValue();
      BigFraction bigFraction1 = bigFraction0.multiply(2316L);
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      bigFraction2.getDenominatorAsLong();
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction1.getDenominator();
      bigFraction2.multiply(5L);
      bigFraction2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4352.2116), (-1));
      BigFraction bigFraction1 = bigFraction0.add((long) (-1));
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.multiply((-9223372036854775808L));
      BigFraction bigFraction3 = bigFraction2.ONE.negate();
      BigFraction bigFraction4 = bigFraction0.THREE_QUARTERS.reciprocal();
      BigFraction bigFraction5 = BigFraction.TWO_THIRDS;
      bigFraction4.THREE_QUARTERS.multiply(bigFraction5);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.multiply(bigInteger0);
      bigFraction1.negate();
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction6 = BigFraction.TWO_FIFTHS;
      bigFraction1.ONE_QUARTER.hashCode();
      bigFraction2.longValue();
      bigFraction2.pow((double) 1);
      bigFraction1.bigDecimalValue();
      bigFraction2.equals(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.hashCode();
      BigFraction bigFraction1 = bigFraction0.divide(3408);
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction3 = BigFraction.ONE_FIFTH;
      bigFraction0.getNumeratorAsInt();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction1.THREE_QUARTERS.add(bigFraction2);
      BigFraction bigFraction4 = bigFraction1.multiply(bigInteger1);
      BigFraction bigFraction5 = bigFraction3.negate();
      bigFraction2.getDenominatorAsLong();
      BigFraction bigFraction6 = BigFraction.TWO_FIFTHS;
      bigFraction4.longValue();
      bigFraction5.add(1);
      BigFraction bigFraction7 = BigFraction.ONE_HALF;
      bigFraction7.longValue();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.hashCode();
      bigFraction0.divide(3408);
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.add(bigInteger0);
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction0.getNumeratorAsInt();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.ONE;
      bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.divide(3408);
      BigFraction bigFraction3 = bigFraction2.multiply((long) 0);
      bigFraction3.doubleValue();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.hashCode();
      BigFraction bigFraction1 = bigFraction0.divide(3408);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction3 = BigFraction.ONE_FIFTH;
      bigFraction0.getNumeratorAsInt();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction1.THREE_QUARTERS.add(bigFraction2);
      BigFraction bigFraction5 = bigFraction1.multiply(bigInteger1);
      bigFraction3.negate();
      bigFraction2.getDenominatorAsLong();
      BigFraction bigFraction6 = BigFraction.TWO_FIFTHS;
      bigFraction5.longValue();
      bigFraction4.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.hashCode();
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction1.divide(3408);
      bigFraction1.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.add(bigInteger0);
      bigFraction2.reduce();
      bigFraction0.getNumeratorAsInt();
      bigFraction2.subtract(543162368L);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction1.divide((long) (-980));
      bigFraction1.TWO.bigDecimalValue();
      bigFraction0.equals(bigFraction1);
      bigFraction2.TWO_QUARTERS.add(6);
      bigFraction1.add(65);
      BigFraction bigFraction3 = bigFraction1.ONE_QUARTER.reduce();
      bigFraction3.MINUS_ONE.intValue();
      BigFraction bigFraction4 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction5 = new BigFraction(65);
      bigFraction2.multiply(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 3;
      BigFraction bigFraction0 = new BigFraction(3, (-1391));
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.reduce();
      bigFraction1.multiply((long) (-1391));
      bigFraction1.negate();
      bigFraction0.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4352.2116), (-1));
      BigFraction bigFraction1 = bigFraction0.add((long) (-1));
      long long0 = 2350L;
      BigFraction bigFraction2 = new BigFraction(2901L, 2350L);
      bigFraction2.divide(2350L);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.divide(bigInteger0);
      bigFraction2.floatValue();
      bigFraction1.getField();
      int int0 = 906;
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, 1);
      BigFraction bigFraction1 = bigFraction0.TWO.divide((long) 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.percentageValue();
      bigFraction1.multiply(4503599627370495L);
      bigFraction1.reciprocal();
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction2 = new BigFraction(518.0);
      bigFraction2.getDenominatorAsLong();
      bigFraction1.add(1);
      bigFraction0.longValue();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      bigFraction1.MINUS_ONE.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.subtract(5);
      bigFraction0.ONE_QUARTER.toString();
      bigFraction1.intValue();
      bigFraction1.ONE_QUARTER.hashCode();
      BigFraction bigFraction3 = bigFraction1.ONE_QUARTER.pow(5);
      bigFraction1.getDenominatorAsInt();
      bigFraction3.bigDecimalValue(0);
      bigFraction1.add((-2818L));
      bigFraction2.bigDecimalValue(0);
      bigFraction0.divide(bigFraction2);
      BigFraction bigFraction4 = BigFraction.TWO;
      bigFraction4.bigDecimalValue();
      BigFraction.getReducedFraction(5, 550);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3, (-1391));
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.reduce();
      bigFraction1.TWO_FIFTHS.multiply(bigFraction0);
      BigFraction bigFraction2 = bigFraction0.add((-632));
      bigFraction2.TWO_FIFTHS.getDenominatorAsInt();
      bigFraction1.intValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction4 = bigFraction0.divide((-1391));
      bigFraction0.multiply((long) (-632));
      bigFraction2.doubleValue();
      bigFraction4.getDenominator();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      bigFraction1.TWO.getNumeratorAsInt();
      bigFraction0.ONE.compareTo(bigFraction1);
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction3 = bigFraction2.add(381);
      BigFraction bigFraction4 = bigFraction3.TWO_FIFTHS.pow((-1718L));
      bigFraction4.ONE_FIFTH.negate();
      bigFraction2.FOUR_FIFTHS.hashCode();
      bigFraction1.ZERO.pow(3);
      bigFraction2.THREE_FIFTHS.abs();
      BigFraction bigFraction5 = bigFraction0.divide(bigFraction2);
      bigFraction5.ONE_HALF.getNumeratorAsLong();
      BigFraction bigFraction6 = bigFraction2.divide(1);
      bigFraction6.TWO_THIRDS.getDenominatorAsInt();
      bigFraction6.TWO.compareTo(bigFraction0);
      bigFraction1.negate();
      bigFraction6.THREE_FIFTHS.add((-165321L));
      bigFraction3.bigDecimalValue();
      BigFraction bigFraction7 = bigFraction2.multiply((-1745L));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction7.THREE_QUARTERS.subtract(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction7.TWO_FIFTHS.bigDecimalValue((-2594));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(591787004, 591787004);
      bigFraction0.TWO_THIRDS.getField();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.divide(949L);
      BigFraction bigFraction4 = bigFraction3.FOUR_FIFTHS.pow(bigInteger0);
      bigFraction4.MINUS_ONE.bigDecimalValue(100, 1);
      bigFraction3.THREE_FIFTHS.subtract(2938L);
      bigFraction1.FOUR_FIFTHS.floatValue();
      bigFraction1.getField();
      BigFraction bigFraction5 = bigFraction0.subtract(bigInteger0);
      bigFraction0.bigDecimalValue();
      bigFraction3.TWO.doubleValue();
      BigFraction bigFraction6 = bigFraction5.multiply(9223372036854775807L);
      bigFraction6.ONE.reciprocal();
      bigFraction3.getDenominatorAsLong();
      bigFraction3.bigDecimalValue(1, 1);
      BigFraction bigFraction7 = bigFraction0.add(bigFraction3);
      bigFraction7.ONE.toString();
      BigFraction bigFraction8 = new BigFraction((-5.0551842723970724E-8));
      bigFraction0.ONE_QUARTER.compareTo(bigFraction8);
      bigFraction3.getDenominatorAsInt();
      bigFraction2.multiply(bigFraction0);
      bigFraction7.divide(11534128);
      bigFraction0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.TWO_THIRDS.getNumeratorAsLong();
      bigFraction0.TWO_FIFTHS.hashCode();
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction1.add(1);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1, (-1646));
      bigFraction1.ONE_THIRD.multiply(2564);
      BigFraction bigFraction4 = bigFraction3.reduce();
      bigFraction0.intValue();
      BigFraction bigFraction5 = bigFraction0.add(2674L);
      bigFraction4.add(2674L);
      bigFraction1.multiply((-9223372036854775808L));
      bigFraction2.percentageValue();
      BigFraction bigFraction6 = bigFraction1.abs();
      bigFraction6.add(bigFraction1);
      bigFraction6.getField();
      bigFraction5.percentageValue();
      bigFraction4.subtract(bigFraction0);
      bigFraction1.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction4.add(bigInteger0);
      bigFraction1.getNumerator();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.hashCode();
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction1.divide(3408);
      bigFraction1.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)14;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction4 = bigFraction3.subtract(bigInteger0);
      BigFraction.getReducedFraction(0, 1318);
      bigFraction0.getDenominatorAsLong();
      bigFraction2.getField();
      bigFraction4.getNumeratorAsLong();
      bigFraction2.pow((double) (byte)14);
      BigFraction.getReducedFraction((byte)14, 5);
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction((double) 5, (-553));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 5 to fraction (9,223,372,036,854,775,804/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-274.6196));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-43);
      bigFraction0.pow((long) 3054);
      bigFraction0.percentageValue();
      bigFraction0.divide((-1067L));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction0.floatValue();
      bigFraction1.getField();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-1525));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(bigInteger0);
      bigFraction0.getField();
      bigFraction0.toString();
      bigFraction1.add(bigInteger0);
      bigFraction0.TWO_FIFTHS.reduce();
      bigFraction0.pow((-655.2906699906026));
      int int0 = 3019;
      BigFraction bigFraction2 = BigFraction.THREE_QUARTERS;
      bigFraction2.pow((-1221));
      bigFraction1.subtract((long) (-1221));
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.TWO_FIFTHS.hashCode();
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.multiply(bigFraction1);
      bigFraction0.pow((-1.0));
      BigFraction bigFraction3 = BigFraction.ONE_QUARTER;
      bigFraction3.subtract(0);
      bigFraction2.getField();
      bigFraction1.subtract(0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.pow(bigInteger0);
      bigFraction1.subtract(bigFraction3);
      bigFraction3.getDenominatorAsLong();
      bigFraction0.add(1307);
      bigFraction1.longValue();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 3054;
      BigFraction bigFraction0 = new BigFraction((-274.6196));
      assertEquals((byte) (-18), bigFraction0.byteValue());
      assertEquals((short) (-274), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((byte) (-18), bigFraction0.byteValue());
      assertEquals((short) (-274), bigFraction0.shortValue());
      assertEquals((byte) (-18), bigDecimal0.byteValue());
      assertEquals((short) (-274), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.pow((long) 3054);
      assertEquals((byte) (-18), bigFraction0.byteValue());
      assertEquals((short) (-274), bigFraction0.shortValue());
      assertEquals((byte)38, bigFraction1.byteValue());
      assertEquals((short)17958, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      double double0 = bigFraction1.percentageValue();
      assertEquals((byte) (-18), bigFraction0.byteValue());
      assertEquals((short) (-274), bigFraction0.shortValue());
      assertEquals((byte)38, bigFraction1.byteValue());
      assertEquals((short)17958, bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      
      double double0 = bigFraction1.THREE_QUARTERS.pow((-1733.8302758587304));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFractionField0);
      assertNotSame(bigFraction0, bigFraction1);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      
      String string0 = bigFraction0.toString();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(string0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals("0", string0);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      
      BigFraction bigFraction2 = bigFraction1.add(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte) (-43);
      byteArray0[7] = (byte) (-43);
      byteArray0[8] = (byte) (-43);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertEquals((short) (-10795), bigInteger1.shortValue());
      assertEquals((byte) (-43), bigInteger1.byteValue());
      assertArrayEquals(new byte[] {(byte) (-43), (byte) (-43), (byte)124, (byte) (-43), (byte) (-43), (byte) (-43), (byte) (-43), (byte) (-43), (byte) (-43)}, byteArray0);
      assertNotNull(bigInteger1);
      assertEquals(9, byteArray0.length);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      BigFraction bigFraction3 = bigFraction2.subtract(bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-10795), bigInteger1.shortValue());
      assertEquals((byte) (-43), bigInteger1.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)43, bigFraction3.byteValue());
      assertEquals((short)10795, bigFraction3.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertArrayEquals(new byte[] {(byte) (-43), (byte) (-43), (byte)124, (byte) (-43), (byte) (-43), (byte) (-43), (byte) (-43), (byte) (-43), (byte) (-43)}, byteArray0);
      assertNotNull(bigFraction3);
      assertEquals(9, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      
      BigFraction bigFraction4 = BigFraction.getReducedFraction(1438, 1318);
      assertEquals((byte)1, bigFraction4.byteValue());
      assertEquals((short)1, bigFraction4.shortValue());
      assertNotNull(bigFraction4);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(1L, long0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      
      BigFractionField bigFractionField1 = bigFraction0.getField();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFractionField1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertSame(bigFractionField1, bigFractionField0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      
      long long1 = bigFraction0.getNumeratorAsLong();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(0L, long1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(long1 == long0);
      
      double double1 = bigFraction2.pow(101.0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertEquals(0.0, double1, 0.01);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertNotEquals(double1, double0, 0.01);
      
      BigFraction bigFraction5 = BigFraction.getReducedFraction(966, (-2212));
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertNotNull(bigFraction5);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      
      BigFraction bigFraction6 = null;
      try {
        bigFraction6 = new BigFraction(101.0, (-2212));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 101 to fraction (9,223,372,036,854,775,708/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-274.6196));
      assertEquals((byte) (-18), bigFraction0.byteValue());
      assertEquals((short) (-274), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertEquals((byte) (-18), bigFraction0.byteValue());
      assertEquals((short) (-274), bigFraction0.shortValue());
      assertEquals((short) (-274), bigFraction1.shortValue());
      assertEquals((byte) (-18), bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertEquals((byte) (-18), bigFraction0.byteValue());
      assertEquals((short) (-274), bigFraction0.shortValue());
      assertEquals((short) (-274), bigFraction1.shortValue());
      assertEquals((byte) (-18), bigFraction1.byteValue());
      assertEquals((short) (-549), bigFraction2.shortValue());
      assertEquals((byte) (-37), bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      
      BigFraction bigFraction3 = new BigFraction((long) (-1));
      assertEquals((byte) (-1), bigFraction3.byteValue());
      assertEquals((short) (-1), bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction4 = bigFraction3.multiply(bigInteger0);
      assertEquals((byte) (-1), bigFraction3.byteValue());
      assertEquals((short) (-1), bigFraction3.shortValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte) (-10), bigFraction4.byteValue());
      assertEquals((short) (-10), bigFraction4.shortValue());
      assertNotNull(bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      
      int int0 = (-1892);
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue((-1892), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      bigFraction0.hashCode();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.divide(3408);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      assertNotSame(bigFraction0, bigFraction2);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertSame(bigFraction1, bigFraction0);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction3 = bigFraction1.add(bigInteger0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigFraction3.byteValue());
      assertEquals((short)10, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      
      BigFraction bigFraction4 = bigFraction2.reduce();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertNotNull(bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertTrue(bigFraction4.equals((Object)bigFraction1));
      assertTrue(bigFraction4.equals((Object)bigFraction0));
      assertTrue(bigFraction4.equals((Object)bigFraction2));
      
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertSame(bigFraction0, bigFraction1);
      assertEquals(0, int0);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction4));
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      BigFraction bigFraction5 = bigFraction2.multiply(bigInteger1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertNotNull(bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction4));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction4));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertTrue(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertTrue(bigFraction5.equals((Object)bigFraction1));
      assertTrue(bigFraction5.equals((Object)bigFraction2));
      assertTrue(bigFraction5.equals((Object)bigFraction0));
      
      BigFraction bigFraction6 = bigFraction4.negate();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertNotNull(bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction6);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction2);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction4));
      assertTrue(bigFraction1.equals((Object)bigFraction5));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction5));
      assertTrue(bigFraction2.equals((Object)bigFraction4));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertTrue(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertTrue(bigFraction4.equals((Object)bigFraction1));
      assertTrue(bigFraction4.equals((Object)bigFraction0));
      assertTrue(bigFraction4.equals((Object)bigFraction2));
      assertTrue(bigFraction6.equals((Object)bigFraction2));
      assertTrue(bigFraction6.equals((Object)bigFraction4));
      assertTrue(bigFraction6.equals((Object)bigFraction0));
      assertTrue(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertTrue(bigFraction6.equals((Object)bigFraction5));
      
      BigFraction bigFraction7 = bigFraction1.subtract(bigFraction5);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertEquals((byte)0, bigFraction7.byteValue());
      assertNotNull(bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction6);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction4);
      assertSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction3);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction6);
      assertSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction6);
      assertSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction2);
      assertTrue(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction4));
      assertTrue(bigFraction1.equals((Object)bigFraction5));
      assertTrue(bigFraction1.equals((Object)bigFraction6));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction5));
      assertTrue(bigFraction2.equals((Object)bigFraction4));
      assertTrue(bigFraction2.equals((Object)bigFraction6));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertTrue(bigFraction5.equals((Object)bigFraction6));
      assertTrue(bigFraction5.equals((Object)bigFraction4));
      assertTrue(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertTrue(bigFraction5.equals((Object)bigFraction2));
      assertTrue(bigFraction5.equals((Object)bigFraction0));
      assertTrue(bigFraction7.equals((Object)bigFraction4));
      assertTrue(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertTrue(bigFraction7.equals((Object)bigFraction6));
      assertTrue(bigFraction7.equals((Object)bigFraction5));
      
      int int1 = bigFraction6.getDenominatorAsInt();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction6);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction4);
      assertSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction4, bigFraction7);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction7);
      assertNotSame(bigFraction6, bigFraction2);
      assertEquals(1, int1);
      assertTrue(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction4));
      assertTrue(bigFraction1.equals((Object)bigFraction5));
      assertTrue(bigFraction1.equals((Object)bigFraction6));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction5));
      assertTrue(bigFraction2.equals((Object)bigFraction4));
      assertTrue(bigFraction2.equals((Object)bigFraction7));
      assertTrue(bigFraction2.equals((Object)bigFraction6));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertTrue(bigFraction4.equals((Object)bigFraction5));
      assertTrue(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertTrue(bigFraction4.equals((Object)bigFraction0));
      assertTrue(bigFraction4.equals((Object)bigFraction2));
      assertTrue(bigFraction4.equals((Object)bigFraction7));
      assertTrue(bigFraction4.equals((Object)bigFraction6));
      assertTrue(bigFraction6.equals((Object)bigFraction7));
      assertTrue(bigFraction6.equals((Object)bigFraction2));
      assertTrue(bigFraction6.equals((Object)bigFraction4));
      assertTrue(bigFraction6.equals((Object)bigFraction0));
      assertTrue(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertTrue(bigFraction6.equals((Object)bigFraction5));
      assertFalse(int1 == int0);
      
      BigFraction bigFraction8 = bigFraction0.subtract((-685));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-83), bigFraction8.byteValue());
      assertEquals((short)685, bigFraction8.shortValue());
      assertNotNull(bigFraction8);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction8);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction1);
      assertTrue(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFractionField0);
      assertNotSame(bigFraction0, bigFraction1);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      
      String string0 = bigFraction0.toString();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(string0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals("0", string0);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      
      BigFraction bigFraction2 = bigFraction1.add(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      
      BigFraction bigFraction3 = bigFraction0.TWO_FIFTHS.reduce();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      
      BigFraction bigFraction4 = bigFraction0.add(bigFraction1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertNotNull(bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertTrue(bigFraction4.equals((Object)bigFraction1));
      
      BigFraction bigFraction5 = BigFraction.getReducedFraction(1318, (-311));
      assertEquals((byte) (-4), bigFraction5.byteValue());
      assertEquals((short) (-4), bigFraction5.shortValue());
      assertNotNull(bigFraction5);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction1);
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      
      BigFraction bigFraction6 = BigFraction.TWO_FIFTHS;
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertNotNull(bigFraction6);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction2);
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertTrue(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      
      long long0 = bigFraction6.getDenominatorAsLong();
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction2);
      assertEquals(5L, long0);
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertTrue(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      
      BigFractionField bigFractionField1 = bigFraction2.getField();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotNull(bigFractionField1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction5);
      assertSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction4);
      assertSame(bigFractionField1, bigFractionField0);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      
      long long1 = bigFraction1.getNumeratorAsLong();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction5);
      assertSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals(0L, long1);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(long1 == long0);
      
      BigFraction bigFraction7 = BigFraction.TWO_FIFTHS;
      assertEquals((byte)0, bigFraction7.byteValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertNotNull(bigFraction7);
      assertSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction5);
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertTrue(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      
      double double0 = bigFraction7.pow(3211.0);
      assertEquals((byte)0, bigFraction7.byteValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction5);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertTrue(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      
      BigFraction bigFraction8 = BigFraction.getReducedFraction((-311), 1073741824);
      assertEquals((short)0, bigFraction8.shortValue());
      assertEquals((byte)0, bigFraction8.byteValue());
      assertNotNull(bigFraction8);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction3);
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      
      BigFraction bigFraction9 = null;
      try {
        bigFraction9 = new BigFraction((double) 0L, 1318);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-274.6196));
      assertEquals((short) (-274), bigFraction0.shortValue());
      assertEquals((byte) (-18), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-43);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(2153.294, (byte) (-43), (byte) (-43));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 2,153.294 to fraction after -43 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.TWO_THIRDS.getNumeratorAsLong();
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals(2L, long0);
      
      bigFraction0.TWO_FIFTHS.hashCode();
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.add(1);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction2.byteValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1, (-1646));
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      
      BigFraction bigFraction4 = bigFraction3.reduce();
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotNull(bigFraction4);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertTrue(bigFraction4.equals((Object)bigFraction3));
      
      int int0 = bigFraction0.intValue();
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertEquals(1, int0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      
      BigFraction bigFraction5 = bigFraction0.add(2674L);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)2675, bigFraction5.shortValue());
      assertEquals((byte)115, bigFraction5.byteValue());
      assertNotNull(bigFraction5);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      
      long long1 = 3914L;
      BigInteger bigInteger0 = null;
      BigFraction bigFraction6 = null;
      try {
        bigFraction6 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      bigFraction0.hashCode();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.divide(3408);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertSame(bigFraction1, bigFraction0);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction3 = bigFraction2.pow((long) 3408);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertNotNull(bigFraction3);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      
      double double0 = bigFraction1.percentageValue();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertSame(bigFraction1, bigFraction0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      
      BigFraction bigFraction4 = bigFraction0.subtract(3408);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short) (-3408), bigFraction4.shortValue());
      assertEquals((byte) (-80), bigFraction4.byteValue());
      assertNotNull(bigFraction4);
      assertNotSame(bigFraction0, bigFraction4);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      
      BigFractionField bigFractionField0 = bigFraction1.getField();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFractionField0);
      assertNotSame(bigFraction0, bigFraction4);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      
      BigFraction bigFraction5 = new BigFraction((-490L));
      assertEquals((short) (-490), bigFraction5.shortValue());
      assertEquals((byte)22, bigFraction5.byteValue());
      assertNotNull(bigFraction5);
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      
      BigFraction bigFraction6 = bigFraction5.subtract(7);
      assertEquals((short) (-490), bigFraction5.shortValue());
      assertEquals((byte)22, bigFraction5.byteValue());
      assertEquals((byte)15, bigFraction6.byteValue());
      assertEquals((short) (-497), bigFraction6.shortValue());
      assertNotNull(bigFraction6);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction5);
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      
      BigFraction bigFraction7 = bigFraction0.subtract(1608);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-72), bigFraction7.byteValue());
      assertEquals((short) (-1608), bigFraction7.shortValue());
      assertNotNull(bigFraction7);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction5);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      BigFraction bigFraction8 = bigFraction1.pow(bigInteger0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction8.shortValue());
      assertEquals((byte)0, bigFraction8.byteValue());
      assertNotNull(bigFraction8);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction5);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertTrue(bigFraction8.equals((Object)bigFraction3));
      assertTrue(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertTrue(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      
      BigFraction bigFraction9 = BigFraction.ONE_QUARTER;
      assertEquals((byte)0, bigFraction9.byteValue());
      assertEquals((short)0, bigFraction9.shortValue());
      assertNotNull(bigFraction9);
      assertNotSame(bigFraction9, bigFraction2);
      assertNotSame(bigFraction9, bigFraction6);
      assertNotSame(bigFraction9, bigFraction1);
      assertNotSame(bigFraction9, bigFraction4);
      assertNotSame(bigFraction9, bigFraction3);
      assertNotSame(bigFraction9, bigFraction0);
      assertNotSame(bigFraction9, bigFraction8);
      assertNotSame(bigFraction9, bigFraction7);
      assertNotSame(bigFraction9, bigFraction5);
      assertFalse(bigFraction9.equals((Object)bigFraction2));
      assertFalse(bigFraction9.equals((Object)bigFraction6));
      assertFalse(bigFraction9.equals((Object)bigFraction1));
      assertFalse(bigFraction9.equals((Object)bigFraction4));
      assertFalse(bigFraction9.equals((Object)bigFraction3));
      assertFalse(bigFraction9.equals((Object)bigFraction0));
      assertFalse(bigFraction9.equals((Object)bigFraction8));
      assertFalse(bigFraction9.equals((Object)bigFraction7));
      assertFalse(bigFraction9.equals((Object)bigFraction5));
      
      BigFraction bigFraction10 = bigFraction5.add(bigFraction0);
      assertEquals((byte)22, bigFraction10.byteValue());
      assertEquals((short) (-490), bigFraction10.shortValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short) (-490), bigFraction5.shortValue());
      assertEquals((byte)22, bigFraction5.byteValue());
      assertNotNull(bigFraction10);
      assertNotSame(bigFraction10, bigFraction7);
      assertNotSame(bigFraction10, bigFraction0);
      assertNotSame(bigFraction10, bigFraction8);
      assertNotSame(bigFraction10, bigFraction6);
      assertSame(bigFraction10, bigFraction5);
      assertNotSame(bigFraction10, bigFraction2);
      assertNotSame(bigFraction10, bigFraction3);
      assertNotSame(bigFraction10, bigFraction1);
      assertNotSame(bigFraction10, bigFraction4);
      assertNotSame(bigFraction10, bigFraction9);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction8);
      assertSame(bigFraction5, bigFraction10);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction5, bigFraction9);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      assertFalse(bigFraction10.equals((Object)bigFraction7));
      assertFalse(bigFraction10.equals((Object)bigFraction0));
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      assertFalse(bigFraction10.equals((Object)bigFraction2));
      assertFalse(bigFraction10.equals((Object)bigFraction3));
      assertFalse(bigFraction10.equals((Object)bigFraction1));
      assertFalse(bigFraction10.equals((Object)bigFraction4));
      assertFalse(bigFraction10.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction8));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction7));
      assertFalse(bigFraction5.equals((Object)bigFraction9));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      
      BigFractionField bigFractionField1 = bigFraction4.getField();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short) (-3408), bigFraction4.shortValue());
      assertEquals((byte) (-80), bigFraction4.byteValue());
      assertNotNull(bigFractionField1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction8);
      assertSame(bigFractionField1, bigFractionField0);
      assertNotSame(bigFraction4, bigFraction9);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction10);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction7);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction8);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction10));
      assertTrue(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction9));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction10));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction6));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction7));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction8));
      
      double double1 = bigFraction5.pow((double) (-490L));
      assertEquals((short) (-490), bigFraction5.shortValue());
      assertEquals((byte)22, bigFraction5.byteValue());
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction8);
      assertSame(bigFraction5, bigFraction10);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction5, bigFraction9);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertFalse(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction8));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction7));
      assertFalse(bigFraction5.equals((Object)bigFraction9));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      
      BigFraction bigFraction11 = BigFraction.getReducedFraction(1608, 7);
      assertEquals((byte) (-27), bigFraction11.byteValue());
      assertEquals((short)229, bigFraction11.shortValue());
      assertNotNull(bigFraction11);
      assertNotSame(bigFraction11, bigFraction1);
      assertNotSame(bigFraction11, bigFraction2);
      assertNotSame(bigFraction11, bigFraction9);
      assertNotSame(bigFraction11, bigFraction7);
      assertNotSame(bigFraction11, bigFraction10);
      assertNotSame(bigFraction11, bigFraction3);
      assertNotSame(bigFraction11, bigFraction6);
      assertNotSame(bigFraction11, bigFraction0);
      assertNotSame(bigFraction11, bigFraction4);
      assertNotSame(bigFraction11, bigFraction5);
      assertNotSame(bigFraction11, bigFraction8);
      assertFalse(bigFraction11.equals((Object)bigFraction1));
      assertFalse(bigFraction11.equals((Object)bigFraction2));
      assertFalse(bigFraction11.equals((Object)bigFraction9));
      assertFalse(bigFraction11.equals((Object)bigFraction7));
      assertFalse(bigFraction11.equals((Object)bigFraction10));
      assertFalse(bigFraction11.equals((Object)bigFraction3));
      assertFalse(bigFraction11.equals((Object)bigFraction6));
      assertFalse(bigFraction11.equals((Object)bigFraction0));
      assertFalse(bigFraction11.equals((Object)bigFraction4));
      assertFalse(bigFraction11.equals((Object)bigFraction5));
      assertFalse(bigFraction11.equals((Object)bigFraction8));
      
      BigFraction bigFraction12 = bigFraction11.pow(1367);
      assertEquals((byte) (-27), bigFraction11.byteValue());
      assertEquals((short)229, bigFraction11.shortValue());
      assertEquals((byte) (-122), bigFraction12.byteValue());
      assertEquals((short)10630, bigFraction12.shortValue());
      assertNotNull(bigFraction12);
      assertNotSame(bigFraction11, bigFraction1);
      assertNotSame(bigFraction11, bigFraction2);
      assertNotSame(bigFraction11, bigFraction9);
      assertNotSame(bigFraction11, bigFraction7);
      assertNotSame(bigFraction11, bigFraction10);
      assertNotSame(bigFraction11, bigFraction0);
      assertNotSame(bigFraction11, bigFraction3);
      assertNotSame(bigFraction11, bigFraction6);
      assertNotSame(bigFraction11, bigFraction4);
      assertNotSame(bigFraction11, bigFraction5);
      assertNotSame(bigFraction11, bigFraction12);
      assertNotSame(bigFraction11, bigFraction8);
      assertNotSame(bigFraction12, bigFraction3);
      assertNotSame(bigFraction12, bigFraction5);
      assertNotSame(bigFraction12, bigFraction0);
      assertNotSame(bigFraction12, bigFraction10);
      assertNotSame(bigFraction12, bigFraction8);
      assertNotSame(bigFraction12, bigFraction11);
      assertNotSame(bigFraction12, bigFraction9);
      assertNotSame(bigFraction12, bigFraction1);
      assertNotSame(bigFraction12, bigFraction4);
      assertNotSame(bigFraction12, bigFraction2);
      assertNotSame(bigFraction12, bigFraction6);
      assertNotSame(bigFraction12, bigFraction7);
      assertFalse(bigFraction11.equals((Object)bigFraction1));
      assertFalse(bigFraction11.equals((Object)bigFraction2));
      assertFalse(bigFraction11.equals((Object)bigFraction9));
      assertFalse(bigFraction11.equals((Object)bigFraction7));
      assertFalse(bigFraction11.equals((Object)bigFraction10));
      assertFalse(bigFraction11.equals((Object)bigFraction3));
      assertFalse(bigFraction11.equals((Object)bigFraction6));
      assertFalse(bigFraction11.equals((Object)bigFraction0));
      assertFalse(bigFraction11.equals((Object)bigFraction4));
      assertFalse(bigFraction11.equals((Object)bigFraction5));
      assertFalse(bigFraction11.equals((Object)bigFraction8));
      assertFalse(bigFraction12.equals((Object)bigFraction3));
      assertFalse(bigFraction12.equals((Object)bigFraction5));
      assertFalse(bigFraction12.equals((Object)bigFraction0));
      assertFalse(bigFraction12.equals((Object)bigFraction10));
      assertFalse(bigFraction12.equals((Object)bigFraction8));
      assertFalse(bigFraction12.equals((Object)bigFraction11));
      assertFalse(bigFraction12.equals((Object)bigFraction9));
      assertFalse(bigFraction12.equals((Object)bigFraction1));
      assertFalse(bigFraction12.equals((Object)bigFraction4));
      assertFalse(bigFraction12.equals((Object)bigFraction2));
      assertFalse(bigFraction12.equals((Object)bigFraction6));
      assertFalse(bigFraction12.equals((Object)bigFraction7));
      
      BigFraction bigFraction13 = BigFraction.ONE;
      assertEquals((short)1, bigFraction13.shortValue());
      assertEquals((byte)1, bigFraction13.byteValue());
      assertNotNull(bigFraction13);
      assertNotSame(bigFraction13, bigFraction2);
      assertNotSame(bigFraction13, bigFraction6);
      assertNotSame(bigFraction13, bigFraction7);
      assertNotSame(bigFraction13, bigFraction5);
      assertNotSame(bigFraction13, bigFraction9);
      assertNotSame(bigFraction13, bigFraction1);
      assertNotSame(bigFraction13, bigFraction4);
      assertNotSame(bigFraction13, bigFraction8);
      assertNotSame(bigFraction13, bigFraction12);
      assertNotSame(bigFraction13, bigFraction0);
      assertNotSame(bigFraction13, bigFraction3);
      assertNotSame(bigFraction13, bigFraction10);
      assertNotSame(bigFraction13, bigFraction11);
      assertFalse(bigFraction13.equals((Object)bigFraction2));
      assertFalse(bigFraction13.equals((Object)bigFraction6));
      assertFalse(bigFraction13.equals((Object)bigFraction7));
      assertFalse(bigFraction13.equals((Object)bigFraction5));
      assertFalse(bigFraction13.equals((Object)bigFraction9));
      assertFalse(bigFraction13.equals((Object)bigFraction1));
      assertFalse(bigFraction13.equals((Object)bigFraction4));
      assertFalse(bigFraction13.equals((Object)bigFraction8));
      assertFalse(bigFraction13.equals((Object)bigFraction12));
      assertFalse(bigFraction13.equals((Object)bigFraction0));
      assertFalse(bigFraction13.equals((Object)bigFraction3));
      assertFalse(bigFraction13.equals((Object)bigFraction10));
      assertFalse(bigFraction13.equals((Object)bigFraction11));
      
      boolean boolean0 = bigFraction3.equals(bigFraction4);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short) (-3408), bigFraction4.shortValue());
      assertEquals((byte) (-80), bigFraction4.byteValue());
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction11);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction12);
      assertNotSame(bigFraction0, bigFraction13);
      assertNotSame(bigFraction1, bigFraction11);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction3);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction10);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction12);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction13);
      assertNotSame(bigFraction2, bigFraction8);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction9);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction12);
      assertNotSame(bigFraction2, bigFraction13);
      assertNotSame(bigFraction2, bigFraction11);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction10);
      assertNotSame(bigFraction3, bigFraction11);
      assertNotSame(bigFraction3, bigFraction13);
      assertNotSame(bigFraction3, bigFraction8);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction10);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction9);
      assertNotSame(bigFraction3, bigFraction12);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction4, bigFraction9);
      assertNotSame(bigFraction4, bigFraction12);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction13);
      assertNotSame(bigFraction4, bigFraction8);
      assertNotSame(bigFraction4, bigFraction10);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction7);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction11);
      assertFalse(boolean0);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction10));
      assertTrue(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction11));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction12));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction13));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction11));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction10));
      assertTrue(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction12));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction13));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction7));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction9));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertTrue(bigFraction2.equals((Object)bigFraction8));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction12));
      assertFalse(bigFraction2.equals((Object)bigFraction13));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction11));
      assertFalse(bigFraction2.equals((Object)bigFraction10));
      assertTrue(bigFraction3.equals((Object)bigFraction8));
      assertFalse(bigFraction3.equals((Object)bigFraction11));
      assertFalse(bigFraction3.equals((Object)bigFraction13));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction10));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction9));
      assertFalse(bigFraction3.equals((Object)bigFraction12));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction4.equals((Object)bigFraction9));
      assertFalse(bigFraction4.equals((Object)bigFraction12));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction13));
      assertFalse(bigFraction4.equals((Object)bigFraction8));
      assertFalse(bigFraction4.equals((Object)bigFraction10));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction6));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction7));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction11));
      
      BigFraction bigFraction14 = new BigFraction(371);
      assertEquals((byte)115, bigFraction14.byteValue());
      assertEquals((short)371, bigFraction14.shortValue());
      assertNotNull(bigFraction14);
      assertFalse(bigFraction14.equals((Object)bigFraction3));
      assertFalse(bigFraction14.equals((Object)bigFraction5));
      assertFalse(bigFraction14.equals((Object)bigFraction4));
      assertFalse(bigFraction14.equals((Object)bigFraction8));
      assertFalse(bigFraction14.equals((Object)bigFraction1));
      assertFalse(bigFraction14.equals((Object)bigFraction7));
      assertFalse(bigFraction14.equals((Object)bigFraction6));
      assertFalse(bigFraction14.equals((Object)bigFraction9));
      assertFalse(bigFraction14.equals((Object)bigFraction12));
      assertFalse(bigFraction14.equals((Object)bigFraction13));
      assertFalse(bigFraction14.equals((Object)bigFraction11));
      assertFalse(bigFraction14.equals((Object)bigFraction2));
      assertFalse(bigFraction14.equals((Object)bigFraction0));
      assertFalse(bigFraction14.equals((Object)bigFraction10));
      
      BigFraction bigFraction15 = bigFraction14.add(6);
      assertEquals((byte)115, bigFraction14.byteValue());
      assertEquals((short)371, bigFraction14.shortValue());
      assertEquals((byte)121, bigFraction15.byteValue());
      assertEquals((short)377, bigFraction15.shortValue());
      assertNotNull(bigFraction15);
      assertNotSame(bigFraction14, bigFraction3);
      assertNotSame(bigFraction14, bigFraction5);
      assertNotSame(bigFraction14, bigFraction4);
      assertNotSame(bigFraction14, bigFraction8);
      assertNotSame(bigFraction14, bigFraction1);
      assertNotSame(bigFraction14, bigFraction7);
      assertNotSame(bigFraction14, bigFraction6);
      assertNotSame(bigFraction14, bigFraction9);
      assertNotSame(bigFraction14, bigFraction12);
      assertNotSame(bigFraction14, bigFraction13);
      assertNotSame(bigFraction14, bigFraction11);
      assertNotSame(bigFraction14, bigFraction2);
      assertNotSame(bigFraction14, bigFraction15);
      assertNotSame(bigFraction14, bigFraction0);
      assertNotSame(bigFraction14, bigFraction10);
      assertNotSame(bigFraction15, bigFraction9);
      assertNotSame(bigFraction15, bigFraction0);
      assertNotSame(bigFraction15, bigFraction2);
      assertNotSame(bigFraction15, bigFraction1);
      assertNotSame(bigFraction15, bigFraction11);
      assertNotSame(bigFraction15, bigFraction7);
      assertNotSame(bigFraction15, bigFraction6);
      assertNotSame(bigFraction15, bigFraction12);
      assertNotSame(bigFraction15, bigFraction5);
      assertNotSame(bigFraction15, bigFraction13);
      assertNotSame(bigFraction15, bigFraction8);
      assertNotSame(bigFraction15, bigFraction3);
      assertNotSame(bigFraction15, bigFraction10);
      assertNotSame(bigFraction15, bigFraction4);
      assertNotSame(bigFraction15, bigFraction14);
      assertFalse(bigFraction14.equals((Object)bigFraction3));
      assertFalse(bigFraction14.equals((Object)bigFraction5));
      assertFalse(bigFraction14.equals((Object)bigFraction4));
      assertFalse(bigFraction14.equals((Object)bigFraction8));
      assertFalse(bigFraction14.equals((Object)bigFraction1));
      assertFalse(bigFraction14.equals((Object)bigFraction7));
      assertFalse(bigFraction14.equals((Object)bigFraction6));
      assertFalse(bigFraction14.equals((Object)bigFraction9));
      assertFalse(bigFraction14.equals((Object)bigFraction12));
      assertFalse(bigFraction14.equals((Object)bigFraction13));
      assertFalse(bigFraction14.equals((Object)bigFraction11));
      assertFalse(bigFraction14.equals((Object)bigFraction2));
      assertFalse(bigFraction14.equals((Object)bigFraction0));
      assertFalse(bigFraction14.equals((Object)bigFraction10));
      assertFalse(bigFraction15.equals((Object)bigFraction9));
      assertFalse(bigFraction15.equals((Object)bigFraction0));
      assertFalse(bigFraction15.equals((Object)bigFraction2));
      assertFalse(bigFraction15.equals((Object)bigFraction1));
      assertFalse(bigFraction15.equals((Object)bigFraction11));
      assertFalse(bigFraction15.equals((Object)bigFraction7));
      assertFalse(bigFraction15.equals((Object)bigFraction6));
      assertFalse(bigFraction15.equals((Object)bigFraction12));
      assertFalse(bigFraction15.equals((Object)bigFraction5));
      assertFalse(bigFraction15.equals((Object)bigFraction13));
      assertFalse(bigFraction15.equals((Object)bigFraction8));
      assertFalse(bigFraction15.equals((Object)bigFraction3));
      assertFalse(bigFraction15.equals((Object)bigFraction10));
      assertFalse(bigFraction15.equals((Object)bigFraction4));
      assertFalse(bigFraction15.equals((Object)bigFraction14));
      
      long long0 = bigFraction6.getNumeratorAsLong();
      assertEquals((short) (-490), bigFraction5.shortValue());
      assertEquals((byte)22, bigFraction5.byteValue());
      assertEquals((byte)15, bigFraction6.byteValue());
      assertEquals((short) (-497), bigFraction6.shortValue());
      assertNotSame(bigFraction5, bigFraction8);
      assertNotSame(bigFraction5, bigFraction12);
      assertNotSame(bigFraction5, bigFraction13);
      assertSame(bigFraction5, bigFraction10);
      assertNotSame(bigFraction5, bigFraction14);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction5, bigFraction9);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction11);
      assertNotSame(bigFraction5, bigFraction15);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction6, bigFraction7);
      assertNotSame(bigFraction6, bigFraction10);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction8);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction14);
      assertNotSame(bigFraction6, bigFraction15);
      assertNotSame(bigFraction6, bigFraction11);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction13);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction9);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction12);
      assertEquals((-497L), long0);
      assertFalse(bigFraction5.equals((Object)bigFraction8));
      assertFalse(bigFraction5.equals((Object)bigFraction12));
      assertFalse(bigFraction5.equals((Object)bigFraction13));
      assertFalse(bigFraction5.equals((Object)bigFraction14));
      assertFalse(bigFraction5.equals((Object)bigFraction7));
      assertFalse(bigFraction5.equals((Object)bigFraction9));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction11));
      assertFalse(bigFraction5.equals((Object)bigFraction15));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction7));
      assertFalse(bigFraction6.equals((Object)bigFraction10));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction8));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction14));
      assertFalse(bigFraction6.equals((Object)bigFraction15));
      assertFalse(bigFraction6.equals((Object)bigFraction11));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction13));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction9));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction12));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      
      BigDecimal bigDecimal0 = bigFraction1.MINUS_ONE.bigDecimalValue();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.subtract(5);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short) (-4), bigFraction2.shortValue());
      assertEquals((byte) (-4), bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      
      String string0 = bigFraction0.ONE_QUARTER.toString();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(string0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertEquals("1 / 4", string0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      
      int int0 = bigFraction1.intValue();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals(0, int0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      
      int int1 = bigFraction1.ONE_QUARTER.hashCode();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(int1 == int0);
      
      BigFraction bigFraction3 = bigFraction1.pow(0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      
      BigFraction bigFraction4 = bigFraction2.subtract((-95293L));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short) (-4), bigFraction2.shortValue());
      assertEquals((byte) (-4), bigFraction2.byteValue());
      assertEquals((byte)56, bigFraction4.byteValue());
      assertEquals((short)29752, bigFraction4.shortValue());
      assertNotNull(bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      
      BigFraction bigFraction5 = bigFraction1.divide(bigFraction4);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short) (-4), bigFraction2.shortValue());
      assertEquals((byte) (-4), bigFraction2.byteValue());
      assertEquals((byte)56, bigFraction4.byteValue());
      assertEquals((short)29752, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertNotNull(bigFraction5);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      
      BigDecimal bigDecimal1 = bigFraction1.bigDecimalValue();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      int int2 = bigFraction1.compareTo(bigFraction3);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertEquals((-1), int2);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(int2 == int0);
      
      BigFraction bigFraction6 = bigFraction1.multiply((-1));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertNotNull(bigFraction6);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction5);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      
      long long0 = bigFraction6.longValue();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction5);
      assertEquals(0L, long0);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = 1;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.multiply(1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(1L, long0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      
      BigInteger bigInteger1 = bigFraction1.getDenominator();
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertSame(bigInteger1, bigInteger0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(1, 229402505);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.TWO_THIRDS.getNumeratorAsLong();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals(2L, long0);
      
      bigFraction0.TWO_FIFTHS.hashCode();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.add(1);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertEquals((byte)2, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1, (-1646));
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      
      BigFraction bigFraction4 = bigFraction3.reduce();
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotNull(bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertTrue(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      
      int int0 = bigFraction0.intValue();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertEquals(1, int0);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      
      BigFraction bigFraction5 = bigFraction0.add(2674L);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)115, bigFraction5.byteValue());
      assertEquals((short)2675, bigFraction5.shortValue());
      assertNotNull(bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      
      BigFraction bigFraction6 = bigFraction4.subtract((-4328));
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)4327, bigFraction6.shortValue());
      assertEquals((byte) (-25), bigFraction6.byteValue());
      assertNotNull(bigFraction6);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction2);
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertTrue(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      
      BigFractionField bigFractionField0 = bigFraction1.getField();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertNotNull(bigFractionField0);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction6);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      
      BigFraction bigFraction7 = bigFraction0.subtract(0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction7.shortValue());
      assertEquals((byte)1, bigFraction7.byteValue());
      assertNotNull(bigFraction7);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertTrue(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertTrue(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      
      BigFraction bigFraction8 = bigFraction1.subtract(1608);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((short) (-1607), bigFraction8.shortValue());
      assertEquals((byte) (-71), bigFraction8.byteValue());
      assertNotNull(bigFraction8);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction7);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction6);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertTrue(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction9 = bigFraction1.pow(bigInteger0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction9.shortValue());
      assertEquals((byte)1, bigFraction9.byteValue());
      assertNotNull(bigFraction9);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction7);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction9, bigFraction2);
      assertNotSame(bigFraction9, bigFraction5);
      assertNotSame(bigFraction9, bigFraction3);
      assertNotSame(bigFraction9, bigFraction8);
      assertNotSame(bigFraction9, bigFraction4);
      assertNotSame(bigFraction9, bigFraction7);
      assertNotSame(bigFraction9, bigFraction6);
      assertNotSame(bigFraction9, bigFraction0);
      assertNotSame(bigFraction9, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertTrue(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertTrue(bigFraction1.equals((Object)bigFraction7));
      assertTrue(bigFraction9.equals((Object)bigFraction0));
      assertFalse(bigFraction9.equals((Object)bigFraction2));
      assertTrue(bigFraction9.equals((Object)bigFraction7));
      assertFalse(bigFraction9.equals((Object)bigFraction5));
      assertFalse(bigFraction9.equals((Object)bigFraction3));
      assertFalse(bigFraction9.equals((Object)bigFraction8));
      assertFalse(bigFraction9.equals((Object)bigFraction4));
      assertTrue(bigFraction9.equals((Object)bigFraction1));
      assertFalse(bigFraction9.equals((Object)bigFraction6));
      
      BigFraction bigFraction10 = BigFraction.ONE_QUARTER;
      assertEquals((byte)0, bigFraction10.byteValue());
      assertEquals((short)0, bigFraction10.shortValue());
      assertNotNull(bigFraction10);
      assertNotSame(bigFraction10, bigFraction7);
      assertNotSame(bigFraction10, bigFraction2);
      assertNotSame(bigFraction10, bigFraction3);
      assertNotSame(bigFraction10, bigFraction8);
      assertNotSame(bigFraction10, bigFraction9);
      assertNotSame(bigFraction10, bigFraction6);
      assertNotSame(bigFraction10, bigFraction1);
      assertNotSame(bigFraction10, bigFraction5);
      assertNotSame(bigFraction10, bigFraction4);
      assertNotSame(bigFraction10, bigFraction0);
      assertFalse(bigFraction10.equals((Object)bigFraction7));
      assertFalse(bigFraction10.equals((Object)bigFraction2));
      assertFalse(bigFraction10.equals((Object)bigFraction3));
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      assertFalse(bigFraction10.equals((Object)bigFraction9));
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      assertFalse(bigFraction10.equals((Object)bigFraction1));
      assertFalse(bigFraction10.equals((Object)bigFraction5));
      assertFalse(bigFraction10.equals((Object)bigFraction4));
      assertFalse(bigFraction10.equals((Object)bigFraction0));
      
      BigFraction bigFraction11 = bigFraction10.add(bigFraction5);
      assertEquals((short)2675, bigFraction11.shortValue());
      assertEquals((byte)115, bigFraction11.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)115, bigFraction5.byteValue());
      assertEquals((short)2675, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction10.byteValue());
      assertEquals((short)0, bigFraction10.shortValue());
      assertNotNull(bigFraction11);
      assertNotSame(bigFraction11, bigFraction2);
      assertNotSame(bigFraction11, bigFraction9);
      assertNotSame(bigFraction11, bigFraction1);
      assertNotSame(bigFraction11, bigFraction4);
      assertNotSame(bigFraction11, bigFraction7);
      assertNotSame(bigFraction11, bigFraction10);
      assertNotSame(bigFraction11, bigFraction0);
      assertNotSame(bigFraction11, bigFraction3);
      assertNotSame(bigFraction11, bigFraction8);
      assertNotSame(bigFraction11, bigFraction6);
      assertNotSame(bigFraction11, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction11);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction4);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction5, bigFraction10);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction8);
      assertNotSame(bigFraction5, bigFraction9);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction11);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction10, bigFraction7);
      assertNotSame(bigFraction10, bigFraction2);
      assertNotSame(bigFraction10, bigFraction3);
      assertNotSame(bigFraction10, bigFraction8);
      assertNotSame(bigFraction10, bigFraction9);
      assertNotSame(bigFraction10, bigFraction11);
      assertNotSame(bigFraction10, bigFraction6);
      assertNotSame(bigFraction10, bigFraction1);
      assertNotSame(bigFraction10, bigFraction5);
      assertNotSame(bigFraction10, bigFraction4);
      assertNotSame(bigFraction10, bigFraction0);
      assertFalse(bigFraction11.equals((Object)bigFraction2));
      assertFalse(bigFraction11.equals((Object)bigFraction9));
      assertFalse(bigFraction11.equals((Object)bigFraction1));
      assertFalse(bigFraction11.equals((Object)bigFraction4));
      assertFalse(bigFraction11.equals((Object)bigFraction7));
      assertFalse(bigFraction11.equals((Object)bigFraction10));
      assertFalse(bigFraction11.equals((Object)bigFraction0));
      assertFalse(bigFraction11.equals((Object)bigFraction3));
      assertFalse(bigFraction11.equals((Object)bigFraction8));
      assertFalse(bigFraction11.equals((Object)bigFraction6));
      assertFalse(bigFraction11.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertTrue(bigFraction0.equals((Object)bigFraction9));
      assertTrue(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction10));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction10));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction7));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction8));
      assertFalse(bigFraction5.equals((Object)bigFraction9));
      assertFalse(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction10.equals((Object)bigFraction7));
      assertFalse(bigFraction10.equals((Object)bigFraction2));
      assertFalse(bigFraction10.equals((Object)bigFraction3));
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      assertFalse(bigFraction10.equals((Object)bigFraction9));
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      assertFalse(bigFraction10.equals((Object)bigFraction1));
      assertFalse(bigFraction10.equals((Object)bigFraction5));
      assertFalse(bigFraction10.equals((Object)bigFraction4));
      assertFalse(bigFraction10.equals((Object)bigFraction0));
      
      BigFractionField bigFractionField1 = bigFraction3.getField();
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotNull(bigFractionField1);
      assertSame(bigFractionField1, bigFractionField0);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction8);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction11);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction9);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction10);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction6);
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction8));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction11));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction9));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction10));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      
      double double0 = bigFraction1.pow((double) 0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction11);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction4);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction10);
      assertNotSame(bigFraction1, bigFraction7);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction11);
      assertEquals(1.0, double0, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertTrue(bigFraction0.equals((Object)bigFraction9));
      assertTrue(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction11));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction10));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction10));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertTrue(bigFraction1.equals((Object)bigFraction9));
      assertTrue(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction11));
      
      BigFraction bigFraction12 = BigFraction.getReducedFraction(1, 1608);
      assertEquals((short)0, bigFraction12.shortValue());
      assertEquals((byte)0, bigFraction12.byteValue());
      assertNotNull(bigFraction12);
      assertNotSame(bigFraction12, bigFraction1);
      assertNotSame(bigFraction12, bigFraction9);
      assertNotSame(bigFraction12, bigFraction6);
      assertNotSame(bigFraction12, bigFraction2);
      assertNotSame(bigFraction12, bigFraction0);
      assertNotSame(bigFraction12, bigFraction3);
      assertNotSame(bigFraction12, bigFraction8);
      assertNotSame(bigFraction12, bigFraction7);
      assertNotSame(bigFraction12, bigFraction4);
      assertNotSame(bigFraction12, bigFraction10);
      assertNotSame(bigFraction12, bigFraction5);
      assertNotSame(bigFraction12, bigFraction11);
      assertFalse(bigFraction12.equals((Object)bigFraction1));
      assertFalse(bigFraction12.equals((Object)bigFraction9));
      assertFalse(bigFraction12.equals((Object)bigFraction6));
      assertFalse(bigFraction12.equals((Object)bigFraction2));
      assertFalse(bigFraction12.equals((Object)bigFraction0));
      assertFalse(bigFraction12.equals((Object)bigFraction3));
      assertFalse(bigFraction12.equals((Object)bigFraction8));
      assertFalse(bigFraction12.equals((Object)bigFraction7));
      assertFalse(bigFraction12.equals((Object)bigFraction4));
      assertFalse(bigFraction12.equals((Object)bigFraction10));
      assertFalse(bigFraction12.equals((Object)bigFraction5));
      assertFalse(bigFraction12.equals((Object)bigFraction11));
      
      BigFraction bigFraction13 = bigFraction7.pow(6);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction13.shortValue());
      assertEquals((byte)1, bigFraction13.byteValue());
      assertEquals((short)1, bigFraction7.shortValue());
      assertEquals((byte)1, bigFraction7.byteValue());
      assertNotNull(bigFraction13);
      assertNotSame(bigFraction0, bigFraction13);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction12);
      assertNotSame(bigFraction0, bigFraction10);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction11);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction13, bigFraction4);
      assertNotSame(bigFraction13, bigFraction6);
      assertNotSame(bigFraction13, bigFraction9);
      assertNotSame(bigFraction13, bigFraction3);
      assertNotSame(bigFraction13, bigFraction11);
      assertNotSame(bigFraction13, bigFraction8);
      assertNotSame(bigFraction13, bigFraction5);
      assertNotSame(bigFraction13, bigFraction2);
      assertNotSame(bigFraction13, bigFraction12);
      assertNotSame(bigFraction13, bigFraction1);
      assertNotSame(bigFraction13, bigFraction10);
      assertNotSame(bigFraction13, bigFraction7);
      assertNotSame(bigFraction13, bigFraction0);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction9);
      assertNotSame(bigFraction7, bigFraction11);
      assertNotSame(bigFraction7, bigFraction12);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction13);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction10);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction12));
      assertTrue(bigFraction0.equals((Object)bigFraction9));
      assertTrue(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction11));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction10));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction13.equals((Object)bigFraction4));
      assertFalse(bigFraction13.equals((Object)bigFraction6));
      assertTrue(bigFraction13.equals((Object)bigFraction1));
      assertTrue(bigFraction13.equals((Object)bigFraction9));
      assertFalse(bigFraction13.equals((Object)bigFraction3));
      assertFalse(bigFraction13.equals((Object)bigFraction11));
      assertFalse(bigFraction13.equals((Object)bigFraction8));
      assertFalse(bigFraction13.equals((Object)bigFraction5));
      assertTrue(bigFraction13.equals((Object)bigFraction7));
      assertFalse(bigFraction13.equals((Object)bigFraction2));
      assertFalse(bigFraction13.equals((Object)bigFraction12));
      assertFalse(bigFraction13.equals((Object)bigFraction10));
      assertTrue(bigFraction13.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertTrue(bigFraction7.equals((Object)bigFraction1));
      assertTrue(bigFraction7.equals((Object)bigFraction9));
      assertFalse(bigFraction7.equals((Object)bigFraction10));
      assertFalse(bigFraction7.equals((Object)bigFraction8));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction11));
      assertFalse(bigFraction7.equals((Object)bigFraction12));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertTrue(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      
      BigFraction bigFraction14 = BigFraction.ONE;
      assertEquals((byte)1, bigFraction14.byteValue());
      assertEquals((short)1, bigFraction14.shortValue());
      assertNotNull(bigFraction14);
      assertNotSame(bigFraction14, bigFraction4);
      assertSame(bigFraction14, bigFraction1);
      assertNotSame(bigFraction14, bigFraction3);
      assertNotSame(bigFraction14, bigFraction8);
      assertNotSame(bigFraction14, bigFraction9);
      assertNotSame(bigFraction14, bigFraction5);
      assertNotSame(bigFraction14, bigFraction6);
      assertNotSame(bigFraction14, bigFraction10);
      assertNotSame(bigFraction14, bigFraction7);
      assertSame(bigFraction14, bigFraction0);
      assertNotSame(bigFraction14, bigFraction2);
      assertNotSame(bigFraction14, bigFraction13);
      assertNotSame(bigFraction14, bigFraction11);
      assertNotSame(bigFraction14, bigFraction12);
      assertFalse(bigFraction14.equals((Object)bigFraction10));
      assertFalse(bigFraction14.equals((Object)bigFraction4));
      assertFalse(bigFraction14.equals((Object)bigFraction3));
      assertFalse(bigFraction14.equals((Object)bigFraction8));
      assertTrue(bigFraction14.equals((Object)bigFraction13));
      assertFalse(bigFraction14.equals((Object)bigFraction2));
      assertTrue(bigFraction14.equals((Object)bigFraction7));
      assertFalse(bigFraction14.equals((Object)bigFraction5));
      assertFalse(bigFraction14.equals((Object)bigFraction11));
      assertFalse(bigFraction14.equals((Object)bigFraction12));
      assertFalse(bigFraction14.equals((Object)bigFraction6));
      assertTrue(bigFraction14.equals((Object)bigFraction9));
      
      boolean boolean0 = bigFraction13.equals(bigFractionField0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((short)1, bigFraction13.shortValue());
      assertEquals((byte)1, bigFraction13.byteValue());
      assertEquals((short)1, bigFraction7.shortValue());
      assertEquals((byte)1, bigFraction7.byteValue());
      assertNotSame(bigFraction0, bigFraction13);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction12);
      assertNotSame(bigFraction0, bigFraction10);
      assertSame(bigFraction0, bigFraction14);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction11);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction13);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction10);
      assertNotSame(bigFraction1, bigFraction7);
      assertSame(bigFraction1, bigFraction0);
      assertSame(bigFraction1, bigFraction14);
      assertNotSame(bigFraction1, bigFraction12);
      assertNotSame(bigFraction1, bigFraction11);
      assertNotSame(bigFraction13, bigFraction4);
      assertNotSame(bigFraction13, bigFraction6);
      assertNotSame(bigFraction13, bigFraction9);
      assertNotSame(bigFraction13, bigFraction3);
      assertNotSame(bigFraction13, bigFraction11);
      assertNotSame(bigFraction13, bigFraction8);
      assertNotSame(bigFraction13, bigFraction5);
      assertNotSame(bigFraction13, bigFraction14);
      assertNotSame(bigFraction13, bigFraction2);
      assertNotSame(bigFraction13, bigFraction12);
      assertNotSame(bigFraction13, bigFraction1);
      assertNotSame(bigFraction13, bigFraction10);
      assertNotSame(bigFraction13, bigFraction7);
      assertNotSame(bigFraction13, bigFraction0);
      assertSame(bigFractionField0, bigFractionField1);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction14);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction9);
      assertNotSame(bigFraction7, bigFraction11);
      assertNotSame(bigFraction7, bigFraction12);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction13);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction10);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction4);
      assertFalse(boolean0);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction12));
      assertTrue(bigFraction0.equals((Object)bigFraction9));
      assertTrue(bigFraction0.equals((Object)bigFraction13));
      assertTrue(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction11));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction10));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction10));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction13));
      assertFalse(bigFraction1.equals((Object)bigFraction12));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertTrue(bigFraction1.equals((Object)bigFraction9));
      assertTrue(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction11));
      assertFalse(bigFraction13.equals((Object)bigFraction4));
      assertFalse(bigFraction13.equals((Object)bigFraction6));
      assertTrue(bigFraction13.equals((Object)bigFraction1));
      assertTrue(bigFraction13.equals((Object)bigFraction9));
      assertFalse(bigFraction13.equals((Object)bigFraction3));
      assertFalse(bigFraction13.equals((Object)bigFraction11));
      assertFalse(bigFraction13.equals((Object)bigFraction8));
      assertFalse(bigFraction13.equals((Object)bigFraction5));
      assertTrue(bigFraction13.equals((Object)bigFraction7));
      assertFalse(bigFraction13.equals((Object)bigFraction2));
      assertFalse(bigFraction13.equals((Object)bigFraction12));
      assertTrue(bigFraction13.equals((Object)bigFraction14));
      assertFalse(bigFraction13.equals((Object)bigFraction10));
      assertTrue(bigFraction13.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertTrue(bigFraction7.equals((Object)bigFraction1));
      assertTrue(bigFraction7.equals((Object)bigFraction9));
      assertFalse(bigFraction7.equals((Object)bigFraction8));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertTrue(bigFraction7.equals((Object)bigFraction14));
      assertFalse(bigFraction7.equals((Object)bigFraction11));
      assertFalse(bigFraction7.equals((Object)bigFraction12));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction10));
      assertTrue(bigFraction7.equals((Object)bigFraction13));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertTrue(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      
      BigFraction bigFraction15 = bigFraction2.add(179);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertEquals((byte)2, bigFraction2.byteValue());
      assertEquals((byte) (-75), bigFraction15.byteValue());
      assertEquals((short)181, bigFraction15.shortValue());
      assertNotNull(bigFraction15);
      assertNotSame(bigFraction0, bigFraction13);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction12);
      assertNotSame(bigFraction0, bigFraction10);
      assertSame(bigFraction0, bigFraction14);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction11);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction15);
      assertNotSame(bigFraction1, bigFraction15);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction13);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction10);
      assertNotSame(bigFraction1, bigFraction7);
      assertSame(bigFraction1, bigFraction0);
      assertSame(bigFraction1, bigFraction14);
      assertNotSame(bigFraction1, bigFraction12);
      assertNotSame(bigFraction1, bigFraction11);
      assertNotSame(bigFraction2, bigFraction12);
      assertNotSame(bigFraction2, bigFraction13);
      assertNotSame(bigFraction2, bigFraction15);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction11);
      assertNotSame(bigFraction2, bigFraction14);
      assertNotSame(bigFraction2, bigFraction8);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction10);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction9);
      assertNotSame(bigFraction15, bigFraction0);
      assertNotSame(bigFraction15, bigFraction12);
      assertNotSame(bigFraction15, bigFraction2);
      assertNotSame(bigFraction15, bigFraction13);
      assertNotSame(bigFraction15, bigFraction10);
      assertNotSame(bigFraction15, bigFraction9);
      assertNotSame(bigFraction15, bigFraction6);
      assertNotSame(bigFraction15, bigFraction5);
      assertNotSame(bigFraction15, bigFraction11);
      assertNotSame(bigFraction15, bigFraction1);
      assertNotSame(bigFraction15, bigFraction4);
      assertNotSame(bigFraction15, bigFraction14);
      assertNotSame(bigFraction15, bigFraction3);
      assertNotSame(bigFraction15, bigFraction8);
      assertNotSame(bigFraction15, bigFraction7);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction12));
      assertTrue(bigFraction0.equals((Object)bigFraction9));
      assertTrue(bigFraction0.equals((Object)bigFraction13));
      assertTrue(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction11));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction10));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction10));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction13));
      assertFalse(bigFraction1.equals((Object)bigFraction12));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertTrue(bigFraction1.equals((Object)bigFraction9));
      assertTrue(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction11));
      assertFalse(bigFraction2.equals((Object)bigFraction12));
      assertFalse(bigFraction2.equals((Object)bigFraction13));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction7));
      assertFalse(bigFraction2.equals((Object)bigFraction11));
      assertFalse(bigFraction2.equals((Object)bigFraction14));
      assertFalse(bigFraction2.equals((Object)bigFraction8));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction10));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction9));
      assertFalse(bigFraction15.equals((Object)bigFraction0));
      assertFalse(bigFraction15.equals((Object)bigFraction12));
      assertFalse(bigFraction15.equals((Object)bigFraction2));
      assertFalse(bigFraction15.equals((Object)bigFraction13));
      assertFalse(bigFraction15.equals((Object)bigFraction10));
      assertFalse(bigFraction15.equals((Object)bigFraction9));
      assertFalse(bigFraction15.equals((Object)bigFraction6));
      assertFalse(bigFraction15.equals((Object)bigFraction5));
      assertFalse(bigFraction15.equals((Object)bigFraction11));
      assertFalse(bigFraction15.equals((Object)bigFraction1));
      assertFalse(bigFraction15.equals((Object)bigFraction4));
      assertFalse(bigFraction15.equals((Object)bigFraction14));
      assertFalse(bigFraction15.equals((Object)bigFraction3));
      assertFalse(bigFraction15.equals((Object)bigFraction8));
      assertFalse(bigFraction15.equals((Object)bigFraction7));
      
      long long1 = bigFraction3.getNumeratorAsLong();
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotSame(bigFraction3, bigFraction14);
      assertNotSame(bigFraction3, bigFraction15);
      assertNotSame(bigFraction3, bigFraction8);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction13);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction9);
      assertNotSame(bigFraction3, bigFraction10);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction11);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction12);
      assertEquals((-1L), long1);
      assertFalse(bigFraction3.equals((Object)bigFraction14));
      assertFalse(bigFraction3.equals((Object)bigFraction15));
      assertFalse(bigFraction3.equals((Object)bigFraction8));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction13));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction9));
      assertFalse(bigFraction3.equals((Object)bigFraction10));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction11));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction12));
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1361, (-248));
      assertEquals((byte) (-5), bigFraction0.byteValue());
      assertEquals((short) (-5), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger1 = bigFraction0.getNumerator();
      assertEquals((byte) (-5), bigFraction0.byteValue());
      assertEquals((short) (-5), bigFraction0.shortValue());
      assertEquals((byte) (-81), bigInteger1.byteValue());
      assertEquals((short) (-1361), bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      BigDecimal bigDecimal0 = bigFraction1.MINUS_ONE.bigDecimalValue();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.subtract(5);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((short) (-4), bigFraction2.shortValue());
      assertEquals((byte) (-4), bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      
      String string0 = bigFraction0.ONE_QUARTER.toString();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(string0);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals("1 / 4", string0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      
      int int0 = bigFraction1.intValue();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals(1, int0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      
      int int1 = bigFraction1.ONE_QUARTER.hashCode();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(int1 == int0);
      
      BigFraction bigFraction3 = bigFraction1.ONE_QUARTER.pow(5);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      
      int int2 = bigFraction1.getDenominatorAsInt();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals(5, int2);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(int2 == int0);
      
      BigFraction bigFraction4 = bigFraction1.THREE_QUARTERS.add(bigFraction2);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((short) (-4), bigFraction2.shortValue());
      assertEquals((byte) (-4), bigFraction2.byteValue());
      assertEquals((short) (-4), bigFraction4.shortValue());
      assertEquals((byte) (-4), bigFraction4.byteValue());
      assertNotNull(bigFraction4);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      
      BigFraction bigFraction5 = bigFraction2.pow(0L);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((short) (-4), bigFraction2.shortValue());
      assertEquals((byte) (-4), bigFraction2.byteValue());
      assertEquals((byte)1, bigFraction5.byteValue());
      assertEquals((short)1, bigFraction5.shortValue());
      assertNotNull(bigFraction5);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      
      BigFraction bigFraction6 = bigFraction2.MINUS_ONE.add(bigInteger0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((short) (-4), bigFraction2.shortValue());
      assertEquals((byte) (-4), bigFraction2.byteValue());
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertNotNull(bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction5);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      
      BigFraction bigFraction7 = bigFraction1.multiply(9007199254740994L);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte) (-99), bigFraction7.byteValue());
      assertEquals((short) (-26211), bigFraction7.shortValue());
      assertNotNull(bigFraction7);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction6);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      
      double double0 = bigFraction0.percentageValue();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertEquals(80.0, double0, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      
      BigFraction bigFraction8 = bigFraction7.abs();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte) (-99), bigFraction7.byteValue());
      assertEquals((short) (-26211), bigFraction7.shortValue());
      assertEquals((short) (-26211), bigFraction8.shortValue());
      assertEquals((byte) (-99), bigFraction8.byteValue());
      assertNotNull(bigFraction8);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction2);
      assertSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction5);
      assertSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      
      BigFraction bigFraction9 = bigFraction2.add(bigFraction6);
      assertEquals((short) (-4), bigFraction9.shortValue());
      assertEquals((byte) (-4), bigFraction9.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((short) (-4), bigFraction2.shortValue());
      assertEquals((byte) (-4), bigFraction2.byteValue());
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertNotNull(bigFraction9);
      assertNotSame(bigFraction9, bigFraction4);
      assertNotSame(bigFraction9, bigFraction5);
      assertNotSame(bigFraction9, bigFraction8);
      assertNotSame(bigFraction9, bigFraction0);
      assertNotSame(bigFraction9, bigFraction1);
      assertNotSame(bigFraction9, bigFraction3);
      assertNotSame(bigFraction9, bigFraction6);
      assertSame(bigFraction9, bigFraction2);
      assertNotSame(bigFraction9, bigFraction7);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction5);
      assertSame(bigFraction2, bigFraction9);
      assertNotSame(bigFraction2, bigFraction8);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction7);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction8);
      assertNotSame(bigFraction6, bigFraction9);
      assertNotSame(bigFraction6, bigFraction5);
      assertFalse(bigFraction9.equals((Object)bigFraction4));
      assertFalse(bigFraction9.equals((Object)bigFraction5));
      assertFalse(bigFraction9.equals((Object)bigFraction8));
      assertFalse(bigFraction9.equals((Object)bigFraction0));
      assertFalse(bigFraction9.equals((Object)bigFraction1));
      assertFalse(bigFraction9.equals((Object)bigFraction3));
      assertFalse(bigFraction9.equals((Object)bigFraction6));
      assertFalse(bigFraction9.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction7));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction8));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction7));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction8));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      
      BigFraction bigFraction10 = new BigFraction((-2197L));
      assertEquals((short) (-2197), bigFraction10.shortValue());
      assertEquals((byte)107, bigFraction10.byteValue());
      assertNotNull(bigFraction10);
      assertFalse(bigFraction10.equals((Object)bigFraction1));
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      assertFalse(bigFraction10.equals((Object)bigFraction9));
      assertFalse(bigFraction10.equals((Object)bigFraction7));
      assertFalse(bigFraction10.equals((Object)bigFraction2));
      assertFalse(bigFraction10.equals((Object)bigFraction4));
      assertFalse(bigFraction10.equals((Object)bigFraction0));
      assertFalse(bigFraction10.equals((Object)bigFraction3));
      assertFalse(bigFraction10.equals((Object)bigFraction5));
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      
      BigFractionField bigFractionField0 = bigFraction10.getField();
      assertEquals((short) (-2197), bigFraction10.shortValue());
      assertEquals((byte)107, bigFraction10.byteValue());
      assertNotNull(bigFractionField0);
      assertNotSame(bigFraction10, bigFraction1);
      assertNotSame(bigFraction10, bigFraction6);
      assertNotSame(bigFraction10, bigFraction9);
      assertNotSame(bigFraction10, bigFraction7);
      assertNotSame(bigFraction10, bigFraction2);
      assertNotSame(bigFraction10, bigFraction4);
      assertNotSame(bigFraction10, bigFraction0);
      assertNotSame(bigFraction10, bigFraction3);
      assertNotSame(bigFraction10, bigFraction5);
      assertNotSame(bigFraction10, bigFraction8);
      assertFalse(bigFraction10.equals((Object)bigFraction1));
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      assertFalse(bigFraction10.equals((Object)bigFraction9));
      assertFalse(bigFraction10.equals((Object)bigFraction7));
      assertFalse(bigFraction10.equals((Object)bigFraction2));
      assertFalse(bigFraction10.equals((Object)bigFraction4));
      assertFalse(bigFraction10.equals((Object)bigFraction0));
      assertFalse(bigFraction10.equals((Object)bigFraction3));
      assertFalse(bigFraction10.equals((Object)bigFraction5));
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      
      double double1 = bigFraction1.percentageValue();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction10);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction5);
      assertEquals(180.0, double1, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction10));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction10));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertNotEquals(double1, double0, 0.01);
      
      BigFraction bigFraction11 = bigFraction3.subtract(bigFraction8);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)99, bigFraction11.byteValue());
      assertEquals((short)26211, bigFraction11.shortValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((byte) (-99), bigFraction7.byteValue());
      assertEquals((short) (-26211), bigFraction7.shortValue());
      assertEquals((short) (-26211), bigFraction8.shortValue());
      assertEquals((byte) (-99), bigFraction8.byteValue());
      assertNotNull(bigFraction11);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction11);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction10);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction11);
      assertNotSame(bigFraction11, bigFraction6);
      assertNotSame(bigFraction11, bigFraction7);
      assertNotSame(bigFraction11, bigFraction10);
      assertNotSame(bigFraction11, bigFraction1);
      assertNotSame(bigFraction11, bigFraction0);
      assertNotSame(bigFraction11, bigFraction3);
      assertNotSame(bigFraction11, bigFraction4);
      assertNotSame(bigFraction11, bigFraction2);
      assertNotSame(bigFraction11, bigFraction8);
      assertNotSame(bigFraction11, bigFraction5);
      assertNotSame(bigFraction11, bigFraction9);
      assertNotSame(bigFraction3, bigFraction11);
      assertNotSame(bigFraction3, bigFraction8);
      assertNotSame(bigFraction3, bigFraction10);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction9);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction9);
      assertNotSame(bigFraction7, bigFraction11);
      assertSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction10);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction10);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction9);
      assertSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction11);
      assertNotSame(bigFraction8, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction10));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction10));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction11.equals((Object)bigFraction6));
      assertFalse(bigFraction11.equals((Object)bigFraction7));
      assertFalse(bigFraction11.equals((Object)bigFraction10));
      assertFalse(bigFraction11.equals((Object)bigFraction1));
      assertFalse(bigFraction11.equals((Object)bigFraction0));
      assertFalse(bigFraction11.equals((Object)bigFraction3));
      assertFalse(bigFraction11.equals((Object)bigFraction4));
      assertFalse(bigFraction11.equals((Object)bigFraction2));
      assertFalse(bigFraction11.equals((Object)bigFraction8));
      assertFalse(bigFraction11.equals((Object)bigFraction5));
      assertFalse(bigFraction11.equals((Object)bigFraction9));
      assertFalse(bigFraction3.equals((Object)bigFraction8));
      assertFalse(bigFraction3.equals((Object)bigFraction10));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction9));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction9));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction10));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction10));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction9));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      
      String string1 = bigFraction8.toString();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte) (-99), bigFraction7.byteValue());
      assertEquals((short) (-26211), bigFraction7.shortValue());
      assertEquals((short) (-26211), bigFraction8.shortValue());
      assertEquals((byte) (-99), bigFraction8.byteValue());
      assertNotNull(string1);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction11);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction10);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction11);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction9);
      assertNotSame(bigFraction7, bigFraction11);
      assertSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction10);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction10);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction9);
      assertSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction11);
      assertNotSame(bigFraction8, bigFraction2);
      assertEquals("81064793292668946 / 5", string1);
      assertFalse(bigFraction0.equals((Object)bigFraction10));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction11));
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction10));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction11));
      assertFalse(string1.equals((Object)string0));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction9));
      assertFalse(bigFraction7.equals((Object)bigFraction11));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction10));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction10));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction9));
      assertFalse(bigFraction8.equals((Object)bigFraction11));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      
      BigFraction bigFraction12 = bigFraction7.add(bigInteger0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((short) (-26210), bigFraction12.shortValue());
      assertEquals((byte) (-98), bigFraction12.byteValue());
      assertEquals((byte) (-99), bigFraction7.byteValue());
      assertEquals((short) (-26211), bigFraction7.shortValue());
      assertNotNull(bigFraction12);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction11);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction12);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction12);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction10);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction11);
      assertNotSame(bigFraction12, bigFraction6);
      assertNotSame(bigFraction12, bigFraction7);
      assertNotSame(bigFraction12, bigFraction3);
      assertNotSame(bigFraction12, bigFraction1);
      assertNotSame(bigFraction12, bigFraction10);
      assertNotSame(bigFraction12, bigFraction0);
      assertNotSame(bigFraction12, bigFraction4);
      assertNotSame(bigFraction12, bigFraction2);
      assertNotSame(bigFraction12, bigFraction11);
      assertNotSame(bigFraction12, bigFraction8);
      assertNotSame(bigFraction12, bigFraction9);
      assertNotSame(bigFraction12, bigFraction5);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction11);
      assertNotSame(bigFraction7, bigFraction9);
      assertSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction12);
      assertNotSame(bigFraction7, bigFraction10);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction6);
      assertFalse(bigFraction0.equals((Object)bigFraction10));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction11));
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction10));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction11));
      assertFalse(bigFraction12.equals((Object)bigFraction6));
      assertFalse(bigFraction12.equals((Object)bigFraction7));
      assertFalse(bigFraction12.equals((Object)bigFraction3));
      assertFalse(bigFraction12.equals((Object)bigFraction1));
      assertFalse(bigFraction12.equals((Object)bigFraction10));
      assertFalse(bigFraction12.equals((Object)bigFraction0));
      assertFalse(bigFraction12.equals((Object)bigFraction4));
      assertFalse(bigFraction12.equals((Object)bigFraction2));
      assertFalse(bigFraction12.equals((Object)bigFraction11));
      assertFalse(bigFraction12.equals((Object)bigFraction8));
      assertFalse(bigFraction12.equals((Object)bigFraction9));
      assertFalse(bigFraction12.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction9));
      assertFalse(bigFraction7.equals((Object)bigFraction11));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction10));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-274.6196));
      assertEquals((short) (-274), bigFraction0.shortValue());
      assertEquals((byte) (-18), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-43);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-43), (byte)0, (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(3, byteArray0.length);
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      assertEquals((short) (-274), bigFraction0.shortValue());
      assertEquals((byte) (-18), bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-275), bigFraction1.shortValue());
      assertEquals((byte) (-19), bigFraction1.byteValue());
      assertArrayEquals(new byte[] {(byte) (-43), (byte)0, (byte)0}, byteArray0);
      assertNotNull(bigFraction1);
      assertEquals(3, byteArray0.length);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      BigFraction bigFraction2 = BigFraction.getReducedFraction(2146853702, 1318);
      assertEquals((byte) (-56), bigFraction2.byteValue());
      assertEquals((short) (-9528), bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      
      long long0 = bigFraction2.getDenominatorAsLong();
      assertEquals((byte) (-56), bigFraction2.byteValue());
      assertEquals((short) (-9528), bigFraction2.shortValue());
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals(659L, long0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      
      BigFractionField bigFractionField0 = bigFraction1.getField();
      assertEquals((short) (-274), bigFraction0.shortValue());
      assertEquals((byte) (-18), bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-275), bigFraction1.shortValue());
      assertEquals((byte) (-19), bigFraction1.byteValue());
      assertArrayEquals(new byte[] {(byte) (-43), (byte)0, (byte)0}, byteArray0);
      assertNotNull(bigFractionField0);
      assertEquals(3, byteArray0.length);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      long long1 = bigFraction2.getNumeratorAsLong();
      assertEquals((byte) (-56), bigFraction2.byteValue());
      assertEquals((short) (-9528), bigFraction2.shortValue());
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals(1073426851L, long1);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(long1 == long0);
      
      double double0 = bigFraction2.pow((double) 3054);
      assertEquals((byte) (-56), bigFraction2.byteValue());
      assertEquals((short) (-9528), bigFraction2.shortValue());
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      
      BigFraction bigFraction3 = BigFraction.getReducedFraction(5, (byte) (-43));
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      
      BigFraction bigFraction4 = new BigFraction((-274.6196), 2146853702);
      assertEquals((byte) (-18), bigFraction4.byteValue());
      assertEquals((short) (-274), bigFraction4.shortValue());
      assertNotNull(bigFraction4);
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      
      long long2 = bigFraction0.getNumeratorAsLong();
      assertEquals((short) (-274), bigFraction0.shortValue());
      assertEquals((byte) (-18), bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals((-150973721707597L), long2);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      double double1 = bigFraction4.percentageValue();
      assertEquals((byte) (-18), bigFraction4.byteValue());
      assertEquals((short) (-274), bigFraction4.shortValue());
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertEquals((-27461.96), double1, 0.01);
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      bigFraction0.hashCode();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.divide(3408);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      
      BigDecimal bigDecimal0 = bigFraction1.bigDecimalValue();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      assertNotSame(bigFraction0, bigFraction2);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction3 = bigFraction2.pow((long) 3408);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      
      long long0 = 0L;
      double double0 = bigFraction1.percentageValue();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertEquals(0.0, double0, 0.01);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      
      BigFraction bigFraction4 = bigFraction2.divide(3914L);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotNull(bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction4);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction4.equals((Object)bigFraction1));
      assertTrue(bigFraction4.equals((Object)bigFraction2));
      assertTrue(bigFraction4.equals((Object)bigFraction0));
      assertTrue(bigFraction4.equals((Object)bigFraction3));
      
      BigFraction bigFraction5 = bigFraction3.divide(bigInteger0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertNotNull(bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction4);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      assertTrue(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction4));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction4));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction4));
      assertTrue(bigFraction5.equals((Object)bigFraction2));
      assertTrue(bigFraction5.equals((Object)bigFraction4));
      assertTrue(bigFraction5.equals((Object)bigFraction0));
      assertTrue(bigFraction5.equals((Object)bigFraction1));
      assertTrue(bigFraction5.equals((Object)bigFraction3));
      
      float float0 = bigFraction4.floatValue();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction4);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction5);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction5));
      assertTrue(bigFraction1.equals((Object)bigFraction5));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction4));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction4));
      assertTrue(bigFraction2.equals((Object)bigFraction5));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction4.equals((Object)bigFraction5));
      assertTrue(bigFraction4.equals((Object)bigFraction1));
      assertTrue(bigFraction4.equals((Object)bigFraction2));
      assertTrue(bigFraction4.equals((Object)bigFraction0));
      assertTrue(bigFraction4.equals((Object)bigFraction3));
      
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFractionField0);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertSame(bigFraction0, bigFraction1);
      assertTrue(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction5));
      
      int int0 = (-1525);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1525));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.TWO_THIRDS.getNumeratorAsLong();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals(2L, long0);
      
      BigFraction bigFraction1 = new BigFraction((-1.486720391901626E-9), (-2145294570));
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)2, bigInteger0.shortValue());
      assertEquals((byte)2, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(1, byteArray0.length);
      
      BigFraction bigFraction2 = new BigFraction(bigInteger0, bigInteger0);
      assertEquals((short)2, bigInteger0.shortValue());
      assertEquals((byte)2, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertNotNull(bigFraction2);
      assertEquals(1, byteArray0.length);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      
      long long1 = bigFraction2.longValue();
      assertEquals((short)2, bigInteger0.shortValue());
      assertEquals((byte)2, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals(1L, long1);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(long1 == long0);
      
      long long2 = bigFraction0.getNumeratorAsLong();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(1L, long2);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2203.767449262, 2203.767449262, 822);
      assertEquals((byte) (-101), bigFraction0.byteValue());
      assertEquals((short)2203, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals((byte) (-101), bigFraction0.byteValue());
      assertEquals((short)2203, bigFraction0.shortValue());
      assertEquals(2203L, long0);
      
      bigFraction0.hashCode();
      assertEquals((byte) (-101), bigFraction0.byteValue());
      assertEquals((short)2203, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals((byte) (-101), bigFraction0.byteValue());
      assertEquals((short)2203, bigFraction0.shortValue());
      assertEquals((short)2203, bigFraction1.shortValue());
      assertEquals((byte) (-101), bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction1.divide(822);
      assertEquals((byte) (-101), bigFraction0.byteValue());
      assertEquals((short)2203, bigFraction0.shortValue());
      assertEquals((short)2203, bigFraction1.shortValue());
      assertEquals((byte) (-101), bigFraction1.byteValue());
      assertEquals((byte)2, bigFraction2.byteValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((byte) (-101), bigFraction0.byteValue());
      assertEquals((short)2203, bigFraction0.shortValue());
      assertEquals((short)2203, bigDecimal0.shortValue());
      assertEquals((byte) (-101), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      assertNotSame(bigFraction0, bigFraction2);
      assertSame(bigFraction0, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction3 = bigFraction1.pow(2667L);
      assertEquals((byte) (-101), bigFraction0.byteValue());
      assertEquals((short)2203, bigFraction0.shortValue());
      assertEquals((short)2203, bigFraction1.shortValue());
      assertEquals((byte) (-101), bigFraction1.byteValue());
      assertEquals((short)7299, bigFraction3.shortValue());
      assertEquals((byte) (-125), bigFraction3.byteValue());
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      
      double double0 = bigFraction0.percentageValue();
      assertEquals((byte) (-101), bigFraction0.byteValue());
      assertEquals((short)2203, bigFraction0.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertSame(bigFraction0, bigFraction1);
      assertEquals(220300.0, double0, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      
      BigFraction bigFraction4 = bigFraction1.divide(2203L);
      assertEquals((byte) (-101), bigFraction0.byteValue());
      assertEquals((short)2203, bigFraction0.shortValue());
      assertEquals((short)2203, bigFraction1.shortValue());
      assertEquals((byte) (-101), bigFraction1.byteValue());
      assertEquals((short)1, bigFraction4.shortValue());
      assertEquals((byte)1, bigFraction4.byteValue());
      assertNotNull(bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      
      BigFraction bigFraction5 = bigFraction2.divide(bigInteger0);
      assertEquals((byte) (-101), bigFraction0.byteValue());
      assertEquals((short)2203, bigFraction0.shortValue());
      assertEquals((short)2203, bigFraction1.shortValue());
      assertEquals((byte) (-101), bigFraction1.byteValue());
      assertEquals((byte)2, bigFraction2.byteValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertNotNull(bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction5);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      
      float float0 = bigFraction0.floatValue();
      assertEquals((byte) (-101), bigFraction0.byteValue());
      assertEquals((short)2203, bigFraction0.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction5);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertEquals(2203.0F, float0, 0.01F);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      
      BigFractionField bigFractionField0 = bigFraction5.getField();
      assertEquals((byte) (-101), bigFraction0.byteValue());
      assertEquals((short)2203, bigFraction0.shortValue());
      assertEquals((short)2203, bigFraction1.shortValue());
      assertEquals((byte) (-101), bigFraction1.byteValue());
      assertEquals((byte)2, bigFraction2.byteValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertNotNull(bigFractionField0);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction5);
      assertSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      
      int int0 = (-1525);
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue((-1525));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = new BigFraction((-946.1849073));
      assertEquals((short) (-946), bigFraction1.shortValue());
      assertEquals((byte)78, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      int int0 = (-1339);
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      assertEquals((short) (-946), bigFraction1.shortValue());
      assertEquals((byte)78, bigFraction1.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)78, bigFraction2.byteValue());
      assertEquals((short) (-946), bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotNull(bigFractionField0);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      
      int int1 = 946698786;
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(946698786, (-1339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2450.0629786588);
      assertEquals((byte) (-110), bigFraction0.byteValue());
      assertEquals((short)2450, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((byte) (-110), bigFraction0.byteValue());
      assertEquals((short)2450, bigFraction0.shortValue());
      assertEquals((byte) (-110), bigDecimal0.byteValue());
      assertEquals((short)2450, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      BigFraction bigFraction1 = bigFraction0.pow(0L);
      assertEquals((byte) (-110), bigFraction0.byteValue());
      assertEquals((short)2450, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      double double0 = bigFraction1.percentageValue();
      assertEquals((byte) (-110), bigFraction0.byteValue());
      assertEquals((short)2450, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(100.0, double0, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      BigFraction bigFraction2 = bigFraction0.divide((long) (-1339));
      assertEquals((byte) (-110), bigFraction0.byteValue());
      assertEquals((short)2450, bigFraction0.shortValue());
      assertEquals((short) (-1), bigFraction2.shortValue());
      assertEquals((byte) (-1), bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      
      BigFraction bigFraction3 = bigFraction0.divide(bigInteger1);
      assertEquals((byte) (-110), bigFraction0.byteValue());
      assertEquals((short)2450, bigFraction0.shortValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((byte) (-11), bigFraction3.byteValue());
      assertEquals((short)245, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      
      float float0 = bigFraction1.floatValue();
      assertEquals((byte) (-110), bigFraction0.byteValue());
      assertEquals((short)2450, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals(1.0F, float0, 0.01F);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      
      BigFractionField bigFractionField0 = bigFraction2.getField();
      assertEquals((byte) (-110), bigFraction0.byteValue());
      assertEquals((short)2450, bigFraction0.shortValue());
      assertEquals((short) (-1), bigFraction2.shortValue());
      assertEquals((byte) (-1), bigFraction2.byteValue());
      assertNotNull(bigFractionField0);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue((-2819));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3515.93225711355), 2458.3722, 3054);
      assertEquals((short) (-3516), bigFraction0.shortValue());
      assertEquals((byte)68, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      bigFraction0.THREE_FIFTHS.hashCode();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      boolean boolean0 = bigFraction0.TWO.equals((Object) null);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertFalse(boolean0);
      
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.multiply(3986L);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)797, bigFraction1.shortValue());
      assertEquals((byte)29, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(5L, long0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)5, bigInteger0.shortValue());
      assertEquals((byte)5, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      
      long long1 = bigFraction1.ONE_QUARTER.longValue();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)797, bigFraction1.shortValue());
      assertEquals((byte)29, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0L, long1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(long1 == long0);
      
      BigFraction bigFraction2 = bigFraction0.subtract((-1539));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)3, bigFraction2.byteValue());
      assertEquals((short)1539, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      
      BigFraction bigFraction3 = new BigFraction((-546));
      assertEquals((short) (-546), bigFraction3.shortValue());
      assertEquals((byte) (-34), bigFraction3.byteValue());
      assertNotNull(bigFraction3);
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.add(bigInteger0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)5, bigInteger0.shortValue());
      assertEquals((byte)5, bigInteger0.byteValue());
      assertEquals((short) (-546), bigFraction3.shortValue());
      assertEquals((byte) (-34), bigFraction3.byteValue());
      assertEquals((byte)5, bigFraction4.byteValue());
      assertEquals((short)5, bigFraction4.shortValue());
      assertNotNull(bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      
      BigFraction bigFraction5 = bigFraction1.multiply(bigFraction3);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)797, bigFraction1.shortValue());
      assertEquals((byte)29, bigFraction1.byteValue());
      assertEquals((short) (-546), bigFraction3.shortValue());
      assertEquals((byte) (-34), bigFraction3.byteValue());
      assertEquals((short)23481, bigFraction5.shortValue());
      assertEquals((byte) (-71), bigFraction5.byteValue());
      assertNotNull(bigFraction5);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      
      BigFraction bigFraction6 = bigFraction3.add(bigInteger0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)5, bigInteger0.shortValue());
      assertEquals((byte)5, bigInteger0.byteValue());
      assertEquals((short) (-546), bigFraction3.shortValue());
      assertEquals((byte) (-34), bigFraction3.byteValue());
      assertEquals((short) (-541), bigFraction6.shortValue());
      assertEquals((byte) (-29), bigFraction6.byteValue());
      assertNotNull(bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      
      BigFraction bigFraction7 = bigFraction2.divide(bigInteger0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)5, bigInteger0.shortValue());
      assertEquals((byte)5, bigInteger0.byteValue());
      assertEquals((byte)3, bigFraction2.byteValue());
      assertEquals((short)1539, bigFraction2.shortValue());
      assertEquals((byte)51, bigFraction7.byteValue());
      assertEquals((short)307, bigFraction7.shortValue());
      assertNotNull(bigFraction7);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction5);
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.ONE.subtract(100);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short) (-99), bigFraction1.shortValue());
      assertEquals((byte) (-99), bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.subtract(56L);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short) (-55), bigFraction2.shortValue());
      assertEquals((byte) (-55), bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      
      BigFraction bigFraction3 = bigFraction1.ONE.add((-6498));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short) (-99), bigFraction1.shortValue());
      assertEquals((byte) (-99), bigFraction1.byteValue());
      assertEquals((short) (-6497), bigFraction3.shortValue());
      assertEquals((byte) (-97), bigFraction3.byteValue());
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      
      long long0 = bigFraction0.longValue();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(0L, long0);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, 1);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.TWO.divide((long) 1);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.add(bigInteger0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      
      BigFraction bigFraction3 = bigFraction0.reduce();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      
      int int0 = bigFraction2.getNumeratorAsInt();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertEquals(6, int0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      BigFraction bigFraction4 = bigFraction2.multiply(bigInteger1);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)12, bigFraction4.shortValue());
      assertEquals((byte)12, bigFraction4.byteValue());
      assertNotNull(bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      
      BigFraction bigFraction5 = bigFraction2.negate();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short) (-1), bigFraction5.shortValue());
      assertEquals((byte) (-1), bigFraction5.byteValue());
      assertNotNull(bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      
      BigFraction bigFraction6 = bigFraction5.subtract(bigFraction0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short) (-1), bigFraction5.shortValue());
      assertEquals((byte) (-1), bigFraction5.byteValue());
      assertEquals((byte) (-2), bigFraction6.byteValue());
      assertEquals((short) (-2), bigFraction6.shortValue());
      assertNotNull(bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      
      int int1 = bigFraction6.getDenominatorAsInt();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short) (-1), bigFraction5.shortValue());
      assertEquals((byte) (-1), bigFraction5.byteValue());
      assertEquals((byte) (-2), bigFraction6.byteValue());
      assertEquals((short) (-2), bigFraction6.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction0);
      assertEquals(5, int1);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(int1 == int0);
      
      BigFraction bigFraction7 = bigFraction5.subtract(134);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short) (-1), bigFraction5.shortValue());
      assertEquals((byte) (-1), bigFraction5.byteValue());
      assertEquals((byte)121, bigFraction7.byteValue());
      assertEquals((short) (-135), bigFraction7.shortValue());
      assertNotNull(bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction7);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction6));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      
      BigFraction bigFraction3 = bigFraction0.MINUS_ONE.abs();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      
      int int0 = 0;
      int int1 = 3519;
      int int2 = 956;
      // Undeclared exception!
      try { 
        bigFraction1.TWO.bigDecimalValue(3519, 956);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      bigFraction0.TWO_FIFTHS.hashCode();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.multiply(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      
      double double0 = bigFraction0.pow((-1.0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertEquals(2.5, double0, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      
      BigFraction bigFraction3 = bigFraction0.pow(3019);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      
      BigFraction bigFraction4 = bigFraction3.TWO_FIFTHS.subtract(38L);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte) (-37), bigFraction4.byteValue());
      assertEquals((short) (-37), bigFraction4.shortValue());
      assertNotNull(bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      
      BigFraction bigFraction5 = bigFraction2.THREE_QUARTERS.divide(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte)1, bigFraction5.byteValue());
      assertEquals((short)1, bigFraction5.shortValue());
      assertNotNull(bigFraction5);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      
      int int0 = bigFraction0.compareTo(bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction5);
      assertEquals(1, int0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      
      BigFraction bigFraction6 = bigFraction1.multiply(3019);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte) (-14), bigFraction6.byteValue());
      assertEquals((short)754, bigFraction6.shortValue());
      assertNotNull(bigFraction6);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      
      long long0 = bigFraction6.longValue();
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte) (-14), bigFraction6.byteValue());
      assertEquals((short)754, bigFraction6.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction0);
      assertEquals(754L, long0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      
      double double0 = bigFraction0.ONE_THIRD.pow(0.0);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(1.0, double0, 0.01);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      
      BigFraction bigFraction2 = bigFraction1.pow(0L);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      
      BigFraction bigFraction3 = bigFraction0.negate();
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals((-1L), long0);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      
      String string0 = bigFraction3.toString();
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertNotNull(string0);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertEquals("1", string0);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(1, int0);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)4, bigInteger0.byteValue());
      assertEquals((short)4, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-979L), 2147483648L);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.multiply((-63L));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      long long0 = bigFraction1.THREE_QUARTERS.longValue();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0L, long0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      long long1 = bigFraction1.getDenominatorAsLong();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(2147483648L, long1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)10, bigFraction0.byteValue());
      assertEquals((short)10, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      BigFraction bigFraction2 = bigFraction1.pow(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      
      double double0 = bigFraction1.FOUR_FIFTHS.pow(0.0);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(1.0, double0, 0.01);
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)10, bigFraction0.byteValue());
      assertEquals((short)10, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(1, int0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      BigFraction bigFraction3 = bigFraction0.reciprocal();
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)10, bigFraction0.byteValue());
      assertEquals((short)10, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      
      BigFraction bigFraction4 = bigFraction2.pow((-91L));
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte) (-23), bigFraction4.byteValue());
      assertEquals((short)17385, bigFraction4.shortValue());
      assertNotNull(bigFraction4);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2670L);
      assertEquals((short)2670, bigFraction0.shortValue());
      assertEquals((byte)110, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(bigInteger0);
      assertEquals((short)2670, bigFraction0.shortValue());
      assertEquals((byte)110, bigFraction0.byteValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short) (-9), bigFraction1.shortValue());
      assertEquals((byte) (-9), bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger1);
      assertEquals((short)2670, bigFraction0.shortValue());
      assertEquals((byte)110, bigFraction0.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((byte)11, bigFraction2.byteValue());
      assertEquals((short)267, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(100, 100);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.add((-3156L));
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte) (-85), bigFraction2.byteValue());
      assertEquals((short) (-3157), bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      
      int int0 = bigFraction1.ONE_THIRD.intValue();
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals(0, int0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-26);
      BigDecimal bigDecimal0 = bigFraction1.ZERO.bigDecimalValue(0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-98);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)20894, bigInteger0.shortValue());
      assertEquals((byte) (-98), bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-26), (byte)1, (byte) (-123), (byte)117, (byte)81, (byte) (-98)}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(6, byteArray0.length);
      
      BigFraction bigFraction3 = bigFraction1.ONE.subtract(bigInteger0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)20894, bigInteger0.shortValue());
      assertEquals((byte) (-98), bigInteger0.byteValue());
      assertEquals((short) (-20893), bigFraction3.shortValue());
      assertEquals((byte)99, bigFraction3.byteValue());
      assertArrayEquals(new byte[] {(byte) (-26), (byte)1, (byte) (-123), (byte)117, (byte)81, (byte) (-98)}, byteArray0);
      assertNotNull(bigFraction3);
      assertEquals(6, byteArray0.length);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      
      int int1 = bigFraction0.compareTo(bigFraction1);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals(1, int1);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(int1 == int0);
      
      BigDecimal bigDecimal1 = bigFraction0.bigDecimalValue(1, 1);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      int int2 = bigFraction0.getNumeratorAsInt();
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(1, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      
      BigFraction bigFraction4 = bigFraction0.subtract(bigFraction1);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction4);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertTrue(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      
      int int3 = bigFraction3.hashCode();
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)20894, bigInteger0.shortValue());
      assertEquals((byte) (-98), bigInteger0.byteValue());
      assertEquals((short) (-20893), bigFraction3.shortValue());
      assertEquals((byte)99, bigFraction3.byteValue());
      assertArrayEquals(new byte[] {(byte) (-26), (byte)1, (byte) (-123), (byte)117, (byte)81, (byte) (-98)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = bigFraction1.equals(object0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertFalse(boolean0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4585.72224966, 5);
      assertEquals((byte) (-23), bigFraction0.byteValue());
      assertEquals((short)4585, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.longValue();
      assertEquals((byte) (-23), bigFraction0.byteValue());
      assertEquals((short)4585, bigFraction0.shortValue());
      assertEquals(4585L, long0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1782);
      assertEquals((short)1782, bigFraction0.shortValue());
      assertEquals((byte) (-10), bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.ONE_THIRD.getNumeratorAsLong();
      assertEquals((short)1782, bigFraction0.shortValue());
      assertEquals((byte) (-10), bigFraction0.byteValue());
      assertEquals(1L, long0);
      
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertEquals((short)1782, bigFraction0.shortValue());
      assertEquals((byte) (-10), bigFraction0.byteValue());
      assertEquals((byte) (-10), bigFraction1.byteValue());
      assertEquals((short)1782, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)85;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte)85, bigInteger0.byteValue());
      assertEquals((short)13141, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)51, (byte)85}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(3, byteArray0.length);
      
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.add(bigInteger0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)85, bigInteger0.byteValue());
      assertEquals((short)13141, bigInteger0.shortValue());
      assertEquals((byte)86, bigFraction1.byteValue());
      assertEquals((short)13142, bigFraction1.shortValue());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)51, (byte)85}, byteArray0);
      assertNotNull(bigFraction1);
      assertEquals(3, byteArray0.length);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      float float0 = bigFraction0.floatValue();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(0.6666667F, float0, 0.01F);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      
      BigFraction bigFraction2 = BigFraction.TWO;
      assertEquals((byte)2, bigFraction2.byteValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      
      int int0 = bigFraction2.TWO_FIFTHS.getDenominatorAsInt();
      assertEquals((byte)2, bigFraction2.byteValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals(5, int0);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      
      int int1 = bigFraction0.ONE_HALF.compareTo(bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction2.byteValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((-1), int1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(int1 == int0);
      
      int int2 = (-1102);
      BigFraction bigFraction3 = bigFraction0.TWO_THIRDS.reduce();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      
      BigFraction bigFraction4 = bigFraction0.divide((-1102));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotNull(bigFraction4);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      
      int int3 = bigFraction0.compareTo(bigFraction4);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertEquals(1, int3);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      long long0 = bigFraction4.getDenominatorAsLong();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertEquals(1653L, long0);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      
      String string0 = bigFraction2.ONE.toString();
      assertEquals((byte)2, bigFraction2.byteValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertNotNull(string0);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals("1", string0);
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      BigFraction bigFraction5 = bigFraction2.divide(bigInteger1);
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)2, bigFraction2.byteValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertNotNull(bigFraction5);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      
      // Undeclared exception!
      try { 
        bigFraction5.FOUR_FIFTHS.bigDecimalValue((int) (byte) (-104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(100, 2);
      assertEquals((byte)50, bigFraction0.byteValue());
      assertEquals((short)50, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.TWO_THIRDS.getNumeratorAsInt();
      assertEquals((byte)50, bigFraction0.byteValue());
      assertEquals((short)50, bigFraction0.shortValue());
      assertEquals(2, int0);
      
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.divide(3676);
      assertEquals((byte)50, bigFraction0.byteValue());
      assertEquals((short)50, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      int int1 = bigFraction0.getNumeratorAsInt();
      assertEquals((byte)50, bigFraction0.byteValue());
      assertEquals((short)50, bigFraction0.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(50, int1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(int1 == int0);
      
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.ONE_FIFTH.getNumeratorAsInt();
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.divide(bigInteger0);
      bigFraction1.ZERO.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ZERO.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.subtract(bigInteger0);
      bigFraction0.TWO_THIRDS.divide(bigFraction3);
      bigFraction3.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction3.divide(1145);
      bigFraction3.getDenominatorAsLong();
      BigFraction bigFraction5 = bigFraction3.reciprocal();
      bigFraction2.bigDecimalValue();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction6 = bigFraction0.THREE_FIFTHS.multiply(bigFraction5);
      BigFraction bigFraction7 = bigFraction3.divide(2);
      bigFraction4.ONE_QUARTER.getField();
      bigFraction1.TWO_QUARTERS.doubleValue();
      bigFraction4.equals(bigFraction7);
      BigFraction bigFraction8 = bigFraction4.divide(bigInteger0);
      bigFraction3.subtract(bigInteger0);
      BigFraction bigFraction9 = bigFraction4.multiply((long) 1145);
      BigFraction bigFraction10 = BigFraction.TWO;
      bigFraction10.ONE_QUARTER.doubleValue();
      BigFraction bigFraction11 = bigFraction2.subtract(bigFraction10);
      assertEquals((byte) (-2), bigFraction11.byteValue());
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      
      bigFraction6.pow(bigInteger0);
      BigFraction bigFraction12 = bigFraction9.divide(bigFraction3);
      assertEquals((byte)1, bigFraction12.byteValue());
      
      BigFraction bigFraction13 = bigFraction3.add(1);
      assertTrue(bigFraction3.equals((Object)bigFraction9));
      assertEquals((byte) (-8), bigFraction13.byteValue());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.divide(bigInteger0);
      bigFraction1.ONE_THIRD.pow(bigInteger0);
      bigFraction0.getNumerator();
      bigFraction1.TWO_THIRDS.add(0L);
      int int0 = 1;
      bigFraction0.ONE.reciprocal();
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.multiply(1);
      int int1 = 158;
      // Undeclared exception!
      try { 
        bigFraction2.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(bigInteger0);
      bigFraction0.getField();
      bigFraction0.toString();
      BigFraction bigFraction2 = bigFraction1.add(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.TWO_FIFTHS.reduce();
      BigFraction bigFraction4 = bigFraction0.add(bigFraction1);
      bigFraction4.TWO_QUARTERS.multiply(bigInteger0);
      bigFraction4.THREE_QUARTERS.bigDecimalValue((-1), 1);
      bigFraction4.THREE_FIFTHS.getDenominatorAsInt();
      BigFraction bigFraction5 = bigFraction3.TWO.subtract(bigInteger0);
      bigFraction2.toString();
      bigFraction2.intValue();
      bigFraction0.floatValue();
      bigFraction0.percentageValue();
      BigFraction bigFraction6 = bigFraction1.subtract(100L);
      bigFraction6.toString();
      // Undeclared exception!
      try { 
        bigFraction5.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-475.93053), (-146));
      int int0 = 605;
      BigFraction bigFraction1 = bigFraction0.ONE.subtract(605);
      Object object0 = new Object();
      bigFraction0.TWO.multiply(bigFraction1);
      bigFraction0.equals(object0);
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.multiply((-1132L));
      bigFraction2.FOUR_FIFTHS.percentageValue();
      // Undeclared exception!
      try { 
        bigFraction1.ONE_HALF.bigDecimalValue((-146), 2193);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2450.0629786588);
      int int0 = (-1339);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(bigInteger0);
      bigFraction1.getField();
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.bigDecimalValue((-1339), (-1339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 295;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-1.0), (-1.0), 295);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1 to fraction (-9,223,372,036,854,775,806/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = new BigFraction(1, 1);
      bigFraction0.THREE_FIFTHS.doubleValue();
      BigFraction bigFraction1 = bigFraction0.multiply(2914L);
      // Undeclared exception!
      try { 
        bigFraction1.ONE_HALF.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      String string0 = bigFraction0.toString();
      assertEquals("4 / 5", string0);
      
      BigFraction bigFraction1 = new BigFraction(272);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertEquals((byte) (-39), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.subtract(bigInteger0);
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      bigFraction3.ZERO.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction2.ZERO.multiply(bigFraction3);
      bigFraction0.THREE_FIFTHS.add(bigFraction1);
      BigFraction bigFraction5 = bigFraction0.divide(895);
      bigFraction5.ONE_FIFTH.doubleValue();
      bigFraction0.getNumeratorAsLong();
      bigFraction0.TWO_QUARTERS.add(bigInteger0);
      BigFraction bigFraction6 = bigFraction0.pow((-4264));
      bigFraction6.TWO_THIRDS.negate();
      BigFraction bigFraction7 = bigFraction6.FOUR_FIFTHS.divide(1L);
      BigFraction bigFraction8 = bigFraction7.ONE_QUARTER.abs();
      bigFraction8.ZERO.getNumeratorAsInt();
      BigFraction bigFraction9 = bigFraction0.reduce();
      BigFraction bigFraction10 = bigFraction0.FOUR_FIFTHS.pow(1L);
      bigFraction9.THREE_FIFTHS.pow((-3.912427573594197E-9));
      bigFraction1.compareTo(bigFraction0);
      bigFraction1.intValue();
      bigFraction9.TWO_FIFTHS.multiply(bigFraction1);
      bigFraction10.ONE.subtract(bigFraction9);
      bigFraction9.intValue();
      bigFraction10.toString();
      bigFraction7.subtract((long) 895);
      Object object0 = new Object();
      bigFraction6.ZERO.equals(object0);
      // Undeclared exception!
      try { 
        bigFraction4.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.getNumeratorAsInt();
      bigFraction1.MINUS_ONE.divide((-3572));
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger1);
      BigFraction bigFraction3 = bigFraction0.ONE_QUARTER.pow(bigInteger0);
      bigFraction3.ONE_THIRD.compareTo(bigFraction1);
      bigFraction2.ONE_THIRD.divide(bigFraction0);
      bigFraction2.ONE.multiply((long) 1);
      bigFraction0.floatValue();
      BigFraction bigFraction4 = bigFraction1.subtract(bigInteger1);
      bigFraction4.subtract((-3036L));
      BigFraction bigFraction5 = bigFraction1.reduce();
      bigFraction5.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction5.ONE_THIRD.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.ONE.getNumeratorAsInt();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.divide(2L);
      bigFraction2.THREE_QUARTERS.longValue();
      BigFraction bigFraction3 = bigFraction1.TWO_QUARTERS.subtract(629);
      BigFraction bigFraction4 = bigFraction3.TWO_FIFTHS.reciprocal();
      bigFraction0.getNumeratorAsLong();
      String string0 = bigFraction1.ONE.toString();
      assertEquals("1", string0);
      
      bigFraction4.compareTo(bigFraction3);
      double double0 = bigFraction1.percentageValue();
      assertEquals((-200.0), double0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-51);
      BigFraction bigFraction5 = bigFraction4.ONE_HALF.add(bigFraction2);
      assertEquals((short)0, bigFraction5.shortValue());
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      
      byteArray0[3] = (byte) (-64);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction4.multiply(bigInteger0);
      bigFraction1.getNumeratorAsInt();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3, (-1391));
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.reduce();
      BigFraction bigFraction2 = bigFraction0.add((-632));
      bigFraction2.TWO_FIFTHS.getDenominatorAsInt();
      bigFraction1.intValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.subtract(bigInteger0);
      bigFraction0.divide((-1391));
      BigFraction bigFraction3 = bigFraction0.multiply((long) (-632));
      assertEquals((byte)1, bigFraction3.byteValue());
      
      double double0 = bigFraction2.doubleValue();
      assertEquals((-632.0021567217829), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      bigFraction1.MINUS_ONE.bigDecimalValue();
      int int0 = 5;
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.subtract(5);
      bigFraction0.ONE_QUARTER.toString();
      bigFraction1.intValue();
      bigFraction1.ONE_QUARTER.hashCode();
      bigFraction1.ONE_QUARTER.pow(5);
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction1.THREE_QUARTERS.add(bigFraction2);
      bigFraction2.pow(0L);
      bigFraction2.MINUS_ONE.add(bigInteger0);
      bigFraction3.THREE_FIFTHS.bigDecimalValue();
      bigFraction1.ONE_QUARTER.getDenominatorAsLong();
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.multiply(bigInteger0);
      bigFraction1.ONE_HALF.equals((Object) null);
      bigFraction0.TWO_FIFTHS.bigDecimalValue();
      bigFraction0.ONE_THIRD.hashCode();
      BigFraction bigFraction2 = bigFraction0.negate();
      bigFraction2.ONE_QUARTER.floatValue();
      bigFraction0.bigDecimalValue();
      bigFraction0.TWO_FIFTHS.subtract(711L);
      int int0 = 100;
      BigFraction bigFraction3 = bigFraction2.TWO_FIFTHS.add(bigInteger0);
      bigFraction3.negate();
      bigFraction0.floatValue();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(100, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = (-1);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction((-980), 65);
      BigFraction bigFraction2 = bigFraction1.divide((long) (-980));
      bigFraction1.TWO.bigDecimalValue();
      bigFraction0.equals(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.add(65);
      BigFraction bigFraction4 = bigFraction1.ONE_QUARTER.reduce();
      bigFraction4.MINUS_ONE.intValue();
      BigFraction bigFraction5 = bigFraction4.TWO_FIFTHS.add(2674L);
      assertEquals((short)2674, bigFraction5.shortValue());
      
      BigFraction bigFraction6 = bigFraction3.subtract(0);
      bigFraction3.getField();
      bigFraction2.ONE_QUARTER.subtract(507);
      BigFraction bigFraction7 = bigFraction2.subtract(1307);
      assertEquals((byte) (-26), bigFraction7.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction8 = bigFraction6.pow(bigInteger0);
      BigFraction bigFraction9 = bigFraction3.add(bigFraction0);
      assertEquals((short)50, bigFraction9.shortValue());
      
      bigFraction1.getField();
      double double0 = bigFraction0.pow(0.0);
      assertEquals(1.0, double0, 0.01);
      
      BigFraction bigFraction10 = BigFraction.getReducedFraction((-980), (-980));
      BigFraction bigFraction11 = bigFraction10.TWO_THIRDS.pow(507);
      BigFraction bigFraction12 = BigFraction.ONE;
      bigFraction0.equals(bigFraction12);
      bigFraction11.add((-980));
      assertTrue(bigFraction10.equals((Object)bigFraction8));
      
      long long0 = bigFraction3.getNumeratorAsLong();
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertTrue(bigFraction3.equals((Object)bigFraction6));
      assertEquals(649L, long0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigFraction1.TWO.bigDecimalValue(497, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      boolean boolean0 = bigFraction0.TWO_FIFTHS.equals((Object) null);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)70;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction1.TWO_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.ONE_THIRD.multiply(bigFraction1);
      assertEquals((byte)108, bigFraction2.byteValue());
      
      BigFraction bigFraction3 = bigFraction0.divide((-1198));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction3.shortValue());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.subtract((-862L));
      assertEquals((short)861, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.TWO_THIRDS.getNumeratorAsLong();
      bigFraction0.TWO_FIFTHS.hashCode();
      BigFraction bigFraction1 = bigFraction0.abs();
      int int0 = 179;
      BigFraction bigFraction2 = bigFraction1.divide(179);
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction2.ONE_FIFTH.pow(0L);
      bigFraction0.TWO_QUARTERS.percentageValue();
      // Undeclared exception!
      try { 
        bigFraction3.ONE.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4352.2116), (-1));
      BigFraction bigFraction1 = bigFraction0.add((long) (-1));
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.multiply((-9223372036854775808L));
      BigFraction bigFraction3 = bigFraction2.ONE.negate();
      BigFraction bigFraction4 = bigFraction0.THREE_QUARTERS.reciprocal();
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction5 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction6 = bigFraction1.subtract(bigFraction5);
      bigFraction6.TWO.getDenominatorAsLong();
      assertEquals((byte) (-3), bigFraction6.byteValue());
      
      BigFraction bigFraction7 = bigFraction4.add(1);
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertEquals((short)2, bigFraction7.shortValue());
      
      long long0 = bigFraction1.longValue();
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertEquals((-4354L), long0);
  }
}
