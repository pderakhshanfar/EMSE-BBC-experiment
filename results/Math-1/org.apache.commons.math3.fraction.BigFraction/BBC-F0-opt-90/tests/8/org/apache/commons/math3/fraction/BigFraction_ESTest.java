/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:38:14 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1992.135776));
      assertNotNull(bigFraction0);
      assertEquals((byte)56, bigFraction0.byteValue());
      assertEquals((short) (-1992), bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)56, bigFraction0.byteValue());
      assertEquals((short) (-1992), bigFraction0.shortValue());
      assertEquals((byte)56, bigFraction1.byteValue());
      assertEquals((short) (-1992), bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotNull(bigFraction2);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte)56, bigFraction0.byteValue());
      assertEquals((short) (-1992), bigFraction0.shortValue());
      assertEquals((byte)56, bigFraction1.byteValue());
      assertEquals((short) (-1992), bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.3018591370778052E-7, 0);
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.pow(0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.pow((-238));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short) (-9025), bigFraction1.shortValue());
      assertEquals((byte) (-65), bigFraction1.byteValue());
      
      float float0 = bigFraction1.floatValue();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(5.4377506E29F, float0, 0.01F);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short) (-9025), bigFraction1.shortValue());
      assertEquals((byte) (-65), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3567.16), (-910));
      assertNotNull(bigFraction0);
      assertEquals((short) (-3568), bigFraction0.shortValue());
      assertEquals((byte)16, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = BigFraction.ONE;
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short) (-3568), bigFraction0.shortValue());
      assertEquals((byte)16, bigFraction0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((short) (-3567), bigFraction2.shortValue());
      assertEquals((byte)17, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1075), (-768));
      assertNotNull(bigFraction0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte) (-9), bigFraction1.byteValue());
      assertEquals((short) (-9), bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.subtract(bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte) (-9), bigFraction1.byteValue());
      assertEquals((short) (-9), bigFraction1.shortValue());
      assertEquals((byte)10, bigFraction2.byteValue());
      assertEquals((short)10, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3017);
      assertNotNull(bigFraction0);
      assertEquals((short)3017, bigFraction0.shortValue());
      assertEquals((byte) (-55), bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.reciprocal();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)3017, bigFraction0.shortValue());
      assertEquals((byte) (-55), bigFraction0.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.subtract(bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)3017, bigFraction0.shortValue());
      assertEquals((byte) (-55), bigFraction0.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((byte) (-1), bigFraction2.byteValue());
      assertEquals((short) (-1), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1075, 1075);
      assertNotNull(bigFraction0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      assertNotNull(bigFraction0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(1L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2654.59703658, (-1));
      assertNotNull(bigFraction0);
      assertEquals((short)2654, bigFraction0.shortValue());
      assertEquals((byte)94, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract(0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)2654, bigFraction0.shortValue());
      assertEquals((byte)94, bigFraction0.byteValue());
      assertEquals((byte)94, bigFraction1.byteValue());
      assertEquals((short)2654, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3362.326571, 2815);
      assertNotNull(bigFraction0);
      assertEquals((byte)34, bigFraction0.byteValue());
      assertEquals((short)3362, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.negate();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)34, bigFraction0.byteValue());
      assertEquals((short)3362, bigFraction0.shortValue());
      assertEquals((short) (-3362), bigFraction1.shortValue());
      assertEquals((byte) (-34), bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction1.reduce();
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte)34, bigFraction0.byteValue());
      assertEquals((short)3362, bigFraction0.shortValue());
      assertEquals((short) (-3362), bigFraction1.shortValue());
      assertEquals((byte) (-34), bigFraction1.byteValue());
      assertEquals((byte) (-34), bigFraction2.byteValue());
      assertEquals((short) (-3362), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2654.59703658, (-1));
      assertNotNull(bigFraction0);
      assertEquals((short)2654, bigFraction0.shortValue());
      assertEquals((byte)94, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)2654, bigFraction0.shortValue());
      assertEquals((byte)94, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(8388608L, (-5034868814120038111L));
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-104), bigFraction1.byteValue());
      assertEquals((short) (-1384), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1075, 1075);
      assertNotNull(bigFraction0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.pow(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      assertNotNull(bigFraction0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)1;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals(5, byteArray0.length);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1}, byteArray0);
      
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(5, byteArray0.length);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.pow(0L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.pow(100);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      double double0 = bigFraction0.pow(1930.5657266178);
      assertEquals(0.0, double0, 0.01);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1382L);
      assertNotNull(bigFraction0);
      assertEquals((byte)102, bigFraction0.byteValue());
      assertEquals((short)1382, bigFraction0.shortValue());
      
      double double0 = bigFraction0.pow((double) 1382L);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals((byte)102, bigFraction0.byteValue());
      assertEquals((short)1382, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-411));
      assertNotNull(bigFraction0);
      assertEquals((byte)101, bigFraction0.byteValue());
      assertEquals((short) (-411), bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.TWO.divide((-411));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)101, bigFraction0.byteValue());
      assertEquals((short) (-411), bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      
      double double0 = bigFraction1.pow((double) (-411));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals((byte)101, bigFraction0.byteValue());
      assertEquals((short) (-411), bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0067623333334267954, 37);
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      double double0 = bigFraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2274));
      assertNotNull(bigFraction0);
      assertEquals((short) (-2274), bigFraction0.shortValue());
      assertEquals((byte)30, bigFraction0.byteValue());
      
      double double0 = bigFraction0.percentageValue();
      assertEquals((-227400.0), double0, 0.01);
      assertEquals((short) (-2274), bigFraction0.shortValue());
      assertEquals((byte)30, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2274));
      assertNotNull(bigFraction0);
      assertEquals((byte)30, bigFraction0.byteValue());
      assertEquals((short) (-2274), bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.ONE.negate();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)30, bigFraction0.byteValue());
      assertEquals((short) (-2274), bigFraction0.shortValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction1.negate();
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte)30, bigFraction0.byteValue());
      assertEquals((short) (-2274), bigFraction0.shortValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply(9007199254722800L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-112), bigFraction1.byteValue());
      assertEquals((short)2192, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-112), bigFraction1.byteValue());
      assertEquals((short)2192, bigFraction1.shortValue());
      assertEquals((byte) (-16), bigFraction2.byteValue());
      assertEquals((short) (-11792), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)3, bigFraction1.byteValue());
      assertEquals((short)3, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)3, bigFraction1.byteValue());
      assertEquals((short)3, bigFraction1.shortValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1793.5));
      assertNotNull(bigFraction0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1793), bigFraction0.shortValue());
      
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertNotNull(bigInteger0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1793), bigFraction0.shortValue());
      assertEquals((short)2, bigInteger0.shortValue());
      assertEquals((byte)2, bigInteger0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1793), bigFraction0.shortValue());
      assertEquals((short)2, bigInteger0.shortValue());
      assertEquals((byte)2, bigInteger0.byteValue());
      assertEquals((byte) (-3), bigFraction1.byteValue());
      assertEquals((short) (-3587), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply((-6106L));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)19, bigFraction1.byteValue());
      assertEquals((short) (-3053), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply(1445);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)963, bigFraction1.shortValue());
      assertEquals((byte) (-61), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2011);
      assertNotNull(bigFraction0);
      assertEquals((byte) (-37), bigFraction0.byteValue());
      assertEquals((short)2011, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply(Integer.MAX_VALUE);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-37), bigFraction0.byteValue());
      assertEquals((short)2011, bigFraction0.shortValue());
      assertEquals((short) (-2011), bigFraction1.shortValue());
      assertEquals((byte)37, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertNotNull(bigFraction0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigFraction0.byteValue());
      assertEquals((short)10, bigFraction0.shortValue());
      
      long long0 = bigFraction0.longValue();
      assertEquals(10L, long0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigFraction0.byteValue());
      assertEquals((short)10, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-45);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(7, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-45), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(7, byteArray0.length);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertArrayEquals(new byte[] {(byte) (-45), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = bigFraction1.longValue();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(7, byteArray0.length);
      assertEquals((-12666373951979519L), long0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertArrayEquals(new byte[] {(byte) (-45), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3017);
      assertNotNull(bigFraction0);
      assertEquals((byte) (-55), bigFraction0.byteValue());
      assertEquals((short)3017, bigFraction0.shortValue());
      
      int int0 = bigFraction0.TWO.intValue();
      assertEquals(2, int0);
      assertEquals((byte) (-55), bigFraction0.byteValue());
      assertEquals((short)3017, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertNotNull(bigFraction0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte) (-9), bigFraction1.byteValue());
      assertEquals((short) (-9), bigFraction1.shortValue());
      
      int int0 = bigFraction1.intValue();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((-9), int0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte) (-9), bigFraction1.byteValue());
      assertEquals((short) (-9), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(686, 5);
      assertNotNull(bigFraction0);
      assertEquals((short)137, bigFraction0.shortValue());
      assertEquals((byte) (-119), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      long long0 = bigFraction0.ZERO.getNumeratorAsLong();
      assertEquals(0L, long0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte) (-9), bigFraction1.byteValue());
      assertEquals((short) (-9), bigFraction1.shortValue());
      
      long long0 = bigFraction1.getNumeratorAsLong();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((-29L), long0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte) (-9), bigFraction1.byteValue());
      assertEquals((short) (-9), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(0, int0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.negate();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      
      int int0 = bigFraction1.getNumeratorAsInt();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((-1), int0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply(0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      
      BigInteger bigInteger1 = bigFraction1.getNumerator();
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1382L);
      assertNotNull(bigFraction0);
      assertEquals((short)1382, bigFraction0.shortValue());
      assertEquals((byte)102, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.subtract(1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)1382, bigFraction0.shortValue());
      assertEquals((byte)102, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigInteger0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)1382, bigFraction0.shortValue());
      assertEquals((byte)102, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short) (-1), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(0L, long0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.pow((-3386));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-57), bigFraction1.byteValue());
      assertEquals((short) (-23865), bigFraction1.shortValue());
      
      long long0 = bigFraction1.getDenominatorAsLong();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((-2476777660509329815L), long0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-57), bigFraction1.byteValue());
      assertEquals((short) (-23865), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1075, 1075);
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(1, int0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(469.3191278, 1010.1, 2644);
      assertNotNull(bigFraction0);
      assertEquals((byte) (-43), bigFraction0.byteValue());
      assertEquals((short)469, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.divide(3952090531849364496L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-43), bigFraction0.byteValue());
      assertEquals((short)469, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      
      int int0 = bigFraction1.getDenominatorAsInt();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((-1641953248), int0);
      assertEquals((byte) (-43), bigFraction0.byteValue());
      assertEquals((short)469, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.pow((-3386));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-57), bigFraction1.byteValue());
      assertEquals((short) (-23865), bigFraction1.shortValue());
      
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigInteger0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-57), bigFraction1.byteValue());
      assertEquals((short) (-23865), bigFraction1.shortValue());
      assertEquals((byte)105, bigInteger0.byteValue());
      assertEquals((short) (-6551), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.pow((-2114));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-91), bigFraction1.byteValue());
      assertEquals((short)1445, bigFraction1.shortValue());
      
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigInteger0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-91), bigFraction1.byteValue());
      assertEquals((short)1445, bigFraction1.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertNotNull(bigFraction0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.divide(168);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      
      BigInteger bigInteger1 = bigFraction1.getDenominator();
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte) (-88), bigInteger1.byteValue());
      assertEquals((short)168, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      float float0 = bigFraction0.ZERO.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3017);
      assertNotNull(bigFraction0);
      assertEquals((byte) (-55), bigFraction0.byteValue());
      assertEquals((short)3017, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.add((-43L));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-55), bigFraction0.byteValue());
      assertEquals((short)3017, bigFraction0.shortValue());
      assertEquals((byte) (-42), bigFraction1.byteValue());
      assertEquals((short) (-42), bigFraction1.shortValue());
      
      float float0 = bigFraction1.floatValue();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((-42.5F), float0, 0.01F);
      assertEquals((byte) (-55), bigFraction0.byteValue());
      assertEquals((short)3017, bigFraction0.shortValue());
      assertEquals((byte) (-42), bigFraction1.byteValue());
      assertEquals((short) (-42), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      double double0 = bigFraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2654.59703658, (-1));
      assertNotNull(bigFraction0);
      assertEquals((short)2654, bigFraction0.shortValue());
      assertEquals((byte)94, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.TWO.subtract(6795262L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)2654, bigFraction0.shortValue());
      assertEquals((byte)94, bigFraction0.byteValue());
      assertEquals((short)20484, bigFraction1.shortValue());
      assertEquals((byte)4, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)2654, bigFraction0.shortValue());
      assertEquals((byte)94, bigFraction0.byteValue());
      assertEquals((short)20484, bigFraction1.shortValue());
      assertEquals((byte)4, bigFraction1.byteValue());
      assertEquals((short) (-2560), bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-819.859));
      assertNotNull(bigFraction0);
      assertEquals((short) (-819), bigFraction0.shortValue());
      assertEquals((byte) (-51), bigFraction0.byteValue());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(7, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(7, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals(7, byteArray0.length);
      assertEquals((short) (-819), bigFraction0.shortValue());
      assertEquals((byte) (-51), bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2147441705, 753);
      assertNotNull(bigFraction0);
      assertEquals((byte)8, bigFraction0.byteValue());
      assertEquals((short) (-31736), bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)8, bigFraction0.byteValue());
      assertEquals((short) (-31736), bigFraction0.shortValue());
      assertEquals((byte)8, bigFraction1.byteValue());
      assertEquals((short) (-31736), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertNotNull(bigFraction0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigFraction0.byteValue());
      assertEquals((short)10, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigFraction0.byteValue());
      assertEquals((short)10, bigFraction0.shortValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3362.326571, 2815);
      assertNotNull(bigFraction0);
      assertEquals((short)3362, bigFraction0.shortValue());
      assertEquals((byte)34, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.divide((-1904L));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)3362, bigFraction0.shortValue());
      assertEquals((byte)34, bigFraction0.byteValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2654.59703658, (-1));
      assertNotNull(bigFraction0);
      assertEquals((short)2654, bigFraction0.shortValue());
      assertEquals((byte)94, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)2654, bigFraction0.shortValue());
      assertEquals((byte)94, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)3981, bigFraction2.shortValue());
      assertEquals((byte) (-115), bigFraction2.byteValue());
      
      BigFraction bigFraction3 = bigFraction2.divide(3981L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertEquals((short)2654, bigFraction0.shortValue());
      assertEquals((byte)94, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)3981, bigFraction2.shortValue());
      assertEquals((byte) (-115), bigFraction2.byteValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1, bigFraction3.shortValue());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      assertNotNull(bigFraction0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.divide((-1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1793.5));
      assertNotNull(bigFraction0);
      assertEquals((short) (-1793), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.divide(1006);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short) (-1793), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte) (-1), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = new BigFraction((-2274));
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)30, bigFraction1.byteValue());
      assertEquals((short) (-2274), bigFraction1.shortValue());
      
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(1, int0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)30, bigFraction1.byteValue());
      assertEquals((short) (-2274), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      
      BigDecimal bigDecimal0 = bigFraction0.FOUR_FIFTHS.bigDecimalValue(5, 0);
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2);
      assertNotNull(bigFraction0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(2, 0);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigDecimal bigDecimal0 = bigFraction0.MINUS_ONE.bigDecimalValue(4, 4);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(3);
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      
      BigDecimal bigDecimal0 = bigFraction0.ONE.bigDecimalValue(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertNotNull(bigFraction0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.pow((-2114));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-91), bigFraction1.byteValue());
      assertEquals((short)1445, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-91), bigFraction1.byteValue());
      assertEquals((short)1445, bigFraction1.shortValue());
      assertEquals((short)1446, bigFraction2.shortValue());
      assertEquals((byte) (-90), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-9);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(2, byteArray0.length);
      assertEquals((short) (-2304), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-9), (byte)0}, byteArray0);
      
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(2, byteArray0.length);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short) (-2304), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-2304), bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertArrayEquals(new byte[] {(byte) (-9), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.divide(2130L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigFraction bigFraction2 = bigFraction1.add(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1992.135776));
      assertNotNull(bigFraction0);
      assertEquals((short) (-1992), bigFraction0.shortValue());
      assertEquals((byte)56, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.negate();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short) (-1992), bigFraction0.shortValue());
      assertEquals((byte)56, bigFraction0.byteValue());
      assertEquals((byte) (-56), bigFraction1.byteValue());
      assertEquals((short)1992, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction1.reduce();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short) (-1992), bigFraction0.shortValue());
      assertEquals((byte)56, bigFraction0.byteValue());
      assertEquals((byte) (-56), bigFraction1.byteValue());
      assertEquals((short)1992, bigFraction1.shortValue());
      assertEquals((short)1992, bigFraction2.shortValue());
      assertEquals((byte) (-56), bigFraction2.byteValue());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigFraction bigFraction3 = bigFraction2.add(bigInteger0);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotNull(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertEquals((short) (-1992), bigFraction0.shortValue());
      assertEquals((byte)56, bigFraction0.byteValue());
      assertEquals((byte) (-56), bigFraction1.byteValue());
      assertEquals((short)1992, bigFraction1.shortValue());
      assertEquals((short)1992, bigFraction2.shortValue());
      assertEquals((byte) (-56), bigFraction2.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)2002, bigFraction3.shortValue());
      assertEquals((byte) (-46), bigFraction3.byteValue());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.3018591370778052E-7, 0);
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.add((long) 0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1075, 1075);
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.add((long) 1075);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)51, bigFraction1.byteValue());
      assertEquals((short)1075, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add((int) (byte) (-115));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short) (-114), bigFraction1.shortValue());
      assertEquals((byte) (-114), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.add((-1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.add(37);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)37, bigFraction1.shortValue());
      assertEquals((byte)37, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2654.59703658, (-1));
      assertNotNull(bigFraction0);
      assertEquals((byte)94, bigFraction0.byteValue());
      assertEquals((short)2654, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract(4652218415073722368L);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)94, bigFraction0.byteValue());
      assertEquals((short)2654, bigFraction0.shortValue());
      assertEquals((byte)94, bigFraction1.byteValue());
      assertEquals((short)2654, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction1.abs();
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)94, bigFraction0.byteValue());
      assertEquals((short)2654, bigFraction0.shortValue());
      assertEquals((byte)94, bigFraction1.byteValue());
      assertEquals((short)2654, bigFraction1.shortValue());
      assertEquals((short) (-2654), bigFraction2.shortValue());
      assertEquals((byte) (-94), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.abs();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals((short)2, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction0.byteValue());
      
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.030137666666632867, (-964));
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      // Undeclared exception!
      try { 
        bigFraction0.pow((-487L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2011);
      assertNotNull(bigFraction0);
      assertEquals((byte) (-37), bigFraction0.byteValue());
      assertEquals((short)2011, bigFraction0.shortValue());
      
      // Undeclared exception!
      try { 
        bigFraction0.pow(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(2576, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-5242L), (-5242L));
      assertNotNull(bigFraction0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      // Undeclared exception!
      try { 
        bigFraction0.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      // Undeclared exception!
      try { 
        bigFraction0.TWO_QUARTERS.bigDecimalValue(1, 1127);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2654.59703658, (-1));
      assertNotNull(bigFraction0);
      assertEquals((short)2654, bigFraction0.shortValue());
      assertEquals((byte)94, bigFraction0.byteValue());
      
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      String string0 = bigFraction0.toString();
      assertNotNull(string0);
      assertEquals("0", string0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertNotNull(bigFraction0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short) (-9), bigFraction1.shortValue());
      assertEquals((byte) (-9), bigFraction1.byteValue());
      
      int int0 = bigFraction1.compareTo(bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((-1), int0);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short) (-9), bigFraction1.shortValue());
      assertEquals((byte) (-9), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.negate();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction0.divide((long) (-1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      
      boolean boolean0 = bigFraction2.equals(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(boolean0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      boolean boolean0 = bigFraction0.ONE_THIRD.equals(bigFraction0);
      assertFalse(boolean0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.3018591370778052E-7, 0);
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = BigFraction.TWO;
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      
      boolean boolean0 = bigFraction0.TWO.equals(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(boolean0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1351, 1351);
      assertNotNull(bigFraction0);
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1993.2);
      assertNotNull(bigFraction0);
      assertEquals((byte) (-55), bigFraction0.byteValue());
      assertEquals((short)1993, bigFraction0.shortValue());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-55), bigFraction0.byteValue());
      assertEquals((short)1993, bigFraction0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short)199, bigFraction1.shortValue());
      assertEquals((byte) (-57), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(8388608L, (-5034868814120038111L));
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      
      double double0 = bigFraction0.doubleValue();
      assertEquals((-1.6661025956574216E-12), double0, 0.01);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1600.22));
      assertNotNull(bigFraction0);
      assertEquals((byte) (-64), bigFraction0.byteValue());
      assertEquals((short) (-1600), bigFraction0.shortValue());
      
      try { 
        bigFraction0.TWO.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      String string0 = bigFraction0.toString();
      assertNotNull(string0);
      assertEquals("3 / 4", string0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertNotNull(bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2654.59703658, (-1));
      assertNotNull(bigFraction0);
      assertEquals((byte)94, bigFraction0.byteValue());
      assertEquals((short)2654, bigFraction0.shortValue());
      
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-9);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow((-834L));
      assertEquals((byte) (-91), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(469.3191278, 1010.1, 2644);
      BigFraction bigFraction1 = bigFraction0.ZERO.pow((long) 2644);
      assertEquals((short)469, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.multiply(bigFraction0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ZERO.multiply(bigFraction0);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2491, 2491);
      // Undeclared exception!
      try { 
        bigFraction0.TWO_THIRDS.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      boolean boolean0 = bigFraction0.ONE_THIRD.equals(bigFraction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      boolean boolean0 = bigFraction0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow(1209);
      double double0 = bigFraction1.doubleValue();
      assertEquals(8.893392105231936E-152, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.TWO.divide(bigFraction0);
      assertEquals((short)10, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.multiply(0L);
      BigFraction bigFraction2 = bigFraction1.add(bigFraction1);
      assertSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(469.3191278, 1010.1, 2644);
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals((byte) (-43), bigFraction0.byteValue());
      assertEquals((short)469, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, (-677));
      // Undeclared exception!
      try { 
        bigFraction0.pow((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-582.584), 716);
      assertEquals((short) (-582), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(158.469, (-2274), (-2274));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 158.469 to fraction after -2,274 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.6902327633329284E-10, (-367));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/5,916,344,906)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) 2147483647L, (-2147483645));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.7976931348623157E308, 4398046511103L, (-2274));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      String string0 = bigFraction0.toString();
      assertEquals("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert infinite value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.2917117341231647E-8);
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(1951979583600851L, long0);
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(469.3191278, 1010.1, 2644);
      BigFraction bigFraction1 = bigFraction0.ZERO.reduce();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-43), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-688.17664));
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals((short) (-688), bigFraction0.shortValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(469.3191278, 1010.1, 2644);
      bigFraction0.ONE_FIFTH.bigDecimalValue(4);
      assertEquals((byte) (-43), bigFraction0.byteValue());
      assertEquals((short)469, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.6844751371536404E-8);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2146269694, 2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      long long0 = bigFraction0.ONE_THIRD.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction1 = bigFraction0.TWO.multiply(bigInteger0);
      assertEquals((short)8, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(469.3191278, 1010.1, 2644);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(2644);
      assertEquals((short)469, bigFraction0.shortValue());
      assertEquals((byte) (-83), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      double double0 = bigFraction0.THREE_FIFTHS.percentageValue();
      assertEquals(60.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(469.3191278, 1010.1, 2644);
      BigFraction bigFraction1 = bigFraction0.subtract((long) 2644);
      assertEquals((short) (-2175), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      int int0 = bigFraction0.THREE_FIFTHS.getNumeratorAsInt();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFractionField bigFractionField0 = bigFraction0.TWO_FIFTHS.getField();
      assertNotNull(bigFractionField0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.hashCode();
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.multiply(bigInteger0);
      assertEquals((byte)2, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((byte)1, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      int int0 = bigFraction0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }
}
