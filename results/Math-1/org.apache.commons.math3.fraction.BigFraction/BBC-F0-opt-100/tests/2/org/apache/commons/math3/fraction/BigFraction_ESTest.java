/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:27:19 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 194;
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1315), 194);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(194, (-1315));
      bigFraction1.FOUR_FIFTHS.add(bigFraction0);
      bigFraction0.THREE_FIFTHS.divide(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1895));
      bigFraction0.bigDecimalValue(1, 1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-500));
      BigFraction bigFraction1 = bigFraction0.ONE.multiply((-500));
      bigFraction0.ONE_HALF.bigDecimalValue();
      bigFraction0.getField();
      BigFraction bigFraction2 = bigFraction1.reduce();
      BigFraction bigFraction3 = bigFraction2.TWO.multiply((-3317L));
      BigFraction bigFraction4 = bigFraction2.ONE_THIRD.divide((-500));
      bigFraction4.MINUS_ONE.compareTo(bigFraction2);
      bigFraction2.ONE.toString();
      BigFraction bigFraction5 = bigFraction1.add((-500));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction6 = bigFraction0.THREE_QUARTERS.add(1718);
      bigFraction6.THREE_FIFTHS.hashCode();
      BigFraction bigFraction7 = bigFraction5.subtract(bigInteger0);
      BigFraction bigFraction8 = bigFraction7.ONE_HALF.divide((long) 1718);
      bigFraction2.getField();
      bigFraction7.TWO.subtract(bigInteger0);
      bigFraction1.ONE.divide(bigFraction4);
      BigFraction bigFraction9 = bigFraction1.subtract((-7278142539171889152L));
      bigFraction9.add((long) 1718);
      BigFraction bigFraction10 = bigFraction3.multiply(bigInteger0);
      Random.setNextRandom(1);
      bigFraction8.getNumerator();
      BigFraction bigFraction11 = bigFraction10.divide(bigFraction4);
      bigFraction9.bigDecimalValue(1, 1);
      bigFraction11.reciprocal();
      bigFraction3.getField();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.add((int) (byte) (-105));
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.subtract((int) (byte) (-105));
      bigFraction2.TWO_QUARTERS.doubleValue();
      BigFraction bigFraction4 = bigFraction3.TWO_FIFTHS.reduce();
      BigFraction bigFraction5 = bigFraction4.ONE_THIRD.pow((-673));
      bigFraction2.TWO_FIFTHS.bigDecimalValue();
      bigFraction3.getDenominatorAsInt();
      BigFraction bigFraction6 = bigFraction2.add(9218868437227405312L);
      BigFraction bigFraction7 = bigFraction2.divide((long) (byte) (-105));
      BigFraction bigFraction8 = bigFraction3.subtract((long) (byte) (-105));
      BigFraction bigFraction9 = bigFraction7.multiply((int) (byte) (-105));
      BigFraction bigFraction10 = bigFraction8.divide(9218868437227405312L);
      bigFraction8.doubleValue();
      bigFraction9.ONE_HALF.multiply(4);
      bigFraction9.THREE_FIFTHS.floatValue();
      BigFraction bigFraction11 = bigFraction10.add(bigInteger0);
      bigFraction0.ONE_QUARTER.compareTo(bigFraction9);
      BigFraction bigFraction12 = bigFraction3.subtract(bigInteger0);
      BigFraction.getReducedFraction(503, (byte) (-105));
      bigFraction12.divide(bigFraction6);
      bigFraction6.bigDecimalValue();
      bigFraction12.toString();
      bigFraction11.getDenominatorAsLong();
      bigFraction5.pow((-2748L));
      bigFraction2.getField();
      bigFraction5.divide(481);
      bigFraction4.subtract((int) (byte) (-105));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2250.05205952);
      bigFraction0.TWO_THIRDS.doubleValue();
      BigFraction bigFraction1 = bigFraction0.pow((-667L));
      bigFraction1.doubleValue();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2115431653, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = bigFraction0.pow((-667L));
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2250.05205952);
      bigFraction0.THREE_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction1 = new BigFraction((-1738), 5L);
      bigFraction0.TWO_THIRDS.doubleValue();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      bigFraction0.TWO_QUARTERS.intValue();
      BigFraction bigFraction2 = bigFraction0.pow((-711L));
      bigFraction1.THREE_QUARTERS.doubleValue();
      BigFraction bigFraction3 = new BigFraction(0.6666666666666666, 0);
      bigFraction1.add(2);
      BigFraction bigFraction4 = BigFraction.THREE_FIFTHS;
      bigFraction4.FOUR_FIFTHS.equals(bigFraction3);
      BigFraction bigFraction5 = bigFraction4.add(bigFraction3);
      bigFraction5.TWO_THIRDS.divide(bigInteger0);
      bigFraction2.doubleValue();
      bigFraction2.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2250.05205952);
      bigFraction0.THREE_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction1 = new BigFraction((-1738), 5L);
      bigFraction0.TWO_THIRDS.doubleValue();
      bigFraction0.getNumerator();
      bigFraction0.TWO_QUARTERS.intValue();
      BigFraction bigFraction2 = bigFraction0.pow((-711L));
      bigFraction1.THREE_QUARTERS.doubleValue();
      BigFraction bigFraction3 = new BigFraction(0.6666666666666666, 0);
      bigFraction1.add(2);
      BigFraction bigFraction4 = BigFraction.THREE_FIFTHS;
      bigFraction4.FOUR_FIFTHS.equals(bigFraction3);
      bigFraction4.add(bigFraction3);
      bigFraction2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2983.026884, 2147483646);
      bigFraction0.getDenominator();
      bigFraction0.divide(2848L);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2147483646);
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-849.7507));
      bigFraction0.divide(2L);
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-915), 6.666909874218774E-231, (-915));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = new BigFraction(4.050833763855709E-193);
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.subtract(bigFraction1);
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1468.6474803766894), (-43));
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      int int0 = 0;
      BigFraction bigFraction3 = bigFraction2.ONE.pow(0);
      BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.divide(219558035218944L);
      bigFraction0.pow((double) (-43));
      bigFraction4.ONE_HALF.negate();
      BigFraction bigFraction5 = bigFraction3.divide(2712);
      // Undeclared exception!
      try { 
        bigFraction5.THREE_FIFTHS.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      byte[] byteArray0 = new byte[2];
      bigFraction0.ZERO.longValue();
      byteArray0[0] = (byte) (-96);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction0.FOUR_FIFTHS.compareTo(bigFraction1);
      byteArray0[1] = (byte)16;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.divide(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.TWO_FIFTHS.subtract((long) (byte)16);
      bigFraction3.TWO_FIFTHS.percentageValue();
      BigFraction bigFraction4 = bigFraction3.MINUS_ONE.multiply((-1459));
      bigFraction4.ONE_THIRD.floatValue();
      bigFraction0.FOUR_FIFTHS.getNumeratorAsInt();
      bigFraction0.getField();
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-1431655764), 1);
      bigFraction5.TWO.divide(2204L);
      BigFraction bigFraction6 = bigFraction5.TWO_FIFTHS.divide(bigInteger0);
      bigFraction5.ONE_THIRD.equals(bigFraction1);
      bigFraction2.getDenominator();
      Random.setNextRandom((-99));
      bigFraction0.doubleValue();
      bigFraction6.floatValue();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction((-2616L));
      bigFraction0.ONE_QUARTER.divide(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      try { 
        bigFraction0.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 2082408385;
      BigFraction bigFraction0 = new BigFraction(0.0, 3626.68116, 2082408385);
      bigFraction0.TWO_FIFTHS.negate();
      // Undeclared exception!
      try { 
        bigFraction0.pow((-944));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.equals(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = new BigFraction(3790.837812379034);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction1.divide(bigInteger0);
      bigFraction2.add(bigFraction0);
      BigFraction bigFraction3 = new BigFraction((-1213.908425745));
      BigFraction bigFraction4 = new BigFraction(5);
      bigFraction4.percentageValue();
      bigFraction0.pow((-3696.54666));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4859.975804328, (-1331));
      bigFraction0.THREE_FIFTHS.subtract(2146435583);
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(118252);
      BigFraction bigFraction2 = new BigFraction((long) 118252);
      bigFraction2.doubleValue();
      bigFraction1.getNumerator();
      bigFraction2.intValue();
      BigFraction bigFraction3 = bigFraction2.pow((long) 118252);
      bigFraction0.doubleValue();
      bigFraction1.divide(bigFraction3);
      BigFraction bigFraction4 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction5 = bigFraction4.add(2147483584);
      BigFraction bigFraction6 = BigFraction.THREE_FIFTHS;
      bigFraction5.equals(bigFraction4);
      bigFraction4.add(bigFraction5);
      BigFraction.getReducedFraction(118252, 3336);
      BigFraction bigFraction7 = new BigFraction(3.840416873401864E-11);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.equals((Object) null);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction0.multiply(bigFraction1);
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(6.288194494299752);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      BigFraction bigFraction3 = new BigFraction(0.9320682999999974);
      bigFraction1.pow(6.288194494299752);
      bigFraction2.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      Object object0 = new Object();
      bigFraction0.equals(object0);
      // Undeclared exception!
      try { 
        bigFraction0.pow(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      bigFraction1.add(bigFraction0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = new BigFraction(bigInteger1);
      Object object0 = new Object();
      bigFraction2.FOUR_FIFTHS.bigDecimalValue();
      BigFraction bigFraction3 = new BigFraction((-2946L), 4503599627370496L);
      bigFraction2.equals(bigFraction3);
      bigFraction3.doubleValue();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = 53997872349184L;
      BigFraction bigFraction0 = new BigFraction(53997872349184L, 929L);
      bigFraction0.TWO_QUARTERS.equals((Object) null);
      bigFraction0.ONE_QUARTER.intValue();
      bigFraction0.THREE_FIFTHS.getDenominatorAsInt();
      bigFraction0.MINUS_ONE.pow(0.40741634368896484);
      bigFraction0.pow(1140.2613281542403);
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.subtract((-1631));
      BigFraction.getReducedFraction(1504, (-4460));
      bigFraction2.hashCode();
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction1);
      bigFraction3.ONE_FIFTH.divide(bigFraction0);
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(2147482313, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-44), 2);
      bigFraction0.ONE_QUARTER.hashCode();
      bigFraction0.TWO_THIRDS.toString();
      BigFraction bigFraction1 = bigFraction0.pow(208);
      bigFraction1.divide((long) 208);
      bigFraction0.getField();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = new BigFraction(0.5);
      BigFraction bigFraction2 = new BigFraction(0.5, 1452);
      bigFraction1.equals(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.add(1238);
      bigFraction1.ONE.getDenominatorAsInt();
      bigFraction0.bigDecimalValue(4);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      bigFraction1.add(bigFraction0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      bigFraction0.floatValue();
      bigFraction0.getDenominator();
      // Undeclared exception!
      try { 
        bigFraction2.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      int int0 = 2551;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(1.7976931348623157E308, 0.6316042954117274, 2551);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      // Undeclared exception!
      try { 
        bigFraction1.ZERO.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(0.38374656438827515, 5);
      BigFraction bigFraction1 = bigFraction0.ONE.add(bigInteger0);
      bigFraction1.ONE_QUARTER.bigDecimalValue(5);
      bigFraction0.longValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      bigFraction2.ONE.add(bigInteger0);
      bigFraction0.equals(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((long) 208);
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction1.MINUS_ONE.getDenominatorAsInt();
      bigFraction0.ONE.getDenominatorAsInt();
      bigFraction1.TWO.floatValue();
      bigFraction1.ONE_HALF.bigDecimalValue(2);
      BigFraction bigFraction2 = bigFraction1.abs();
      bigFraction2.THREE_QUARTERS.divide((long) 1);
      bigFraction2.FOUR_FIFTHS.toString();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.add(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.TWO.subtract(1073741824);
      bigFraction4.ONE_THIRD.divide(1);
      bigFraction3.getDenominator();
      bigFraction4.divide(1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigInteger bigInteger1 = null;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)31;
      byteArray0[0] = (byte)31;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.pow(bigInteger0);
      bigFraction1.TWO_FIFTHS.multiply((long) (byte)31);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((BigInteger) null, bigInteger2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction2 = bigFraction1.add((-3626));
      BigFraction bigFraction3 = bigFraction1.TWO_FIFTHS.abs();
      bigFraction3.longValue();
      bigFraction0.pow((double) (-3626));
      bigFraction2.doubleValue();
      bigFraction2.floatValue();
      bigFraction2.toString();
      bigFraction3.doubleValue();
      bigFraction0.getDenominatorAsLong();
      bigFraction1.divide(542);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.longValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger1);
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.multiply((-1669L));
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-2376), 5);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.byteValueExact();
      bigFraction4.pow(bigInteger2);
      bigFraction3.add(bigInteger0);
      bigFraction1.getField();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = new BigFraction(0.5);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      bigFraction0.equals(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      bigFraction1.add(bigFraction0);
      BigFraction bigFraction2 = new BigFraction((-1669L));
      bigFraction2.multiply(963L);
      bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.pow(bigInteger0);
      bigFraction3.ZERO.divide(100);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-1669L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      bigFraction1.equals(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction2.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction3 = BigFraction.ONE_HALF;
      bigFraction2.ZERO.multiply(bigFraction3);
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.divide(bigFraction0);
      byte[] byteArray0 = new byte[2];
      bigFraction2.ZERO.multiply((long) (byte)97);
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)100;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction3.THREE_QUARTERS.subtract(bigInteger0);
      bigFraction2.getField();
      bigFraction0.pow((-1L));
      bigFraction2.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 0);
      bigFraction1.THREE_QUARTERS.longValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      bigFraction2.TWO_FIFTHS.bigDecimalValue();
      bigFraction0.toString();
      bigFraction2.multiply(bigFraction0);
      bigFraction1.THREE_QUARTERS.divide((-1233));
      BigFraction bigFraction3 = bigFraction0.THREE_FIFTHS.add((long) 190);
      BigFraction bigFraction4 = bigFraction0.add(0);
      bigFraction4.MINUS_ONE.longValue();
      bigFraction1.bigDecimalValue(190, 1);
      BigFraction bigFraction5 = bigFraction0.divide((-2525L));
      BigInteger bigInteger1 = bigFraction4.getDenominator();
      bigInteger1.flipBit(1);
      BigFraction bigFraction6 = bigFraction1.abs();
      bigFraction6.TWO_QUARTERS.subtract(9007199254740990L);
      BigFraction bigFraction7 = bigFraction6.pow(bigInteger1);
      bigFraction1.toString();
      bigFraction2.compareTo(bigFraction5);
      bigFraction7.getNumeratorAsInt();
      bigFraction5.add(bigFraction3);
      bigFraction6.toString();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction((double) 0L);
      BigFraction bigFraction1 = new BigFraction(0L);
      BigFraction bigFraction2 = bigFraction0.add(1);
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction1.subtract(bigInteger0);
      bigFraction2.equals(bigFraction0);
      bigFraction2.getField();
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction3.reduce();
      bigFraction4.floatValue();
      bigFraction1.longValue();
      BigFraction bigFraction5 = bigFraction1.pow(0);
      bigFraction0.doubleValue();
      bigFraction3.add((-826));
      bigFraction5.pow(0.0);
      bigFraction2.longValue();
      BigFraction bigFraction6 = new BigFraction((-494.087281));
      bigFraction6.negate();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)46;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      bigFraction2.TWO_QUARTERS.doubleValue();
      BigFraction bigFraction3 = bigFraction0.multiply(1367);
      bigFraction2.TWO_THIRDS.compareTo(bigFraction1);
      bigFraction1.TWO_THIRDS.multiply((long) 1367);
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-1), (-1));
      bigFraction3.ONE_HALF.getNumeratorAsLong();
      bigFraction1.compareTo(bigFraction4);
      BigFraction bigFraction5 = new BigFraction((double) (byte)46);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.TEN;
      BigFraction bigFraction6 = new BigFraction(bigInteger0, bigInteger2);
      BigFraction bigFraction7 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction7.ONE_FIFTH.bigDecimalValue(1628, 637);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-34L), (-34L));
      BigFraction bigFraction1 = new BigFraction((-713.4548013));
      BigFraction bigFraction2 = BigFraction.ZERO;
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(0.38374656438827515, 5);
      bigFraction0.longValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction0.divide(bigInteger0);
      bigFraction0.multiply((-1669L));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.add(1);
      bigFraction0.ONE_FIFTH.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction0.subtract(bigInteger0);
      bigFraction3.THREE_QUARTERS.equals(bigInteger0);
      bigFraction3.TWO_FIFTHS.getField();
      bigFraction0.bigDecimalValue();
      bigFraction3.reduce();
      BigFraction bigFraction4 = bigFraction2.subtract(bigInteger0);
      BigFraction bigFraction5 = bigFraction3.divide(5);
      BigFraction bigFraction6 = BigFraction.TWO_FIFTHS;
      bigFraction6.multiply(bigFraction4);
      bigFraction4.percentageValue();
      BigFraction bigFraction7 = bigFraction3.divide(bigFraction5);
      bigFraction3.multiply(bigInteger0);
      BigFraction bigFraction8 = bigFraction1.divide(bigFraction3);
      bigFraction0.subtract(5);
      bigFraction7.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction8.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(927.294519207402);
      int int0 = 3;
      BigFraction bigFraction1 = bigFraction0.add(3);
      bigFraction0.getDenominatorAsInt();
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction1.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(0.5, (-494.087281), 1233);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0.5 to fraction (9,223,372,036,854,775,807/-1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(bigInteger0, bigInteger1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.ONE_THIRD.subtract(bigInteger0);
      bigFraction0.negate();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.compareTo(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(927.294519207402);
      BigFraction bigFraction1 = bigFraction0.add((-2257));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger.valueOf((-2636L));
      BigFraction bigFraction2 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction3 = bigFraction2.divide((-2636L));
      bigFraction0.TWO_QUARTERS.add(bigFraction2);
      BigFraction bigFraction4 = new BigFraction((double) (-2257));
      bigFraction1.bigDecimalValue((-2257), 1);
      bigFraction3.abs();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 43;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-6.971E-8), (-6.971E-8), 43);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -0 to fraction (-1,495/21,445,990,526)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(927.294519207402);
      bigFraction0.add((-2257));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf((-2636L));
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger1);
      BigFraction bigFraction2 = bigFraction1.divide((-2636L));
      BigFraction bigFraction3 = bigFraction0.subtract((-2636L));
      BigFraction bigFraction4 = bigFraction3.multiply((-2636L));
      BigFraction bigFraction5 = bigFraction1.subtract((-1060));
      bigFraction4.getDenominatorAsInt();
      bigFraction1.getField();
      bigFraction1.getNumeratorAsLong();
      bigFraction5.multiply(1586);
      bigFraction2.subtract(2257L);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.add(1);
      bigFraction0.ONE_FIFTH.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction0.subtract(bigInteger0);
      bigFraction3.THREE_QUARTERS.equals(bigInteger0);
      bigFraction3.TWO_FIFTHS.getField();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction3.reduce();
      bigFraction4.floatValue();
      BigFraction bigFraction5 = bigFraction3.subtract(bigFraction2);
      bigFraction5.abs();
      BigFraction bigFraction6 = bigFraction4.subtract(496);
      bigFraction5.toString();
      bigFraction6.multiply((-1));
      BigFraction bigFraction7 = BigFraction.TWO_FIFTHS;
      bigFraction4.subtract(bigFraction5);
      BigFraction bigFraction8 = BigFraction.getReducedFraction(3148, (-2587));
      // Undeclared exception!
      try { 
        bigFraction8.bigDecimalValue(125, 1423);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2018);
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction2 = bigFraction1.divide((-1424));
      BigFraction bigFraction3 = bigFraction1.multiply(bigFraction2);
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      bigFraction4.percentageValue();
      bigFraction3.divide(bigFraction0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction5 = bigFraction1.multiply(bigInteger0);
      BigFraction bigFraction6 = BigFraction.ONE_THIRD;
      BigFraction bigFraction7 = bigFraction5.divide(bigFraction6);
      bigFraction7.subtract((-2316));
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3739.3725114862);
      int int0 = 602;
      BigFraction bigFraction1 = new BigFraction((long) 602);
      bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction2 = BigFraction.THREE_FIFTHS;
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction2.negate();
      bigFraction1.hashCode();
      bigFraction0.reciprocal();
      bigFraction3.getField();
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.compareTo(bigFraction1);
      bigFraction0.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger.valueOf((-2636L));
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.TWO_THIRDS.multiply((long) (-2257));
      bigFraction0.pow(1256.6048);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.negate();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-3368L));
      bigFraction1.ONE_FIFTH.doubleValue();
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.negate();
      bigFraction3.TWO_FIFTHS.add((-1531));
      int int0 = (-1);
      // Undeclared exception!
      try { 
        bigFraction2.ONE_THIRD.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-64);
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)46;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      bigFraction2.TWO_QUARTERS.doubleValue();
      BigFraction bigFraction3 = bigFraction0.multiply(1367);
      bigFraction2.TWO_THIRDS.compareTo(bigFraction1);
      bigFraction1.TWO_THIRDS.multiply((long) 1367);
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-1), (-1));
      bigFraction3.ONE_HALF.getNumeratorAsLong();
      bigFraction1.compareTo(bigFraction4);
      // Undeclared exception!
      try { 
        bigFraction1.TWO.bigDecimalValue((-601), (int) (byte) (-64));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-952.0), 3142.0562971, 1353);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.negate();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.ZERO.abs();
      bigInteger0.bitLength();
      bigFraction1.ONE_HALF.divide((-28L));
      bigFraction1.FOUR_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.pow(1L);
      bigFraction2.FOUR_FIFTHS.doubleValue();
      bigFraction0.getDenominator();
      BigFraction bigFraction3 = bigFraction1.divide(Integer.MAX_VALUE);
      bigFraction3.ONE_HALF.floatValue();
      bigFraction0.floatValue();
      bigFraction3.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction3.THREE_FIFTHS.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_HALF.percentageValue();
      bigFraction0.longValue();
      BigFraction bigFraction1 = new BigFraction((-1894L));
      bigFraction0.ONE.compareTo(bigFraction1);
      bigFraction0.TWO_THIRDS.longValue();
      Object object0 = new Object();
      bigFraction1.TWO_QUARTERS.multiply(bigFraction0);
      bigFraction0.equals(object0);
      bigFraction0.subtract(2819561105158720014L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger0);
      bigFraction2.TWO_QUARTERS.percentageValue();
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction4 = bigFraction2.divide(bigFraction3);
      bigFraction4.ONE_QUARTER.subtract(1);
      BigFraction bigFraction5 = bigFraction1.pow(bigInteger0);
      bigFraction1.toString();
      BigFraction bigFraction6 = bigFraction4.add(bigInteger0);
      bigFraction6.divide(bigFraction1);
      bigFraction4.equals(bigFraction5);
      bigFraction6.longValue();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      bigFraction0.divide(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.subtract(214);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2018);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((double) 2018, 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,018 to fraction (-2,017/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.multiply(9218868437227405312L);
      bigFraction1.TWO.subtract(bigFraction0);
      bigFraction1.ONE_HALF.floatValue();
      bigFraction1.THREE_FIFTHS.bigDecimalValue(0, 0);
      bigFraction0.ONE_THIRD.getField();
      BigFraction bigFraction2 = bigFraction0.pow((-1));
      bigFraction2.ONE_HALF.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction2.ONE_FIFTH.reciprocal();
      BigFraction bigFraction4 = bigFraction0.reduce();
      bigFraction2.ONE.pow((long) 0);
      bigFraction4.ZERO.divide(bigFraction2);
      bigFraction4.ONE.getDenominatorAsInt();
      BigFraction bigFraction5 = bigFraction3.THREE_FIFTHS.multiply(bigFraction2);
      BigFraction bigFraction6 = bigFraction3.abs();
      bigFraction6.ONE_HALF.bigDecimalValue();
      BigFraction bigFraction7 = bigFraction6.subtract((-1));
      bigFraction3.longValue();
      BigFraction bigFraction8 = bigFraction7.multiply(bigFraction5);
      bigFraction8.getDenominatorAsInt();
      bigFraction7.negate();
      // Undeclared exception!
      try { 
        bigFraction8.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      int int0 = 405;
      bigFraction1.TWO_QUARTERS.pow(405);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(405, 405);
      bigFraction3.ONE_THIRD.subtract(bigFraction2);
      bigFraction1.FOUR_FIFTHS.reduce();
      int int1 = (-1530);
      // Undeclared exception!
      try { 
        bigFraction3.ONE_QUARTER.bigDecimalValue((-1530), (-1530));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1856L));
      bigFraction0.THREE_FIFTHS.getField();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction1 = bigFraction0.multiply(1);
      BigFraction bigFraction2 = bigFraction0.subtract((long) 1);
      bigFraction2.TWO_FIFTHS.bigDecimalValue(1, 1);
      BigFraction bigFraction3 = bigFraction1.divide((-1856L));
      bigFraction3.percentageValue();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction0.TWO.subtract(bigFraction1);
      bigFraction0.intValue();
      bigFraction0.bigDecimalValue(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.multiply(bigInteger0);
      bigFraction0.ONE_FIFTH.pow((-1811.4972011));
      BigFraction bigFraction3 = bigFraction0.subtract((-427L));
      bigFraction3.ONE_HALF.reduce();
      bigFraction2.FOUR_FIFTHS.bigDecimalValue(1, 1);
      bigFraction2.bigDecimalValue(0);
      BigFraction bigFraction4 = bigFraction0.multiply((-427L));
      bigFraction4.getNumeratorAsLong();
      BigFraction bigFraction5 = bigFraction4.reciprocal();
      bigFraction4.THREE_QUARTERS.getNumeratorAsInt();
      bigFraction5.ONE.multiply(1240L);
      bigFraction5.TWO_THIRDS.pow(0.0);
      BigFraction bigFraction6 = BigFraction.ZERO;
      BigFraction bigFraction7 = bigFraction5.subtract(bigFraction6);
      bigFraction7.TWO_FIFTHS.getNumeratorAsLong();
      bigFraction4.abs();
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(2445, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.ONE_HALF.hashCode();
      int int0 = 1423;
      BigFraction bigFraction1 = bigFraction0.pow(1423);
      bigFraction1.bigDecimalValue();
      bigFraction0.toString();
      bigFraction1.longValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.TWO.add(0);
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 0);
      bigFraction1.THREE_QUARTERS.longValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      bigFraction2.TWO_FIFTHS.bigDecimalValue();
      bigFraction0.toString();
      bigFraction2.multiply(bigFraction0);
      bigFraction0.THREE_FIFTHS.add((long) 190);
      BigFraction bigFraction3 = bigFraction0.add(0);
      bigFraction3.MINUS_ONE.longValue();
      bigFraction1.bigDecimalValue(190, 1);
      BigFraction bigFraction4 = bigFraction0.divide((-2525L));
      BigInteger bigInteger1 = bigFraction3.getDenominator();
      bigInteger1.flipBit(1);
      BigFraction bigFraction5 = bigFraction1.abs();
      bigFraction5.TWO_QUARTERS.subtract(9007199254740990L);
      BigFraction bigFraction6 = bigFraction5.pow(bigInteger1);
      bigFraction1.toString();
      bigFraction2.compareTo(bigFraction4);
      bigFraction6.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.MINUS_ONE.hashCode();
      bigFraction0.THREE_FIFTHS.hashCode();
      bigFraction0.ZERO.longValue();
      BigFraction bigFraction1 = bigFraction0.subtract((-5573L));
      bigFraction1.percentageValue();
      BigFraction bigFraction2 = bigFraction1.add(2935890503282001226L);
      bigFraction2.FOUR_FIFTHS.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction0.multiply((-9223372036854775808L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction3.ONE_THIRD.subtract(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction5 = bigFraction4.THREE_FIFTHS.multiply(bigInteger1);
      bigFraction3.pow(2.244749069213867);
      bigFraction1.ZERO.getNumeratorAsLong();
      bigFraction1.hashCode();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-20);
      bigFraction4.TWO_THIRDS.getDenominatorAsLong();
      byteArray0[1] = (byte)12;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigFraction bigFraction6 = bigFraction2.pow(bigInteger2);
      bigFraction6.TWO_THIRDS.toString();
      bigFraction6.THREE_QUARTERS.hashCode();
      bigFraction2.doubleValue();
      bigFraction2.toString();
      bigFraction0.hashCode();
      bigFraction5.percentageValue();
      bigFraction3.compareTo(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1624, 1624);
      bigFraction0.add((-251L));
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction1.ONE_QUARTER.pow((-2316));
      // Undeclared exception!
      try { 
        bigFraction2.TWO.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.TWO_THIRDS.subtract((-1073741824L));
      bigFraction0.getNumeratorAsLong();
      int int0 = (-601);
      long long0 = 1095L;
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_QUARTERS.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.ONE.getField();
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.TWO.getNumeratorAsInt();
      bigFraction0.TWO_THIRDS.hashCode();
      bigFraction0.getDenominatorAsLong();
      int int0 = 4759;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2, 4759);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.divide(bigInteger0);
      bigFraction1.ONE_THIRD.add(1);
      bigFraction0.ONE_FIFTH.getDenominatorAsInt();
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger0);
      bigFraction2.THREE_QUARTERS.equals(bigInteger0);
      bigFraction2.TWO_FIFTHS.getField();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction2.reduce();
      bigFraction3.floatValue();
      bigFraction0.longValue();
      BigFraction bigFraction4 = bigFraction1.pow(0);
      bigFraction4.ONE_THIRD.doubleValue();
      bigFraction3.getNumerator();
      BigFraction bigFraction5 = bigFraction0.add(2597);
      bigFraction5.TWO.pow(0.0);
      bigFraction0.longValue();
      bigFraction3.negate();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(314, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.ONE.add(bigFraction1);
      bigFraction2.THREE_FIFTHS.compareTo(bigFraction0);
      int int0 = 0;
      BigFraction bigFraction3 = bigFraction0.subtract(0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction3.THREE_FIFTHS.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1819), (-1));
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction1.add((-1));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-6.97066538508643E-8), (-6.97066538508643E-8), 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -0 to fraction after 1 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-1805L));
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3739.3725114862);
      int int0 = 602;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.bigDecimalValue(602);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, 1);
      bigFraction0.MINUS_ONE.negate();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.multiply(bigInteger0);
      int int0 = (-494);
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.ONE_FIFTH.getNumeratorAsInt();
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.ONE.add((long) 1);
      BigFraction bigFraction3 = bigFraction0.TWO_THIRDS.multiply(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.TWO_THIRDS.add(bigFraction0);
      bigFraction4.ONE_QUARTER.bigDecimalValue();
      bigFraction0.getNumeratorAsInt();
      bigFraction0.divide(1);
      bigFraction2.intValue();
      BigFraction bigFraction5 = bigFraction0.add((long) 1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte) (-27);
      byteArray0[8] = (byte)117;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction5.ZERO.multiply(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction5.FOUR_FIFTHS.subtract(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigFraction3.add(bigInteger2);
      bigFraction1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = 0L;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.subtract(1L);
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction2 = bigFraction1.pow(0);
      bigFraction2.bigDecimalValue((-1074), 1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      int int0 = 1303;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.TWO.getNumeratorAsLong();
      int int0 = 1;
      BigFraction bigFraction1 = bigFraction0.multiply(1);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction1.ONE_FIFTH.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.negate();
      bigFraction0.getField();
      BigFraction bigFraction3 = bigFraction1.subtract((-2965));
      BigFraction bigFraction4 = bigFraction3.divide((-2965));
      bigFraction3.ONE_HALF.getNumeratorAsInt();
      bigFraction4.FOUR_FIFTHS.floatValue();
      BigFraction bigFraction5 = bigFraction1.divide(bigFraction3);
      bigFraction3.THREE_QUARTERS.getNumeratorAsLong();
      bigFraction5.TWO.compareTo(bigFraction4);
      bigFraction0.TWO_QUARTERS.doubleValue();
      bigFraction5.THREE_QUARTERS.divide((-1));
      bigFraction5.TWO_QUARTERS.longValue();
      bigFraction5.toString();
      bigFraction0.TWO_FIFTHS.add(0L);
      bigFraction2.MINUS_ONE.intValue();
      BigFraction bigFraction6 = bigFraction1.divide(bigFraction3);
      bigFraction6.add((long) 1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction4.subtract(bigInteger0);
      bigFraction3.longValue();
      BigFraction bigFraction7 = bigFraction2.negate();
      bigFraction3.THREE_FIFTHS.compareTo(bigFraction4);
      // Undeclared exception!
      try { 
        bigFraction7.bigDecimalValue((-2965));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 208);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(927.294519207402);
      bigFraction0.add((-2257));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf((-2636L));
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger1);
      bigFraction1.divide((-2636L));
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.pow((-1824L));
      bigFraction3.TWO_THIRDS.bigDecimalValue(1, 1);
      bigFraction2.abs();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-65);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.TWO.pow(bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(323);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction0.TWO_THIRDS.add(bigFraction1);
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction2.TWO.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }
}
