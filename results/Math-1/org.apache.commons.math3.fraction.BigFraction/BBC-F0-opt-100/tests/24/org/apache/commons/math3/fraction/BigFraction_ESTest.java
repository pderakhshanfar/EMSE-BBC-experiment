/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 11:06:14 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.TWO_QUARTERS.hashCode();
      BigFraction bigFraction3 = bigFraction2.TWO_THIRDS.abs();
      bigFraction1.add(7);
      bigFraction3.THREE_QUARTERS.floatValue();
      BigFraction bigFraction4 = bigFraction2.subtract(bigInteger0);
      bigFraction4.FOUR_FIFTHS.toString();
      BigFraction bigFraction5 = bigFraction2.add((long) 7);
      // Undeclared exception!
      try { 
        bigFraction5.ONE_HALF.bigDecimalValue(7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2628.0));
      bigFraction0.bigDecimalValue(1022, 4);
      bigFraction0.add(9007199254740990L);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1363L), (-1363L));
      BigFraction bigFraction1 = bigFraction0.TWO.reduce();
      // Undeclared exception!
      try { 
        bigFraction1.THREE_QUARTERS.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.2367542080273402));
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.divide(bigFraction0);
      BigFraction bigFraction3 = BigFraction.TWO;
      bigFraction0.getDenominatorAsInt();
      bigFraction0.getField();
      BigFraction bigFraction4 = new BigFraction((double) 0);
      bigFraction2.pow(3.0335741030285135E-8);
      BigFraction bigFraction5 = new BigFraction(Double.NaN, 3044);
      // Undeclared exception!
      try { 
        bigFraction5.subtract(bigFraction0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.2367542080273402));
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction0.getDenominatorAsInt();
      bigFraction1.getField();
      BigFraction bigFraction2 = new BigFraction((double) 0);
      bigFraction0.pow((-1.2367542080273402));
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction(Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert NaN value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1436.664457));
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction1.pow(2454.4416860148);
      bigFraction1.negate();
      BigFraction bigFraction2 = new BigFraction(Double.NaN, 2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483434);
      bigFraction0.ONE.floatValue();
      bigFraction0.bigDecimalValue(1);
      bigFraction0.add(96000L);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(926.92405545);
      bigFraction0.bigDecimalValue(0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4607182418800017408L, 2279604224L);
      BigFraction bigFraction1 = bigFraction0.add(4607182418800017408L);
      BigFraction bigFraction2 = bigFraction1.pow(1284);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger0);
      bigFraction2.floatValue();
      BigFraction bigFraction4 = new BigFraction(bigInteger0);
      bigFraction4.getDenominatorAsLong();
      BigFraction bigFraction5 = bigFraction2.add(bigInteger0);
      bigFraction5.getDenominatorAsInt();
      bigFraction1.getField();
      BigFraction bigFraction6 = new BigFraction((double) 1L);
      bigFraction3.add(1331);
      BigFraction bigFraction7 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction7.getField();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction8 = new BigFraction(bigInteger0);
      BigFraction bigFraction9 = BigFraction.TWO_FIFTHS;
      bigFraction4.getNumeratorAsInt();
      BigFraction bigFraction10 = BigFraction.ONE;
      bigFraction10.percentageValue();
      BigFraction bigFraction11 = null;
      try {
        bigFraction11 = new BigFraction(100.0, (-429977855));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 100 to fraction (-99/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)4;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)53;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.ONE_HALF.hashCode();
      bigFraction0.ONE_HALF.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger2);
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.add((long) (byte)49);
      BigFraction bigFraction4 = bigFraction1.TWO.negate();
      BigFraction bigFraction5 = bigFraction4.ONE_FIFTH.negate();
      bigFraction5.TWO_THIRDS.multiply(9007199254740990L);
      BigFraction bigFraction6 = bigFraction4.FOUR_FIFTHS.add(bigFraction0);
      BigFraction bigFraction7 = bigFraction1.pow((long) (byte) (-106));
      bigFraction7.THREE_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction8 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction9 = bigFraction3.add(405366L);
      bigFraction9.MINUS_ONE.intValue();
      BigFraction bigFraction10 = bigFraction6.add(bigFraction4);
      BigFraction bigFraction11 = bigFraction6.subtract(bigInteger2);
      bigFraction11.TWO_FIFTHS.divide(bigFraction10);
      bigFraction4.multiply(bigInteger2);
      BigFraction bigFraction12 = bigFraction8.abs();
      bigFraction1.subtract((int) (byte) (-106));
      bigFraction9.reduce();
      BigFraction bigFraction13 = bigFraction12.divide(bigFraction9);
      bigFraction3.toString();
      bigFraction13.toString();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-187.98914243110093));
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-2147483645), 2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9007199254740990L, 9154082963658192746L);
      BigFraction bigFraction1 = bigFraction0.pow(37);
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      bigFraction2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, 1);
      bigFraction0.bigDecimalValue(1, 1);
      bigFraction0.bigDecimalValue(1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(191.815121);
      bigFraction0.TWO.pow(100L);
      bigFraction0.ONE_HALF.longValue();
      bigFraction0.bigDecimalValue(4, 4);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2347, 16L);
      BigFraction bigFraction1 = bigFraction0.pow(2347);
      bigFraction0.divide(bigFraction1);
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2347, 2347);
      bigFraction0.TWO_QUARTERS.floatValue();
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(374, 4294448L);
      BigFraction bigFraction1 = bigFraction0.pow(374);
      bigFraction1.TWO.divide(bigFraction0);
      BigFraction bigFraction2 = new BigFraction((-7.522074418324674E-8), 374);
      bigFraction2.TWO_FIFTHS.subtract((long) 374);
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = new BigFraction(0.0);
      bigFraction1.TWO_THIRDS.subtract(bigFraction0);
      try { 
        bigFraction1.ONE.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.pow((-767));
      BigFraction bigFraction2 = BigFraction.ONE_THIRD;
      bigFraction0.multiply(bigFraction1);
      bigFraction0.getNumerator();
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction3 = BigFraction.TWO;
      bigFraction2.pow(0L);
      BigFraction bigFraction4 = new BigFraction(bigInteger0);
      BigFraction bigFraction5 = new BigFraction((long) (-1));
      BigFraction bigFraction6 = null;
      try {
        bigFraction6 = new BigFraction((double) (-767), (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -767 to fraction (-9,223,372,036,854,775,040/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(374, 4294448L);
      BigFraction bigFraction1 = bigFraction0.pow(374);
      BigFraction bigFraction2 = new BigFraction((-1));
      bigFraction2.divide(1087L);
      BigFraction bigFraction3 = bigFraction1.multiply(bigFraction0);
      bigFraction2.getDenominatorAsInt();
      bigFraction3.getField();
      BigFraction bigFraction4 = new BigFraction((-1631.02679735765));
      BigFraction bigFraction5 = BigFraction.TWO_THIRDS;
      bigFraction1.percentageValue();
      bigFraction5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-767), (-767));
      BigFraction bigFraction1 = bigFraction0.pow(0);
      bigFraction1.subtract(bigFraction0);
      BigFraction bigFraction2 = BigFraction.THREE_FIFTHS;
      bigFraction2.getField();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(374, 374);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add(374);
      BigFraction bigFraction2 = bigFraction0.add(374);
      BigFraction bigFraction3 = bigFraction1.pow(374);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.floatValue();
      bigFraction3.add(bigInteger0);
      bigFraction2.getDenominatorAsInt();
      bigFraction2.getField();
      bigFraction1.getDenominator();
      BigFraction bigFraction4 = BigFraction.TWO;
      bigFraction4.pow(2047L);
      BigFraction bigFraction5 = BigFraction.MINUS_ONE;
      bigFraction3.getField();
      bigFraction1.bigDecimalValue(374, 1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-767), (-767));
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      bigFraction2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ONE_THIRD.pow((-1948.32850441));
      BigFraction bigFraction1 = new BigFraction((-1948.32850441), 3430);
      bigFraction0.ONE_FIFTH.add(bigFraction1);
      bigFraction0.ONE.getNumeratorAsInt();
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = BigInteger.ONE;
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1948.32850441), 2979);
      bigFraction0.doubleValue();
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, (-767));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)46;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.16099999999994452);
      bigFraction0.FOUR_FIFTHS.floatValue();
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.equals(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.TWO_THIRDS.doubleValue();
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = new BigFraction((-2506.38150811124));
      bigFraction1.floatValue();
      bigFraction1.abs();
      BigFraction.getReducedFraction(52, (-1299));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3259L, (-272L));
      bigFraction0.add((-2105));
      BigFraction bigFraction1 = bigFraction0.pow((-2105));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.pow(bigInteger0);
      BigFraction bigFraction3 = BigFraction.TWO_QUARTERS;
      bigFraction3.floatValue();
      bigFraction2.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction3.add(bigInteger0);
      bigFraction1.getField();
      BigFraction bigFraction5 = bigFraction4.divide((-2105));
      bigFraction3.reduce();
      bigFraction1.floatValue();
      BigFraction.getReducedFraction(2147480078, 100);
      BigFraction bigFraction6 = BigFraction.THREE_QUARTERS;
      bigFraction1.subtract(bigFraction5);
      bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction7 = null;
      try {
        bigFraction7 = new BigFraction(0.0, 100);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction1.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ONE_QUARTER.equals(bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.MINUS_ONE.pow((-1.0));
      bigFraction1.MINUS_ONE.toString();
      bigFraction1.ONE_FIFTH.subtract(bigFraction0);
      bigFraction0.ONE_QUARTER.equals("-1");
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      bigFraction1.TWO_THIRDS.getDenominatorAsInt();
      bigFraction0.TWO_THIRDS.getField();
      BigFraction bigFraction3 = bigFraction2.reduce();
      bigFraction2.ONE.toString();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction3.multiply(bigInteger1);
      BigFraction bigFraction5 = bigFraction3.pow((-1));
      BigFraction bigFraction6 = bigFraction5.TWO.divide((long) (-1));
      bigFraction5.getNumerator();
      bigFraction3.getDenominator();
      bigFraction2.pow((long) (-1));
      BigFraction bigFraction7 = BigFraction.MINUS_ONE;
      bigFraction6.getField();
      bigFraction2.multiply(bigInteger1);
      bigFraction4.percentageValue();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.add((-1075));
      BigFraction bigFraction1 = bigFraction0.add((-1073741823));
      // Undeclared exception!
      try { 
        bigFraction1.pow((-1073741823));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(374, 374);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)75;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction0.equals((byte)75);
      BigFraction bigFraction2 = BigFraction.TWO_FIFTHS;
      bigFraction1.pow(1709.233);
      bigFraction2.toString();
      bigFraction0.equals((byte) (-25));
      BigFraction bigFraction3 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction4 = bigFraction0.pow(bigInteger0);
      bigFraction4.percentageValue();
      bigFraction1.getField();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0, 381);
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction1.add(0);
      BigFraction bigFraction2 = bigFraction0.add((-1732));
      BigFraction bigFraction3 = bigFraction2.pow(1396);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = null;
      // Undeclared exception!
      try { 
        bigFraction3.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(374, 374);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add(374);
      BigFraction bigFraction2 = bigFraction0.add(374);
      BigFraction bigFraction3 = bigFraction1.pow(374);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.pow(bigInteger0);
      bigFraction0.floatValue();
      bigFraction2.getDenominatorAsLong();
      bigFraction3.add(bigInteger0);
      bigFraction2.getDenominatorAsInt();
      bigFraction2.getField();
      BigFraction bigFraction4 = new BigFraction(0.0);
      bigFraction1.getField();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction5 = new BigFraction(bigInteger1);
      BigFraction bigFraction6 = BigFraction.ONE;
      bigFraction6.pow(374);
      BigFraction bigFraction7 = null;
      try {
        bigFraction7 = new BigFraction(1.4780692924846082E197, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 147,806,929,248,460,820,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 374;
      BigFraction bigFraction0 = new BigFraction(374, 374);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add(374);
      bigFraction0.add(374);
      BigFraction bigFraction2 = bigFraction1.pow(374);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction2.add(bigInteger0);
      bigFraction1.divide((-1732));
      bigFraction0.reduce();
      bigFraction1.floatValue();
      BigFraction.getReducedFraction((-1732), Integer.MAX_VALUE);
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction((double) Integer.MAX_VALUE, (-1732));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(374, 374);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add(374);
      BigFraction bigFraction2 = bigFraction0.add(374);
      BigFraction bigFraction3 = bigFraction1.pow(374);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.pow(bigInteger0);
      bigFraction0.floatValue();
      bigFraction1.floatValue();
      bigFraction3.getDenominatorAsLong();
      bigFraction1.add(bigInteger0);
      bigFraction3.getDenominatorAsInt();
      bigFraction2.getField();
      BigFraction bigFraction4 = new BigFraction((double) 0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction1.getField();
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction4.multiply(bigInteger1);
      BigFraction bigFraction5 = new BigFraction(bigInteger2);
      // Undeclared exception!
      try { 
        bigFraction5.pow((-2147032400));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(374, 374);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add(374);
      BigFraction bigFraction2 = bigFraction0.add(374);
      BigFraction bigFraction3 = bigFraction1.pow(374);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.pow(bigInteger0);
      bigFraction0.floatValue();
      bigFraction2.getDenominatorAsLong();
      bigFraction3.add(bigInteger0);
      bigFraction2.getDenominatorAsInt();
      bigFraction2.getField();
      BigFraction bigFraction4 = new BigFraction(0.0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction4.toString();
      bigFraction4.toString();
      bigFraction4.compareTo(bigFraction2);
      BigFraction bigFraction5 = BigFraction.TWO;
      bigFraction5.divide((long) 1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.add(374);
      BigFraction bigFraction2 = bigFraction1.add(374);
      BigFraction bigFraction3 = bigFraction1.pow(831);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction1.pow(bigInteger1);
      bigFraction2.floatValue();
      bigFraction4.getDenominatorAsLong();
      bigFraction3.add(bigInteger1);
      bigFraction1.getField();
      BigFraction bigFraction5 = bigFraction3.divide(374);
      bigFraction1.reduce();
      bigFraction1.floatValue();
      BigFraction.getReducedFraction((-3297), (-1686));
      BigFraction bigFraction6 = BigFraction.THREE_QUARTERS;
      bigFraction5.subtract(bigFraction3);
      bigFraction1.multiply(bigInteger1);
      BigFraction bigFraction7 = null;
      try {
        bigFraction7 = new BigFraction((double) (-1), (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1 to fraction (-9,223,372,036,854,775,806/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(374, 374);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add(374);
      BigFraction bigFraction2 = bigFraction0.add(374);
      BigFraction bigFraction3 = bigFraction1.pow(374);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.pow(bigInteger0);
      bigFraction0.floatValue();
      bigFraction2.getDenominatorAsLong();
      bigFraction3.add(bigInteger0);
      bigFraction2.getDenominatorAsInt();
      bigFraction2.getField();
      BigFraction bigFraction4 = new BigFraction(0.0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction1.getField();
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction0.multiply(bigInteger1);
      BigFraction bigFraction5 = new BigFraction(bigInteger1);
      bigFraction5.pow(374);
      BigFraction bigFraction6 = null;
      try {
        bigFraction6 = new BigFraction((double) 1, (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ONE_QUARTER.equals(bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.MINUS_ONE.pow((-1.0));
      bigFraction1.MINUS_ONE.toString();
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      bigFraction2.getField();
      bigFraction2.ZERO.floatValue();
      bigFraction2.divide((-1));
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction4 = bigFraction3.reduce();
      bigFraction3.floatValue();
      BigFraction bigFraction5 = BigFraction.getReducedFraction(674, (-555));
      BigFraction bigFraction6 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction7 = BigFraction.ZERO;
      bigFraction4.subtract(bigFraction7);
      BigFraction bigFraction8 = new BigFraction(2147480078);
      bigFraction8.multiply(bigInteger0);
      BigFraction bigFraction9 = new BigFraction((-1.309893394818129E-156), (-1));
      bigFraction5.divide((-1197));
      bigFraction3.subtract((-2144799292));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(374, 2147134179);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigFraction bigFraction2 = BigFraction.ONE_QUARTER;
      bigFraction1.toString();
      bigFraction2.toString();
      BigFraction bigFraction3 = BigFraction.TWO;
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1175, 1175);
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.abs();
      BigFraction bigFraction3 = bigFraction1.divide((-71L));
      bigFraction3.getNumerator();
      BigFraction bigFraction4 = new BigFraction((-1815.395596053725), 2147482282);
      BigInteger bigInteger0 = bigFraction4.getDenominator();
      BigFraction bigFraction5 = bigFraction2.pow(390L);
      BigFraction bigFraction6 = BigFraction.MINUS_ONE;
      bigFraction5.getDenominator();
      bigFraction0.add(bigFraction2);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.TEN;
      BigFraction bigFraction7 = new BigFraction(bigInteger1, bigInteger2);
      bigFraction7.reduce();
      bigFraction4.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(374, 374);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add(374);
      BigFraction bigFraction2 = bigFraction0.add(374);
      BigFraction bigFraction3 = bigFraction1.pow(374);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.pow(bigInteger0);
      bigFraction0.floatValue();
      bigFraction2.getDenominatorAsLong();
      bigFraction3.add(bigInteger0);
      bigFraction0.getField();
      BigFraction bigFraction4 = bigFraction0.divide((-1));
      BigFraction bigFraction5 = bigFraction0.reduce();
      bigFraction0.toString();
      bigFraction2.compareTo(bigFraction4);
      BigFraction bigFraction6 = bigFraction3.divide(bigFraction5);
      bigFraction6.ONE_FIFTH.pow(bigInteger0);
      BigFraction bigFraction7 = BigFraction.ONE;
      bigFraction7.divide(9223372036854775807L);
      bigFraction3.getNumerator();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-767), (-767));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(bigInteger0);
      bigFraction1.TWO.getDenominatorAsLong();
      BigFraction bigFraction2 = new BigFraction((-767), (-767));
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction2.ONE_THIRD.floatValue();
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.subtract(bigInteger1);
      BigFraction bigFraction4 = bigFraction3.ZERO.negate();
      bigFraction2.ZERO.longValue();
      bigFraction2.intValue();
      BigFraction bigFraction5 = bigFraction2.multiply(bigFraction4);
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction6 = bigFraction1.subtract(bigInteger1);
      BigFraction bigFraction7 = BigFraction.TWO;
      BigFraction bigFraction8 = bigFraction5.divide(1876);
      BigFraction bigFraction9 = bigFraction0.reduce();
      bigFraction5.floatValue();
      BigFraction bigFraction10 = BigFraction.getReducedFraction(759, (-767));
      bigFraction7.getNumerator();
      bigFraction9.getDenominator();
      bigFraction6.pow((long) 759);
      BigInteger bigInteger2 = bigFraction10.getDenominator();
      bigFraction2.add(bigFraction0);
      bigFraction6.reduce();
      bigFraction8.subtract(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ONE_QUARTER.equals(bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.MINUS_ONE.pow((-1.0));
      bigFraction1.MINUS_ONE.toString();
      bigFraction0.ONE_QUARTER.equals("-1");
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      bigFraction1.TWO_THIRDS.getDenominatorAsInt();
      bigFraction0.TWO_THIRDS.getField();
      BigFraction bigFraction3 = bigFraction2.reduce();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction3.multiply(bigInteger1);
      BigFraction bigFraction5 = bigFraction3.pow((-1));
      bigFraction5.TWO.divide((long) (-1));
      bigFraction5.getNumerator();
      bigFraction3.getDenominator();
      bigFraction2.pow((long) (-1));
      BigFraction bigFraction6 = BigFraction.MINUS_ONE;
      bigFraction6.getDenominator();
      BigFraction bigFraction7 = bigFraction4.add(bigFraction2);
      bigFraction7.reduce();
      bigFraction2.subtract(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ONE_QUARTER.equals(bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction0.pow(1.7976931348623157E308);
      BigFraction bigFraction2 = new BigFraction((-277), (-2718));
      bigFraction2.toString();
      BigFraction bigFraction3 = BigFraction.TWO_QUARTERS;
      bigFraction2.getDenominatorAsInt();
      bigFraction1.getField();
      BigFraction bigFraction4 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction1.getField();
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction4.multiply(bigInteger1);
      BigFraction bigFraction5 = new BigFraction((double) (-277));
      bigFraction4.subtract(bigFraction1);
      bigFraction0.multiply(bigInteger1);
      BigFraction bigFraction6 = null;
      try {
        bigFraction6 = new BigFraction(2.0862243734177337E-306, 2718);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ONE_QUARTER.equals(bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.MINUS_ONE.pow((-1.0));
      bigFraction1.MINUS_ONE.toString();
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      bigFraction1.TWO_THIRDS.getDenominatorAsInt();
      bigFraction0.TWO_THIRDS.getField();
      BigFraction bigFraction3 = new BigFraction((double) 3);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction3.ZERO.getField();
      bigFraction3.MINUS_ONE.add(629);
      BigFraction bigFraction4 = bigFraction2.TWO_QUARTERS.pow(bigInteger1);
      bigFraction3.TWO.floatValue();
      bigFraction2.THREE_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction5 = bigFraction0.TWO_QUARTERS.add(bigInteger1);
      bigFraction0.ONE_FIFTH.getField();
      bigFraction5.add(bigFraction0);
      bigFraction2.add((long) 629);
      BigFraction bigFraction6 = bigFraction4.divide(bigInteger1);
      bigFraction6.ONE_FIFTH.subtract((-3336));
      BigFraction bigFraction7 = new BigFraction(5L);
      bigFraction7.getDenominatorAsLong();
      BigFraction bigFraction8 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction8.bigDecimalValue(629);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(367L, 4499201580859392L);
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction0.TWO_QUARTERS.getDenominatorAsInt();
      BigFraction bigFraction2 = new BigFraction((double) 367L);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.getField();
      BigFraction bigFraction3 = bigFraction0.add(2);
      BigFraction bigFraction4 = bigFraction1.pow(bigInteger0);
      bigFraction2.floatValue();
      bigFraction1.getDenominatorAsLong();
      bigFraction1.add(bigInteger0);
      bigFraction4.getField();
      BigFraction bigFraction5 = new BigFraction(2);
      bigFraction5.add(bigFraction3);
      long long0 = (-1847L);
      BigFraction bigFraction6 = bigFraction2.add((-1847L));
      bigFraction3.divide(bigInteger0);
      BigFraction bigFraction7 = new BigFraction((long) 629);
      bigFraction2.getDenominatorAsLong();
      BigFraction bigFraction8 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction6.bigDecimalValue((-4988));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9007199254740990L, (-453L));
      BigFraction bigFraction1 = BigFraction.getReducedFraction(629, 1009);
      BigFraction bigFraction2 = bigFraction1.negate();
      bigFraction2.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction1.reduce();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction3.multiply(bigInteger0);
      bigFraction3.pow(1442);
      bigFraction2.subtract(bigFraction4);
      bigFraction0.multiply(bigInteger0);
      bigFraction1.ONE_HALF.add(bigInteger0);
      BigFraction bigFraction5 = new BigFraction(1684.310919871085, 629);
      bigFraction1.divide((-4393));
      bigFraction3.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.ONE_HALF.percentageValue();
      BigFraction bigFraction1 = bigFraction0.divide((-628));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      bigFraction1.THREE_FIFTHS.getField();
      byteArray0[2] = (byte) (-32);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = BigFraction.TWO;
      BigFraction bigFraction3 = bigFraction2.subtract(bigInteger0);
      bigFraction3.TWO_FIFTHS.subtract(4289L);
      bigFraction1.compareTo(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-767), (-767));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(bigInteger0);
      bigFraction1.TWO.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.add(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction2.ONE_THIRD.floatValue();
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.subtract(bigInteger1);
      bigFraction3.ZERO.negate();
      bigFraction2.ZERO.longValue();
      bigFraction0.intValue();
      BigFraction bigFraction4 = bigFraction1.multiply(bigFraction0);
      bigFraction0.getNumeratorAsInt();
      bigFraction4.subtract(bigInteger0);
      bigFraction0.ONE_QUARTER.bigDecimalValue(1, 1);
      BigFraction bigFraction5 = BigFraction.TWO;
      bigFraction4.divide(1306);
      BigFraction bigFraction6 = bigFraction1.reduce();
      bigFraction6.floatValue();
      BigFraction bigFraction7 = BigFraction.getReducedFraction(1, (-767));
      bigFraction4.getNumerator();
      bigFraction2.getDenominator();
      bigFraction6.divide((long) 1);
      bigFraction7.abs();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ONE_QUARTER.equals(bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.MINUS_ONE.pow((-1.0));
      bigFraction1.MINUS_ONE.toString();
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      bigFraction1.TWO_THIRDS.getDenominatorAsInt();
      bigFraction0.TWO_THIRDS.getField();
      BigFraction bigFraction3 = new BigFraction((double) 3);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction3.ZERO.getField();
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction3.multiply(bigInteger2);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.ONE.add(bigFraction1);
      bigFraction0.TWO_QUARTERS.reciprocal();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.ONE.getNumeratorAsInt();
      bigFraction0.pow(0.13700040000003355);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte) (-111);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      int int0 = 168;
      BigFraction bigFraction2 = bigFraction1.pow(168);
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction1.negate();
      bigFraction4.ZERO.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction3.MINUS_ONE.bigDecimalValue((int) (byte) (-4), (int) (byte) (-122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1192, 1175);
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.THREE_FIFTHS.abs();
      int int0 = (-787);
      bigFraction1.toString();
      // Undeclared exception!
      try { 
        bigFraction1.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1175, 1175);
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = BigFraction.ZERO;
      bigFraction1.toString();
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      bigFraction3.TWO_THIRDS.multiply((-731));
      bigFraction3.ONE_FIFTH.equals("1 / 2");
      bigFraction3.compareTo(bigFraction0);
      bigFraction0.divide(bigFraction3);
      BigFraction bigFraction4 = bigFraction2.divide((long) 1175);
      bigFraction4.abs();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-767), (-767));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(bigInteger0);
      bigFraction1.TWO.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.add(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction2.ONE_THIRD.floatValue();
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.subtract(bigInteger1);
      BigFraction bigFraction4 = bigFraction3.ZERO.negate();
      bigFraction2.ZERO.longValue();
      bigFraction0.intValue();
      BigFraction bigFraction5 = bigFraction1.multiply(bigFraction0);
      bigFraction0.getNumeratorAsInt();
      bigFraction5.subtract(bigInteger0);
      BigFraction bigFraction6 = bigFraction0.add(bigInteger0);
      bigFraction1.getField();
      bigFraction4.divide(1);
      BigFraction bigFraction7 = bigFraction2.reduce();
      bigFraction0.floatValue();
      BigFraction bigFraction8 = BigFraction.getReducedFraction(1, 799);
      bigFraction4.getNumerator();
      bigFraction7.getDenominator();
      BigFraction bigFraction9 = BigFraction.MINUS_ONE;
      BigFraction bigFraction10 = bigFraction9.pow((long) (-767));
      bigFraction10.getDenominator();
      BigFraction bigFraction11 = bigFraction6.add(bigFraction9);
      bigFraction8.reduce();
      bigFraction11.subtract(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(374, 374);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add(374);
      BigFraction bigFraction2 = bigFraction0.add(374);
      BigFraction bigFraction3 = bigFraction1.pow(374);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction3.pow(bigInteger0);
      bigFraction0.floatValue();
      bigFraction2.getDenominatorAsLong();
      bigFraction3.add(bigInteger0);
      bigFraction0.getField();
      BigFraction bigFraction5 = bigFraction0.divide((-1));
      bigFraction0.reduce();
      bigFraction3.floatValue();
      BigFraction.getReducedFraction(5, 2147480078);
      BigFraction bigFraction6 = BigFraction.THREE_QUARTERS;
      bigFraction6.getNumerator();
      BigInteger bigInteger1 = bigFraction5.getDenominator();
      bigFraction2.pow((-1294L));
      bigFraction1.getDenominator();
      bigFraction4.add(bigFraction6);
      bigFraction6.reduce();
      bigFraction0.subtract(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(367L, 4499201580859392L);
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction0.TWO_QUARTERS.getDenominatorAsInt();
      bigFraction1.ONE.reduce();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.multiply(bigInteger0);
      int int0 = (-1);
      BigFraction bigFraction3 = bigFraction1.MINUS_ONE.pow((-1));
      bigFraction2.subtract(bigFraction3);
      bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction((double) 367L, 2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 367 to fraction (9,223,372,036,854,775,442/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-767), (-767));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(bigInteger0);
      bigFraction1.TWO.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.add(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction2.ONE_THIRD.floatValue();
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      bigFraction3.multiply((-1));
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigFraction bigFraction4 = new BigFraction((long) (-767));
      bigFraction4.pow((double) 1L);
      bigFraction4.multiply(bigInteger1);
      bigFraction3.getDenominatorAsLong();
      int int0 = 2147469369;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2147469369, 2147469369);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-767), (-767));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(bigInteger0);
      bigFraction1.TWO.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.add(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction2.ONE_THIRD.floatValue();
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.subtract(bigInteger1);
      bigFraction3.ZERO.negate();
      bigFraction2.ZERO.longValue();
      bigFraction0.intValue();
      BigFraction bigFraction4 = bigFraction1.multiply(bigFraction0);
      bigFraction0.getNumeratorAsInt();
      bigFraction4.subtract(bigInteger0);
      bigFraction0.ONE_QUARTER.bigDecimalValue(1, 1);
      BigFraction bigFraction5 = BigFraction.TWO;
      bigFraction4.divide(1306);
      BigFraction bigFraction6 = bigFraction1.reduce();
      bigFraction6.floatValue();
      BigFraction bigFraction7 = BigFraction.getReducedFraction(1, (-767));
      bigFraction4.getNumerator();
      bigFraction2.getDenominator();
      bigFraction7.pow(1L);
      bigFraction2.getDenominator();
      bigFraction1.add(bigFraction4);
      bigFraction7.reduce();
      bigFraction0.subtract(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ONE_QUARTER.equals(bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.MINUS_ONE.pow((-1.0));
      bigFraction1.MINUS_ONE.toString();
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      bigFraction1.TWO_THIRDS.getDenominatorAsInt();
      bigFraction0.TWO_THIRDS.getField();
      BigFraction bigFraction3 = new BigFraction((double) 3);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction3.ZERO.getField();
      bigFraction3.MINUS_ONE.add(629);
      BigFraction bigFraction4 = bigFraction2.TWO_QUARTERS.pow(bigInteger1);
      bigFraction3.TWO.floatValue();
      bigFraction2.THREE_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction5 = bigFraction0.TWO_QUARTERS.add(bigInteger1);
      bigFraction0.ONE_FIFTH.getField();
      bigFraction5.add(bigFraction0);
      bigFraction2.add((long) 629);
      bigFraction4.divide(bigInteger1);
      BigFraction bigFraction6 = new BigFraction(5L);
      bigFraction6.getDenominatorAsLong();
      BigFraction bigFraction7 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction7.bigDecimalValue(629);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = BigFraction.ZERO;
      bigFraction2.toString();
      BigFraction bigFraction3 = BigFraction.ZERO;
      bigFraction3.compareTo(bigFraction2);
      BigFraction.getReducedFraction(4296, 2466);
      BigFraction bigFraction4 = new BigFraction((double) 2466);
      bigFraction0.divide(1362L);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.TWO_THIRDS.getNumeratorAsInt();
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.multiply((-918L));
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.ONE_THIRD.pow((-918L));
      bigFraction3.THREE_QUARTERS.multiply((-42));
      int int0 = 760;
      BigFraction bigFraction4 = bigFraction0.divide(760);
      bigFraction4.TWO_FIFTHS.doubleValue();
      bigFraction1.ONE_HALF.getNumeratorAsInt();
      BigFraction bigFraction5 = BigFraction.ONE_THIRD;
      bigFraction2.TWO_THIRDS.equals(bigFraction1);
      BigFraction bigFraction6 = bigFraction1.subtract(bigFraction5);
      BigFraction bigFraction7 = bigFraction6.ZERO.pow(94L);
      bigFraction7.ONE_FIFTH.getDenominatorAsLong();
      bigFraction2.divide(bigFraction4);
      BigFraction bigFraction8 = bigFraction5.abs();
      BigFraction bigFraction9 = bigFraction0.ONE_QUARTER.add(bigFraction8);
      BigFraction bigFraction10 = bigFraction9.ZERO.subtract(4643211215818981376L);
      // Undeclared exception!
      try { 
        bigFraction10.ZERO.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.pow((-539));
      BigFraction bigFraction3 = bigFraction2.subtract(104);
      BigFraction bigFraction4 = bigFraction3.divide(bigInteger0);
      bigFraction2.toString();
      BigFraction bigFraction5 = bigFraction4.subtract(bigFraction2);
      bigFraction3.bigDecimalValue();
      bigFraction4.add((-1));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte) (-20);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction6 = bigFraction0.divide(bigInteger0);
      bigFraction5.bigDecimalValue();
      bigFraction6.add(bigFraction2);
      bigFraction5.getDenominator();
      bigFraction1.getDenominatorAsLong();
      bigFraction5.getDenominatorAsLong();
      bigFraction1.negate();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      bigFraction2.floatValue();
      bigFraction2.subtract(bigInteger0);
      BigFraction bigFraction3 = new BigFraction(1175, (-1));
      bigFraction3.negate();
      bigFraction2.longValue();
      bigFraction3.intValue();
      BigFraction bigFraction4 = BigFraction.TWO;
      bigFraction4.multiply(bigFraction1);
      bigFraction0.getNumeratorAsInt();
      int int0 = (-895);
      int int1 = (-1686);
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-895), (-1686));
      bigFraction5.subtract(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2144832881, (-818));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.ONE_HALF.percentageValue();
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.multiply((-1502L));
      bigFraction1.longValue();
      bigFraction1.divide((-1201L));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1840.681203767);
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction1.FOUR_FIFTHS.multiply(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.subtract(3952090531849364496L);
      BigFraction bigFraction3 = bigFraction2.multiply(1252L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction3.add(bigInteger0);
      bigFraction4.TWO_THIRDS.getDenominatorAsLong();
      bigFraction2.divide(4866);
      bigFraction2.multiply((-3371));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.abs();
      BigFraction bigFraction2 = BigFraction.ZERO;
      bigFraction2.toString();
      BigFraction bigFraction3 = new BigFraction((double) 1175);
      bigFraction3.compareTo(bigFraction1);
      BigFraction bigFraction4 = BigFraction.getReducedFraction(1175, (-1086));
      // Undeclared exception!
      try { 
        bigFraction4.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.pow(137);
      bigFraction1.TWO_FIFTHS.multiply((-1713L));
      bigFraction1.getNumerator();
      BigFraction.getReducedFraction((-2888), (-2888));
      BigFraction bigFraction3 = bigFraction1.subtract((-3236L));
      bigFraction2.pow((-2888));
      bigFraction3.getNumerator();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.multiply(2207);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ONE_HALF.longValue();
      bigFraction0.MINUS_ONE.equals((Object) null);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-1559207L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1175, 1175);
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.THREE_FIFTHS.abs();
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-787), 1210);
      BigFraction bigFraction3 = bigFraction0.TWO.subtract(bigFraction1);
      bigFraction3.intValue();
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction5 = bigFraction4.abs();
      Object object0 = new Object();
      bigFraction3.equals(object0);
      bigFraction2.subtract(bigFraction4);
      bigFraction5.getDenominatorAsLong();
      bigFraction5.bigDecimalValue();
      bigFraction3.add((-1559207L));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction6 = new BigFraction(bigInteger0);
      BigFraction bigFraction7 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction6.ONE.divide(bigFraction7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ONE_QUARTER.equals(bigInteger0);
      BigFraction bigFraction1 = new BigFraction(54L, 54L, 37);
      bigFraction0.multiply(37);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction0.pow((-551.8584908420814));
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger0);
      bigFraction2.getDenominatorAsLong();
      int int0 = (-1264);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(27260019, (-1264));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.ONE.getField();
      bigFraction0.MINUS_ONE.bigDecimalValue((-460), 0);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.reduce();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.TWO_FIFTHS.divide(bigFraction0);
      bigFraction1.TWO_QUARTERS.longValue();
      bigFraction0.ONE_THIRD.percentageValue();
      bigFraction0.getNumerator();
      BigFraction bigFraction4 = bigFraction0.negate();
      bigFraction0.ONE_FIFTH.multiply(bigFraction3);
      BigFraction bigFraction5 = bigFraction4.THREE_QUARTERS.multiply(1608);
      bigFraction5.TWO.longValue();
      BigFraction bigFraction6 = bigFraction4.subtract(bigFraction0);
      bigFraction6.THREE_FIFTHS.compareTo(bigFraction5);
      bigFraction6.intValue();
      bigFraction5.intValue();
      bigFraction2.ONE_THIRD.getNumeratorAsInt();
      bigFraction4.floatValue();
      // Undeclared exception!
      try { 
        bigFraction2.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.pow(Integer.MAX_VALUE);
      bigFraction0.divide(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.divide(bigInteger0);
      bigFraction1.TWO.multiply(2474L);
      bigFraction1.ONE_QUARTER.toString();
      bigFraction1.compareTo(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ONE_QUARTER.equals(bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.MINUS_ONE.pow((-1.0));
      bigFraction1.MINUS_ONE.toString();
      BigFraction bigFraction2 = BigFraction.ONE_THIRD;
      bigFraction1.TWO_THIRDS.getDenominatorAsInt();
      bigFraction0.TWO_THIRDS.getField();
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.multiply(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction3.ZERO.getField();
      BigFraction bigFraction4 = bigFraction3.MINUS_ONE.add(629);
      bigFraction4.pow(629);
      bigFraction2.TWO_QUARTERS.pow(bigInteger1);
      bigFraction3.TWO.floatValue();
      bigFraction2.THREE_FIFTHS.getDenominatorAsLong();
      bigFraction0.TWO_QUARTERS.add(bigInteger1);
      bigFraction0.ONE_FIFTH.getField();
      bigFraction2.ONE_QUARTER.divide((-1));
      bigFraction0.reduce();
      bigFraction0.floatValue();
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-2319), (-2319));
      bigFraction1.getNumerator();
      bigFraction2.getDenominator();
      BigFraction bigFraction6 = bigFraction5.pow(5L);
      bigFraction6.getDenominator();
      bigFraction0.add(bigFraction2);
      bigFraction5.reduce();
      bigFraction6.bigDecimalValue();
      bigFraction4.pow(3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-767), (-767));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(bigInteger0);
      bigFraction1.TWO.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.add(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction2.ONE_THIRD.floatValue();
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.subtract(bigInteger1);
      bigFraction3.ZERO.negate();
      bigFraction2.ZERO.longValue();
      bigFraction0.intValue();
      BigFraction bigFraction4 = bigFraction1.multiply(bigFraction0);
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction5 = bigFraction4.subtract(bigInteger0);
      bigFraction0.ONE_QUARTER.bigDecimalValue(1, 1);
      BigFraction bigFraction6 = BigFraction.TWO;
      bigFraction4.add(bigFraction6);
      bigFraction6.ONE_QUARTER.add(1L);
      // Undeclared exception!
      try { 
        bigFraction5.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction0.ONE_QUARTER.toString();
      bigInteger0.compareTo(bigInteger1);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.subtract(bigFraction1);
      bigFraction0.ONE_FIFTH.compareTo(bigFraction2);
      bigFraction2.equals(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.TWO.divide(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      bigFraction0.FOUR_FIFTHS.hashCode();
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      BigFraction bigFraction3 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction4 = bigFraction0.ZERO.divide(bigFraction3);
      bigFraction1.ONE_HALF.longValue();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-86);
      bigFraction3.ZERO.getNumeratorAsInt();
      bigFraction2.THREE_FIFTHS.getDenominatorAsLong();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction4.ONE_HALF.add(bigInteger0);
      bigFraction4.TWO_QUARTERS.divide(bigInteger0);
      BigFraction bigFraction5 = bigFraction0.divide(9193070505571053912L);
      bigFraction2.getNumerator();
      bigFraction4.getNumerator();
      BigFraction bigFraction6 = BigFraction.getReducedFraction((byte)1, 306);
      bigFraction6.TWO_QUARTERS.compareTo(bigFraction2);
      BigFraction bigFraction7 = bigFraction0.subtract(bigFraction5);
      bigFraction2.add(0);
      // Undeclared exception!
      try { 
        bigFraction7.bigDecimalValue(306);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), (-1389));
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.pow((-1389));
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)62;
      byteArray0[0] = (byte)62;
      bigFraction1.ONE_HALF.hashCode();
      byte byte1 = (byte)1;
      byteArray0[1] = (byte)1;
      BigFraction bigFraction2 = bigFraction0.ONE_THIRD.multiply(bigFraction1);
      bigFraction2.ONE.floatValue();
      byteArray0[2] = (byte) (-43);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction1.divide(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction3.FOUR_FIFTHS.bigDecimalValue((-1), (-1389));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-461), (-1));
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-110);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction1.TWO.multiply(0L);
      bigFraction2.THREE_QUARTERS.add(bigFraction0);
      bigFraction0.THREE_QUARTERS.compareTo(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.MINUS_ONE.add(0L);
      bigFraction3.TWO_QUARTERS.equals(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction3.TWO_THIRDS.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.multiply(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)61;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.pow(bigInteger0);
      bigFraction1.TWO.negate();
      BigFraction.getReducedFraction((-1), (-1));
      int int0 = 443;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.bigDecimalValue(443);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(367L, 4499201580859392L);
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction0.TWO_QUARTERS.getDenominatorAsInt();
      bigFraction1.ONE.reduce();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.multiply(bigInteger0);
      bigFraction1.MINUS_ONE.pow((-1));
      BigFraction bigFraction3 = bigFraction2.TWO_THIRDS.subtract(2);
      // Undeclared exception!
      try { 
        bigFraction3.FOUR_FIFTHS.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.ONE_HALF.intValue();
      bigFraction0.getNumeratorAsInt();
      bigFraction0.TWO_THIRDS.getDenominatorAsLong();
      bigFraction0.hashCode();
      bigFraction0.subtract((-1));
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-16);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.5718178749084473, 0.5718178749084473, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.572 to fraction after 1 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.ONE.getField();
      bigFraction0.MINUS_ONE.bigDecimalValue((-460), 0);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.reduce();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.pow(bigInteger0);
      bigFraction1.TWO_FIFTHS.divide(bigFraction0);
      bigFraction1.TWO_QUARTERS.longValue();
      bigFraction0.ONE_THIRD.percentageValue();
      bigFraction0.getNumerator();
      BigFraction bigFraction3 = bigFraction0.negate();
      BigFraction bigFraction4 = bigFraction3.THREE_QUARTERS.multiply(1608);
      BigFraction bigFraction5 = bigFraction3.subtract(bigFraction0);
      bigFraction5.THREE_FIFTHS.compareTo(bigFraction4);
      bigFraction5.intValue();
      bigFraction4.intValue();
      bigFraction2.ONE_THIRD.getNumeratorAsInt();
      bigFraction3.floatValue();
      // Undeclared exception!
      try { 
        bigFraction2.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(492, 1);
      bigFraction0.equals(bigFraction1);
      bigFraction0.floatValue();
      bigFraction1.subtract(1018);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 3837;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-809.1370004), (-809.1370004), 3837);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -809.137 to fraction (-2,704,534,127,942/3,342,492,219)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = null;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction0.TWO_THIRDS.multiply(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.4847880344628818E-8);
      bigFraction0.TWO_THIRDS.bigDecimalValue(4, 2);
      Object object0 = new Object();
      bigFraction0.TWO.intValue();
      bigFraction0.ONE_FIFTH.equals(object0);
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.negate();
      bigFraction0.TWO_THIRDS.add(0L);
      BigFraction.getReducedFraction((-1953), 1758);
      bigFraction0.ONE_FIFTH.doubleValue();
      bigFraction1.ONE_THIRD.multiply(4294967295L);
      bigFraction0.getNumeratorAsInt();
      int int0 = 797;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction1.MINUS_ONE.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.ONE_HALF.percentageValue();
      bigFraction0.FOUR_FIFTHS.multiply((-1502L));
      bigFraction0.divide(1599);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      bigFraction1.ONE_QUARTER.toString();
      bigFraction2.ONE.toString();
      bigFraction1.compareTo(bigFraction2);
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1512L), (-1512L));
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.divide(Integer.MAX_VALUE);
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction0.multiply((-1512L));
      BigFraction bigFraction3 = bigFraction2.TWO_FIFTHS.divide(9007199254740990L);
      bigFraction3.TWO_QUARTERS.subtract(bigFraction0);
      bigFraction1.subtract(1L);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(4503599627370496L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.intValue();
      bigFraction0.floatValue();
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.pow(bigInteger0);
      bigFraction1.ONE.divide(1);
      bigFraction2.MINUS_ONE.negate();
      BigFraction bigFraction4 = bigFraction1.pow(2535);
      assertNotSame(bigFraction4, bigFraction3);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(792, 1);
      BigFraction bigFraction1 = bigFraction0.subtract((long) 1);
      assertEquals((byte)23, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      int int0 = 4;
      int int1 = 5;
      BigFraction bigFraction1 = bigFraction0.ONE.pow(5);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.THREE_QUARTERS.pow(bigInteger0);
      bigFraction0.TWO_FIFTHS.bigDecimalValue(4, 4);
      bigFraction0.longValue();
      bigFraction0.getDenominatorAsLong();
      String string0 = "";
      bigFraction1.ONE_THIRD.subtract(389);
      int int2 = 0;
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger("", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add((-124));
      BigFraction bigFraction2 = bigFraction0.abs();
      bigFraction2.THREE_FIFTHS.abs();
      bigFraction1.pow(1375.29559306378);
      BigFraction bigFraction3 = bigFraction2.divide(9218868437227405312L);
      bigFraction3.FOUR_FIFTHS.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction3.TWO_QUARTERS.reciprocal();
      BigFraction bigFraction5 = bigFraction0.add(bigFraction1);
      bigFraction2.getDenominatorAsLong();
      bigFraction5.getNumeratorAsLong();
      bigFraction3.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction3.ONE.add(bigInteger0);
      bigFraction5.longValue();
      bigFraction1.ONE.toString();
      BigFraction bigFraction6 = bigFraction2.divide((-124));
      bigFraction6.getField();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction7 = bigFraction2.divide(bigInteger1);
      bigFraction7.TWO.divide((-124));
      BigFraction bigFraction8 = bigFraction5.subtract(bigInteger1);
      BigFraction bigFraction9 = bigFraction4.abs();
      bigFraction9.ZERO.getField();
      bigFraction6.getDenominatorAsLong();
      bigFraction3.compareTo(bigFraction2);
      bigFraction8.MINUS_ONE.reduce();
      bigFraction6.FOUR_FIFTHS.getField();
      BigInteger bigInteger2 = null;
      // Undeclared exception!
      try { 
        bigFraction6.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1175, 1175);
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.THREE_FIFTHS.abs();
      BigFraction.getReducedFraction((-787), 1210);
      BigFraction bigFraction2 = bigFraction0.TWO.subtract(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction2.ONE.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-383.5531112509));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.pow(0);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(675, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-87);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      assertEquals((byte)88, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1840.681203767);
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction1.FOUR_FIFTHS.multiply(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.subtract(3952090531849364496L);
      BigFraction bigFraction3 = bigFraction2.multiply(1252L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction3.add(bigInteger0);
      bigFraction4.TWO_THIRDS.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction4.TWO.bigDecimalValue(4866);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(374, 374);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add(374);
      bigFraction1.ONE.getDenominatorAsLong();
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((double) 374, 374);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 374 to fraction (-373/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-482), (-482));
      bigFraction0.ONE_FIFTH.subtract(2001);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.subtract((long) (-482));
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      BigFraction bigFraction3 = bigFraction1.add(bigFraction2);
      bigFraction3.ONE_FIFTH.getField();
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483648L, 2147483648L);
      bigFraction0.TWO_FIFTHS.intValue();
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = 3020;
      int int1 = (-4183);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(3020, (-4183));
      bigFraction0.MINUS_ONE.multiply(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.TWO.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ONE_QUARTER.equals(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO.pow(54L);
      bigFraction1.MINUS_ONE.pow((-1.0));
      bigFraction1.MINUS_ONE.toString();
      // Undeclared exception!
      try { 
        bigFraction1.TWO.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.TWO_QUARTERS.getField();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.add(bigInteger0);
      bigFraction1.ONE.reciprocal();
      BigFraction bigFraction2 = bigFraction0.divide(1834L);
      BigFraction bigFraction3 = bigFraction2.THREE_FIFTHS.multiply(100L);
      bigFraction2.bigDecimalValue(5);
      double double0 = bigFraction3.doubleValue();
      assertEquals(60.0, double0, 0.01);
      assertEquals((short)0, bigFraction2.shortValue());
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)60, bigFraction3.shortValue());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE.getNumeratorAsLong();
      bigFraction0.ONE.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.reduce();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-55));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(3611, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      int int0 = 135;
      BigFraction bigFraction1 = bigFraction0.divide(135);
      bigFraction1.getDenominator();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(135);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
