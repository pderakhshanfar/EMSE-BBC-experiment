/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 13:41:36 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.pow(0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow(24352L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.add(bigInteger0);
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction0.add(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1376), (-1376));
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction1.add(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction0.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract((-987));
      bigFraction1.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1428);
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.abs();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1299.58335687));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1376), (-1376));
      bigFraction0.subtract(1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1);
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.subtract(4503599627370495L);
      bigFraction1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(9223372036854774458L);
      bigFraction1.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ONE.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-19.139800075499267));
      bigFraction0.pow(1L);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.pow(0L);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.pow((-5427L));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.MINUS_ONE.pow((-2146656737));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.pow(82.4);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-19.139800075499267));
      bigFraction0.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5111L);
      bigFraction0.ZERO.percentageValue();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.subtract((long) (byte)5);
      bigFraction1.negate();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.multiply(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = new BigFraction((-2660));
      bigFraction0.TWO_QUARTERS.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1376), (-1376));
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction1.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.multiply(1543580419L);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.multiply((-449));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.FOUR_FIFTHS.multiply((-1361));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.multiply((-2489L));
      bigFraction1.longValue();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1299.58335687));
      bigFraction0.longValue();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction1.intValue();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.MINUS_ONE.intValue();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction.getReducedFraction((-1376), 1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4607182418800017408L, 4607182418800017408L);
      bigFraction0.MINUS_ONE.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1299.58335687));
      bigFraction0.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.add(2661);
      bigFraction1.getNumerator();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3));
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.pow(431);
      bigFraction1.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = new BigFraction(638.44040525888);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction2.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-19.139800075499267));
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3));
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.pow(406);
      bigFraction1.getDenominator();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3));
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1376), (-1376));
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.negate();
      bigFraction0.divide(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.add(4355L);
      bigFraction1.divide(2017L);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-227L), 333L);
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.subtract(4771);
      bigFraction1.divide(1020L);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.add((long) 406);
      bigFraction1.divide(406);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1299.58335687));
      bigFraction0.divide(1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.THREE_FIFTHS.compareTo(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3));
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction0.compareTo(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.bigDecimalValue(5, 5);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1299.58335687));
      bigFraction0.bigDecimalValue(604, 1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.bigDecimalValue((int) (byte)5);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.multiply((-1404L));
      bigFraction1.bigDecimalValue(2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1299.58335687));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction1.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1376), (-1376));
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction1.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3));
      bigFraction0.add(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply((-853L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ONE_QUARTER.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4607182418800017408L, 4607182418800017408L);
      BigFraction bigFraction1 = bigFraction0.add(100L);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.add((long) (-672));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(20, 119.4030213, (-144));
      bigFraction0.TWO.add((-144));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.add((int) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.subtract((-1313));
      BigFraction bigFraction2 = bigFraction1.add(885);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-293327503));
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-982L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(6.478444447566289E-10, 629);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-2147483646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.pow(2126634292);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(604, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1428);
      // Undeclared exception!
      try { 
        bigFraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(872L, 1009L);
      // Undeclared exception!
      try { 
        bigFraction0.TWO_THIRDS.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(0, (int) (byte) (-114));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2147483623, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1314);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-347L), 3704L);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3));
      try { 
        bigFraction0.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(2389, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.TWO.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.TWO_QUARTERS.multiply(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.multiply(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1696);
      BigFraction bigFraction1 = new BigFraction((double) 1696);
      bigFraction1.equals(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.TWO_FIFTHS.equals(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1696);
      bigFraction0.equals(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.TWO_QUARTERS.doubleValue();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1299.58335687));
      bigFraction0.MINUS_ONE.reciprocal();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3));
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.negate();
      bigFraction1.percentageValue();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4607182418800017408L, 4607182418800017408L);
      BigFraction bigFraction1 = bigFraction0.multiply((-449));
      bigFraction1.add(100L);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      bigFraction0.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1299.58335687));
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1066, (-3037));
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(6.478444447566289E-10, 629);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.THREE_QUARTERS.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1661.5307579));
      // Undeclared exception!
      try { 
        bigFraction0.MINUS_ONE.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = new BigFraction(0.0, 296.407201, (byte)39);
      bigFraction0.TWO.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow(24352L);
      bigFraction1.floatValue();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.MINUS_ONE.floatValue();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.ONE_FIFTH.equals(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.FOUR_FIFTHS.equals("4");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(1848L);
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1299.58335687));
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_THIRDS.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.add(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigFraction.getReducedFraction(0, (-1051));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3024.7, 2606);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 604);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(20, 119.4030213, (-144));
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) 6276468689258673353L, (-3));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 6,276,468,689,258,673,200 to fraction (6,276,468,689,258,673,152/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.pow((-856.1));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.divide((-1404L));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0143341551207646E-7), 1209);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-114);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(2);
      assertEquals((short)2, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.multiply(2);
      assertEquals((byte)4, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      long long0 = bigFraction0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.multiply((-1404L));
      BigFraction bigFraction2 = bigFraction1.abs();
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((byte)74, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3));
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(1L, long0);
      assertEquals((short) (-3), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      double double0 = bigFraction0.percentageValue();
      assertEquals(25.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-375), (-375));
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.37707096338272095, 0.0, (-107438207));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.377 to fraction after -107,438,207 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((short)2, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.add(0L);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.subtract((long) 2);
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.divide(1821);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertNotNull(bigFractionField0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2142445083);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(738, 0);
      assertEquals((short)7707, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1661.5307579));
      bigFraction0.ONE_HALF.intValue();
      assertEquals((short) (-1661), bigFraction0.shortValue());
      assertEquals((byte) (-125), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertEquals((byte)1, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }
}
