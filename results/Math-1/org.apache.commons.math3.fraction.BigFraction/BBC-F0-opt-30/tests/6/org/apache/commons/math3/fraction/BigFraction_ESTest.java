/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:37:59 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-699), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-209.75330124798));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-99);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(2.1474836475108707E9, 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647.511 to fraction (2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction1.bigDecimalValue();
      bigFraction1.pow(0.39499378204345703);
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.pow(724);
      bigFraction0.getField();
      bigFraction3.doubleValue();
      bigFraction4.percentageValue();
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction(Double.NaN, 1.197818619402824E-6, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert \uFFFD to fraction after 0 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(4499201580859392L);
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      bigFraction0.pow(0.2493593990802765);
      bigFraction2.reduce();
      BigFraction bigFraction3 = bigFraction1.subtract(4499201580859392L);
      bigFraction3.floatValue();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      // Undeclared exception!
      try { 
        bigFraction0.ONE.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.reduce();
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2073.766541924);
      BigFraction bigFraction1 = bigFraction0.divide((-114L));
      bigFraction1.THREE_FIFTHS.multiply(bigFraction0);
      bigFraction1.pow((-114L));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2147435438);
      bigFraction0.bigDecimalValue(6);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      bigFraction0.TWO_FIFTHS.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.hashCode();
      BigFraction bigFraction1 = bigFraction0.divide((-2078209980));
      bigFraction1.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.633061488926474);
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2147483640, 5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      bigFraction2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      long long0 = 1228L;
      // Undeclared exception!
      try { 
        bigFraction1.ZERO.pow((-1141));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1282.008095133, 1282.008095133, 1904);
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.negate();
      bigFraction1.TWO_THIRDS.pow((long) 37);
      bigFraction1.TWO.intValue();
      bigFraction0.TWO.hashCode();
      BigFraction bigFraction2 = bigFraction0.pow(37);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction2.THREE_QUARTERS.multiply(bigInteger0);
      bigFraction1.bigDecimalValue(2);
      bigFraction2.FOUR_FIFTHS.subtract((long) 2);
      bigFraction2.floatValue();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1179);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow(0L);
      bigFraction1.TWO.longValue();
      BigFraction bigFraction2 = bigFraction0.divide((-3620L));
      bigFraction0.ONE_THIRD.getDenominatorAsInt();
      bigFraction0.hashCode();
      bigFraction0.doubleValue();
      bigFraction0.ONE_FIFTH.compareTo(bigFraction2);
      BigFraction bigFraction3 = BigFraction.getReducedFraction((-3493), (-3493));
      bigFraction0.equals(bigFraction0);
      bigFraction3.getNumeratorAsLong();
      BigFraction bigFraction4 = bigFraction2.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue((-3493), 1493);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.pow((double) (-1));
      BigFraction bigFraction1 = bigFraction0.pow((-1));
      bigFraction1.divide((-1312L));
      bigFraction0.multiply((-1));
      BigFraction bigFraction2 = bigFraction1.add(0);
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction4 = BigFraction.TWO_QUARTERS;
      bigFraction2.equals(bigFraction4);
      bigFraction4.MINUS_ONE.add((long) 0);
      bigFraction1.multiply(bigFraction2);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction4.reciprocal();
      BigFraction bigFraction5 = new BigFraction(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.reduce();
      BigFraction bigFraction4 = bigFraction2.multiply(98L);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction4.MINUS_ONE.divide(bigInteger0);
      bigFraction3.floatValue();
      bigFraction3.divide(128L);
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction1.multiply(bigFraction0);
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      bigFraction2.reduce();
      BigFraction bigFraction3 = bigFraction2.multiply(98L);
      BigFraction bigFraction4 = BigFraction.ZERO;
      bigFraction4.floatValue();
      bigFraction3.divide(98L);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.ONE.toString();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction0.getNumeratorAsLong();
      bigFraction0.getNumeratorAsLong();
      bigFraction0.add(9007199254740990L);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long long0 = 1212L;
      BigFraction bigFraction0 = new BigFraction(1212L);
      bigFraction0.getDenominatorAsLong();
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      bigFraction1.pow(971.3374084123651);
      bigFraction1.getField();
      bigFraction1.getNumerator();
      bigFraction1.getNumeratorAsLong();
      bigFraction1.pow(121200.0);
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction2.TWO_FIFTHS.reduce();
      bigFraction2.pow((-3877));
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction(Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert NaN value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction(0.0);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction2.subtract(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction2.pow((-633L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction(0.0);
      bigFraction0.multiply(bigFraction1);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction2 = BigFraction.ONE_THIRD;
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1184.8847, (-2606));
      BigFraction bigFraction1 = new BigFraction((-25.476992222187338));
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.reduce();
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-2606), (-2606));
      Object object0 = new Object();
      bigFraction3.equals(object0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction6 = bigFraction5.subtract(bigInteger1);
      bigFraction1.bigDecimalValue();
      BigFraction bigFraction7 = bigFraction5.subtract(18);
      bigFraction5.pow((double) 18);
      BigFraction bigFraction8 = bigFraction4.pow(bigInteger1);
      BigFraction bigFraction9 = bigFraction0.pow(bigInteger1);
      BigFraction bigFraction10 = bigFraction1.pow((-3877));
      bigFraction9.getField();
      bigFraction8.doubleValue();
      bigFraction7.percentageValue();
      bigFraction2.hashCode();
      bigFraction4.compareTo(bigFraction3);
      bigFraction10.doubleValue();
      bigFraction10.pow(1.0);
      BigFraction bigFraction11 = bigFraction0.divide(bigFraction6);
      bigFraction8.pow(84.17174);
      bigFraction3.reduce();
      bigFraction11.subtract(bigFraction7);
      bigFraction1.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(505);
      bigFraction0.TWO_QUARTERS.getDenominatorAsLong();
      bigFraction0.TWO_QUARTERS.percentageValue();
      bigFraction0.ONE_HALF.pow((double) 505);
      bigFraction0.THREE_QUARTERS.getField();
      bigFraction0.getNumerator();
      bigFraction0.getNumeratorAsLong();
      bigFraction0.TWO.pow((-778.270700803646));
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.pow(505);
      BigFraction bigFraction2 = bigFraction0.divide((-302932621132653753L));
      BigFraction bigFraction3 = bigFraction2.ZERO.multiply(505);
      bigFraction3.ONE_FIFTH.add(0);
      BigFraction bigFraction4 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction5 = new BigFraction((-2057.3218), 510);
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction6 = BigFraction.ONE_THIRD;
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction(0.0);
      Object object0 = new Object();
      bigFraction1.equals(object0);
      bigFraction0.percentageValue();
      bigFraction0.toString();
      BigFraction.getReducedFraction((-1), 552);
      int int0 = 1073741824;
      // Undeclared exception!
      try { 
        bigFraction1.pow(1073741824);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(6.041796041245107E-8, 1, 1);
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(505);
      bigFraction0.TWO_QUARTERS.getDenominatorAsLong();
      bigFraction0.TWO_QUARTERS.percentageValue();
      bigFraction0.ONE_HALF.pow((double) 505);
      bigFraction0.THREE_QUARTERS.getField();
      BigFraction bigFraction1 = bigFraction0.divide(505);
      BigFraction bigFraction2 = bigFraction1.divide(3867);
      bigFraction0.divide((long) 505);
      BigFraction bigFraction3 = bigFraction1.divide(bigFraction2);
      BigFraction bigFraction4 = bigFraction0.pow((long) 505);
      bigFraction0.doubleValue();
      bigFraction3.getDenominatorAsLong();
      BigFraction bigFraction5 = bigFraction4.add(bigFraction3);
      bigFraction1.abs();
      bigFraction5.multiply(bigFraction2);
      bigFraction1.subtract((-449));
      bigFraction5.subtract((-3512299194304650054L));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getField();
      bigFraction0.getNumerator();
      bigFraction0.getNumeratorAsLong();
      bigFraction0.pow(1448.3162551896);
      int int0 = 1567;
      bigFraction0.pow(1567);
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(6596, 6596);
      bigFraction1.getNumerator();
      BigFraction bigFraction2 = bigFraction0.divide(3867);
      BigFraction bigFraction3 = bigFraction0.TWO_QUARTERS.divide(bigFraction1);
      bigFraction3.ONE_HALF.multiply(bigFraction1);
      BigFraction bigFraction4 = bigFraction1.divide(1469);
      BigFraction bigFraction5 = bigFraction1.divide(1209L);
      BigFraction bigFraction6 = bigFraction2.divide(bigFraction0);
      BigFraction bigFraction7 = bigFraction6.pow(9262L);
      bigFraction5.doubleValue();
      bigFraction5.getDenominatorAsLong();
      bigFraction1.add(bigFraction7);
      bigFraction4.abs();
      BigFraction bigFraction8 = bigFraction5.multiply(bigFraction1);
      bigFraction8.subtract(2146100851);
      bigFraction0.negate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction0.ONE.multiply(bigFraction1);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((double) 2147435438, (-291));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,435,438 to fraction (-2,147,435,437/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-2606);
      BigFraction bigFraction0 = new BigFraction(1184.8847, (-2606));
      BigFraction.getReducedFraction((-2606), (-2606));
      bigFraction0.getNumerator();
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction1.divide(2462);
      BigFraction bigFraction3 = bigFraction2.divide((-2606));
      BigFraction bigFraction4 = bigFraction0.divide(113236205062349959L);
      BigFraction bigFraction5 = bigFraction2.divide(bigFraction1);
      bigFraction4.ZERO.floatValue();
      BigFraction bigFraction6 = bigFraction5.pow((long) (-2606));
      bigFraction3.doubleValue();
      bigFraction0.getDenominatorAsLong();
      bigFraction2.add(bigFraction6);
      BigFraction bigFraction7 = null;
      try {
        bigFraction7 = new BigFraction((double) 113236205062349959L, 2462);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 113,236,205,062,349,952 to fraction (113,236,205,062,349,952/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(776, 776);
      bigFraction0.getNumerator();
      BigFraction bigFraction2 = bigFraction0.divide(3867);
      bigFraction0.ONE_HALF.divide(776);
      bigFraction2.TWO_THIRDS.divide((long) 776);
      BigFraction bigFraction3 = bigFraction1.divide(bigFraction2);
      BigFraction bigFraction4 = bigFraction3.pow(2876L);
      bigFraction1.doubleValue();
      bigFraction3.getDenominatorAsLong();
      BigFraction bigFraction5 = BigFraction.ONE_HALF;
      BigFraction bigFraction6 = bigFraction4.add(bigFraction5);
      bigFraction6.abs();
      bigFraction5.multiply(bigFraction4);
      bigFraction3.subtract((-1878));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction(0.0);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction0.subtract(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.subtract((-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.ONE_QUARTER.toString();
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 1904;
      BigFraction bigFraction0 = new BigFraction(688, (-440));
      BigFraction bigFraction1 = bigFraction0.multiply((-440));
      BigFraction bigFraction2 = bigFraction1.negate();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.ONE_THIRD.reduce();
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction(bigInteger0, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1740.630900089735, 858);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      Object object0 = new Object();
      Object object1 = new Object();
      bigFraction0.equals(object1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(879, 858);
      BigFraction bigFraction4 = bigFraction2.subtract(bigFraction0);
      bigFraction3.pow((double) 879);
      BigFraction bigFraction5 = bigFraction2.divide(bigFraction1);
      BigFraction.getReducedFraction(338, 879);
      bigFraction5.subtract(bigFraction3);
      bigFraction0.divide((long) 2);
      BigFraction bigFraction6 = BigFraction.getReducedFraction((-1075), 100);
      bigFraction0.getDenominatorAsInt();
      bigFraction4.bigDecimalValue(37, 2);
      bigFraction5.getField();
      bigFraction5.getDenominatorAsInt();
      bigFraction1.subtract(bigInteger0);
      bigFraction6.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1184.8847, (-2606));
      BigFraction bigFraction1 = new BigFraction(1.7740094661712646);
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.reduce();
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-2606), (-2606));
      Object object0 = new Object();
      bigFraction3.equals(object0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction6 = bigFraction5.subtract(bigInteger1);
      bigFraction1.bigDecimalValue();
      BigFraction bigFraction7 = bigFraction5.subtract(52);
      bigFraction5.pow((double) 52);
      BigFraction bigFraction8 = bigFraction4.pow(bigInteger1);
      bigFraction0.pow(bigInteger1);
      BigFraction bigFraction9 = bigFraction1.pow((-3877));
      bigFraction0.getField();
      bigFraction8.doubleValue();
      bigFraction7.percentageValue();
      bigFraction2.hashCode();
      bigFraction4.compareTo(bigFraction3);
      bigFraction9.doubleValue();
      bigFraction9.pow(1.0);
      BigFraction bigFraction10 = bigFraction0.divide(bigFraction6);
      bigFraction8.pow(84.17174);
      bigFraction3.reduce();
      bigFraction10.subtract(bigFraction7);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      BigFraction bigFraction0 = new BigFraction(0.03576657693179186, (byte)49, (byte)49);
      bigFraction0.getNumeratorAsLong();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.TWO.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.subtract(0);
      bigFraction2.ONE_THIRD.compareTo(bigFraction1);
      bigFraction2.TWO.bigDecimalValue();
      bigFraction1.floatValue();
      bigFraction1.intValue();
      bigFraction0.TWO_QUARTERS.getField();
      bigFraction0.bigDecimalValue(1);
      bigFraction0.getDenominator();
      bigFraction1.bigDecimalValue(1, 0);
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction3 = BigFraction.ONE_FIFTH;
      bigFraction3.multiply((long) 1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(688, (-440));
      BigFraction bigFraction1 = bigFraction0.multiply((-440));
      BigFraction bigFraction2 = bigFraction1.negate();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.ONE_THIRD.reduce();
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction4 = bigFraction3.subtract((long) 1904);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)76;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigFraction4.add(bigInteger0);
      BigFraction bigFraction5 = bigFraction2.add((-3927));
      bigFraction3.subtract(bigInteger0);
      bigFraction3.compareTo(bigFraction5);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3.609949022969024E295));
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.divide((-1904));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.MINUS_ONE.add(bigInteger0);
      bigFraction1.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.add(bigFraction0);
      BigFraction bigFraction3 = new BigFraction(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.multiply(bigInteger1);
      bigFraction3.MINUS_ONE.subtract(bigFraction2);
      BigFraction bigFraction5 = BigFraction.MINUS_ONE;
      BigFraction bigFraction6 = bigFraction2.divide(bigFraction5);
      bigFraction0.THREE_FIFTHS.reciprocal();
      bigFraction6.THREE_QUARTERS.doubleValue();
      bigFraction1.pow((long) (-1904));
      bigFraction0.intValue();
      bigFraction6.FOUR_FIFTHS.getField();
      bigFraction2.bigDecimalValue(87, 0);
      BigInteger bigInteger2 = BigInteger.TEN;
      BigFraction bigFraction7 = new BigFraction((long) 87);
      bigFraction7.multiply(bigInteger2);
      BigFraction bigFraction8 = BigFraction.ONE_HALF;
      BigFraction.getReducedFraction(0, 87);
      bigFraction4.subtract((-2144459022));
      bigFraction0.multiply(bigFraction2);
      bigFraction6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(1101.1385228485763, 2147435438);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1,101.139 to fraction (2,266,293,936/2,058,137)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.TWO.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.subtract(0);
      bigFraction2.ONE_THIRD.compareTo(bigFraction1);
      bigFraction2.TWO.bigDecimalValue();
      bigFraction1.floatValue();
      bigFraction1.intValue();
      bigFraction0.TWO_QUARTERS.getField();
      bigFraction0.bigDecimalValue(1);
      BigFraction bigFraction3 = bigFraction2.ONE_HALF.multiply(0L);
      BigFraction bigFraction4 = BigFraction.getReducedFraction(1413631974, (-48));
      bigFraction0.subtract((-8));
      bigFraction3.multiply(bigFraction4);
      bigFraction4.reciprocal();
      bigFraction2.abs();
      bigFraction4.reduce();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2446.101));
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.add((long) 1);
      bigFraction1.pow((-4083.0));
      bigFraction1.getField();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.getNumeratorAsLong();
      bigFraction0.pow(0.01410089220319477);
      BigFraction bigFraction2 = bigFraction0.pow(1);
      BigFraction bigFraction3 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction4 = bigFraction3.divide((-302932621132653753L));
      BigFraction bigFraction5 = bigFraction0.multiply(2448);
      BigFraction bigFraction6 = bigFraction5.add((-5333));
      BigFraction bigFraction7 = BigFraction.THREE_QUARTERS;
      bigFraction1.equals(bigFraction3);
      bigFraction6.percentageValue();
      bigFraction4.toString();
      bigFraction7.pow(1);
      bigFraction1.getDenominator();
      BigFraction bigFraction8 = bigFraction3.reciprocal();
      bigFraction8.TWO_FIFTHS.multiply((-2598));
      bigFraction1.getDenominatorAsInt();
      bigFraction2.equals(bigFraction3);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(26, 120);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.TWO.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.subtract(0);
      bigFraction2.ONE_THIRD.compareTo(bigFraction1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-7);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction0.multiply(bigInteger1);
      BigFraction bigFraction4 = bigFraction1.pow(bigInteger1);
      BigFraction bigFraction5 = bigFraction3.pow(bigInteger0);
      BigFraction bigFraction6 = new BigFraction((-1175L));
      BigFraction bigFraction7 = bigFraction4.multiply(bigFraction6);
      bigFraction5.compareTo(bigFraction7);
      BigInteger bigInteger2 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(1, (int) (byte) (-7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte byte0 = (byte) (-44);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-44);
      byteArray0[8] = (byte) (-44);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((-230.07368161124), (byte) (-1), (-573));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -230.074 to fraction after -573 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      BigFraction bigFraction0 = new BigFraction((double) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2446.101));
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.add((long) 1);
      bigFraction0.bigDecimalValue(1, 1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.MINUS_ONE.multiply(bigInteger0);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-44);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction1.subtract((long) (byte) (-1));
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction2.add(bigInteger2);
      bigFraction3.add(1);
      bigFraction3.subtract(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1740.630900089735, 858);
      BigFraction bigFraction1 = new BigFraction(0.0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.FOUR_FIFTHS.reduce();
      BigFraction bigFraction5 = BigFraction.getReducedFraction(858, 369);
      bigFraction2.equals(bigFraction1);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction6 = bigFraction0.subtract(bigInteger1);
      bigFraction1.ZERO.bigDecimalValue();
      BigFraction bigFraction7 = bigFraction6.ONE_THIRD.subtract(858);
      bigFraction7.ONE_THIRD.pow((-180.8172));
      BigFraction bigFraction8 = bigFraction2.pow(bigInteger1);
      BigFraction bigFraction9 = bigFraction8.THREE_QUARTERS.pow(bigInteger1);
      bigFraction3.ZERO.pow(724);
      bigFraction9.FOUR_FIFTHS.getField();
      bigFraction3.doubleValue();
      bigFraction8.percentageValue();
      bigFraction0.hashCode();
      bigFraction0.ZERO.compareTo(bigFraction2);
      bigFraction4.doubleValue();
      bigFraction5.pow(1.7976931348623157E308);
      BigFraction bigFraction10 = bigFraction0.divide(bigFraction3);
      bigFraction2.pow(0.2493593990802765);
      bigFraction10.reduce();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.TWO.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.subtract(0);
      bigFraction2.ONE_THIRD.compareTo(bigFraction1);
      bigFraction2.TWO.bigDecimalValue();
      bigFraction1.floatValue();
      bigFraction1.intValue();
      bigFraction0.TWO_QUARTERS.getField();
      bigFraction0.bigDecimalValue(1);
      bigFraction2.ONE_HALF.multiply(0L);
      bigFraction2.multiply(289);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2446.101));
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.add((long) 1);
      bigFraction0.bigDecimalValue(1, 1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-44);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.divide(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.negate();
      // Undeclared exception!
      try { 
        bigFraction4.TWO.bigDecimalValue((-1255));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1282.008095133, 1282.008095133, 1904);
      bigFraction0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(505);
      bigFraction0.TWO_QUARTERS.getDenominatorAsLong();
      bigFraction0.TWO_QUARTERS.percentageValue();
      bigFraction0.ONE_HALF.pow((double) 505);
      bigFraction0.THREE_QUARTERS.getField();
      bigFraction0.getNumerator();
      bigFraction0.getNumeratorAsLong();
      bigFraction0.TWO.pow((-778.270700803646));
      bigFraction0.THREE_FIFTHS.pow(505);
      BigFraction bigFraction1 = bigFraction0.divide((-302932621132653753L));
      BigFraction bigFraction2 = bigFraction1.ZERO.multiply(505);
      bigFraction2.ONE_FIFTH.add(0);
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
      bigFraction1.THREE_FIFTHS.equals(bigFraction3);
      bigFraction1.percentageValue();
      bigFraction3.FOUR_FIFTHS.toString();
      BigFraction bigFraction4 = bigFraction1.pow(0);
      bigFraction4.getDenominator();
      BigFraction bigFraction5 = bigFraction3.reciprocal();
      bigFraction5.THREE_FIFTHS.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(859, 859);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = null;
      try { 
        bigFraction0.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      long long0 = 415L;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ZERO.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.multiply(415L);
      long long1 = 784L;
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.subtract(784L);
      bigFraction3.FOUR_FIFTHS.reciprocal();
      int int0 = 4395;
      bigFraction1.ONE_FIFTH.doubleValue();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(968, 4395);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long long0 = 0L;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.7976931348623157E308, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.ONE_HALF.multiply(5);
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.compareTo(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1407), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1184.8847, (-2606));
      BigFraction bigFraction1 = bigFraction0.ONE.reciprocal();
      Object object0 = new Object();
      bigFraction0.equals(object0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.divide(bigInteger0);
      BigFraction bigFraction3 = BigFraction.getReducedFraction((-2606), 2);
      bigFraction3.TWO_FIFTHS.subtract(bigFraction2);
      bigFraction0.pow(1680.892551132);
      bigFraction0.divide(bigFraction1);
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-1), 338);
      BigFraction bigFraction5 = bigFraction1.subtract(bigFraction0);
      bigFraction1.divide((long) (-2606));
      BigFraction.getReducedFraction((-2606), 100);
      bigFraction5.getDenominatorAsInt();
      bigFraction1.bigDecimalValue(1, 2);
      bigFraction5.getField();
      bigFraction0.getDenominatorAsInt();
      bigFraction1.subtract(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3.609949022969024E295));
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.divide((-1904));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.MINUS_ONE.add(bigInteger0);
      bigFraction1.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.add(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.negate();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction3.ONE_FIFTH.multiply(bigInteger1);
      bigFraction3.MINUS_ONE.subtract(bigFraction2);
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      BigFraction bigFraction5 = bigFraction2.divide(bigFraction4);
      bigFraction0.THREE_FIFTHS.reciprocal();
      bigFraction5.THREE_QUARTERS.doubleValue();
      bigFraction1.pow((long) (-1904));
      bigFraction0.intValue();
      int int0 = 87;
      bigFraction5.FOUR_FIFTHS.getField();
      bigFraction2.bigDecimalValue(87, 0);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigFraction5.multiply(bigInteger2);
      BigFraction bigFraction6 = BigFraction.ONE_HALF;
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(2073, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      BigFraction bigFraction1 = bigFraction0.add(1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.multiply(1196);
      bigFraction3.FOUR_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction1.MINUS_ONE.multiply(bigInteger0);
      bigFraction1.compareTo(bigFraction0);
      bigFraction0.divide(1196);
      BigFraction bigFraction5 = bigFraction2.TWO_QUARTERS.pow((-471));
      bigFraction4.getNumeratorAsInt();
      bigFraction0.TWO.pow(0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.modInverse(bigInteger0);
      BigFraction bigFraction6 = bigFraction2.divide(bigInteger1);
      bigFraction2.intValue();
      BigFraction bigFraction7 = bigFraction0.abs();
      BigInteger bigInteger2 = BigInteger.TEN;
      bigFraction7.add(bigInteger2);
      Object object0 = new Object();
      bigFraction1.equals(object0);
      BigFraction bigFraction8 = bigFraction1.add(3783L);
      bigFraction8.ONE.equals(bigFraction6);
      bigFraction8.getField();
      bigFraction8.getField();
      // Undeclared exception!
      try { 
        bigFraction5.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction.getReducedFraction(497, (-1));
      bigFraction1.FOUR_FIFTHS.reciprocal();
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction0.ZERO.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.intValue();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.multiply(0);
      BigFraction bigFraction3 = bigFraction2.TWO_THIRDS.pow(0);
      BigFraction bigFraction4 = bigFraction3.FOUR_FIFTHS.divide(4503599627370496L);
      bigFraction3.ZERO.doubleValue();
      bigFraction1.FOUR_FIFTHS.getNumeratorAsLong();
      BigFraction bigFraction5 = bigFraction2.multiply(bigFraction1);
      bigFraction5.bigDecimalValue();
      BigFraction bigFraction6 = BigFraction.getReducedFraction(0, 1);
      BigFraction bigFraction7 = bigFraction4.divide(bigFraction0);
      bigFraction7.FOUR_FIFTHS.add(bigFraction2);
      bigFraction2.bigDecimalValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction6.add(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1799.9116678, 442.69135308915, (-1257));
      bigFraction0.FOUR_FIFTHS.intValue();
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction2.floatValue();
      int int0 = (-3294);
      bigFraction2.TWO_THIRDS.pow((-3294));
      BigFraction bigFraction3 = bigFraction2.multiply(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction3.ZERO.bigDecimalValue((-3294), (-1257));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(7910884519577875640L, 7910884519577875640L);
      bigFraction0.getDenominatorAsInt();
      bigFraction0.ONE_HALF.divide(9218868437227405312L);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_THIRDS.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4133));
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.negate();
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.subtract(1357L);
      bigFraction2.TWO.longValue();
      bigFraction0.THREE_QUARTERS.intValue();
      bigFraction0.longValue();
      bigFraction2.longValue();
      bigFraction2.getField();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.toString();
      int int0 = 3897;
      BigFraction bigFraction1 = bigFraction0.TWO.subtract(bigInteger0);
      bigFraction1.ONE_HALF.pow((double) 3897);
      BigInteger bigInteger1 = BigInteger.ONE;
      int int1 = 3588;
      BigFraction bigFraction2 = BigFraction.getReducedFraction(3684, 3588);
      // Undeclared exception!
      try { 
        bigFraction2.ONE.bigDecimalValue(3897);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction0.ONE_QUARTER.subtract(bigInteger0);
      int int1 = 119;
      BigFraction.getReducedFraction(119, 1);
      BigFraction bigFraction2 = bigFraction0.ONE.subtract(bigFraction1);
      bigFraction0.ONE_QUARTER.getNumeratorAsLong();
      bigFraction0.ONE_FIFTH.getNumeratorAsInt();
      bigFraction0.TWO_THIRDS.bigDecimalValue(1, 1);
      bigFraction0.TWO_THIRDS.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction0.subtract(1);
      // Undeclared exception!
      try { 
        bigFraction3.TWO_THIRDS.divide(bigFraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.divide(bigFraction1);
      bigInteger0.longValueExact();
      bigFraction1.TWO_THIRDS.floatValue();
      bigFraction0.percentageValue();
      bigFraction0.ZERO.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.subtract((-1419));
      bigFraction0.ONE_HALF.getDenominatorAsLong();
      bigFraction0.getNumeratorAsLong();
      bigFraction1.ONE.getNumeratorAsInt();
      bigFraction3.subtract((long) (-1419));
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction4 = bigFraction1.divide(bigFraction3);
      bigFraction4.ONE_FIFTH.subtract(bigInteger0);
      bigFraction0.TWO_QUARTERS.intValue();
      // Undeclared exception!
      try { 
        bigFraction2.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3195L));
      bigFraction0.multiply((long) 1436);
      bigFraction0.ONE_HALF.multiply(1436);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = 1075;
      BigFraction bigFraction0 = new BigFraction(116.50487443, 1075);
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction1.ONE_THIRD.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction2.ONE_THIRD.compareTo(bigFraction1);
      bigFraction1.MINUS_ONE.percentageValue();
      // Undeclared exception!
      try { 
        bigFraction2.THREE_FIFTHS.bigDecimalValue((-1833));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow(0L);
      bigFraction1.TWO.longValue();
      bigFraction0.ONE.abs();
      BigFraction bigFraction2 = bigFraction0.divide((-3620L));
      // Undeclared exception!
      try { 
        bigFraction2.FOUR_FIFTHS.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = new BigFraction((-1850), 1);
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.divide((-1850));
      BigFraction bigFraction2 = BigFraction.getReducedFraction(1, (-1850));
      bigFraction2.THREE_QUARTERS.subtract(bigFraction1);
      bigFraction0.TWO_QUARTERS.add(1);
      bigFraction0.add(bigFraction2);
      BigFraction bigFraction3 = bigFraction2.reduce();
      bigFraction3.TWO_FIFTHS.add(bigFraction2);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9218868437227405312L, 9218868437227405312L);
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.abs();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.pow(bigInteger0);
      bigFraction2.ONE_HALF.add(9218868437227405312L);
      bigFraction1.ONE.intValue();
      bigFraction1.ONE_THIRD.percentageValue();
      BigFraction bigFraction3 = bigFraction1.MINUS_ONE.multiply(bigFraction0);
      bigFraction0.floatValue();
      BigFraction bigFraction4 = bigFraction0.divide(2360);
      bigFraction4.ZERO.pow(bigInteger0);
      BigFraction bigFraction5 = bigFraction1.ONE_QUARTER.divide(1641L);
      bigFraction3.MINUS_ONE.getField();
      bigFraction5.ONE_THIRD.reciprocal();
      bigFraction4.ZERO.multiply(bigInteger0);
      bigFraction4.ONE_THIRD.divide(1);
      bigFraction0.getDenominator();
      bigFraction0.ONE_HALF.negate();
      bigFraction3.getField();
      BigFraction bigFraction6 = bigFraction3.divide(bigFraction0);
      bigFraction5.ZERO.subtract((long) 4118);
      // Undeclared exception!
      try { 
        bigFraction6.bigDecimalValue(2360, 4118);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.multiply(341);
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction1.FOUR_FIFTHS.subtract(bigFraction0);
      bigFraction1.getNumeratorAsLong();
      bigFraction1.multiply(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)100;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.multiply(bigFraction1);
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      bigFraction0.compareTo(bigFraction2);
      bigFraction2.subtract(1);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(2, 2);
      bigFraction3.getField();
      bigFraction0.add((-1));
      bigFraction0.percentageValue();
      bigFraction0.getDenominatorAsInt();
      bigFraction3.divide((-1));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.29981517791748047, 0.0, 1780);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1780, 1780);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3743.239));
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.subtract(1526L);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.ONE_QUARTER.divide(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.add(bigInteger1);
      BigFraction bigFraction3 = bigFraction2.ONE_HALF.subtract(bigFraction1);
      assertEquals((byte) (-10), bigFraction3.byteValue());
      
      BigFraction bigFraction4 = BigFraction.getReducedFraction(37, 133);
      BigFraction bigFraction5 = bigFraction2.ZERO.multiply(1075);
      bigFraction1.ZERO.toString();
      String string0 = bigFraction0.toString();
      assertEquals("-8231469612089213 / 2199023255552", string0);
      
      bigFraction1.THREE_FIFTHS.getNumeratorAsLong();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction6 = bigFraction1.abs();
      bigFraction1.TWO.getDenominatorAsLong();
      Object object0 = new Object();
      boolean boolean0 = bigFraction0.equals(object0);
      assertFalse(boolean0);
      
      BigFraction bigFraction7 = bigFraction1.pow(1526L);
      bigFraction7.ZERO.percentageValue();
      double double0 = bigFraction6.doubleValue();
      assertEquals(1525.6, double0, 0.01);
      
      bigFraction6.ONE_FIFTH.getNumeratorAsInt();
      bigFraction6.multiply(101);
      BigFraction bigFraction8 = BigFraction.getReducedFraction(101, 101);
      assertEquals((byte)1, bigFraction8.byteValue());
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      
      bigFraction0.abs();
      assertEquals((short) (-3743), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction(0.0);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.multiply(98L);
      assertTrue(bigFraction3.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-396.7795));
      double double0 = bigFraction0.TWO_QUARTERS.pow(0.0);
      assertEquals(1.0, double0, 0.01);
      
      BigFraction bigFraction1 = bigFraction0.subtract(1894);
      bigFraction1.ONE_QUARTER.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.divide((-914L));
      bigFraction0.TWO_QUARTERS.longValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction4 = BigFraction.getReducedFraction(1894, 300);
      BigFraction bigFraction5 = bigFraction4.THREE_QUARTERS.add(bigInteger0);
      bigFraction5.ONE_THIRD.percentageValue();
      BigFraction bigFraction6 = BigFraction.getReducedFraction((-1), (-1));
      bigFraction6.TWO.toString();
      BigFraction bigFraction7 = bigFraction5.subtract(bigFraction2);
      bigFraction7.TWO_THIRDS.getDenominatorAsLong();
      bigFraction5.toString();
      BigFraction bigFraction8 = bigFraction6.pow(300);
      Object object0 = new Object();
      bigFraction8.THREE_FIFTHS.equals(object0);
      double double1 = bigFraction8.TWO_FIFTHS.doubleValue();
      assertEquals(0.4, double1, 0.01);
      
      bigFraction1.getDenominatorAsInt();
      bigFraction3.longValue();
      bigFraction8.add(0L);
      assertEquals((byte)1, bigFraction6.byteValue());
      assertTrue(bigFraction8.equals((Object)bigFraction6));
      
      BigInteger bigInteger1 = bigFraction7.getDenominator();
      assertEquals((byte)14, bigFraction1.byteValue());
      assertEquals((byte)6, bigFraction4.byteValue());
      assertEquals((byte) (-76), bigInteger1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction1.getNumeratorAsLong();
      bigFraction1.TWO_THIRDS.hashCode();
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.multiply(bigFraction1);
      assertEquals((short)0, bigFraction2.shortValue());
      
      BigFraction bigFraction3 = bigFraction0.subtract(100L);
      Object object0 = new Object();
      boolean boolean0 = bigFraction3.equals(object0);
      assertEquals((short) (-99), bigFraction3.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      int int0 = (-1);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.7976931348623157E308, 1.7976931348623157E308, (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }
}
