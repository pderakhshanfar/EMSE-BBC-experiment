/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 11:17:51 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.divide(33866764288L);
      BigFraction bigFraction2 = bigFraction1.add(33866764288L);
      bigFraction2.doubleValue();
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.pow(0L);
      bigFraction3.MINUS_ONE.intValue();
      bigFraction0.divide((-375));
      Random.setNextRandom(634);
      BigFraction bigFraction4 = bigFraction2.ONE_FIFTH.add(2269);
      bigFraction4.floatValue();
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      bigFraction2.getDenominator();
      BigFraction bigFraction5 = bigFraction1.pow(bigInteger0);
      BigFraction bigFraction6 = bigFraction5.MINUS_ONE.divide(bigFraction1);
      bigFraction6.THREE_QUARTERS.toString();
      bigFraction5.THREE_FIFTHS.add(634);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(634, 634);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2408L), (-2411L));
      BigFraction bigFraction1 = bigFraction0.pow((-2411L));
      bigFraction1.floatValue();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(630, mockRandom0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ONE_QUARTER.negate();
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.negate();
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.pow((long) 630);
      BigFraction bigFraction3 = bigFraction0.divide(1136);
      bigFraction3.FOUR_FIFTHS.compareTo(bigFraction2);
      bigFraction1.ONE_FIFTH.subtract(630);
      BigFraction bigFraction4 = bigFraction2.multiply(1136);
      bigFraction0.subtract(bigFraction2);
      bigFraction4.getDenominatorAsLong();
      bigFraction1.getDenominatorAsLong();
      bigFraction1.getDenominator();
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = new BigFraction(2147483647L);
      BigFraction bigFraction2 = bigFraction1.abs();
      bigFraction0.pow((-891L));
      bigFraction2.multiply((-1014L));
      bigFraction0.getNumeratorAsInt();
      bigFraction0.TWO_QUARTERS.subtract(1);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = 910;
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction(1, (-1014L), 910);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction0.subtract(bigFraction1);
      bigFraction0.getDenominatorAsInt();
      bigFraction1.pow(1.7976931348623157E308);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(1, 1073741824);
      bigFraction2.floatValue();
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction(Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert NaN value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)33;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.min(bigInteger1);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.MINUS_ONE.add(bigInteger0);
      bigFraction0.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2120971504, (int) (byte)5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3.080714152600695E145);
      BigFraction bigFraction1 = bigFraction0.divide(1033);
      Object object0 = new Object();
      bigFraction1.equals(object0);
      BigFraction bigFraction2 = bigFraction0.pow((-1661L));
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      BigFraction bigFraction4 = bigFraction2.multiply((long) 1033);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.FOUR_FIFTHS.multiply(bigInteger0);
      bigFraction4.getDenominatorAsInt();
      bigFraction2.floatValue();
      bigFraction1.TWO_FIFTHS.subtract((-1L));
      bigFraction0.getNumerator();
      bigFraction1.bigDecimalValue(0, 0);
      bigFraction2.abs();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.MINUS_ONE.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = 1980L;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.pow(1980L);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((double) Integer.MAX_VALUE, 629);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2492L));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(379, 379);
      BigFraction bigFraction1 = bigFraction0.subtract(379);
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.add((-1380L));
      BigFraction bigFraction3 = bigFraction2.ONE_HALF.divide(379);
      bigFraction2.pow((double) 379);
      bigFraction1.THREE_QUARTERS.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction1.ONE_FIFTH.divide(bigFraction0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.divide(bigInteger0);
      BigFraction bigFraction5 = bigFraction3.multiply(bigInteger0);
      bigFraction5.ONE_QUARTER.compareTo(bigFraction3);
      bigFraction5.TWO.negate();
      bigFraction5.divide(379);
      bigFraction4.getDenominator();
      bigFraction2.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-4990));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.equals(bigFraction0);
      Object object0 = new Object();
      bigFraction0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1599.23953, 1.2005330063402653E-9, 763);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-1048), (-1048));
      bigFraction1.ONE_THIRD.subtract(bigFraction0);
      BigFraction bigFraction2 = new BigFraction((-757.15626441));
      bigFraction2.abs();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.toString();
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction1.MINUS_ONE.floatValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.ONE_FIFTH.add(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      int int0 = (-1186);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1186));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.pow(1935L);
      BigFraction bigFraction2 = bigFraction1.multiply(51064568L);
      bigFraction2.getDenominatorAsInt();
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      bigFraction3.floatValue();
      bigFraction0.bigDecimalValue();
      bigFraction2.getDenominator();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      bigFraction1.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.multiply((-424L));
      bigFraction0.getDenominatorAsInt();
      bigFraction0.floatValue();
      bigFraction1.bigDecimalValue();
      BigFraction.getReducedFraction((-236), 5);
      bigFraction1.pow((double) 5);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(1980L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-86);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction1.ZERO.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-3098), 72);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.MINUS_ONE.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction1.ONE_HALF.bigDecimalValue((-637));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(1980L);
      bigFraction1.pow(5.6843418860808015E-14);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1246L);
      BigFraction bigFraction1 = bigFraction0.multiply(1033L);
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction2 = new BigFraction((-1250L), 4503599627370496L);
      bigFraction2.floatValue();
      bigFraction1.bigDecimalValue();
      bigFraction0.bigDecimalValue(1, 1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-5.095591405025083E-281));
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1232.023267964), 72);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.ONE_FIFTH.pow(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-3098), 72);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.pow(72);
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      bigFraction2.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = new BigFraction(1L);
      bigFraction0.equals(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.divide(1L);
      bigFraction2.toString();
      bigFraction2.getNumerator();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9193070505571053909L);
      bigFraction0.TWO.floatValue();
      Object object0 = new Object();
      bigFraction0.TWO_THIRDS.equals(object0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.toString();
      bigFraction0.add((-2192));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = new BigFraction(9193070505571053909L);
      bigFraction0.equals(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = new BigFraction((-3916.7653066));
      bigFraction2.divide(9193070505571053909L);
      bigFraction2.doubleValue();
      bigFraction1.longValue();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.equals(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.divide(9193070505571053909L);
      bigFraction2.ONE_HALF.multiply(bigFraction0);
      bigFraction0.doubleValue();
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(992);
      BigFraction bigFraction1 = bigFraction0.divide(992);
      bigFraction0.THREE_FIFTHS.getField();
      BigFraction bigFraction2 = bigFraction0.negate();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.divide(bigInteger0);
      bigFraction3.FOUR_FIFTHS.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.divide(bigInteger0);
      BigInteger bigInteger1 = bigFraction2.getDenominator();
      bigFraction4.getDenominatorAsLong();
      bigFraction2.pow(992);
      bigFraction1.add(992);
      bigFraction2.getNumeratorAsInt();
      bigFraction0.bigDecimalValue();
      bigFraction3.multiply(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(1980L);
      bigFraction0.multiply(51064568L);
      bigFraction1.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(1980L);
      bigFraction0.multiply(51064568L);
      bigFraction1.getDenominatorAsInt();
      bigFraction1.floatValue();
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5.2980130931246094E-6, 5.2980130931246094E-6, 1207);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.pow(bigInteger0);
      bigFraction1.FOUR_FIFTHS.toString();
      bigFraction0.ONE_HALF.pow((-1.0));
      bigFraction0.ZERO.intValue();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(629);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)78;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction1 = new BigFraction(3325.408225, 0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-212));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, 5);
      BigFraction bigFraction1 = bigFraction0.pow(3549L);
      BigFraction bigFraction2 = bigFraction1.multiply((long) 5);
      bigFraction2.getDenominatorAsInt();
      bigFraction0.floatValue();
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(5466, 5466);
      bigFraction0.toString();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction1 = new BigFraction(459, (-2840));
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = BigFraction.TWO_FIFTHS;
      bigFraction0.divide((-1L));
      bigFraction2.getNumeratorAsLong();
      BigFraction bigFraction4 = bigFraction1.multiply(459);
      bigFraction2.pow(1324);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction5 = bigFraction2.multiply(bigInteger0);
      bigFraction1.compareTo(bigFraction5);
      bigFraction4.divide(2147483626);
      bigFraction0.pow(985);
      bigFraction0.bigDecimalValue();
      bigFraction2.bigDecimalValue((-100), 1);
      bigFraction4.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.add(bigFraction2);
      BigFraction bigFraction4 = new BigFraction(1.0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction0.pow(3291);
      bigFraction3.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.5218427181243896);
      BigDecimal bigDecimal0 = new BigDecimal(1.5218427181243896);
      BigFraction bigFraction1 = new BigFraction((-2141.891256683907));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.compareTo(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.divide(2075);
      bigFraction2.pow(0);
      bigFraction0.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction1.divide(bigInteger0);
      BigFraction bigFraction2 = BigFraction.ZERO;
      bigFraction0.toString();
      bigFraction1.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction2.add(bigFraction1);
      BigFraction bigFraction4 = bigFraction0.divide(3952090531849364496L);
      bigFraction1.getNumeratorAsLong();
      bigFraction0.multiply((-2975));
      BigFraction bigFraction5 = bigFraction3.pow((-2975));
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction4.multiply(bigInteger0);
      bigFraction2.compareTo(bigFraction4);
      bigFraction5.divide((-1));
      bigFraction1.pow(348);
      bigFraction0.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.add(bigFraction2);
      bigFraction3.toString();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction4 = bigFraction2.add(bigFraction3);
      BigFraction bigFraction5 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction6 = bigFraction5.divide(3952090531849364496L);
      bigFraction6.getNumeratorAsLong();
      bigFraction3.multiply(730);
      BigFraction bigFraction7 = bigFraction4.pow(730);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction0.multiply(bigInteger0);
      bigFraction0.compareTo(bigFraction7);
      bigFraction1.divide(5);
      bigFraction6.pow((-1968));
      bigFraction3.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(730, 2147483629);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(5466);
      // Undeclared exception!
      try { 
        bigFraction1.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.ZERO.getField();
      bigFraction0.ZERO.getNumeratorAsLong();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.add(53);
      BigFraction bigFraction1 = bigFraction0.pow(1L);
      bigFraction1.THREE_QUARTERS.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.add((-2412L));
      bigFraction2.ZERO.multiply(1641L);
      bigFraction0.getNumerator();
      bigFraction2.divide(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.divide(763);
      // Undeclared exception!
      try { 
        bigFraction1.ONE_QUARTER.bigDecimalValue((-206), 763);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.divide((-1073741824L));
      bigFraction0.floatValue();
      BigFraction bigFraction2 = bigFraction1.add(9218868437227405312L);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1, 1);
      BigFraction bigFraction4 = bigFraction1.multiply(944);
      BigFraction bigFraction5 = bigFraction4.divide((-864));
      BigFraction bigFraction6 = bigFraction5.add(bigFraction1);
      bigFraction4.getDenominatorAsInt();
      BigFraction bigFraction7 = BigFraction.ONE_QUARTER;
      bigFraction0.abs();
      bigFraction1.reduce();
      bigFraction2.percentageValue();
      bigFraction0.getNumeratorAsLong();
      bigFraction6.percentageValue();
      bigFraction3.compareTo(bigFraction4);
      bigFraction5.getNumeratorAsLong();
      BigFraction bigFraction8 = null;
      try {
        bigFraction8 = new BigFraction((double) 59L, 944);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 59 to fraction (9,223,372,036,854,775,750/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      BigFraction bigFraction1 = new BigFraction(3325.408225, 0);
      BigFraction bigFraction2 = bigFraction0.divide((-610));
      int int0 = 860;
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(763, 860);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.ONE_HALF.equals((Object) null);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.pow((-1581L));
      BigFraction bigFraction2 = bigFraction0.multiply((-1073741824L));
      bigFraction2.TWO_FIFTHS.getDenominatorAsInt();
      bigFraction1.floatValue();
      bigFraction0.getNumerator();
      bigFraction2.divide((-1581L));
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.multiply(bigInteger0);
      bigFraction0.getDenominatorAsInt();
      bigFraction1.floatValue();
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)39;
      byteArray0[0] = (byte)39;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger1, bigInteger0);
      bigFraction0.multiply((-156L));
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction1.TWO.getNumeratorAsLong();
      // Undeclared exception!
      try { 
        bigFraction1.pow((-3345L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.5218427181243896);
      BigDecimal bigDecimal0 = new BigDecimal(1.5218427181243896);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1098, 1098);
      BigFraction bigFraction2 = new BigFraction((-2141.891256683907));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.multiply(bigInteger0);
      bigFraction3.compareTo(bigFraction1);
      BigFraction bigFraction4 = bigFraction2.divide(2075);
      BigFraction bigFraction5 = bigFraction4.pow(1);
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      bigFraction0.intValue();
      bigFraction0.THREE_QUARTERS.pow((double) 0);
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.reciprocal();
      bigFraction0.compareTo(bigFraction0);
      BigFraction bigFraction2 = BigFraction.TWO_FIFTHS;
      bigFraction1.TWO_THIRDS.intValue();
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction2);
      bigFraction3.TWO_FIFTHS.hashCode();
      bigFraction0.TWO.divide(bigFraction1);
      bigFraction3.floatValue();
      bigFraction2.add(0);
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      bigFraction0.intValue();
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction1.divide((long) 1);
      bigFraction2.floatValue();
      BigFraction bigFraction3 = bigFraction0.add((long) 1);
      BigFraction bigFraction4 = BigFraction.getReducedFraction(1098, (-494));
      BigFraction bigFraction5 = bigFraction0.multiply(0);
      bigFraction4.divide(6);
      BigFraction bigFraction6 = bigFraction4.add(bigFraction3);
      bigFraction4.getDenominatorAsInt();
      bigFraction5.compareTo(bigFraction0);
      BigFraction bigFraction7 = bigFraction2.abs();
      BigFraction bigFraction8 = new BigFraction((long) (-864));
      bigFraction8.reduce();
      bigFraction6.percentageValue();
      bigFraction4.getNumeratorAsLong();
      bigFraction7.percentageValue();
      bigFraction8.compareTo(bigFraction5);
      bigFraction5.getNumeratorAsLong();
      bigFraction4.doubleValue();
      bigFraction7.add(bigFraction6);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.ONE_HALF.divide(bigFraction1);
      BigFraction bigFraction4 = new BigFraction((-1073741824L), 1.7976931348623157E308, 1);
      bigFraction2.pow((double) (-1073741824L));
      BigFraction bigFraction5 = bigFraction2.reciprocal();
      bigFraction4.compareTo(bigFraction2);
      BigFraction bigFraction6 = BigFraction.TWO_FIFTHS;
      bigFraction4.intValue();
      BigFraction bigFraction7 = bigFraction3.multiply(bigFraction1);
      bigFraction4.hashCode();
      bigFraction3.divide(bigFraction2);
      bigFraction6.floatValue();
      bigFraction0.add((-1));
      BigFraction bigFraction8 = bigFraction5.divide(3952090531849364496L);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction7.subtract((-1073741824));
      bigFraction7.subtract(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction8.bigDecimalValue((-1914));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.ONE_HALF.equals((Object) null);
      long long0 = (-1581L);
      bigFraction0.TWO_THIRDS.pow((-1581L));
      bigFraction0.multiply((-1073741824L));
      BigFraction bigFraction1 = new BigFraction((-1581L), 3268132352L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-7);
      byte byte0 = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-48);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.ONE_HALF.divide(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.ONE_QUARTER.divide((-1073741824L));
      bigFraction1.ONE.floatValue();
      bigFraction3.TWO.add(0L);
      BigFraction bigFraction5 = BigFraction.ZERO;
      BigFraction bigFraction6 = bigFraction5.THREE_QUARTERS.multiply((-1));
      bigFraction3.ONE_THIRD.divide((-1));
      bigFraction4.ONE.add(bigFraction2);
      bigFraction0.ONE_HALF.getDenominatorAsInt();
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction7 = bigFraction0.abs();
      BigFraction bigFraction8 = bigFraction7.reduce();
      bigFraction4.percentageValue();
      bigFraction3.TWO_QUARTERS.getNumeratorAsLong();
      bigFraction5.percentageValue();
      bigFraction1.compareTo(bigFraction3);
      bigFraction6.getNumeratorAsLong();
      bigFraction1.doubleValue();
      bigFraction0.add(bigFraction8);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.multiply(bigInteger0);
      bigFraction1.pow(5466);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.divide(bigInteger0);
      bigFraction1.ONE_THIRD.add(bigFraction0);
      bigFraction1.TWO_QUARTERS.toString();
      bigFraction1.ONE_FIFTH.getNumeratorAsLong();
      bigFraction0.ONE_HALF.add(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.divide(3952090531849364496L);
      bigFraction2.ZERO.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction2.TWO_FIFTHS.multiply(730);
      BigFraction bigFraction4 = bigFraction0.pow(1470);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction0.multiply(bigInteger0);
      bigFraction1.compareTo(bigFraction3);
      BigFraction bigFraction5 = bigFraction2.divide(1470);
      bigFraction4.pow(3);
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-1);
      byte byte0 = (byte)80;
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.THREE_FIFTHS.divide(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.divide(bigFraction1);
      bigFraction2.ONE_QUARTER.divide((-1073741824L));
      bigFraction1.ONE.floatValue();
      bigFraction2.TWO.add(0L);
      int int0 = (-1);
      BigFraction bigFraction3 = BigFraction.getReducedFraction((-864), (-1));
      BigFraction bigFraction4 = bigFraction3.THREE_QUARTERS.multiply((-1));
      // Undeclared exception!
      try { 
        bigFraction4.ONE_QUARTER.pow((-2147483645));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-76);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.multiply((-3345L));
      bigFraction1.FOUR_FIFTHS.pow((long) (byte) (-101));
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.divide(bigInteger1);
      bigFraction2.TWO_FIFTHS.intValue();
      bigFraction1.getNumerator();
      bigFraction0.getDenominatorAsLong();
      bigInteger0.toByteArray();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(861, 1);
      bigFraction2.compareTo(bigFraction0);
      bigFraction3.negate();
      bigFraction1.multiply((-1649L));
      bigFraction2.getDenominatorAsInt();
      bigFraction0.pow((int) (byte) (-1));
      bigFraction0.bigDecimalValue(3);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.5218427181243896);
      bigFraction0.ONE_FIFTH.bigDecimalValue();
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction1.FOUR_FIFTHS.add(0L);
      bigFraction1.THREE_FIFTHS.bigDecimalValue(1);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction2.THREE_QUARTERS.toString();
      bigFraction2.getNumerator();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.ONE_HALF.divide(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.ONE_QUARTER.divide((-1073741824L));
      bigFraction1.ONE.floatValue();
      BigFraction bigFraction5 = bigFraction3.TWO.add(0L);
      BigFraction bigFraction6 = BigFraction.getReducedFraction((-864), (-1));
      BigFraction bigFraction7 = bigFraction6.THREE_QUARTERS.multiply((-1));
      bigFraction3.ONE_THIRD.divide((-1));
      bigFraction4.ONE.add(bigFraction2);
      bigFraction0.ONE_HALF.getDenominatorAsInt();
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction8 = bigFraction0.abs();
      bigFraction8.reduce();
      bigFraction5.add(2644);
      BigFraction bigFraction9 = BigFraction.MINUS_ONE;
      bigFraction7.add(bigFraction4);
      BigFraction bigFraction10 = BigFraction.ONE_FIFTH;
      bigFraction9.longValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction11 = new BigFraction(bigInteger0);
      bigFraction11.add(4841572691334054L);
      bigFraction5.toString();
      bigFraction2.multiply((long) 2644);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(1);
      bigFraction1.add(1L);
      bigFraction1.bigDecimalValue(1);
      BigFraction bigFraction2 = BigFraction.ONE_THIRD;
      bigFraction2.multiply(bigFraction0);
      bigFraction0.toString();
      bigFraction2.getNumerator();
      bigFraction1.add(1L);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2299L));
      bigFraction0.bigDecimalValue();
      BigFraction.getReducedFraction(1817, Integer.MAX_VALUE);
      BigFraction bigFraction1 = bigFraction0.add(0L);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(5911);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0, 1.0, 6);
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.pow(6);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.multiply(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.reciprocal();
      bigFraction3.getDenominatorAsInt();
      BigFraction bigFraction4 = bigFraction1.reciprocal();
      bigFraction4.THREE_FIFTHS.longValue();
      bigFraction4.hashCode();
      bigFraction4.intValue();
      bigFraction1.TWO.percentageValue();
      BigInteger bigInteger1 = bigFraction4.getNumerator();
      BigFraction bigFraction5 = bigFraction3.multiply((-1559L));
      BigFraction bigFraction6 = bigFraction5.subtract(1);
      bigFraction6.TWO.multiply(0);
      bigFraction5.ONE_HALF.toString();
      bigFraction5.multiply((-1559L));
      bigFraction4.ONE_QUARTER.multiply((long) 21);
      bigFraction4.TWO_THIRDS.pow((-1253));
      bigFraction2.ONE_FIFTH.hashCode();
      bigFraction6.THREE_FIFTHS.floatValue();
      bigFraction0.multiply(bigInteger1);
      bigFraction4.getDenominator();
      bigFraction1.bigDecimalValue();
      bigFraction2.reduce();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      long long0 = (-1L);
      BigFraction bigFraction1 = bigFraction0.TWO.pow((-1L));
      BigFraction bigFraction2 = bigFraction1.TWO.add((-1L));
      bigFraction2.TWO.getDenominatorAsInt();
      bigFraction0.percentageValue();
      BigInteger bigInteger0 = null;
      try { 
        bigFraction1.THREE_FIFTHS.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), 136);
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction1.TWO_THIRDS.getNumeratorAsLong();
      byte[] byteArray0 = new byte[1];
      bigFraction1.ZERO.divide((-80));
      byteArray0[0] = (byte)73;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.subtract(bigInteger0);
      bigFraction0.MINUS_ONE.compareTo(bigFraction1);
      bigFraction1.ONE.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction0.reciprocal();
      bigFraction3.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction1.THREE_QUARTERS.add(bigFraction2);
      bigFraction4.MINUS_ONE.multiply((-1));
      bigFraction4.TWO_QUARTERS.hashCode();
      bigFraction4.abs();
      BigFraction bigFraction5 = bigFraction4.MINUS_ONE.reduce();
      bigFraction5.ONE.pow(0L);
      bigFraction4.TWO_THIRDS.add(bigInteger0);
      bigFraction1.getField();
      bigFraction1.compareTo(bigFraction0);
      bigFraction2.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue((int) (byte)73);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-790L), (-943L));
      BigFraction bigFraction1 = new BigFraction(0L);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2299L));
      bigFraction0.TWO.divide((-2299L));
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction1.TWO.subtract((-286L));
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction2.reduce();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-79);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.equals(bigInteger0);
      bigFraction0.MINUS_ONE.subtract((long) (byte)1);
      BigFraction bigFraction1 = bigFraction0.subtract(1);
      bigFraction1.THREE_FIFTHS.subtract(bigInteger0);
      bigFraction0.negate();
      bigFraction0.reduce();
      bigFraction0.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = (-2743L);
      BigInteger bigInteger0 = BigInteger.valueOf((-2743L));
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.bigDecimalValue((-1), (-157));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.ONE.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2369L, 2369L);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction0.getNumeratorAsInt();
      bigFraction0.percentageValue();
      bigFraction1.ONE_QUARTER.abs();
      BigFraction bigFraction2 = bigFraction0.divide(1);
      BigFraction bigFraction3 = bigFraction1.abs();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      BigFraction bigFraction4 = bigFraction3.ONE.abs();
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction5 = bigFraction3.ZERO.multiply(bigInteger0);
      BigFraction bigFraction6 = bigFraction0.MINUS_ONE.negate();
      bigFraction3.add(1);
      bigFraction2.percentageValue();
      bigFraction2.getNumeratorAsLong();
      bigFraction0.hashCode();
      bigFraction6.getDenominatorAsInt();
      bigFraction2.getNumeratorAsLong();
      bigFraction4.TWO.abs();
      bigFraction2.percentageValue();
      bigFraction6.intValue();
      bigFraction4.getField();
      BigFraction bigFraction7 = bigFraction4.subtract(bigInteger0);
      bigFraction5.getDenominatorAsInt();
      bigFraction4.abs();
      bigFraction6.negate();
      // Undeclared exception!
      try { 
        bigFraction7.bigDecimalValue((int) (byte) (-1), (int) (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.subtract(0L);
      bigFraction0.THREE_FIFTHS.pow((-2269L));
      BigFraction.getReducedFraction((-1), (-1));
      bigFraction1.ONE_HALF.bigDecimalValue((-353), 0);
      BigFraction bigFraction2 = bigFraction0.divide(877);
      bigFraction2.pow(2147);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.pow(bigInteger0);
      bigFraction2.pow((long) 2147);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-76);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
      BigFraction bigFraction1 = bigFraction0.multiply((-3345L));
      bigFraction1.FOUR_FIFTHS.pow((long) (byte) (-101));
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.divide(bigInteger1);
      bigFraction2.TWO_FIFTHS.intValue();
      bigFraction1.getNumerator();
      bigFraction0.getDenominatorAsLong();
      bigInteger0.toByteArray();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(861, 1);
      bigFraction2.compareTo(bigFraction0);
      bigFraction3.negate();
      bigFraction1.multiply((-1649L));
      bigFraction2.getDenominatorAsInt();
      bigFraction0.pow((int) (byte) (-1));
      bigFraction0.bigDecimalValue(3);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 0.0, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-206);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.7976931348623157E308, (-206));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.multiply(0L);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.reduce();
      bigFraction1.ZERO.getNumeratorAsLong();
      bigFraction0.TWO_QUARTERS.pow(2499.434);
      bigFraction0.getDenominatorAsInt();
      bigFraction1.longValue();
      bigFraction0.ONE.divide(bigFraction2);
      // Undeclared exception!
      try { 
        bigFraction1.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      bigFraction0.intValue();
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((-6.824454861992054E-31), 0, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -0 to fraction after 1 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.subtract(bigInteger0);
      bigFraction1.ZERO.divide(433);
      bigFraction1.TWO_FIFTHS.bigDecimalValue();
      bigFraction1.THREE_FIFTHS.bigDecimalValue();
      bigFraction0.floatValue();
      BigFraction bigFraction2 = bigFraction1.add((long) 433);
      bigFraction2.TWO_FIFTHS.subtract(bigFraction0);
      bigFraction0.pow(0L);
      // Undeclared exception!
      try { 
        bigFraction1.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.pow((-821));
      bigFraction1.TWO_THIRDS.reciprocal();
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.subtract(bigFraction0);
      bigFraction0.getDenominatorAsLong();
      bigFraction2.compareTo(bigFraction0);
      bigFraction0.THREE_FIFTHS.getDenominatorAsInt();
      BigInteger bigInteger1 = bigFraction0.getNumerator();
      bigFraction2.getDenominatorAsLong();
      bigFraction3.floatValue();
      BigFraction bigFraction4 = bigFraction0.abs();
      bigFraction2.getField();
      bigFraction1.multiply(bigFraction0);
      bigFraction2.THREE_QUARTERS.divide(bigInteger1);
      bigFraction3.longValue();
      bigFraction4.add((long) 5);
      bigFraction2.hashCode();
      bigFraction2.add(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.5218427181243896);
      bigFraction0.ONE_FIFTH.bigDecimalValue();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1098, 1098);
      bigFraction1.FOUR_FIFTHS.add(0L);
      bigFraction1.THREE_FIFTHS.bigDecimalValue(1);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction2.THREE_QUARTERS.toString();
      bigFraction2.getNumerator();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.ONE_HALF.divide(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.ONE_QUARTER.divide((-1073741824L));
      bigFraction1.ONE.floatValue();
      bigFraction3.TWO.add(0L);
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-864), (-1));
      BigFraction bigFraction6 = bigFraction5.THREE_QUARTERS.multiply((-1));
      bigFraction3.ONE_THIRD.divide((-1));
      bigFraction4.ONE.add(bigFraction2);
      bigFraction0.ONE_HALF.getDenominatorAsInt();
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction7 = bigFraction0.abs();
      BigFraction bigFraction8 = bigFraction7.reduce();
      bigFraction4.percentageValue();
      bigFraction3.TWO_QUARTERS.getNumeratorAsLong();
      bigFraction5.percentageValue();
      bigFraction1.compareTo(bigFraction3);
      bigFraction6.getNumeratorAsLong();
      bigFraction1.doubleValue();
      bigFraction0.add(bigFraction8);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.ONE_FIFTH.toString();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(bigInteger0);
      int int0 = 52;
      bigFraction0.THREE_QUARTERS.pow(52);
      bigFraction1.pow(bigInteger0);
      bigFraction0.TWO_THIRDS.intValue();
      int int1 = (-1);
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.divide(bigFraction1);
      int int2 = 1817;
      BigFraction bigFraction3 = bigFraction2.ONE_HALF.pow(1817);
      bigFraction3.ONE.pow((long) 0);
      // Undeclared exception!
      try { 
        bigFraction1.ONE.bigDecimalValue(837, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(882, 882);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.reduce();
      BigFraction bigFraction2 = bigFraction0.ONE.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.ZERO.subtract(882);
      BigFraction bigFraction4 = bigFraction2.ONE_THIRD.divide(bigFraction3);
      bigFraction4.THREE_QUARTERS.multiply(882);
      bigFraction3.divide((-1L));
      // Undeclared exception!
      try { 
        bigFraction1.MINUS_ONE.bigDecimalValue(52, 3213);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.hashCode();
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-17.654792));
      bigFraction0.FOUR_FIFTHS.getNumeratorAsInt();
      bigFraction0.FOUR_FIFTHS.bigDecimalValue(3, 3);
      BigFraction bigFraction1 = bigFraction0.subtract(4193L);
      byte[] byteArray0 = new byte[4];
      bigFraction1.FOUR_FIFTHS.doubleValue();
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-55);
      bigFraction1.TWO_FIFTHS.longValue();
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.flipBit((byte) (-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1229L);
      bigFraction0.pow((double) 1229L);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.TWO.subtract(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2259);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(1);
      bigFraction1.THREE_FIFTHS.add((long) 1);
      bigFraction1.TWO_FIFTHS.floatValue();
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1176, 1703);
      bigFraction0.ONE.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.ZERO.abs();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.TWO.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.multiply((long) 1176);
      bigFraction2.ONE_HALF.reciprocal();
      BigFraction bigFraction3 = bigFraction0.multiply(1703);
      BigFraction bigFraction4 = bigFraction0.add(927L);
      BigFraction bigFraction5 = bigFraction4.divide(1L);
      BigFraction bigFraction6 = bigFraction1.subtract((-634L));
      BigFraction bigFraction7 = bigFraction0.ONE.reduce();
      BigFraction bigFraction8 = bigFraction4.divide(bigFraction5);
      bigFraction8.pow((long) 1703);
      BigFraction bigFraction9 = bigFraction1.subtract(bigInteger0);
      bigFraction8.divide((-1586));
      bigFraction3.negate();
      bigFraction5.multiply(bigInteger0);
      bigFraction8.multiply(bigFraction0);
      bigFraction1.getField();
      bigFraction8.getDenominator();
      bigFraction7.doubleValue();
      bigFraction6.divide(bigFraction8);
      bigFraction5.getNumeratorAsLong();
      bigFraction9.add(445L);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-106);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.TWO.subtract(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.ONE_THIRD.add(bigFraction0);
      bigFraction1.TWO_QUARTERS.toString();
      bigFraction1.ONE_FIFTH.getNumeratorAsLong();
      bigFraction0.ONE_HALF.add(bigFraction1);
      BigFraction bigFraction4 = bigFraction0.divide(3952090531849364496L);
      bigFraction4.ZERO.getNumeratorAsLong();
      BigFraction bigFraction5 = bigFraction4.TWO_FIFTHS.multiply(730);
      BigFraction bigFraction6 = bigFraction0.pow(1470);
      BigFraction bigFraction7 = bigFraction6.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction7.ONE_FIFTH.doubleValue();
      bigFraction3.TWO_THIRDS.getDenominatorAsLong();
      BigFraction bigFraction8 = BigFraction.THREE_FIFTHS;
      bigFraction3.FOUR_FIFTHS.compareTo(bigFraction8);
      bigFraction6.ONE_HALF.pow((double) 3952090531849364496L);
      BigFraction bigFraction9 = bigFraction0.TWO_FIFTHS.divide(bigFraction2);
      bigFraction3.bigDecimalValue(1, 2);
      bigFraction0.intValue();
      bigFraction3.subtract((-1011L));
      bigFraction0.subtract(730);
      bigFraction9.getDenominatorAsLong();
      bigFraction5.subtract(2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.divide(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.FOUR_FIFTHS.pow((-4799));
      BigFraction bigFraction4 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
      bigFraction4.THREE_FIFTHS.pow(bigInteger0);
      BigFraction bigFraction5 = bigFraction0.multiply(bigInteger0);
      int int0 = bigFraction0.TWO_FIFTHS.getNumeratorAsInt();
      BigFraction bigFraction6 = bigFraction0.divide(6067);
      int int1 = bigFraction6.TWO_QUARTERS.hashCode();
      assertFalse(int1 == int0);
      
      BigFraction bigFraction7 = bigFraction5.multiply(bigFraction3);
      assertEquals((byte)72, bigFraction7.byteValue());
      
      BigFraction bigFraction8 = bigFraction2.subtract(bigInteger0);
      BigFraction bigFraction9 = bigFraction8.pow(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction10 = new BigFraction(bigInteger0, bigInteger1);
      BigFraction bigFraction11 = bigFraction9.THREE_QUARTERS.divide(bigFraction10);
      double double0 = bigFraction2.pow((double) 6067);
      assertEquals(Double.NaN, double0, 0.01);
      
      bigFraction2.bigDecimalValue();
      assertTrue(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction11));
      assertEquals((short)2, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.signum();
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigInteger bigInteger1 = bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.abs();
      assertSame(bigInteger0, bigInteger1);
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.multiply(999L);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.subtract(999L);
      bigFraction1.THREE_FIFTHS.floatValue();
      int int0 = 273;
      bigFraction1.ONE_HALF.pow(273);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(273);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.hashCode();
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.add(2249L);
      bigFraction1.ONE_QUARTER.compareTo(bigFraction0);
      BigFraction bigFraction2 = bigFraction0.multiply((-2739L));
      bigFraction0.getDenominatorAsInt();
      BigFraction.getReducedFraction(4, (-1));
      bigFraction2.MINUS_ONE.subtract((-1));
      bigFraction0.toString();
      bigFraction1.getField();
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction3.subtract(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.MINUS_ONE.negate();
      // Undeclared exception!
      try { 
        bigFraction5.TWO_QUARTERS.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.TWO.negate();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.divide(bigFraction1);
      String string0 = bigFraction0.toString();
      assertEquals("3 / 4", string0);
      
      bigFraction1.ONE_HALF.pow(1490);
      BigFraction bigFraction3 = bigFraction1.subtract(1011);
      assertEquals((byte)14, bigFraction3.byteValue());
      
      BigFraction bigFraction4 = bigFraction2.subtract((-2120L));
      BigFraction bigFraction5 = bigFraction4.reciprocal();
      assertEquals((short)2121, bigFraction4.shortValue());
      assertFalse(bigFraction5.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-3098), 72);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction1.ONE_HALF.bigDecimalValue((-637));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3);
      byte[] byteArray0 = new byte[1];
      float float0 = bigFraction0.ZERO.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      
      byteArray0[0] = (byte) (-122);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.multiply(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.divide(2147483647L);
      assertEquals((byte)0, bigFraction3.byteValue());
      
      BigFraction bigFraction4 = bigFraction0.subtract(bigFraction1);
      assertEquals((short)369, bigFraction4.shortValue());
      
      BigFraction bigFraction5 = bigFraction0.multiply(2084);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertEquals((byte)108, bigFraction5.byteValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.ONE_THIRD.getNumeratorAsInt();
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.valueOf(1);
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction2.negate();
      bigFraction2.longValue();
      BigFraction bigFraction3 = bigFraction2.TWO_FIFTHS.add(bigFraction1);
      bigFraction3.TWO_QUARTERS.percentageValue();
      bigFraction0.TWO_QUARTERS.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction1.pow(0L);
      bigFraction4.ZERO.divide(2L);
      BigFraction bigFraction5 = bigFraction1.pow(bigInteger0);
      bigFraction4.FOUR_FIFTHS.divide(1);
      bigFraction5.THREE_FIFTHS.doubleValue();
      bigFraction1.getNumeratorAsInt();
      BigFraction bigFraction6 = bigFraction0.ONE_QUARTER.pow(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction6.THREE_FIFTHS.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.pow(bigInteger0);
      bigFraction0.ONE_QUARTER.intValue();
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.abs();
      int int0 = 0;
      BigFraction bigFraction3 = bigFraction0.reciprocal();
      bigFraction3.ONE_HALF.getField();
      // Undeclared exception!
      try { 
        bigFraction2.ONE_HALF.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1733L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.divide(2380L);
      bigFraction2.TWO.getNumeratorAsLong();
      bigFraction2.MINUS_ONE.bigDecimalValue();
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.abs();
      bigFraction3.getField();
      long long0 = (-9223372036854775808L);
      MockRandom mockRandom0 = new MockRandom((-9223372036854775808L));
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((-1), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numBits must be non-negative
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(52, 52);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.TWO_FIFTHS.getField();
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      int int0 = (-2042);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-2042), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 5466;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-3296.8808), (-3296.8808), 5466);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -3,296.881 to fraction (-28,766,105,576,928/8,725,248,901)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = new BigFraction(9193070505571053912L);
      bigFraction0.equals(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      long long0 = 0L;
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }
}
