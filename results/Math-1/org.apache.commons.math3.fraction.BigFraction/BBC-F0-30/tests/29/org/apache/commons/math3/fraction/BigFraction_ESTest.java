/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 10 13:58:41 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1018, 1018);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-22);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.negate();
      bigFraction1.MINUS_ONE.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction1.negate();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction3.multiply(bigInteger1);
      BigFraction bigFraction5 = bigFraction2.multiply(bigInteger0);
      bigFraction5.subtract(bigFraction2);
      BigFraction bigFraction6 = bigFraction1.ONE_QUARTER.divide(bigFraction4);
      bigFraction6.FOUR_FIFTHS.hashCode();
      bigFraction1.add((long) (byte)108);
      bigFraction1.multiply((-3689L));
      BigFraction bigFraction7 = bigFraction3.subtract(bigInteger0);
      bigFraction0.divide(bigInteger1);
      bigFraction5.subtract((int) (byte) (-1));
      bigFraction4.TWO_FIFTHS.longValue();
      bigFraction7.getDenominatorAsInt();
      bigFraction6.getDenominatorAsInt();
      BigFraction.getReducedFraction(2147483344, (byte) (-22));
      Random.setNextRandom(2147483477);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.9254832789181E165);
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = new BigFraction((-107.050938692));
      bigFraction1.pow((-1.4566110577298295E-7));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = new BigFraction(Double.NaN, 51);
      BigFraction bigFraction3 = bigFraction1.pow(51);
      bigFraction3.multiply((long) 51);
      // Undeclared exception!
      try { 
        bigFraction2.reduce();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow(2039);
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.longValue();
      bigFraction0.floatValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.pow(1061);
      bigFraction2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.longValue();
      bigFraction0.floatValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.pow(1061);
      bigFraction3.getDenominatorAsLong();
      BigFraction bigFraction4 = new BigFraction((-347.1957092027933));
      bigFraction0.divide((-1062));
      bigFraction3.percentageValue();
      BigFraction bigFraction5 = new BigFraction(1.2753966504932798E138);
      bigFraction2.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(18471714816L, 18471714816L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add(bigInteger0);
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction2);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction3.ZERO.multiply(bigInteger1);
      BigFraction bigFraction5 = bigFraction4.TWO_QUARTERS.multiply(bigInteger0);
      bigFraction5.MINUS_ONE.add((-1L));
      bigFraction5.MINUS_ONE.intValue();
      BigFraction bigFraction6 = bigFraction3.add(bigInteger1);
      bigFraction1.ONE_THIRD.add(36943429632L);
      bigFraction6.ONE_THIRD.getDenominatorAsInt();
      bigFraction6.MINUS_ONE.bigDecimalValue(3, 3);
      bigFraction6.TWO_FIFTHS.doubleValue();
      bigFraction2.doubleValue();
      bigFraction3.add(18471714816L);
      bigFraction1.doubleValue();
      bigFraction2.subtract(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(480.35569698054513);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1365, 2147482856);
      bigFraction0.TWO_THIRDS.getDenominatorAsLong();
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1141.879333), 3);
      bigFraction0.bigDecimalValue(3);
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((-1692), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-7.514966995961323E-8));
      BigFraction bigFraction1 = bigFraction0.divide(2027L);
      BigFraction bigFraction2 = bigFraction1.ZERO.divide(bigFraction0);
      BigFraction bigFraction3 = bigFraction1.ZERO.add(bigFraction0);
      bigFraction3.TWO_THIRDS.toString();
      bigFraction2.TWO_QUARTERS.toString();
      bigFraction2.TWO_THIRDS.equals(bigFraction0);
      bigFraction1.negate();
      BigFraction bigFraction4 = bigFraction0.pow(2027L);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction4.ONE_HALF.divide(bigInteger0);
      bigFraction1.MINUS_ONE.getDenominatorAsInt();
      bigFraction4.floatValue();
      int int0 = 3;
      bigFraction0.subtract(3);
      // Undeclared exception!
      try { 
        bigFraction2.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.25194599999997536, 2699.0, (-51));
      BigFraction bigFraction1 = bigFraction0.divide(9218868437227405312L);
      BigFraction bigFraction2 = bigFraction0.divide(144493490446336L);
      byte[] byteArray0 = new byte[5];
      bigFraction0.TWO_THIRDS.subtract(bigFraction1);
      bigFraction2.bigDecimalValue();
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)64;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction2.TWO.subtract(bigInteger0);
      bigFraction2.pow(9218868437227405312L);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction0.multiply(bigInteger1);
      BigFraction bigFraction5 = bigFraction4.ONE_QUARTER.subtract(144493490446336L);
      bigFraction3.multiply((-2550));
      bigFraction5.abs();
      bigFraction3.getNumerator();
      BigFraction bigFraction6 = bigFraction3.add(1198L);
      bigFraction6.ONE_QUARTER.toString();
      bigFraction0.add((-2146754450));
      bigFraction2.add((-51));
      BigFraction.getReducedFraction((byte)61, (byte)64);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.pow((-1501));
      bigFraction1.floatValue();
      BigFraction bigFraction2 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction3 = new BigFraction((-2279.450916787));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.pow(1544);
      bigFraction1.floatValue();
      BigFraction bigFraction2 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction3 = new BigFraction((-787.6595991840811), 3160);
      BigFraction bigFraction4 = BigFraction.ONE;
      bigFraction2.multiply(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-791), (-791));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.reciprocal();
      bigFraction0.ONE.percentageValue();
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.reduce();
      bigFraction0.ONE_QUARTER.getNumeratorAsLong();
      BigFraction bigFraction4 = bigFraction1.ZERO.multiply(bigFraction3);
      BigFraction bigFraction5 = bigFraction0.pow(0);
      bigFraction0.bigDecimalValue(0, 1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigFraction3.THREE_FIFTHS.divide(bigInteger1);
      bigFraction5.getDenominator();
      bigFraction3.getField();
      bigFraction1.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction5.divide(bigFraction4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow((-1565));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = (-291L);
      BigFraction bigFraction0 = new BigFraction((-291L));
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.divide(1);
      bigFraction1.pow((double) 1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.TWO.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = (-2842);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-1.7814725212773386), (-1.7814725212773386), (-2842));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -1.781 to fraction after -2,842 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.7814725212773386), 2147483362);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((double) Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = new BigFraction(2.2381820678710938);
      bigFraction1.subtract(2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-31.3156852711168));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.MINUS_ONE.divide(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.bigDecimalValue(2276);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.395707534352809E-6);
      bigFraction0.intValue();
      BigFraction bigFraction1 = bigFraction0.subtract(16);
      // Undeclared exception!
      try { 
        bigFraction1.THREE_QUARTERS.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow((-2407L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0035818336831466), 0.005442708181817579, 1086);
      bigFraction0.negate();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction0.divide(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-47);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.FOUR_FIFTHS.pow(bigInteger0);
      BigFraction bigFraction1 = new BigFraction(7.349676423018536E-14);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsInt();
      bigFraction0.pow(1.23604154586792);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ONE_QUARTER.getDenominatorAsLong();
      bigFraction0.doubleValue();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-63);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.floatValue();
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)93;
      bigFraction0.ONE_QUARTER.getNumeratorAsInt();
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-82);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.TWO_THIRDS.divide(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction0.equals(bigFraction1);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction1.getNumerator();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = new BigFraction(14712L, 348.093802467978, 592);
      bigFraction2.equals(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.getNumerator();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-205));
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction((-2397L));
      bigFraction0.reduce();
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction0.equals(bigFraction1);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(1.7976931348623157E308, (byte)117);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-916.748054), 37);
      bigFraction0.floatValue();
      bigFraction0.getNumerator();
      // Undeclared exception!
      try { 
        bigFraction0.pow(2147483240);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = new BigFraction((-2277.0));
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1839L);
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)117;
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.multiply((-1781L));
      bigFraction2.THREE_QUARTERS.reduce();
      bigFraction0.THREE_QUARTERS.equals(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = BigFraction.ONE_FIFTH;
      bigFraction0.getNumeratorAsInt();
      bigFraction1.subtract(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1687.08247337);
      bigFraction0.ONE_QUARTER.bigDecimalValue();
      bigFraction0.floatValue();
      bigFraction0.getNumerator();
      bigFraction0.add((-4432));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1548L));
      byte byte0 = (byte)117;
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction1.reduce();
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-2677), 4);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger0);
      bigFraction2.percentageValue();
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      bigFraction1.negate();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.subtract(117);
      bigFraction1.TWO_QUARTERS.floatValue();
      bigFraction1.THREE_FIFTHS.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.divide((long) 117);
      bigFraction2.THREE_QUARTERS.bigDecimalValue();
      bigFraction0.abs();
      bigFraction1.add(4);
      bigFraction1.equals("2r^qW8nt");
      bigFraction1.intValue();
      BigFraction bigFraction3 = bigFraction2.pow((-116));
      bigFraction1.getDenominatorAsLong();
      bigFraction0.floatValue();
      bigFraction2.subtract(bigFraction3);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction3.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.equals((Object) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)5;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)4;
      byteArray0[2] = (byte)4;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = new BigFraction((int) (byte)4, 2147483643);
      try { 
        bigFraction0.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.ONE_QUARTER.doubleValue();
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.getNumerator();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-916.748054), 37);
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.ZERO.longValue();
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.divide(bigFraction1);
      bigFraction2.TWO_THIRDS.getNumeratorAsLong();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-42);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.ZERO.subtract(bigInteger0);
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.percentageValue();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction1.FOUR_FIFTHS.multiply(bigInteger0);
      bigFraction1.getNumeratorAsLong();
      bigFraction0.floatValue();
      bigFraction1.multiply(1405);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-916.748054), 37);
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.ZERO.longValue();
      bigFraction0.MINUS_ONE.divide(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-791), (-2677));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.reciprocal();
      bigFraction0.ONE.percentageValue();
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.reduce();
      bigFraction0.ONE_QUARTER.getNumeratorAsLong();
      bigFraction1.ZERO.multiply(bigFraction3);
      BigFraction bigFraction4 = new BigFraction((-891), (-891));
      bigFraction0.compareTo(bigFraction2);
      bigFraction4.pow((double) (-891));
      BigFraction bigFraction5 = new BigFraction((double) (-791));
      bigFraction3.percentageValue();
      bigFraction1.reduce();
      BigFraction bigFraction6 = bigFraction1.subtract(bigFraction2);
      bigFraction4.compareTo(bigFraction1);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction7 = bigFraction6.pow((long) (-791));
      bigFraction1.divide(1L);
      BigFraction bigFraction8 = BigFraction.ONE_QUARTER;
      bigFraction2.getField();
      bigFraction7.reduce();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.47399999999998954, 0.47399999999998954, 399);
      bigFraction0.TWO_FIFTHS.equals("1juz)t]b3'zrQFwy");
      bigFraction0.floatValue();
      BigFraction bigFraction1 = bigFraction0.subtract(399);
      BigFraction bigFraction2 = bigFraction0.negate();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction1.pow(bigInteger0);
      BigFraction bigFraction4 = BigFraction.ONE_THIRD;
      bigFraction4.THREE_FIFTHS.reduce();
      bigFraction4.add(bigFraction3);
      bigFraction2.reduce();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-804), (-2677));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-804), (-804));
      bigFraction1.percentageValue();
      BigFraction bigFraction2 = bigFraction1.pow(bigInteger0);
      bigFraction2.reduce();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      bigFraction0.multiply(bigFraction3);
      bigFraction2.pow((-2677));
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(1, 622);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-916.748054), 37);
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.ZERO.longValue();
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      bigFraction2.percentageValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction2.pow(bigInteger0);
      bigFraction2.reduce();
      bigFraction3.getNumeratorAsLong();
      // Undeclared exception!
      try { 
        bigFraction3.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-235.0));
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction2.MINUS_ONE.multiply(bigFraction1);
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      int int0 = 2146435583;
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue(2146435583, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.percentageValue();
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-235.0));
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.multiply(1366L);
      bigFraction2.TWO_THIRDS.add(1476);
      bigFraction2.add(bigFraction0);
      BigFraction bigFraction3 = BigFraction.TWO;
      BigFraction bigFraction4 = bigFraction3.divide(bigFraction0);
      bigFraction0.getNumeratorAsInt();
      bigFraction4.floatValue();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-791), (-2677));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.reciprocal();
      bigFraction0.ONE.percentageValue();
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.reduce();
      bigFraction0.ONE_QUARTER.getNumeratorAsLong();
      bigFraction1.ZERO.multiply(bigFraction3);
      bigFraction0.pow(0);
      bigFraction0.bigDecimalValue(0, 1);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction3.THREE_FIFTHS.divide(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.ONE.percentageValue();
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-235.0));
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.equals("G$'i6w|2V");
      bigFraction1.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = bigFraction0.multiply((-2147483647));
      bigFraction1.ONE_HALF.divide(bigFraction0);
      bigFraction1.getDenominatorAsLong();
      bigFraction0.getDenominatorAsLong();
      bigFraction1.multiply((-457));
      bigFraction1.divide(3579L);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.47399999999998954, 0.47399999999998954, 399);
      bigFraction0.TWO_FIFTHS.equals("1juz)t]b3'zrQFwy");
      bigFraction0.floatValue();
      bigFraction0.subtract(399);
      bigFraction0.negate();
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-291), (-2018));
      int int0 = (-598);
      BigFraction bigFraction1 = bigFraction0.TWO.multiply((-598));
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction2 = bigFraction0.multiply(4);
      bigFraction2.pow(4713.32339713);
      bigFraction1.ONE_FIFTH.getField();
      BigFraction bigFraction3 = bigFraction1.add((long) (-2018));
      bigFraction3.ZERO.hashCode();
      bigFraction3.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction2.subtract(bigFraction3);
      bigFraction4.ONE.subtract(bigInteger0);
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction5 = bigFraction2.subtract(bigInteger0);
      bigFraction5.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction1.TWO_THIRDS.toString();
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger("0", 2216);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-235.0));
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.multiply(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.ONE.multiply(1L);
      BigFraction bigFraction5 = BigFraction.FOUR_FIFTHS;
      bigFraction0.add(bigFraction5);
      BigFraction bigFraction6 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction7 = bigFraction6.abs();
      bigFraction4.subtract(bigFraction0);
      int int0 = 52;
      // Undeclared exception!
      try { 
        bigFraction7.bigDecimalValue(52, 2147482624);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1839L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)117;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.reduce();
      bigFraction0.ZERO.reduce();
      bigFraction0.THREE_QUARTERS.equals(bigFraction1);
      byteArray0[1] = (byte)24;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      bigFraction1.longValue();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigFraction2.abs();
      bigFraction2.intValue();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      int int0 = 4;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((double) 37, 4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 37 to fraction (9,223,372,036,854,775,772/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      int int0 = (-2677);
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-2677), 4);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      bigFraction1.percentageValue();
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction4 = new BigFraction((long) (-2677), (long) 4);
      BigFraction bigFraction5 = new BigFraction((double) 4);
      BigFraction bigFraction6 = BigFraction.TWO_QUARTERS;
      bigFraction6.getNumeratorAsLong();
      bigFraction3.multiply(bigFraction5);
      bigFraction4.pow(1);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue((-2677), 105953380);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = (-791);
      int int1 = 52;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(52, (-4342.026957868), 2428);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 52 to fraction (-51/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-916.748054), 37);
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.ZERO.longValue();
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.divide(bigFraction1);
      bigFraction2.TWO_THIRDS.getNumeratorAsLong();
      bigFraction0.getDenominatorAsLong();
      bigFraction2.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction0.reduce();
      BigFraction bigFraction3 = new BigFraction((-1498));
      BigFraction bigFraction4 = bigFraction3.reduce();
      bigFraction2.equals("/F!Sfep^");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)24;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction5 = new BigFraction(934, (int) (byte)24);
      BigFraction bigFraction6 = bigFraction5.add(bigInteger0);
      bigFraction4.longValue();
      // Undeclared exception!
      try { 
        bigFraction6.bigDecimalValue((int) (byte)24, (int) (byte)24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1839L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)117;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.reduce();
      bigFraction0.ZERO.reduce();
      bigFraction0.THREE_QUARTERS.equals(bigFraction1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      bigFraction1.longValue();
      bigFraction1.pow((long) (byte)0);
      // Undeclared exception!
      try { 
        bigFraction2.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-235.0));
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.multiply(bigFraction1);
      bigFraction3.ONE.multiply(1L);
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction5 = bigFraction0.add(bigFraction4);
      bigFraction1.percentageValue();
      bigFraction5.reduce();
      bigFraction2.subtract(bigFraction0);
      bigFraction5.compareTo(bigFraction3);
      bigFraction4.getNumerator();
      bigFraction4.pow((long) (-1862));
      BigFraction bigFraction6 = new BigFraction(0.7000000000000455);
      bigFraction6.divide(3441L);
      bigFraction4.getField();
      bigFraction5.reduce();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction1.multiply(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.multiply(666L);
      BigFraction bigFraction4 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction5 = new BigFraction(100L, 666L);
      bigFraction5.add(bigFraction3);
      BigFraction bigFraction6 = BigFraction.getReducedFraction(203, (-3773));
      BigFraction bigFraction7 = bigFraction2.add((-3773));
      bigFraction1.reduce();
      BigFraction bigFraction8 = new BigFraction((-895.3), (-3773));
      bigFraction4.add(bigFraction6);
      bigFraction7.divide(877);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.divide((-2461));
      BigFraction bigFraction2 = bigFraction1.ZERO.divide((-2461));
      bigFraction0.toString();
      BigFraction bigFraction3 = bigFraction1.subtract((long) (-2461));
      bigFraction1.MINUS_ONE.getDenominatorAsInt();
      bigFraction2.ONE_QUARTER.multiply(4503599627370496L);
      BigFraction bigFraction4 = bigFraction3.MINUS_ONE.add((-2461));
      BigFraction bigFraction5 = bigFraction1.reduce();
      bigFraction5.ONE_FIFTH.pow(1874.42198);
      BigFraction bigFraction6 = bigFraction0.add(37);
      BigFraction bigFraction7 = bigFraction6.ONE_HALF.reduce();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction8 = bigFraction1.subtract((long) (-2461));
      bigFraction8.getNumeratorAsLong();
      bigFraction0.FOUR_FIFTHS.floatValue();
      bigFraction0.multiply((-3512299194304650054L));
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction7.pow(bigInteger1);
      BigFraction bigFraction9 = bigFraction8.divide(bigFraction4);
      Object object0 = new Object();
      bigFraction9.TWO_THIRDS.equals(object0);
      bigFraction7.getDenominatorAsLong();
      BigFraction bigFraction10 = bigFraction8.multiply(bigFraction4);
      bigFraction10.MINUS_ONE.reduce();
      bigFraction1.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-2052);
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-2052), (-1));
      long long0 = 1525L;
      long long1 = (-1525L);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3498.051899, (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.reduce();
      BigFraction bigFraction3 = bigFraction2.ONE_FIFTH.divide(bigFraction0);
      bigFraction1.ONE_FIFTH.multiply((-1));
      bigFraction2.ONE_QUARTER.pow(0L);
      bigFraction1.THREE_QUARTERS.getField();
      BigFraction bigFraction4 = bigFraction0.add((-1));
      bigFraction0.doubleValue();
      bigFraction4.ONE_FIFTH.getDenominatorAsLong();
      bigFraction4.ONE.doubleValue();
      BigFraction bigFraction5 = bigFraction3.ZERO.subtract(bigFraction4);
      BigFraction bigFraction6 = bigFraction5.ONE_THIRD.divide(bigInteger0);
      bigFraction6.TWO.longValue();
      bigFraction1.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.bigDecimalValue(1925);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4596.49056246), 37);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.multiply(bigInteger0);
      bigFraction0.TWO.subtract(bigFraction1);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.add((-9223372036854775808L));
      bigFraction2.THREE_QUARTERS.getNumeratorAsInt();
      bigFraction0.TWO.getNumeratorAsInt();
      bigFraction2.ONE_QUARTER.compareTo(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.multiply(bigInteger1);
      BigFraction bigFraction4 = bigFraction3.FOUR_FIFTHS.divide(4503599627370496L);
      BigFraction bigFraction5 = bigFraction1.subtract((long) 37);
      BigFraction bigFraction6 = bigFraction2.ONE_QUARTER.subtract(128);
      bigFraction6.TWO.multiply(1094);
      bigFraction5.divide(393L);
      bigFraction0.ONE_THIRD.floatValue();
      BigFraction bigFraction7 = bigFraction4.add(4503599627370496L);
      bigFraction7.THREE_FIFTHS.add((long) 37);
      bigFraction0.ONE_THIRD.intValue();
      bigFraction2.pow(105);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(2, 105);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-791), (-2677));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.reciprocal();
      bigFraction0.ONE.percentageValue();
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.reduce();
      bigFraction0.ONE_QUARTER.getNumeratorAsLong();
      BigFraction bigFraction4 = bigFraction1.ZERO.multiply(bigFraction3);
      BigFraction bigFraction5 = bigFraction0.pow(0);
      bigFraction0.bigDecimalValue(0, 1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigFraction3.THREE_FIFTHS.divide(bigInteger1);
      bigFraction5.getDenominator();
      bigFraction3.getField();
      bigFraction1.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction5.divide(bigFraction4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(389);
      BigFraction bigFraction2 = bigFraction0.ONE.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.divide(bigFraction0);
      BigFraction bigFraction4 = bigFraction0.multiply(bigInteger0);
      bigFraction2.TWO_QUARTERS.getNumeratorAsLong();
      bigFraction4.THREE_QUARTERS.floatValue();
      bigFraction0.subtract(bigInteger0);
      bigFraction4.TWO_THIRDS.pow(0.0);
      Object object0 = new Object();
      bigFraction4.MINUS_ONE.equals(object0);
      bigFraction0.getField();
      bigFraction2.longValue();
      BigFraction bigFraction5 = bigFraction1.ONE.multiply(2904L);
      BigFraction bigFraction6 = bigFraction3.multiply(bigFraction4);
      bigFraction6.ONE_QUARTER.hashCode();
      bigFraction0.add(bigFraction6);
      bigFraction3.toString();
      bigFraction4.divide(389);
      BigFraction bigFraction7 = bigFraction1.subtract((long) 389);
      bigFraction7.getNumeratorAsInt();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction8 = bigFraction1.add(bigInteger1);
      bigFraction8.TWO_QUARTERS.hashCode();
      bigFraction7.TWO_THIRDS.getNumeratorAsLong();
      bigFraction7.pow(389);
      bigFraction7.reduce();
      bigFraction5.pow((-31.1354619250388));
      bigFraction0.bigDecimalValue(0);
      bigFraction2.compareTo(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.percentageValue();
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      int int0 = 52;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.multiply(52);
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.reciprocal();
      bigFraction2.ONE_FIFTH.subtract(2428);
      bigFraction2.TWO_QUARTERS.intValue();
      bigFraction0.ONE_HALF.doubleValue();
      BigFraction bigFraction3 = bigFraction1.MINUS_ONE.abs();
      bigFraction0.subtract(bigFraction3);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2428, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-235.0));
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.multiply(bigFraction1);
      bigFraction3.ONE.multiply(1L);
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      bigFraction0.add(bigFraction4);
      BigFraction.getReducedFraction(0, (-2891));
      BigFraction bigFraction5 = bigFraction1.add((-1862));
      bigFraction5.ONE_HALF.reduce();
      BigFraction bigFraction6 = null;
      try {
        bigFraction6 = new BigFraction((double) (-1862), (-1862));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1,862 to fraction (1,863/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1024), 659);
      BigFraction bigFraction1 = bigFraction0.multiply(0L);
      BigFraction bigFraction2 = bigFraction1.ZERO.multiply(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.ZERO.multiply(1);
      BigFraction bigFraction4 = bigFraction1.THREE_QUARTERS.divide((long) 659);
      bigFraction4.ONE_FIFTH.getNumeratorAsLong();
      bigFraction3.ONE_HALF.divide(37);
      bigFraction0.getDenominatorAsLong();
      bigFraction4.add(bigFraction1);
      bigFraction0.TWO.reduce();
      bigFraction0.add(0);
      bigFraction0.divide((-1024));
      bigFraction0.add(0L);
      bigFraction3.add(1827L);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.percentageValue();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.add((int) (byte) (-1));
      byteArray0[1] = (byte) (-51);
      bigFraction0.ONE_FIFTH.percentageValue();
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)3;
      bigFraction0.TWO.divide(bigFraction1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger0);
      bigFraction2.pow(200.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1839L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)117;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.reduce();
      bigFraction0.ZERO.reduce();
      bigFraction0.THREE_QUARTERS.equals(bigFraction1);
      byteArray0[1] = (byte)24;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      bigFraction1.longValue();
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue((int) (byte)24, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(828.187926);
      BigFraction bigFraction1 = bigFraction0.pow(2187L);
      bigFraction1.getDenominator();
      int int0 = 1376;
      BigFraction bigFraction2 = BigFraction.getReducedFraction(1376, 1376);
      bigFraction2.TWO_THIRDS.getDenominatorAsLong();
      bigFraction1.toString();
      bigFraction0.FOUR_FIFTHS.longValue();
      bigFraction0.getField();
      bigFraction0.getDenominator();
      BigFraction bigFraction3 = bigFraction1.multiply(bigFraction0);
      BigFraction bigFraction4 = bigFraction3.add(bigFraction1);
      int int1 = (-1797);
      bigFraction3.divide((-1));
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue((-1797), (-1797));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction0.FOUR_FIFTHS.divide(bigFraction1);
      bigFraction0.pow(36L);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1318, 1318);
      BigFraction bigFraction1 = bigFraction0.divide((long) 1318);
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.add(2665);
      bigFraction0.ONE_THIRD.getNumeratorAsLong();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction1.multiply(2688L);
      float float0 = bigFraction2.floatValue();
      assertEquals(2665.75F, float0, 0.01F);
      
      bigFraction3.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction2.subtract(1L);
      BigFraction bigFraction5 = bigFraction3.divide(bigFraction0);
      bigFraction0.TWO.divide((-3035));
      String string0 = bigFraction5.toString();
      assertEquals("1344 / 659", string0);
      
      bigFraction1.getField();
      BigFraction bigFraction6 = bigFraction0.add(659L);
      double double0 = bigFraction0.TWO_FIFTHS.pow((double) 1L);
      assertEquals(0.4, double0, 0.01);
      
      bigFraction6.THREE_FIFTHS.pow((-3898L));
      int int0 = bigFraction4.getNumeratorAsInt();
      assertEquals(10659, int0);
      
      BigFraction bigFraction7 = bigFraction2.subtract(bigFraction1);
      BigFraction bigFraction8 = bigFraction6.add(bigFraction0);
      BigFraction bigFraction9 = bigFraction2.subtract(bigFraction7);
      bigFraction8.divide(37);
      bigFraction5.reduce();
      assertTrue(bigFraction5.equals((Object)bigFraction3));
      
      double double1 = bigFraction7.percentageValue();
      assertTrue(bigFraction1.equals((Object)bigFraction9));
      assertEquals(266574.92412746587, double1, 0.01);
      
      BigFraction bigFraction10 = bigFraction8.add((long) 37);
      assertEquals((byte) (-70), bigFraction10.byteValue());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract(0L);
      double double0 = bigFraction1.MINUS_ONE.doubleValue();
      assertEquals((-1.0), double0, 0.01);
      
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.multiply(2147483647L);
      BigFraction bigFraction3 = bigFraction2.ONE.pow(0L);
      BigFraction bigFraction4 = bigFraction1.multiply(bigFraction0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte)109;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction5 = bigFraction1.ONE_FIFTH.subtract(bigInteger0);
      BigFraction bigFraction6 = bigFraction2.TWO_FIFTHS.add(bigFraction1);
      double double1 = bigFraction4.pow((-1.0));
      assertEquals(2.7777777777777777, double1, 0.01);
      
      BigFraction bigFraction7 = bigFraction3.divide((-1944));
      bigFraction7.TWO_QUARTERS.getNumeratorAsInt();
      bigFraction2.pow(0.0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction8 = bigFraction7.subtract(bigInteger1);
      assertTrue(bigFraction3.equals((Object)bigFraction6));
      assertEquals((byte) (-10), bigFraction8.byteValue());
      
      bigFraction1.getDenominator();
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3166L));
      bigFraction0.ONE_QUARTER.pow(312.5872);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.ONE_THIRD.abs();
      bigFraction2.ONE_THIRD.multiply(0L);
      bigFraction2.MINUS_ONE.add(1122);
      BigFraction bigFraction3 = bigFraction1.subtract(603);
      bigFraction3.ONE_FIFTH.subtract(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction3.ZERO.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(733, 546);
      bigFraction0.ONE_THIRD.longValue();
      bigFraction0.MINUS_ONE.bigDecimalValue();
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.pow(546);
      int int0 = (-1);
      bigFraction1.ONE_FIFTH.multiply((-1));
      bigFraction1.THREE_FIFTHS.add(bigFraction0);
      bigFraction0.doubleValue();
      bigFraction0.FOUR_FIFTHS.getField();
      bigFraction0.negate();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, 1);
      bigFraction0.TWO_THIRDS.bigDecimalValue(1);
      BigFraction bigFraction1 = new BigFraction((double) 1);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.pow((long) 1);
      BigFraction bigFraction3 = bigFraction1.THREE_FIFTHS.divide(1);
      bigFraction3.ONE_HALF.longValue();
      bigFraction0.ONE_HALF.subtract(0L);
      BigFraction bigFraction4 = bigFraction0.divide(bigFraction1);
      bigFraction0.getNumeratorAsLong();
      assertTrue(bigFraction0.equals((Object)bigFraction4));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.ZERO.subtract(bigInteger0);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)29;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigFraction2.multiply(bigInteger1);
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract(37);
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.multiply((-714L));
      assertEquals((short) (-238), bigFraction2.shortValue());
      assertEquals((short) (-36), bigFraction1.shortValue());
      
      BigFraction bigFraction3 = BigFraction.getReducedFraction(941, 37);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.TWO.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.ONE.add((long) 941);
      assertEquals((short)25, bigFraction3.shortValue());
      assertEquals((short)942, bigFraction4.shortValue());
      
      bigFraction0.longValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = (-2267);
      int int1 = (-1);
      BigFraction bigFraction0 = new BigFraction((-2267), (-1));
      bigFraction0.MINUS_ONE.getNumeratorAsInt();
      bigFraction0.ONE_QUARTER.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = 2892L;
      BigFraction bigFraction0 = new BigFraction(2892L, 100L);
      bigFraction0.ZERO.divide(1073741824L);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.47463154792785645, (-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigFraction0.ONE_FIFTH.equals(bigInteger0);
      assertFalse(boolean0);
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
      String string0 = bigFraction2.TWO_THIRDS.toString();
      assertEquals("2 / 3", string0);
      assertEquals((short)1, bigFraction2.shortValue());
      
      BigFraction bigFraction3 = bigFraction0.divide(2792);
      bigFraction0.longValue();
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction3.FOUR_FIFTHS.divide((-2236));
      assertEquals((byte)0, bigFraction4.byteValue());
      
      BigFraction bigFraction5 = bigFraction1.ZERO.negate();
      bigFraction3.getField();
      int int0 = bigFraction3.compareTo(bigFraction1);
      assertEquals(0, int0);
      
      bigFraction5.reduce();
      assertTrue(bigFraction0.equals((Object)bigFraction5));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract((-1));
      String string0 = bigFraction1.TWO.toString();
      assertEquals("2", string0);
      
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.add((-3037));
      BigFraction bigFraction3 = bigFraction2.ONE_HALF.reduce();
      bigFraction0.negate();
      BigFraction bigFraction4 = bigFraction1.reciprocal();
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction5 = bigFraction3.TWO_THIRDS.multiply(bigInteger0);
      BigFraction bigFraction6 = bigFraction3.multiply(1672L);
      bigFraction1.equals(bigFraction6);
      assertEquals((byte)1, bigFraction1.byteValue());
      
      BigFraction bigFraction7 = BigFraction.TWO_FIFTHS;
      int int0 = bigFraction6.compareTo(bigFraction7);
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertEquals(1, int0);
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertEquals((byte)36, bigFraction2.byteValue());
      assertFalse(bigFraction6.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.multiply(1939);
      bigFraction1.percentageValue();
      BigFraction bigFraction2 = bigFraction0.divide((long) 1939);
      BigFraction bigFraction3 = bigFraction1.add(1939);
      bigFraction3.ONE_THIRD.hashCode();
      BigFraction bigFraction4 = bigFraction2.divide((long) 1939);
      bigFraction4.ONE_QUARTER.getDenominatorAsInt();
      bigFraction2.ONE_THIRD.multiply(bigFraction4);
      bigFraction3.toString();
      BigFraction bigFraction5 = bigFraction4.subtract(bigInteger0);
      bigFraction5.TWO_THIRDS.multiply(bigInteger0);
      bigFraction2.hashCode();
      int int0 = 467;
      bigFraction2.THREE_FIFTHS.compareTo(bigFraction1);
      bigFraction3.TWO_QUARTERS.reduce();
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue(467, (-766));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.ZERO.getNumeratorAsLong();
      bigFraction0.FOUR_FIFTHS.add(0L);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.subtract(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.ONE.bigDecimalValue(1215);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(bigInteger0);
      bigFraction1.THREE_FIFTHS.divide(bigFraction0);
      bigFraction0.floatValue();
      long long0 = 336L;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.mod(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 609);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.divide(557);
      bigFraction1.ONE_QUARTER.getNumeratorAsLong();
      bigFraction0.TWO_QUARTERS.doubleValue();
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      bigFraction2.ZERO.compareTo(bigFraction0);
      bigFraction2.hashCode();
      BigFraction bigFraction3 = bigFraction2.add(1L);
      bigFraction1.toString();
      bigFraction3.divide(557);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 37;
      BigFraction bigFraction0 = new BigFraction((-916.748054), 37);
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.ZERO.longValue();
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.divide(bigFraction1);
      bigFraction2.TWO_THIRDS.getNumeratorAsLong();
      bigFraction0.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(1798);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = (-957);
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-2330), (-957));
      bigFraction0.ONE.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-957), 161);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.negate();
      assertEquals((short)0, bigFraction2.shortValue());
      
      BigFraction bigFraction3 = bigFraction1.add((-509));
      long long0 = bigFraction3.getDenominatorAsLong();
      assertEquals((short) (-507), bigFraction3.shortValue());
      assertEquals(5L, long0);
      
      BigFraction bigFraction4 = bigFraction1.add(2904L);
      assertEquals((byte)89, bigFraction4.byteValue());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1177, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }
}
