/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 00:37:53 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(341L);
      bigFraction0.floatValue();
      BigFraction bigFraction2 = bigFraction1.multiply((-635));
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(709.2763028651464, (-1185));
      byte[] byteArray0 = new byte[6];
      bigFraction0.ZERO.intValue();
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 2147483644;
      int int1 = (-2147483628);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = new BigFraction((-2147483628), 2147483644);
      bigFraction0.divide(bigFraction1);
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(217, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(2165L);
      bigFraction1.floatValue();
      bigFraction1.getDenominator();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(2165L);
      bigFraction1.floatValue();
      bigFraction1.getDenominatorAsInt();
      bigFraction1.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(2165L);
      bigFraction1.percentageValue();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-3544L));
      bigFraction1.TWO_FIFTHS.subtract(1367L);
      bigFraction1.doubleValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert infinite value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.3381449580192566);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger1);
      BigFraction bigFraction2 = bigFraction0.pow((-3554L));
      BigFraction bigFraction3 = bigFraction1.negate();
      bigFraction3.ONE_THIRD.negate();
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      bigFraction4.floatValue();
      bigFraction2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction0.floatValue();
      bigFraction1.bigDecimalValue(3);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-602.96));
      bigFraction0.percentageValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.divide(bigInteger0);
      bigFraction0.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.3381449580192566);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger1);
      BigFraction bigFraction2 = bigFraction1.pow((-2025L));
      // Undeclared exception!
      try { 
        bigFraction2.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.49030399322509766);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction1.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction0.pow(1573L);
      bigFraction1.compareTo(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.negate();
      bigFraction1.toString();
      BigFraction bigFraction3 = BigFraction.ONE;
      bigFraction3.hashCode();
      BigFraction bigFraction4 = bigFraction3.abs();
      bigFraction3.toString();
      BigFraction bigFraction5 = bigFraction3.multiply((long) 1);
      bigFraction0.toString();
      bigFraction3.hashCode();
      BigFraction bigFraction6 = bigFraction1.abs();
      bigFraction5.toString();
      bigFraction6.FOUR_FIFTHS.bigDecimalValue(1, 1);
      bigFraction6.TWO.divide(bigInteger1);
      bigFraction4.multiply((-1089L));
      bigFraction6.doubleValue();
      bigFraction4.toString();
      bigFraction2.pow(707);
      BigFraction.getReducedFraction(1, 707);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte) (-76);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.ONE_QUARTER.multiply(bigInteger0);
      bigFraction0.ONE_QUARTER.compareTo(bigFraction1);
      bigFraction0.doubleValue();
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.subtract((-2L));
      bigFraction2.ONE_THIRD.pow(1.0);
      BigFraction bigFraction3 = bigFraction0.add(4503599627370495L);
      bigFraction3.THREE_QUARTERS.percentageValue();
      bigFraction3.getDenominatorAsInt();
      BigFraction bigFraction4 = bigFraction0.add((long) 1);
      BigFraction bigFraction5 = bigFraction4.FOUR_FIFTHS.multiply(1L);
      bigFraction5.ZERO.add(4503599627370495L);
      bigFraction0.divide(bigFraction2);
      bigFraction0.multiply(2147483554);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction2.ONE_QUARTER.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.add((-2014L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.ONE.subtract(bigInteger0);
      bigFraction1.ONE.getField();
      BigFraction bigFraction3 = bigFraction0.divide(972L);
      bigFraction3.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction3.reduce();
      bigFraction0.pow(5.3309980844740146E-6);
      bigFraction3.TWO.negate();
      bigFraction3.pow((-531.0));
      bigFraction3.doubleValue();
      bigFraction2.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.3381449580192566);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger1);
      BigFraction bigFraction2 = bigFraction1.pow((-2025L));
      bigFraction1.compareTo(bigFraction0);
      bigFraction1.negate();
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      BigFraction bigFraction4 = bigFraction3.THREE_QUARTERS.add(0);
      bigFraction4.FOUR_FIFTHS.subtract((long) 0);
      bigFraction2.floatValue();
      bigFraction3.getField();
      bigFraction2.pow((-2519.587));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.TWO_QUARTERS.intValue();
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction1.getNumeratorAsInt();
      bigFraction1.reduce();
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction1.negate();
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      bigFraction2.floatValue();
      bigFraction1.bigDecimalValue(1);
      bigFraction2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = (-3743L);
      BigFraction bigFraction0 = new BigFraction((-3738L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction2 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction1.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction1.ONE_HALF.doubleValue();
      bigFraction0.equals(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1059.766));
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction0.floatValue();
      bigFraction0.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-602.96));
      bigFraction0.TWO.subtract(571L);
      bigFraction0.floatValue();
      bigFraction0.percentageValue();
      bigFraction0.divide(571L);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.pow(bigInteger0);
      BigFraction bigFraction1 = new BigFraction(0.3381449580192566);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.add(bigInteger2);
      BigFraction bigFraction3 = bigFraction2.pow((-2025L));
      bigFraction2.compareTo(bigFraction1);
      bigFraction2.negate();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte)18;
      BigInteger bigInteger3 = new BigInteger(byteArray0);
      BigFraction bigFraction4 = new BigFraction(bigInteger3);
      bigFraction4.floatValue();
      bigFraction3.toString();
      bigFraction2.hashCode();
      bigFraction4.abs();
      bigFraction2.percentageValue();
      bigFraction3.getNumerator();
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.49030399322509766, 0.0, 627);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.subtract((-1397L));
      bigFraction0.ONE_FIFTH.compareTo(bigFraction1);
      BigFraction bigFraction3 = BigFraction.ZERO;
      BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.negate();
      bigFraction3.TWO_FIFTHS.getNumeratorAsInt();
      bigFraction3.FOUR_FIFTHS.percentageValue();
      bigFraction1.pow(2371);
      bigFraction1.hashCode();
      BigFraction bigFraction5 = BigFraction.getReducedFraction(685, 40);
      bigFraction5.THREE_FIFTHS.hashCode();
      bigFraction0.multiply((-1129L));
      bigFraction4.subtract(627);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction5.add(bigInteger0);
      BigFraction bigFraction6 = bigFraction0.subtract(351L);
      bigFraction5.pow(0L);
      bigFraction2.divide(40);
      bigFraction6.multiply(2);
      // Undeclared exception!
      try { 
        bigFraction3.pow((-3372));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.pow((-1833L));
      int int0 = 2146273798;
      bigFraction1.ZERO.pow(2146273798);
      BigFraction bigFraction2 = bigFraction1.reduce();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.ONE_HALF.add(bigInteger0);
      bigFraction3.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.THREE_FIFTHS.add(bigInteger0);
      bigFraction4.ZERO.bigDecimalValue();
      bigFraction4.ZERO.divide(bigFraction2);
      BigFraction bigFraction5 = bigFraction2.multiply(37);
      // Undeclared exception!
      try { 
        bigFraction5.ONE_QUARTER.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction(0.3381449580192566);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.add(bigInteger1);
      BigFraction bigFraction3 = bigFraction2.pow((-2025L));
      bigFraction2.compareTo(bigFraction1);
      BigFraction bigFraction4 = bigFraction2.negate();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte)18;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigFraction0.floatValue();
      bigFraction3.toString();
      bigFraction2.hashCode();
      BigFraction bigFraction5 = BigFraction.MINUS_ONE;
      bigFraction5.TWO_THIRDS.reduce();
      bigFraction5.add(bigFraction4);
      bigFraction5.toString();
      bigFraction0.getNumeratorAsLong();
      bigFraction2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction(0.3381449580192566);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.add(bigInteger1);
      BigFraction bigFraction3 = bigFraction2.pow((-2025L));
      bigFraction2.compareTo(bigFraction1);
      BigFraction bigFraction4 = bigFraction2.negate();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte)18;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigFraction bigFraction5 = new BigFraction(bigInteger2);
      bigFraction5.floatValue();
      bigFraction3.toString();
      bigFraction4.hashCode();
      bigFraction3.abs();
      bigFraction1.toString();
      bigFraction2.intValue();
      BigFraction bigFraction6 = bigFraction2.multiply((long) 0);
      bigFraction6.doubleValue();
      bigFraction0.floatValue();
      bigFraction6.toString();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction1.pow((-2025L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction((-2643L));
      BigFraction bigFraction2 = bigFraction1.divide((-2643L));
      BigFraction bigFraction3 = BigFraction.TWO_QUARTERS;
      bigFraction3.getNumeratorAsInt();
      BigFraction bigFraction4 = BigFraction.getReducedFraction(5, 680);
      BigFraction bigFraction5 = new BigFraction((-556.0010947215646), 680);
      bigFraction4.subtract(bigFraction5);
      bigFraction2.toString();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction(0.3381449580192566);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.add(bigInteger1);
      BigFraction bigFraction3 = bigFraction2.pow((-2025L));
      bigFraction2.compareTo(bigFraction1);
      bigFraction2.negate();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[0] = (byte)52;
      byteArray0[2] = (byte)18;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigFraction0.longValue();
      bigFraction0.floatValue();
      bigFraction3.multiply(bigFraction0);
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.MINUS_ONE.abs();
      int int0 = (-1085);
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.add(bigFraction1);
      bigFraction1.divide((long) (-2146773501));
      bigFraction2.multiply((-1085));
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-2146773501), (-1085));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.49030399322509766);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(1573L);
      bigFraction0.compareTo(bigFraction0);
      BigFraction bigFraction2 = bigFraction0.negate();
      bigFraction0.toString();
      BigFraction bigFraction3 = BigFraction.ONE;
      bigFraction3.hashCode();
      bigFraction3.abs();
      bigFraction3.toString();
      bigFraction3.multiply((long) 1048576);
      bigFraction0.doubleValue();
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction2.multiply(bigInteger2);
      bigFraction4.TWO_FIFTHS.longValue();
      bigInteger1.toByteArray();
      BigFraction bigFraction5 = new BigFraction((-270.0));
      BigFraction bigFraction6 = bigFraction5.pow(0);
      bigFraction0.toString();
      bigFraction6.floatValue();
      bigFraction1.toString();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow((-1977L));
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.negate();
      bigFraction2.toString();
      BigFraction bigFraction3 = BigFraction.ONE;
      bigFraction2.hashCode();
      BigFraction bigFraction4 = bigFraction2.abs();
      bigFraction1.toString();
      BigFraction bigFraction5 = bigFraction4.multiply((-2505L));
      bigFraction3.doubleValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigFraction4.multiply(bigInteger2);
      bigInteger1.toByteArray();
      BigFraction bigFraction6 = new BigFraction((double) (-1));
      bigFraction6.pow(245);
      BigFraction bigFraction7 = BigFraction.ONE_THIRD;
      bigFraction5.equals(bigFraction7);
      bigFraction5.getNumeratorAsInt();
      bigFraction5.add(bigInteger2);
      bigFraction2.subtract(bigInteger2);
      BigFraction bigFraction8 = new BigFraction((-2237.72379939), 1573L, 2147479470);
      // Undeclared exception!
      try { 
        bigFraction7.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.49030399322509766);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction1.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.pow(1573L);
      bigFraction1.compareTo(bigFraction0);
      BigFraction bigFraction3 = bigFraction1.negate();
      bigFraction1.toString();
      BigFraction bigFraction4 = BigFraction.ONE;
      BigFraction bigFraction5 = BigFraction.ONE_FIFTH;
      bigFraction3.longValue();
      bigFraction0.floatValue();
      // Undeclared exception!
      try { 
        bigFraction2.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.49030399322509766);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction1.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction0.pow(1573L);
      bigFraction1.compareTo(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.negate();
      bigFraction1.toString();
      BigFraction bigFraction3 = BigFraction.ONE;
      bigFraction3.hashCode();
      BigFraction bigFraction4 = bigFraction3.abs();
      bigFraction3.toString();
      BigFraction bigFraction5 = bigFraction3.multiply((long) 1);
      bigFraction0.toString();
      bigFraction3.hashCode();
      BigFraction bigFraction6 = bigFraction1.abs();
      bigFraction5.toString();
      bigFraction6.TWO.divide(bigInteger1);
      bigFraction4.multiply((-1089L));
      bigFraction6.doubleValue();
      bigFraction4.toString();
      bigFraction2.pow(707);
      BigFraction.getReducedFraction(1, 707);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3743L));
      BigFraction bigFraction1 = new BigFraction((-3743L), (-3743L));
      bigFraction1.ONE_FIFTH.getNumeratorAsInt();
      BigFraction bigFraction2 = BigFraction.THREE_FIFTHS;
      bigFraction0.toString();
      bigFraction1.multiply((-3743L));
      bigFraction1.doubleValue();
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
      bigFraction3.toString();
      // Undeclared exception!
      try { 
        bigFraction3.pow(2147483624);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = new BigFraction(2.4438014030456543, (-790));
      bigFraction0.compareTo(bigFraction1);
      bigFraction0.longValue();
      bigFraction0.floatValue();
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      bigFraction0.multiply(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction(0.3381449580192566);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.add(bigInteger1);
      BigFraction bigFraction3 = bigFraction2.pow((-2025L));
      bigFraction2.compareTo(bigFraction1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)18;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigFraction bigFraction4 = new BigFraction(bigInteger2);
      bigFraction4.floatValue();
      bigFraction3.toString();
      bigFraction2.hashCode();
      BigFraction bigFraction5 = bigFraction4.abs();
      bigFraction0.toString();
      bigFraction5.pow((int) (byte)18);
      BigFraction bigFraction6 = BigFraction.ONE_THIRD;
      Object object0 = new Object();
      bigFraction6.equals(object0);
      BigFraction bigFraction7 = BigFraction.ZERO;
      bigFraction7.getNumeratorAsInt();
      bigFraction3.add(bigInteger0);
      bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction8 = null;
      try {
        bigFraction8 = new BigFraction((-6.461509354879894E29), 0, (byte)91);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -646,150,935,487,989,400,000,000,000,000 to fraction (9,223,372,036,854,775,807/-1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(575L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.ONE.pow(bigInteger0);
      bigFraction1.compareTo(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.negate();
      bigFraction0.toString();
      BigFraction bigFraction3 = BigFraction.ONE;
      bigFraction2.hashCode();
      BigFraction bigFraction4 = bigFraction1.abs();
      bigFraction4.toString();
      BigFraction bigFraction5 = bigFraction2.multiply(9007199254740990L);
      bigFraction5.doubleValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction6 = bigFraction2.multiply(bigInteger1);
      bigInteger0.toByteArray();
      BigFraction bigFraction7 = new BigFraction(9.863720960170636E228);
      BigFraction bigFraction8 = bigFraction4.pow((-1));
      bigFraction2.equals((Object) null);
      bigFraction8.getNumeratorAsInt();
      bigFraction6.add(bigInteger1);
      BigFraction bigFraction9 = BigFraction.TWO_FIFTHS;
      bigFraction9.subtract(bigInteger0);
      BigFraction bigFraction10 = new BigFraction(1838.4328130278464, 9.863720960170636E228, 803);
      BigFraction bigFraction11 = null;
      try {
        bigFraction11 = new BigFraction(bigInteger0, bigInteger1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction0.pow((-1852.783397231));
      bigFraction1.TWO_THIRDS.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction0.abs();
      BigFraction bigFraction3 = bigFraction2.divide(bigFraction1);
      int int0 = 2139559354;
      // Undeclared exception!
      try { 
        bigFraction3.MINUS_ONE.bigDecimalValue(2139559354, 2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = 1.2731089175321841E-5;
      long long0 = (-456L);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-456L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction(0.3381449580192566);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.add(bigInteger1);
      BigFraction bigFraction3 = bigFraction2.pow((-2025L));
      bigFraction2.compareTo(bigFraction1);
      bigFraction2.negate();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)18;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigFraction bigFraction4 = new BigFraction(bigInteger2);
      bigFraction4.floatValue();
      bigFraction3.toString();
      bigFraction2.hashCode();
      bigFraction4.abs();
      bigFraction0.toString();
      BigFraction bigFraction5 = new BigFraction(27073L);
      bigFraction5.multiply((-648L));
      bigFraction1.doubleValue();
      bigFraction3.floatValue();
      bigFraction3.toString();
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction(0.3381449580192566);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.add(bigInteger1);
      BigFraction bigFraction3 = bigFraction2.pow((-2025L));
      bigFraction2.compareTo(bigFraction1);
      bigFraction2.negate();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)18;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigFraction3.TWO_FIFTHS.getField();
      BigFraction.getReducedFraction(1114, (byte)18);
      BigFraction bigFraction4 = new BigFraction(bigInteger2);
      bigFraction4.floatValue();
      bigFraction3.toString();
      bigFraction2.hashCode();
      bigFraction4.abs();
      bigFraction0.toString();
      BigFraction bigFraction5 = new BigFraction(27073L);
      bigFraction5.multiply((-648L));
      bigFraction3.floatValue();
      bigFraction3.toString();
      bigFraction2.bigDecimalValue();
      bigFraction2.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction0.toString();
      BigFraction bigFraction2 = BigFraction.ONE;
      bigFraction2.hashCode();
      BigFraction bigFraction3 = bigFraction2.abs();
      bigFraction2.toString();
      bigFraction2.multiply((long) 1);
      bigFraction0.doubleValue();
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction1.multiply(bigInteger2);
      bigInteger1.toByteArray();
      bigFraction3.ONE_FIFTH.divide(bigInteger0);
      bigFraction2.add(bigInteger0);
      bigFraction3.bigDecimalValue(1, 1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.49030399322509766);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction1.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.pow(1573L);
      bigFraction1.compareTo(bigFraction0);
      BigFraction bigFraction3 = bigFraction1.negate();
      bigFraction1.toString();
      BigFraction bigFraction4 = BigFraction.ONE;
      bigFraction4.hashCode();
      bigFraction4.abs();
      bigFraction4.toString();
      bigFraction4.multiply((long) 1);
      bigFraction1.doubleValue();
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction3.multiply(bigInteger2);
      bigInteger1.toByteArray();
      BigFraction bigFraction5 = new BigFraction((-270.0));
      BigFraction bigFraction6 = bigFraction5.pow(1);
      bigFraction1.equals(bigFraction1);
      bigFraction6.getNumeratorAsInt();
      bigFraction4.add(bigInteger0);
      bigFraction2.subtract(bigInteger2);
      BigFraction bigFraction7 = null;
      try {
        bigFraction7 = new BigFraction(1, (-270.0), 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3743L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      BigFraction bigFraction3 = BigFraction.ONE_HALF;
      BigFraction bigFraction4 = bigFraction3.pow((-3743L));
      bigFraction3.add(bigFraction1);
      BigFraction bigFraction5 = BigFraction.FOUR_FIFTHS;
      bigFraction1.divide(bigFraction5);
      bigFraction0.ONE_THIRD.multiply(bigFraction4);
      BigFraction bigFraction6 = null;
      try {
        bigFraction6 = new BigFraction((-2127), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(2009, 2009);
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-730), 2009);
      BigFraction bigFraction3 = bigFraction2.TWO_THIRDS.multiply(934L);
      BigFraction bigFraction4 = new BigFraction(291L);
      bigFraction1.multiply((long) (byte) (-85));
      bigFraction3.doubleValue();
      bigFraction0.floatValue();
      bigFraction1.toString();
      bigFraction0.pow(1);
      Object object0 = new Object();
      bigFraction4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 443;
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-656), 443);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ZERO.subtract(bigFraction0);
      int int1 = (-1583);
      bigFraction2.TWO.reduce();
      int int2 = 37;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1583), 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2883L);
      bigFraction0.TWO_QUARTERS.getNumeratorAsInt();
      bigFraction0.ONE.intValue();
      bigFraction0.FOUR_FIFTHS.pow((long) 1);
      bigFraction0.ONE_HALF.add(3007L);
      bigFraction0.pow(3222.48);
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction1.TWO_THIRDS.longValue();
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.pow(747);
      BigFraction bigFraction3 = bigFraction2.TWO_THIRDS.multiply(bigFraction1);
      BigFraction bigFraction4 = BigFraction.getReducedFraction(747, 1);
      BigFraction bigFraction5 = bigFraction0.divide(bigFraction1);
      bigFraction5.TWO_FIFTHS.percentageValue();
      bigFraction5.THREE_QUARTERS.longValue();
      BigFraction bigFraction6 = bigFraction0.TWO.divide(bigFraction3);
      bigFraction0.MINUS_ONE.multiply(bigFraction3);
      bigFraction4.FOUR_FIFTHS.divide(bigFraction5);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ONE_FIFTH.reciprocal();
      BigFraction bigFraction7 = bigFraction1.multiply(bigInteger0);
      bigFraction4.doubleValue();
      BigFraction.getReducedFraction((-2142943512), 1);
      bigFraction7.multiply(958);
      bigFraction1.subtract(1);
      bigFraction4.ONE_QUARTER.getNumeratorAsInt();
      bigFraction6.percentageValue();
      bigFraction4.bigDecimalValue();
      bigFraction3.add((-5000));
      bigFraction5.pow((-1834.472616));
      bigFraction4.floatValue();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction(0.3381449580192566);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.add(bigInteger1);
      BigFraction bigFraction3 = bigFraction2.pow((-2025L));
      bigFraction2.compareTo(bigFraction1);
      bigFraction2.negate();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)18;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigFraction bigFraction4 = new BigFraction(bigInteger2);
      bigFraction4.floatValue();
      bigFraction3.toString();
      bigFraction2.hashCode();
      bigFraction4.abs();
      bigFraction0.toString();
      BigFraction bigFraction5 = new BigFraction(27073L);
      bigFraction5.multiply((-648L));
      bigFraction1.doubleValue();
      bigFraction3.floatValue();
      bigFraction3.toString();
      bigFraction2.pow((int) (byte)91);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(575L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.ONE.pow(bigInteger0);
      bigFraction1.TWO_QUARTERS.pow(bigInteger0);
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      bigFraction2.ONE.pow(9007199254740990L);
      BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
      bigFraction3.TWO_FIFTHS.divide(bigFraction2);
      BigFraction bigFraction4 = new BigFraction((-2127), (-2127));
      bigFraction4.TWO_FIFTHS.pow((-1826.5799));
      bigFraction0.MINUS_ONE.multiply(bigInteger0);
      bigFraction0.subtract(bigFraction3);
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction(287.7787971000382, (-2127), (-2127));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 287.779 to fraction after -2,127 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(2009, 2009);
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-730), 2009);
      BigFraction bigFraction3 = bigFraction2.TWO_THIRDS.multiply(934L);
      bigFraction3.ONE.toString();
      bigFraction1.floatValue();
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-602.96));
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction1 = bigFraction0.multiply((-1075));
      bigFraction1.abs();
      int int0 = (-1637);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1637));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3743L));
      BigFraction bigFraction1 = bigFraction0.ONE.divide((-3743L));
      bigFraction1.ONE_FIFTH.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction2.longValue();
      bigFraction2.getDenominator();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.1736722704824842E-12);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction1.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction1.add(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.pow((long) 1);
      bigFraction3.compareTo(bigFraction2);
      bigFraction0.negate();
      bigFraction0.toString();
      BigFraction bigFraction4 = BigFraction.ONE;
      BigFraction bigFraction5 = BigFraction.THREE_QUARTERS;
      bigFraction5.hashCode();
      BigFraction bigFraction6 = bigFraction2.abs();
      bigFraction6.toString();
      BigFraction bigFraction7 = bigFraction5.multiply((long) 0);
      bigFraction1.doubleValue();
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction7.multiply(bigInteger2);
      BigInteger bigInteger3 = BigInteger.ONE;
      bigInteger3.toByteArray();
      BigFraction bigFraction8 = new BigFraction((-610.56831749584));
      BigFraction bigFraction9 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction10 = bigFraction9.pow((-101));
      BigFraction bigFraction11 = new BigFraction((double) 0);
      bigFraction11.equals(bigFraction2);
      bigFraction9.getNumeratorAsInt();
      bigFraction1.add(bigInteger2);
      bigFraction7.subtract(bigInteger3);
      BigFraction bigFraction12 = new BigFraction(1067.0, 3.1703428771123754E-10, 2147483643);
      // Undeclared exception!
      try { 
        bigFraction10.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(575L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE.pow(bigInteger0);
      bigFraction1.TWO_QUARTERS.pow(bigInteger0);
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      bigFraction2.ONE.pow(9007199254740990L);
      BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
      // Undeclared exception!
      try { 
        bigFraction3.TWO_FIFTHS.divide(bigFraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-602.96));
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      bigFraction0.floatValue();
      BigFraction.getReducedFraction(4123, Integer.MAX_VALUE);
      bigFraction0.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.ONE_HALF.compareTo(bigFraction0);
      bigFraction0.longValue();
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.49030399322509766);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction1.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.add(bigInteger1);
      BigFraction bigFraction3 = bigFraction0.pow(1573L);
      bigFraction1.compareTo(bigFraction0);
      BigFraction bigFraction4 = bigFraction1.negate();
      bigFraction1.toString();
      BigFraction bigFraction5 = BigFraction.ONE;
      bigFraction5.hashCode();
      bigFraction5.abs();
      bigFraction5.toString();
      bigFraction5.multiply((long) 1);
      bigFraction1.doubleValue();
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction4.multiply(bigInteger2);
      bigInteger1.toByteArray();
      BigFraction bigFraction6 = new BigFraction((-270.0));
      BigFraction bigFraction7 = bigFraction6.pow(1);
      bigFraction2.equals(bigFraction1);
      bigFraction7.getNumeratorAsInt();
      bigFraction5.add(bigInteger0);
      bigFraction3.subtract(bigInteger2);
      BigFraction bigFraction8 = null;
      try {
        bigFraction8 = new BigFraction(1, (-270.0), 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.MINUS_ONE.bigDecimalValue(1620, 6);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1787.484));
      bigFraction0.ONE.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO.pow((long) 1);
      bigFraction1.TWO_FIFTHS.compareTo(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.negate();
      bigFraction2.ZERO.toString();
      bigFraction3.ONE.hashCode();
      BigFraction bigFraction4 = bigFraction0.abs();
      bigFraction4.toString();
      BigFraction bigFraction5 = bigFraction3.multiply((long) 1);
      bigFraction5.TWO_THIRDS.doubleValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction5.THREE_QUARTERS.multiply(bigInteger1);
      bigInteger1.toByteArray();
      bigFraction1.getDenominator();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.49030399322509766, 0.0, 627);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.subtract((-1397L));
      bigFraction0.ONE_FIFTH.compareTo(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.multiply((-1129L));
      BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.negate();
      bigFraction3.TWO_FIFTHS.getNumeratorAsInt();
      bigFraction3.FOUR_FIFTHS.percentageValue();
      bigFraction1.pow(2371);
      bigFraction1.hashCode();
      bigFraction4.ONE_THIRD.intValue();
      BigFraction bigFraction5 = BigFraction.getReducedFraction(685, 40);
      bigFraction5.THREE_FIFTHS.hashCode();
      BigFraction bigFraction6 = bigFraction0.multiply((-1129L));
      bigFraction4.subtract(627);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction5.add(bigInteger0);
      BigFraction bigFraction7 = bigFraction0.subtract(351L);
      bigFraction5.pow(0L);
      bigFraction2.divide(40);
      bigFraction7.multiply(2);
      bigFraction3.pow((-3372));
      bigFraction6.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.pow((-714L));
      BigFraction bigFraction3 = BigFraction.ONE_THIRD;
      bigFraction0.compareTo(bigFraction3);
      BigFraction bigFraction4 = bigFraction0.negate();
      bigFraction4.toString();
      bigFraction2.hashCode();
      BigFraction bigFraction5 = bigFraction1.abs();
      bigFraction3.toString();
      BigFraction bigFraction6 = bigFraction5.multiply((long) 1);
      bigFraction6.doubleValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction7 = bigFraction5.multiply(bigInteger0);
      bigInteger0.toByteArray();
      bigFraction3.pow(881);
      bigFraction7.equals("1 / 3");
      bigFraction3.getNumeratorAsInt();
      bigFraction6.add(bigInteger0);
      BigFraction bigFraction8 = bigFraction1.subtract(bigInteger0);
      bigFraction8.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(575L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.ONE.pow(bigInteger0);
      bigFraction1.TWO_QUARTERS.pow(bigInteger0);
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      bigFraction2.ONE.pow(9007199254740990L);
      BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
      BigFraction bigFraction4 = bigFraction3.TWO_FIFTHS.divide(bigFraction2);
      bigFraction2.longValue();
      bigFraction2.floatValue();
      bigFraction2.hashCode();
      BigFraction bigFraction5 = bigFraction4.reduce();
      bigFraction5.percentageValue();
      bigFraction5.ZERO.getDenominatorAsLong();
      BigFraction bigFraction6 = bigFraction0.abs();
      bigFraction6.FOUR_FIFTHS.getNumeratorAsInt();
      bigFraction6.bigDecimalValue();
      bigFraction5.negate();
      BigFraction bigFraction7 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.getDenominatorAsLong();
      bigFraction7.toString();
      bigFraction4.getNumerator();
      bigFraction0.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.49030399322509766, 0.0, 627);
      BigFraction bigFraction1 = new BigFraction(0.49030399322509766, 627);
      bigFraction1.THREE_FIFTHS.subtract((-1397L));
      bigFraction0.ONE_FIFTH.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.multiply((-1129L));
      bigFraction2.THREE_FIFTHS.negate();
      bigFraction2.TWO_FIFTHS.getNumeratorAsInt();
      bigFraction2.FOUR_FIFTHS.percentageValue();
      bigFraction1.pow(2371);
      bigFraction1.hashCode();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-602.96));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigInteger0.toByteArray();
      BigFraction bigFraction2 = bigFraction1.pow(3952);
      bigFraction1.equals(bigFraction2);
      bigFraction2.getNumeratorAsInt();
      bigFraction1.add(bigInteger0);
      bigFraction0.subtract(bigInteger0);
      bigFraction0.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2093L));
      bigFraction0.negate();
      bigFraction0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.longValue();
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.reduce();
      bigFraction1.percentageValue();
      bigFraction2.getDenominatorAsLong();
      bigFraction2.abs();
      bigFraction2.getNumeratorAsInt();
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction3 = new BigFraction(1083.3814114183, 1083.3814114183, 827);
      BigFraction bigFraction4 = bigFraction3.negate();
      BigFraction bigFraction5 = bigFraction4.pow((int) (byte) (-62));
      bigFraction5.getDenominatorAsLong();
      bigFraction2.toString();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.reduce();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      int int0 = 429;
      bigFraction0.ZERO.compareTo(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.THREE_FIFTHS.subtract((long) 429);
      BigFraction bigFraction4 = bigFraction3.MINUS_ONE.add(bigInteger0);
      bigFraction4.multiply(bigFraction2);
      BigFraction bigFraction5 = bigFraction3.ZERO.multiply(bigInteger0);
      bigFraction1.ONE_QUARTER.bigDecimalValue(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)114;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigFraction5.ONE_QUARTER.pow(bigInteger1);
      BigFraction bigFraction6 = bigFraction3.TWO_FIFTHS.add((long) 429);
      bigFraction6.ONE_FIFTH.getNumeratorAsLong();
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(429, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.49030399322509766, 0.0, 627);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.subtract((-1397L));
      bigFraction0.ONE_FIFTH.compareTo(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.multiply((-1129L));
      BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.negate();
      bigFraction3.TWO_FIFTHS.getNumeratorAsInt();
      bigFraction3.FOUR_FIFTHS.percentageValue();
      bigFraction1.pow(2371);
      bigFraction1.hashCode();
      BigFraction bigFraction5 = BigFraction.getReducedFraction(685, 40);
      bigFraction5.THREE_FIFTHS.hashCode();
      bigFraction0.multiply((-1129L));
      bigFraction4.subtract(627);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction5.add(bigInteger0);
      BigFraction bigFraction6 = bigFraction0.subtract(351L);
      bigFraction5.pow(0L);
      bigFraction2.divide(40);
      bigFraction6.multiply(2);
      bigFraction3.pow((-3372));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(0);
      bigFraction1.ONE_THIRD.getDenominatorAsInt();
      bigFraction1.ONE_QUARTER.subtract((-717L));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.TWO_THIRDS.multiply(3);
      bigFraction0.ONE.getField();
      bigFraction0.ONE_QUARTER.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      bigFraction2.TWO.multiply(bigInteger0);
      bigFraction2.ONE_HALF.abs();
      BigInteger bigInteger1 = bigFraction2.getNumerator();
      BigFraction bigFraction3 = bigFraction2.reciprocal();
      bigInteger0.isProbablePrime(1483);
      BigFraction bigFraction4 = bigFraction3.add(0);
      bigFraction3.getNumeratorAsLong();
      bigFraction2.getField();
      bigFraction2.getNumeratorAsLong();
      bigFraction1.add(1923);
      BigFraction bigFraction5 = bigFraction1.subtract(bigInteger0);
      bigFraction1.reduce();
      bigFraction4.add(1483);
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction6 = bigFraction1.subtract((long) 1923);
      bigFraction6.ONE_THIRD.pow((-3564L));
      bigFraction5.getDenominator();
      bigFraction5.reduce();
      bigFraction4.multiply(bigInteger1);
      bigFraction5.intValue();
      bigFraction4.negate();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-459), 4);
      int int0 = 0;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.add(0);
      bigFraction0.intValue();
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.add(bigFraction0);
      bigFraction0.bigDecimalValue();
      bigFraction0.floatValue();
      BigFraction bigFraction3 = bigFraction1.negate();
      bigFraction1.reciprocal();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.ONE_FIFTH.divide((-114));
      bigFraction3.pow(bigInteger0);
      bigFraction3.ZERO.getNumeratorAsInt();
      bigFraction3.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(4153, (-459));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = 2935890503282001226L;
      BigFraction bigFraction0 = new BigFraction(2935890503282001226L);
      bigFraction0.THREE_FIFTHS.bigDecimalValue();
      bigFraction0.ONE.bigDecimalValue();
      bigFraction0.TWO_QUARTERS.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction1.ONE_QUARTER.abs();
      BigInteger bigInteger1 = bigFraction0.getDenominator();
      int int0 = 1;
      BigFraction.getReducedFraction(1, 1);
      BigFraction bigFraction2 = bigFraction0.ONE.pow(2935890503282001226L);
      bigFraction2.ONE.subtract(bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(364);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.multiply(851);
      bigFraction1.TWO_QUARTERS.intValue();
      bigFraction0.longValue();
      BigFraction bigFraction2 = bigFraction1.add((-3443));
      bigFraction2.ONE_HALF.divide((-3497L));
      BigFraction bigFraction3 = bigFraction2.add((long) (-3443));
      bigFraction0.equals(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue(852);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.TWO.pow((-608L));
      BigFraction bigFraction1 = bigFraction0.ZERO.pow(737L);
      bigFraction1.ONE.reciprocal();
      int int0 = 236;
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.add(236);
      bigFraction2.THREE_FIFTHS.getDenominatorAsLong();
      try { 
        bigFraction0.FOUR_FIFTHS.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1554), 2775);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.divide((long) (-1554));
      bigFraction1.ZERO.toString();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.TWO_THIRDS.pow(0.0);
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      bigFraction1.floatValue();
      bigFraction1.hashCode();
      bigFraction0.TWO_THIRDS.subtract(bigFraction2);
      bigFraction2.pow(749.1988386);
      bigFraction2.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction0.reduce();
      bigFraction3.ONE_HALF.floatValue();
      bigFraction1.toString();
      bigFraction2.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-602.96));
      bigFraction0.floatValue();
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-592.4449137587));
      int int0 = 824;
      bigFraction0.ZERO.pow((long) 824);
      int int1 = 3874;
      bigFraction0.abs();
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction1.FOUR_FIFTHS.pow((long) 824);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(143);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.pow(3);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.add(bigInteger0);
      bigFraction0.getDenominatorAsInt();
      bigFraction0.getDenominator();
      bigFraction0.hashCode();
      bigFraction0.add((-1));
      bigFraction1.subtract(1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.TWO_THIRDS.add(bigInteger0);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(2009, 2009);
      int int0 = (-730);
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-730), 2009);
      BigFraction bigFraction3 = bigFraction2.TWO_THIRDS.multiply(934L);
      bigFraction3.ONE.toString();
      bigFraction1.ONE.bigDecimalValue();
      bigFraction1.multiply((int) (byte) (-85));
      bigFraction0.THREE_FIFTHS.abs();
      // Undeclared exception!
      try { 
        bigFraction2.ONE_THIRD.bigDecimalValue((-730));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.multiply((-1));
      bigFraction1.ONE_FIFTH.hashCode();
      bigFraction0.getField();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-23);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      int int0 = (-1498);
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.divide((-1498));
      bigFraction1.FOUR_FIFTHS.percentageValue();
      bigFraction1.ZERO.add(bigFraction0);
      bigFraction0.longValue();
      bigFraction0.intValue();
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-1), (-1));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.TWO_THIRDS.multiply((long) (-1));
      // Undeclared exception!
      try { 
        bigFraction2.TWO_QUARTERS.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(7.808670894670738E56, (-790));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 780,867,089,467,073,800,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(541, 1859);
      bigFraction0.TWO_THIRDS.getNumeratorAsInt();
      bigFraction0.percentageValue();
      bigFraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4091);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.ONE.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.abs();
      bigFraction2.ONE_QUARTER.longValue();
      bigFraction1.TWO.multiply(1);
      // Undeclared exception!
      try { 
        bigFraction1.ONE_FIFTH.bigDecimalValue(4091);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 526;
      BigFraction bigFraction0 = new BigFraction(526, 526);
      bigFraction0.toString();
      BigFraction bigFraction1 = bigFraction0.add((-1));
      BigFraction bigFraction2 = bigFraction1.TWO.subtract(2619L);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction2.THREE_FIFTHS.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction0.ONE_QUARTER.pow(814.062777059);
      // Undeclared exception!
      try { 
        bigInteger0.divideAndRemainder(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(575L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.ONE.pow(bigInteger0);
      bigFraction1.TWO_QUARTERS.pow(bigInteger0);
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      bigFraction2.ONE.pow(9007199254740990L);
      BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
      BigFraction bigFraction4 = bigFraction3.TWO_FIFTHS.divide(bigFraction2);
      bigFraction2.longValue();
      bigFraction2.floatValue();
      bigFraction2.hashCode();
      BigFraction bigFraction5 = bigFraction4.reduce();
      bigFraction5.percentageValue();
      bigFraction5.ZERO.getDenominatorAsLong();
      BigFraction bigFraction6 = bigFraction0.abs();
      bigFraction6.FOUR_FIFTHS.getNumeratorAsInt();
      bigFraction6.bigDecimalValue();
      bigFraction5.negate();
      BigFraction bigFraction7 = bigFraction2.pow(4);
      bigFraction0.getDenominatorAsLong();
      bigFraction7.toString();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2996), (-686));
      bigFraction0.pow(3);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = (-2087);
      BigFraction bigFraction0 = new BigFraction((-2087));
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction1.ONE_QUARTER.abs();
      bigFraction0.multiply(bigFraction1);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.reduce();
      bigFraction1.FOUR_FIFTHS.bigDecimalValue();
      bigFraction1.TWO.getNumeratorAsInt();
      bigFraction1.TWO_FIFTHS.subtract((-1417));
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.multiply(bigFraction1);
      BigFraction.getReducedFraction((-2550), (-490));
      bigFraction2.ONE_QUARTER.hashCode();
      BigFraction bigFraction3 = bigFraction0.multiply(0L);
      BigFraction bigFraction4 = bigFraction3.multiply((long) 2);
      BigFraction bigFraction5 = bigFraction4.MINUS_ONE.subtract((long) (-1417));
      bigFraction5.MINUS_ONE.percentageValue();
      bigFraction3.ONE_THIRD.divide((-1417));
      bigFraction4.ONE_QUARTER.divide((-2036L));
      BigFraction bigFraction6 = bigFraction0.multiply(2);
      bigFraction6.THREE_FIFTHS.getNumeratorAsInt();
      BigFraction bigFraction7 = bigFraction3.multiply(bigFraction6);
      BigInteger bigInteger0 = null;
      try { 
        bigFraction7.MINUS_ONE.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5648769086999809661L, 5648769086999809661L);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.negate();
      bigFraction0.getField();
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.subtract(656);
      bigFraction2.THREE_FIFTHS.add(bigFraction0);
      bigFraction2.TWO_QUARTERS.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.negate();
      BigFraction bigFraction4 = bigFraction3.TWO_THIRDS.multiply(656);
      bigFraction0.getDenominatorAsLong();
      bigFraction3.ONE_FIFTH.getField();
      bigFraction0.ONE.compareTo(bigFraction1);
      bigFraction3.add((-1L));
      bigFraction4.compareTo(bigFraction1);
      bigFraction3.compareTo(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.divide(1373);
      byte[] byteArray0 = new byte[4];
      bigFraction0.TWO_FIFTHS.subtract(1373);
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)14;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.multiply(bigInteger0);
      bigFraction0.intValue();
      bigFraction2.add(bigFraction1);
      bigFraction0.doubleValue();
      bigFraction2.divide((int) (byte)14);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction((-1384L), (-1384L));
      bigFraction0.multiply((-1397L));
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction2.THREE_QUARTERS.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction1.FOUR_FIFTHS.hashCode();
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction2.MINUS_ONE.reciprocal();
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction2.MINUS_ONE.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2960, 2960);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.abs();
      BigFraction bigFraction2 = new BigFraction(2463.824212235154, 2960, (-1));
      BigFraction bigFraction3 = bigFraction2.TWO_FIFTHS.negate();
      bigFraction0.compareTo(bigFraction2);
      bigFraction2.bigDecimalValue();
      bigFraction3.FOUR_FIFTHS.getField();
      BigFraction bigFraction4 = bigFraction1.divide(9218868437227405312L);
      BigFraction bigFraction5 = new BigFraction(2463.824212235154);
      BigFraction bigFraction6 = bigFraction4.TWO_FIFTHS.add(bigFraction5);
      bigFraction0.ZERO.equals(bigFraction6);
      bigFraction3.getNumeratorAsLong();
      bigFraction2.TWO_THIRDS.toString();
      BigFraction bigFraction7 = bigFraction0.add(bigFraction1);
      bigFraction1.floatValue();
      bigFraction0.toString();
      bigFraction7.ONE_HALF.subtract((long) (-1));
      // Undeclared exception!
      try { 
        bigFraction7.bigDecimalValue(0, 495);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = (-48);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-1.0), (-48));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1 to fraction (-9,223,372,036,854,775,806/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1787.484));
      bigFraction0.ONE.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO.pow((long) 1);
      bigFraction1.TWO_FIFTHS.compareTo(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.negate();
      bigFraction2.ZERO.toString();
      bigFraction3.ONE.hashCode();
      BigFraction bigFraction4 = bigFraction0.abs();
      bigFraction2.ONE_QUARTER.toString();
      BigFraction bigFraction5 = bigFraction3.multiply((long) 1);
      bigFraction5.TWO_THIRDS.doubleValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction5.THREE_QUARTERS.multiply(bigInteger1);
      bigInteger1.toByteArray();
      BigFraction bigFraction6 = bigFraction2.pow((-1));
      bigFraction5.equals(bigFraction6);
      bigFraction6.ONE_HALF.getNumeratorAsInt();
      BigFraction bigFraction7 = bigFraction4.add(bigInteger1);
      bigFraction7.subtract(bigInteger1);
      bigFraction6.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.ONE_THIRD.reduce();
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.divide(bigFraction1);
      bigFraction2.ZERO.toString();
      int int0 = 0;
      // Undeclared exception!
      try { 
        bigFraction1.TWO_QUARTERS.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3743L));
      bigFraction0.ONE.divide((-3743L));
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = 100L;
      long long1 = (-143L);
      BigFraction bigFraction0 = new BigFraction(100L, (-143L));
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.TWO_FIFTHS.multiply(bigInteger0);
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction1.TWO.abs();
      int int0 = (-1010);
      BigFraction bigFraction2 = bigFraction1.ZERO.divide((-1010));
      // Undeclared exception!
      try { 
        bigFraction2.ONE_HALF.bigDecimalValue((-1553), (-569));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.percentageValue();
      bigFraction0.ONE_HALF.intValue();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 1);
      bigFraction1.TWO_THIRDS.equals(bigFraction0);
      bigFraction1.TWO_FIFTHS.getDenominatorAsInt();
      bigFraction0.doubleValue();
      bigFraction0.ONE_FIFTH.longValue();
      bigFraction0.ONE_FIFTH.getNumeratorAsLong();
      bigFraction0.bigDecimalValue();
      bigFraction0.MINUS_ONE.pow(5);
      bigFraction0.percentageValue();
      bigFraction1.getDenominatorAsInt();
      bigFraction0.percentageValue();
      BigFraction bigFraction2 = bigFraction1.reduce();
      bigFraction2.THREE_FIFTHS.multiply(bigFraction0);
      BigFraction bigFraction3 = bigFraction1.add(bigFraction2);
      BigFraction bigFraction4 = bigFraction3.ONE.reciprocal();
      bigFraction4.THREE_FIFTHS.divide((-1686L));
      bigFraction1.subtract((-2278L));
      bigFraction1.pow((long) 5);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.reciprocal();
      BigFraction bigFraction2 = bigFraction0.reduce();
      bigFraction1.TWO.divide(3);
      BigFraction bigFraction3 = bigFraction0.reciprocal();
      BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.subtract(bigFraction1);
      bigFraction3.THREE_QUARTERS.getNumeratorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction5 = bigFraction2.ONE_FIFTH.multiply(bigInteger0);
      bigFraction5.TWO.intValue();
      BigFraction bigFraction6 = bigFraction0.subtract(bigFraction2);
      bigFraction1.TWO.intValue();
      BigFraction bigFraction7 = bigFraction6.TWO_QUARTERS.add(4503599627370495L);
      BigFraction bigFraction8 = bigFraction1.pow(1241);
      bigFraction8.TWO.intValue();
      bigFraction0.THREE_FIFTHS.pow((long) 2);
      bigFraction6.getNumeratorAsInt();
      bigFraction7.doubleValue();
      bigFraction1.pow((long) 3);
      bigFraction4.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-853), (-853));
      bigFraction0.ONE_QUARTER.getNumeratorAsLong();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.multiply(bigInteger1);
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.THREE_FIFTHS.add(4);
      bigFraction3.TWO_THIRDS.subtract(bigInteger2);
      double double0 = bigFraction0.percentageValue();
      assertEquals(100.0, double0, 0.01);
      
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction0.add((-4267615245585081135L));
      BigFraction bigFraction5 = bigFraction4.TWO_QUARTERS.add(1006);
      assertEquals((byte) (-18), bigFraction5.byteValue());
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(1, int0);
      
      bigFraction2.doubleValue();
      BigFraction bigFraction6 = bigFraction1.add(1L);
      assertEquals((byte)1, bigFraction0.byteValue());
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
  }
}
