/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:56:13 GMT 2020
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.999999971068509, 0);
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.ONE_QUARTER.equals(bigFraction1);
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-772), 2556);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction2.subtract(bigInteger0);
      BigFraction bigFraction4 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction5 = bigFraction3.subtract(0);
      BigFraction bigFraction6 = new BigFraction(2565.741750591087);
      BigFraction bigFraction7 = BigFraction.ONE_QUARTER;
      bigFraction7.floatValue();
      bigFraction5.divide(4208363204685324176L);
      bigFraction2.bigDecimalValue(0);
      bigFraction7.getNumeratorAsInt();
      bigFraction7.multiply(bigFraction6);
      bigFraction3.longValue();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = new BigFraction(2147483258, 2.3100480183046895E179, 4058);
      bigFraction0.pow(1397);
      bigFraction1.abs();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = 2.911273911649914E-4;
      BigFraction bigFraction0 = new BigFraction(2.911273911649914E-4);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((-153L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(Integer.MAX_VALUE, (-328.15465682182), Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction.getReducedFraction((-685), (-1603));
      // Undeclared exception!
      try { 
        bigFraction0.ONE.bigDecimalValue(2147483635, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1952), (-3066));
      byte[] byteArray0 = new byte[6];
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.subtract((-2758L));
      bigFraction1.TWO_QUARTERS.pow((-2264));
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)52;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.multiply(bigInteger0);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)30;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction0.TWO.subtract(bigInteger1);
      bigFraction3.THREE_FIFTHS.add(236L);
      bigFraction3.ONE_FIFTH.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.negate();
      BigFraction bigFraction5 = bigFraction4.THREE_FIFTHS.add(bigInteger1);
      bigFraction5.ONE_QUARTER.reduce();
      bigFraction4.TWO_FIFTHS.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction2.pow(bigInteger1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1431655765, 1431655765, 1431655765);
      BigFraction bigFraction1 = bigFraction0.ONE.negate();
      bigFraction1.ONE.abs();
      bigFraction0.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.003926370146842E-8);
      bigFraction0.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.ZERO.getNumeratorAsLong();
      bigFraction0.ONE.divide(1160);
      bigFraction0.getNumeratorAsInt();
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.pow((-1L));
      bigFraction1.TWO.getField();
      bigFraction0.equals(bigFraction0);
      bigFraction0.pow(1599L);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      Object object0 = new Object();
      BigFraction bigFraction1 = new BigFraction((-3799L));
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.getDenominatorAsInt();
      bigFraction2.negate();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.ONE_HALF.floatValue();
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.ONE.pow(0.0);
      BigFraction bigFraction1 = bigFraction0.ONE.multiply(100L);
      bigFraction0.getNumeratorAsInt();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-18);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.equals(bigFraction1);
      Object object0 = new Object();
      BigFraction bigFraction2 = BigFraction.ZERO;
      bigFraction2.longValue();
      Object object1 = new Object();
      bigFraction1.equals(object0);
      bigFraction2.toString();
      bigFraction0.toString();
      bigFraction2.pow(756.22652474);
      BigFraction bigFraction3 = new BigFraction(1.3315567073436674E-11);
      bigFraction2.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        bigFraction0.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.MINUS_ONE.getField();
      BigFraction bigFraction1 = new BigFraction(0.007117051111094952, 488);
      BigFraction bigFraction2 = bigFraction1.subtract((-256));
      bigFraction0.toString();
      bigFraction0.subtract(488);
      bigFraction2.toString();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-256), (-256));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction0.longValue();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.ONE_HALF.floatValue();
      bigFraction0.getNumeratorAsInt();
      bigFraction0.add(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction1.bigDecimalValue(2, 2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.add(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.ONE_QUARTER.divide(bigFraction1);
      bigFraction3.ONE_FIFTH.getNumeratorAsLong();
      bigFraction3.THREE_FIFTHS.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.pow(bigInteger0);
      bigFraction4.ONE.divide((-9223372036854775808L));
      BigFraction bigFraction5 = bigFraction0.subtract(100);
      bigFraction2.reduce();
      bigFraction5.bigDecimalValue();
      bigFraction1.getNumerator();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = new BigFraction(0);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.ONE.add(bigFraction1);
      bigFraction0.ONE_QUARTER.toString();
      BigFraction bigFraction3 = bigFraction0.add(0);
      bigFraction3.getNumeratorAsInt();
      bigFraction2.ONE.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction2.ONE.add(bigFraction3);
      BigFraction bigFraction5 = bigFraction4.pow((-780L));
      // Undeclared exception!
      try { 
        bigFraction5.THREE_QUARTERS.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(0.09630453116449189, 1431655765);
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      BigFraction bigFraction3 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction4 = bigFraction3.subtract(bigFraction2);
      bigFraction2.longValue();
      BigFraction bigFraction5 = bigFraction4.divide(bigFraction0);
      bigFraction1.getDenominator();
      bigFraction5.getField();
      BigFraction bigFraction6 = bigFraction1.divide(bigFraction3);
      bigFraction2.negate();
      bigFraction0.getNumeratorAsInt();
      bigFraction5.getNumeratorAsInt();
      bigFraction3.add(bigFraction0);
      bigFraction6.subtract(1431655765);
      BigFraction bigFraction7 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction8 = BigFraction.ONE_FIFTH;
      bigFraction2.add(bigFraction6);
      bigFraction5.divide((-42));
      bigFraction1.multiply(131072L);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.ONE.add(bigFraction1);
      bigFraction0.ONE_QUARTER.toString();
      BigFraction bigFraction3 = bigFraction0.add(0);
      bigFraction3.getNumeratorAsInt();
      bigFraction2.ONE.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction1.TWO_THIRDS.add((long) 0);
      bigFraction4.pow(0);
      BigFraction bigFraction5 = bigFraction2.ONE.add(bigFraction3);
      BigFraction bigFraction6 = bigFraction5.ONE.subtract(0);
      // Undeclared exception!
      try { 
        bigFraction6.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-780.47), 0);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 0);
      int int0 = (-634);
      // Undeclared exception!
      try { 
        bigFraction1.pow((-634));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.999999971068509, 0);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(4, 2556);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction4 = bigFraction2.subtract(0);
      BigFraction bigFraction5 = new BigFraction(2565.741750591087);
      BigFraction bigFraction6 = BigFraction.ONE_QUARTER;
      bigFraction6.floatValue();
      bigFraction4.divide(4208363204685324176L);
      bigFraction1.bigDecimalValue(0);
      bigFraction6.getNumeratorAsInt();
      bigFraction6.multiply(bigFraction5);
      bigFraction2.longValue();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 1431655765;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(5.790291758828013E133, 128.50498, 1431655765);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 57,902,917,588,280,130,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.intValue();
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction1.pow(1);
      bigFraction0.equals(bigFraction1);
      BigFraction bigFraction2 = BigFraction.THREE_FIFTHS;
      bigFraction0.MINUS_ONE.multiply(bigFraction2);
      BigFraction bigFraction3 = bigFraction1.add(bigFraction0);
      bigFraction1.reciprocal();
      BigFraction bigFraction4 = bigFraction0.subtract(2791L);
      bigFraction3.subtract((-2220));
      bigFraction4.divide((long) (-2220));
      bigFraction4.multiply(2032L);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.toString();
      BigFraction bigFraction3 = bigFraction1.add(0);
      bigFraction0.getNumeratorAsInt();
      bigFraction0.subtract(bigFraction1);
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction3.add(bigFraction0);
      BigFraction bigFraction5 = bigFraction1.subtract(2);
      BigFraction bigFraction6 = BigFraction.MINUS_ONE;
      BigFraction bigFraction7 = bigFraction2.divide(bigFraction6);
      bigFraction4.add(bigFraction7);
      // Undeclared exception!
      try { 
        bigFraction5.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0);
      BigFraction bigFraction1 = new BigFraction((-1869.06183122));
      bigFraction0.pow((double) 0);
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      bigFraction2.bigDecimalValue(0);
      bigFraction0.multiply(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.doubleValue();
      bigFraction0.getDenominator();
      BigFraction bigFraction1 = new BigFraction((-780.47));
      bigFraction1.pow((-780.47));
      bigFraction0.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.intValue();
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction1.pow(1);
      Object object0 = new Object();
      bigFraction2.longValue();
      Object object1 = new Object();
      bigFraction1.equals(bigFraction0);
      bigFraction2.toString();
      BigFraction bigFraction3 = new BigFraction((-1L), 1, 52);
      bigFraction3.toString();
      BigFraction bigFraction4 = BigFraction.THREE_QUARTERS;
      bigFraction4.pow(1119.1);
      BigFraction bigFraction5 = new BigFraction((-1118.40021));
      bigFraction3.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.add(bigInteger0);
      bigFraction3.equals(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.TWO_FIFTHS.doubleValue();
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.equals(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.intValue();
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction1.pow(1);
      bigFraction0.equals(bigFraction1);
      bigFraction2.FOUR_FIFTHS.bigDecimalValue(1);
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      bigFraction0.MINUS_ONE.multiply(bigFraction3);
      bigFraction0.reciprocal();
      BigFraction bigFraction4 = bigFraction1.subtract((long) 0);
      bigFraction2.subtract(2147221535);
      bigFraction3.divide(5L);
      bigFraction4.multiply(9007199221186560L);
      bigFraction3.getField();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1909.13845286241));
      bigFraction0.getDenominator();
      BigFraction bigFraction1 = new BigFraction(0.0);
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      bigFraction2.pow(0.0);
      bigFraction0.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.intValue();
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction1.pow(1);
      bigFraction0.equals(bigFraction1);
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      bigFraction1.intValue();
      BigFraction bigFraction4 = bigFraction2.add(bigFraction0);
      bigFraction1.reciprocal();
      BigFraction bigFraction5 = bigFraction4.subtract(6722166367014452318L);
      bigFraction1.subtract((-2420));
      bigFraction5.divide((long) (-307));
      BigFraction bigFraction6 = new BigFraction((-1.0));
      bigFraction6.multiply((-461L));
      bigFraction0.pow(2397);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = new BigFraction(0);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.ONE.add(bigFraction1);
      bigFraction0.ONE_QUARTER.toString();
      bigFraction0.add(0);
      BigFraction bigFraction3 = bigFraction2.subtract(0);
      bigFraction1.intValue();
      bigFraction3.add(bigFraction0);
      bigFraction3.reciprocal();
      BigFraction bigFraction4 = BigFraction.getReducedFraction(1576, (-2804));
      bigFraction4.doubleValue();
      // Undeclared exception!
      try { 
        bigFraction2.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3738.0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-220L));
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.add((-220L));
      BigFraction bigFraction2 = bigFraction1.add((-1094L));
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.MINUS_ONE.bigDecimalValue(4, 4);
      bigFraction0.ONE.add(bigInteger0);
      bigFraction1.pow(4144.839124827787);
      bigFraction0.TWO_THIRDS.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.pow(2045);
      BigFraction bigFraction4 = bigFraction1.MINUS_ONE.multiply((-220L));
      bigFraction4.THREE_QUARTERS.getField();
      BigFraction bigFraction5 = bigFraction2.divide(bigInteger0);
      BigFraction bigFraction6 = bigFraction3.negate();
      BigFraction bigFraction7 = bigFraction2.ONE_THIRD.reciprocal();
      bigFraction5.THREE_QUARTERS.longValue();
      BigFraction bigFraction8 = bigFraction7.ONE_HALF.multiply(1L);
      bigFraction3.TWO_THIRDS.pow((long) 4);
      bigFraction3.ZERO.toString();
      bigFraction6.getDenominatorAsInt();
      bigFraction5.TWO_FIFTHS.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction8.THREE_QUARTERS.bigDecimalValue((-862));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.ONE_QUARTER.getNumeratorAsInt();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.reduce();
      bigFraction1.intValue();
      bigFraction2.compareTo(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.subtract((-2145408783));
      bigFraction1.toString();
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      bigFraction4.getNumerator();
      bigFraction4.getNumeratorAsInt();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.multiply(bigInteger0);
      bigFraction1.doubleValue();
      BigFraction bigFraction5 = new BigFraction((-1), (-2622L));
      bigFraction5.getNumerator();
      bigFraction3.pow((double) 0);
      bigFraction4.abs();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.intValue();
      BigFraction bigFraction1 = bigFraction0.subtract(0);
      BigFraction bigFraction2 = new BigFraction((long) 0);
      bigFraction2.getDenominatorAsLong();
      bigFraction1.bigDecimalValue();
      bigFraction2.abs();
      BigFraction bigFraction3 = new BigFraction(0.0, 1721.0475449063, 0);
      bigFraction3.abs();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.ONE_FIFTH.pow((-1.0));
      // Undeclared exception!
      try { 
        bigFraction0.pow((-638L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.toString();
      BigFraction bigFraction1 = bigFraction0.add((-3294));
      bigFraction1.getNumeratorAsInt();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction2 = BigFraction.THREE_QUARTERS;
      bigFraction1.add(bigFraction2);
      BigFraction bigFraction3 = bigFraction2.subtract(472);
      bigFraction0.reduce();
      bigFraction1.intValue();
      bigFraction0.compareTo(bigFraction3);
      BigFraction bigFraction4 = bigFraction1.subtract(1927);
      bigFraction2.toString();
      bigFraction0.TWO_QUARTERS.pow((double) 3);
      BigInteger bigInteger0 = bigFraction4.getNumerator();
      bigFraction2.getNumeratorAsInt();
      BigFraction bigFraction5 = bigFraction3.multiply(bigInteger0);
      bigFraction5.doubleValue();
      bigFraction3.getNumerator();
      bigFraction1.pow((double) (-3293));
      bigFraction5.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 1049;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.4700000000000273, 1049);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0.47 to fraction (172,291,033,122/366,576,666,217)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.subtract((-3294));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)95;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.ONE_QUARTER.subtract(bigInteger0);
      bigFraction1.ONE_QUARTER.getDenominatorAsLong();
      bigFraction1.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction1.abs();
      bigFraction2.abs();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-780.47), 0);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction1.longValue();
      bigFraction1.divide(bigFraction0);
      bigFraction2.getDenominator();
      bigFraction0.getField();
      BigFraction bigFraction3 = bigFraction2.divide(bigFraction0);
      BigFraction bigFraction4 = bigFraction1.ONE_FIFTH.negate();
      BigFraction bigFraction5 = bigFraction3.ONE_QUARTER.subtract(1);
      bigFraction5.THREE_FIFTHS.intValue();
      bigFraction3.ONE_THIRD.add(bigFraction5);
      bigFraction0.reciprocal();
      bigFraction4.subtract(0L);
      BigFraction bigFraction6 = bigFraction2.subtract((-307));
      BigFraction bigFraction7 = bigFraction6.divide(5L);
      bigFraction7.multiply(1223L);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.intValue();
      bigFraction0.negate();
      // Undeclared exception!
      try { 
        bigFraction0.pow(2146959487);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction1.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.multiply(432L);
      BigFraction bigFraction4 = bigFraction2.negate();
      bigFraction2.toString();
      BigFraction bigFraction5 = bigFraction2.divide(bigInteger0);
      bigFraction1.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.valueOf(432L);
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      BigFraction bigFraction6 = bigFraction4.add(bigInteger1);
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction7 = bigFraction3.add(bigFraction4);
      BigFraction bigFraction8 = bigFraction5.subtract(bigFraction6);
      BigFraction bigFraction9 = BigFraction.TWO;
      bigFraction7.equals("|y~gf0W4Yi qg}F9D{z");
      BigFraction bigFraction10 = bigFraction8.divide(bigInteger1);
      BigFraction bigFraction11 = BigFraction.ONE_THIRD;
      BigFraction bigFraction12 = bigFraction11.multiply(0L);
      BigFraction bigFraction13 = BigFraction.THREE_FIFTHS;
      bigFraction13.getNumerator();
      bigFraction6.getNumerator();
      BigFraction bigFraction14 = bigFraction12.divide((-1762));
      bigFraction4.getDenominator();
      bigFraction14.pow((double) (-146));
      BigFraction bigFraction15 = bigFraction3.abs();
      bigFraction15.pow(bigInteger2);
      bigFraction10.floatValue();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      bigFraction0.intValue();
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.divide(bigInteger0);
      bigFraction2.TWO_FIFTHS.reciprocal();
      bigFraction1.equals(bigFraction2);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.divide(bigInteger1);
      BigFraction bigFraction4 = bigFraction0.multiply((long) 0);
      bigFraction4.getNumerator();
      bigFraction3.getNumerator();
      BigFraction bigFraction5 = bigFraction1.divide((-146));
      bigFraction4.getDenominator();
      bigFraction5.pow(1.0);
      bigFraction1.abs();
      BigFraction bigFraction6 = BigFraction.ONE;
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction6.pow(bigInteger2);
      bigFraction1.floatValue();
      bigFraction3.doubleValue();
      bigFraction2.subtract(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = new BigFraction((-780.47), 0);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction1.longValue();
      bigFraction1.divide(bigFraction0);
      bigFraction2.getDenominator();
      bigFraction0.getField();
      bigFraction2.divide(bigFraction0);
      bigFraction1.ONE_FIFTH.negate();
      int int1 = 1;
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction(1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.ONE.add(bigFraction1);
      bigFraction0.ONE_QUARTER.toString();
      BigFraction bigFraction3 = bigFraction0.add(0);
      // Undeclared exception!
      try { 
        bigFraction2.divide(bigFraction3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-780.47), 0);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction1.longValue();
      bigFraction1.divide(bigFraction0);
      bigFraction2.getDenominator();
      bigFraction0.getField();
      bigFraction0.getNumeratorAsInt();
      bigFraction2.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction1.add(bigFraction2);
      BigFraction bigFraction4 = bigFraction3.subtract((-781));
      bigFraction4.reduce();
      bigFraction1.intValue();
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(2045, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigFraction bigFraction2 = bigFraction1.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.multiply((-3958705157555305932L));
      bigFraction2.negate();
      bigFraction0.toString();
      BigFraction bigFraction4 = bigFraction3.divide(bigInteger0);
      bigFraction2.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.valueOf(1005228505694208L);
      bigInteger0.subtract(bigInteger1);
      BigFraction bigFraction5 = bigFraction0.add(bigInteger0);
      bigFraction5.bigDecimalValue();
      BigFraction bigFraction6 = bigFraction4.add(bigFraction2);
      BigFraction bigFraction7 = bigFraction6.subtract(bigFraction3);
      BigFraction bigFraction8 = BigFraction.TWO;
      bigFraction5.equals("3 / 5");
      BigFraction bigFraction9 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction2.multiply((long) 243);
      bigFraction6.getNumerator();
      BigInteger bigInteger2 = bigFraction1.getNumerator();
      bigFraction5.divide((-146));
      bigFraction7.getDenominator();
      bigFraction4.pow(0.0);
      bigFraction1.abs();
      bigFraction3.pow(bigInteger2);
      BigFraction bigFraction10 = new BigFraction(432L);
      BigFraction.getReducedFraction(1164, 2922);
      bigFraction10.floatValue();
      bigFraction7.pow((-1683));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.ONE.add(bigFraction1);
      bigFraction0.ONE_QUARTER.toString();
      bigFraction0.add(0);
      bigFraction1.subtract((-1193));
      bigFraction0.floatValue();
      BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
      bigFraction3.divide((long) (-1193));
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue((-1193));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.subtract(bigInteger0);
      bigFraction0.getNumeratorAsInt();
      bigFraction2.getNumeratorAsInt();
      BigFraction bigFraction3 = new BigFraction((-1.0));
      BigFraction bigFraction4 = BigFraction.ONE;
      BigFraction bigFraction5 = bigFraction3.add(bigFraction4);
      bigFraction4.subtract((-48));
      BigFraction bigFraction6 = bigFraction4.reduce();
      bigFraction5.intValue();
      bigFraction6.compareTo(bigFraction5);
      bigFraction1.subtract(Integer.MAX_VALUE);
      bigFraction4.toString();
      BigInteger bigInteger1 = bigFraction5.getNumerator();
      BigFraction bigFraction7 = null;
      try {
        bigFraction7 = new BigFraction(bigInteger1, bigInteger1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.TWO_FIFTHS.doubleValue();
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction1 = bigFraction0.TWO.reciprocal();
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.FOUR_FIFTHS.multiply(432L);
      BigFraction bigFraction4 = bigFraction2.negate();
      bigFraction0.toString();
      BigFraction bigFraction5 = bigFraction0.TWO.divide(bigInteger0);
      bigFraction5.ZERO.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.valueOf(0L);
      BigInteger bigInteger2 = bigInteger1.subtract(bigInteger0);
      bigFraction2.add(bigInteger1);
      bigFraction2.bigDecimalValue();
      bigFraction2.add(bigFraction1);
      bigFraction4.subtract(bigFraction1);
      BigFraction bigFraction6 = BigFraction.TWO;
      bigFraction1.equals(bigFraction6);
      BigFraction bigFraction7 = bigFraction4.divide(bigInteger2);
      bigFraction7.FOUR_FIFTHS.multiply(0L);
      BigInteger bigInteger3 = bigFraction2.getNumerator();
      bigFraction2.getNumerator();
      BigFraction bigFraction8 = bigFraction6.divide((-146));
      bigFraction0.getDenominator();
      bigFraction3.pow((-9.084495133765657E196));
      bigFraction0.abs();
      BigFraction bigFraction9 = bigFraction3.pow(bigInteger3);
      bigFraction9.THREE_FIFTHS.multiply(Integer.MAX_VALUE);
      bigFraction6.floatValue();
      bigFraction9.reciprocal();
      bigFraction8.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-780.47), 0);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction1.longValue();
      BigFraction bigFraction3 = bigFraction1.divide(bigFraction0);
      bigFraction2.getDenominator();
      bigFraction0.getField();
      BigFraction bigFraction4 = bigFraction2.divide(bigFraction0);
      bigFraction1.ONE_FIFTH.negate();
      BigFraction bigFraction5 = bigFraction4.ONE_QUARTER.subtract(1);
      bigFraction5.THREE_FIFTHS.intValue();
      bigFraction4.ONE_THIRD.add(bigFraction5);
      BigFraction bigFraction6 = bigFraction0.reciprocal();
      bigFraction4.doubleValue();
      bigFraction3.compareTo(bigFraction2);
      bigFraction2.ONE_FIFTH.multiply(bigFraction0);
      BigFraction bigFraction7 = bigFraction5.add(bigFraction6);
      // Undeclared exception!
      try { 
        bigFraction7.ONE_THIRD.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(50, (-2594));
      bigFraction0.ONE_HALF.getDenominatorAsInt();
      bigFraction0.ONE.getField();
      bigFraction0.longValue();
      bigFraction0.ONE_THIRD.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.multiply(2);
      BigFraction bigFraction2 = bigFraction0.multiply((-1182));
      BigFraction bigFraction3 = bigFraction0.add(2);
      BigFraction bigFraction4 = bigFraction3.FOUR_FIFTHS.multiply(bigFraction2);
      bigFraction4.ONE.divide(bigFraction2);
      bigFraction3.TWO_QUARTERS.getField();
      BigFraction bigFraction5 = bigFraction2.TWO_THIRDS.subtract(9154082963658192752L);
      BigFraction bigFraction6 = bigFraction5.ONE_FIFTH.multiply(bigFraction1);
      BigFraction bigFraction7 = bigFraction6.ONE_HALF.add(30);
      BigFraction bigFraction8 = bigFraction1.abs();
      bigFraction7.getNumerator();
      bigFraction4.getNumerator();
      bigFraction2.divide(1067);
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      BigFraction bigFraction9 = bigFraction7.abs();
      BigFraction bigFraction10 = new BigFraction(629);
      bigFraction10.pow(bigInteger0);
      bigFraction8.floatValue();
      bigFraction9.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.getDenominatorAsLong();
      bigFraction0.TWO.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.add(1);
      BigFraction bigFraction2 = bigFraction1.subtract(0L);
      bigFraction1.TWO.hashCode();
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.subtract(1);
      bigFraction1.hashCode();
      bigFraction1.equals(bigFraction0);
      bigFraction2.getDenominator();
      BigFraction bigFraction4 = bigFraction1.subtract(0L);
      bigFraction3.pow((double) 1L);
      bigFraction4.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.multiply(bigFraction1);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction1.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.subtract(bigInteger0);
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction1.add(bigFraction2);
      BigFraction bigFraction4 = bigFraction3.subtract((-1042));
      BigFraction bigFraction5 = bigFraction2.reduce();
      bigFraction4.intValue();
      BigFraction bigFraction6 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction7 = BigFraction.ONE_THIRD;
      bigFraction6.compareTo(bigFraction7);
      BigFraction bigFraction8 = new BigFraction(5053, 5053);
      bigFraction8.subtract(1863);
      bigFraction3.toString();
      BigInteger bigInteger1 = bigFraction8.getNumerator();
      bigFraction3.getNumeratorAsInt();
      bigFraction5.multiply(bigInteger1);
      bigFraction2.doubleValue();
      bigFraction7.getNumerator();
      bigFraction0.pow((double) 2);
      BigFraction bigFraction9 = bigFraction2.divide(1);
      bigFraction9.pow(bigInteger0);
      bigFraction7.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 174;
      BigFraction bigFraction0 = new BigFraction(174, 174);
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.negate();
      bigFraction2.MINUS_ONE.abs();
      bigFraction0.toString();
      BigFraction bigFraction3 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction3.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.ONE_FIFTH.pow((-1.0));
      bigFraction0.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1909.13845286241));
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.multiply(5648769086999809661L);
      bigFraction0.THREE_QUARTERS.equals("{(");
      Object object0 = new Object();
      bigFraction0.TWO_QUARTERS.equals(object0);
      bigFraction0.MINUS_ONE.toString();
      bigFraction0.toString();
      bigFraction0.pow((-1909.13845286241));
      bigFraction1.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.ONE.add(bigFraction1);
      bigFraction0.ONE_QUARTER.toString();
      BigFraction bigFraction3 = bigFraction0.add(0);
      bigFraction3.getNumeratorAsInt();
      bigFraction2.ONE.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction2.ONE.add(bigFraction3);
      bigFraction4.ONE.subtract(0);
      bigFraction1.reduce();
      bigFraction2.MINUS_ONE.hashCode();
      bigFraction0.intValue();
      bigFraction1.compareTo(bigFraction3);
      BigFraction bigFraction5 = BigFraction.THREE_FIFTHS;
      bigFraction5.toString();
      bigFraction5.toString();
      bigFraction1.ONE_HALF.pow((double) 0);
      bigFraction0.pow(16.213053715780674);
      bigFraction2.getDenominatorAsInt();
      bigFraction2.toString();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1909.13845286241));
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.multiply(5648769086999809661L);
      bigFraction0.THREE_QUARTERS.equals("{(");
      Object object0 = new Object();
      bigFraction0.TWO_QUARTERS.equals(object0);
      BigFraction bigFraction2 = bigFraction0.subtract(1580);
      bigFraction1.toString();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      bigFraction2.getNumeratorAsInt();
      bigFraction1.multiply(bigInteger0);
      bigFraction0.doubleValue();
      BigFraction bigFraction3 = new BigFraction(685);
      bigFraction3.getNumerator();
      bigFraction0.pow((double) 1580);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = new BigFraction(725, 1);
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.TWO_FIFTHS.doubleValue();
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction1 = bigFraction0.TWO.reciprocal();
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.FOUR_FIFTHS.multiply(432L);
      BigFraction bigFraction4 = bigFraction2.negate();
      bigFraction0.toString();
      BigFraction bigFraction5 = bigFraction0.TWO.divide(bigInteger0);
      bigFraction5.ZERO.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.valueOf(0L);
      BigInteger bigInteger2 = bigInteger1.subtract(bigInteger0);
      bigFraction2.add(bigInteger1);
      bigFraction2.bigDecimalValue();
      bigFraction2.add(bigFraction1);
      bigFraction4.subtract(bigFraction1);
      BigFraction bigFraction6 = BigFraction.TWO;
      bigFraction1.equals(bigFraction6);
      BigFraction bigFraction7 = bigFraction4.divide(bigInteger2);
      bigFraction7.FOUR_FIFTHS.multiply(0L);
      BigInteger bigInteger3 = bigFraction2.getNumerator();
      bigFraction2.getNumerator();
      bigFraction6.divide((-146));
      bigFraction0.getDenominator();
      bigFraction3.pow((-9.084495133765657E196));
      bigFraction0.abs();
      bigFraction3.pow(bigInteger3);
      bigFraction6.floatValue();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction1.subtract(bigFraction0);
      bigFraction0.THREE_QUARTERS.subtract(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.subtract(0);
      bigFraction1.THREE_FIFTHS.add((long) 532);
      BigFraction.getReducedFraction(0, 1);
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-3985), 532);
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.subtract(0);
      bigFraction3.doubleValue();
      bigFraction2.TWO_THIRDS.getField();
      BigFraction bigFraction4 = new BigFraction(0);
      BigFraction bigFraction5 = BigFraction.getReducedFraction(0, 0);
      BigFraction bigFraction6 = bigFraction0.subtract(bigFraction4);
      bigFraction6.TWO.hashCode();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction4.THREE_QUARTERS.multiply(bigInteger0);
      bigFraction6.THREE_FIFTHS.add(bigInteger0);
      bigFraction0.getField();
      bigFraction0.getDenominatorAsLong();
      bigFraction4.ONE_QUARTER.percentageValue();
      BigFraction bigFraction7 = bigFraction4.add(532);
      BigFraction bigFraction8 = bigFraction5.subtract(bigInteger0);
      bigFraction7.MINUS_ONE.add(11);
      // Undeclared exception!
      try { 
        bigFraction8.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.reciprocal();
      bigFraction1.ONE_THIRD.getNumeratorAsLong();
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      bigFraction1.ONE_HALF.subtract(bigFraction2);
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(50, (-2594));
      bigFraction0.ONE_HALF.getDenominatorAsInt();
      bigFraction0.ONE.getField();
      bigFraction0.longValue();
      bigFraction0.ONE_THIRD.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.multiply(2);
      BigFraction bigFraction2 = bigFraction0.multiply((-1182));
      BigFraction bigFraction3 = bigFraction0.add(2);
      BigFraction bigFraction4 = bigFraction3.FOUR_FIFTHS.multiply(bigFraction2);
      bigFraction4.ONE.divide(bigFraction2);
      bigFraction3.TWO_QUARTERS.getField();
      BigFraction bigFraction5 = bigFraction2.TWO_THIRDS.subtract(9154082963658192752L);
      BigFraction bigFraction6 = bigFraction5.ONE_FIFTH.multiply(bigFraction1);
      bigFraction6.ONE_HALF.add(30);
      BigFraction bigFraction7 = bigFraction1.abs();
      BigFraction bigFraction8 = bigFraction7.multiply(0L);
      bigFraction8.FOUR_FIFTHS.multiply((-2119L));
      bigFraction2.TWO_FIFTHS.intValue();
      bigFraction2.getNumeratorAsInt();
      bigFraction2.subtract(1924L);
      bigFraction6.percentageValue();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-780.47), 0);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction1.longValue();
      BigFraction bigFraction3 = bigFraction1.divide(bigFraction0);
      bigFraction2.getDenominator();
      bigFraction0.getField();
      BigFraction bigFraction4 = bigFraction2.divide(bigFraction0);
      bigFraction1.ONE_FIFTH.negate();
      BigFraction bigFraction5 = bigFraction4.ONE_QUARTER.subtract(1);
      bigFraction5.THREE_FIFTHS.intValue();
      bigFraction4.ONE_THIRD.add(bigFraction5);
      BigFraction bigFraction6 = bigFraction0.reciprocal();
      bigFraction4.doubleValue();
      bigFraction3.compareTo(bigFraction2);
      BigFraction bigFraction7 = bigFraction5.add(bigFraction6);
      // Undeclared exception!
      try { 
        bigFraction7.ONE_THIRD.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.subtract((-3294));
      bigFraction1.ONE_QUARTER.getDenominatorAsLong();
      bigFraction1.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction1.abs();
      bigFraction2.abs();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1492);
      bigFraction0.ONE.bigDecimalValue(1);
      bigFraction0.THREE_FIFTHS.divide((long) 1492);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1492, (-699));
      bigFraction1.ONE.hashCode();
      bigFraction0.intValue();
      BigFraction bigFraction2 = bigFraction0.pow((long) 1492);
      BigFraction bigFraction3 = bigFraction1.subtract((long) 1492);
      BigFraction bigFraction4 = bigFraction3.reciprocal();
      BigFraction bigFraction5 = bigFraction4.multiply(2759L);
      bigFraction2.ONE_FIFTH.getNumeratorAsLong();
      bigFraction5.THREE_FIFTHS.add(401);
      BigFraction bigFraction6 = bigFraction2.subtract(bigFraction0);
      bigFraction6.MINUS_ONE.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction6.FOUR_FIFTHS.multiply(bigInteger0);
      bigFraction0.doubleValue();
      BigFraction bigFraction7 = bigFraction4.divide(bigFraction3);
      long long0 = (-1258L);
      // Undeclared exception!
      try { 
        bigFraction7.ONE_QUARTER.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-389.0), 1804.6, 629);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      bigFraction0.pow(829);
      bigFraction0.toString();
      bigFraction0.pow(0L);
      bigFraction0.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.abs();
      bigFraction1.THREE_FIFTHS.divide(bigFraction0);
      bigFraction1.pow(0L);
      bigFraction0.FOUR_FIFTHS.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction1.ONE_FIFTH.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.subtract(bigFraction1);
      BigFraction.getReducedFraction((-1), (-1));
      BigFraction bigFraction3 = bigFraction2.TWO_FIFTHS.multiply(1559);
      BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.multiply(1559);
      bigFraction0.percentageValue();
      bigFraction4.multiply((long) 1559);
      bigFraction0.subtract(9218868437227405312L);
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue(1559, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ONE.abs();
      bigFraction1.TWO_THIRDS.hashCode();
      int int0 = 1411;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.bigDecimalValue(1411);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1249L);
      BigFraction bigFraction1 = new BigFraction(1157L, (-160L));
      bigFraction0.TWO_THIRDS.getDenominatorAsInt();
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.abs();
      bigFraction1.toString();
      int int0 = (-1);
      BigFraction bigFraction4 = bigFraction1.TWO_THIRDS.divide(bigFraction2);
      bigFraction0.negate();
      bigFraction4.ZERO.getDenominatorAsLong();
      bigFraction3.THREE_FIFTHS.bigDecimalValue(549, 3);
      // Undeclared exception!
      try { 
        bigFraction3.ONE_THIRD.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.FOUR_FIFTHS.negate();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.negate();
      bigFraction1.ONE_THIRD.reciprocal();
      BigFraction bigFraction3 = bigFraction2.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.THREE_QUARTERS.add((-3166));
      bigFraction4.ONE.toString();
      bigFraction3.ONE_THIRD.doubleValue();
      bigFraction2.ONE_FIFTH.hashCode();
      bigFraction2.ONE_THIRD.multiply(bigInteger0);
      bigFraction1.THREE_QUARTERS.abs();
      BigFraction bigFraction5 = bigFraction0.reduce();
      BigFraction bigFraction6 = bigFraction2.ONE_FIFTH.subtract(1770);
      bigFraction5.ZERO.pow(2935890503282001226L);
      bigFraction6.ONE_QUARTER.pow((-1699.4));
      bigFraction6.THREE_FIFTHS.pow(1770);
      bigFraction1.subtract((-1736L));
      bigFraction2.getNumeratorAsLong();
      bigFraction2.negate();
      bigFraction1.add(bigFraction5);
      bigFraction5.pow((-1));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_THIRDS.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-4.590496588813841E-162), (-425.4850985674), (-3247));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -0 to fraction after -3,247 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 4995;
      BigFraction bigFraction0 = new BigFraction(4995, 4995);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.divide((-260L));
      bigFraction1.ONE_HALF.add(2734L);
      bigFraction1.THREE_QUARTERS.percentageValue();
      BigFraction bigFraction2 = bigFraction0.pow(4995);
      bigFraction2.TWO_FIFTHS.hashCode();
      bigFraction0.hashCode();
      bigFraction0.ZERO.reduce();
      bigFraction2.ONE_HALF.divide(1285);
      BigFraction.getReducedFraction((-5), (-576));
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      bigFraction2.add(bigFraction3);
      // Undeclared exception!
      try { 
        bigFraction2.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction2 = bigFraction0.ONE.subtract(bigFraction1);
      bigFraction2.reduce();
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-104);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.add(bigInteger0);
      bigFraction1.TWO_FIFTHS.longValue();
      bigFraction1.getNumeratorAsLong();
      bigFraction0.THREE_FIFTHS.hashCode();
      BigFraction bigFraction2 = BigFraction.THREE_FIFTHS;
      bigFraction2.ONE_THIRD.getDenominatorAsInt();
      bigFraction2.FOUR_FIFTHS.add((int) (byte) (-104));
      bigFraction0.TWO_QUARTERS.pow((double) 3);
      bigFraction2.ONE.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
      bigFraction3.ONE_FIFTH.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.reciprocal();
      bigFraction4.bigDecimalValue();
      bigFraction3.divide(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction0.pow((-1101));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.getDenominatorAsLong();
      bigFraction0.TWO.getDenominatorAsInt();
      int int0 = 100;
      BigFraction bigFraction1 = bigFraction0.add(100);
      BigFraction bigFraction2 = bigFraction1.subtract(0L);
      bigFraction1.TWO.hashCode();
      bigFraction2.FOUR_FIFTHS.subtract(100);
      bigFraction1.hashCode();
      bigFraction1.equals(bigFraction0);
      bigFraction2.getDenominator();
      bigFraction1.subtract(0L);
      bigFraction0.ONE_THIRD.multiply(bigFraction2);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction1.TWO.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 1231;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1231, 1231);
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.bigDecimalValue(1231, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.ZERO.bigDecimalValue();
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.divide(7910884519577875640L);
      bigFraction0.pow((-998.76014256));
      bigFraction0.percentageValue();
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.add(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.ONE_HALF.add(bigFraction0);
      bigFraction3.ONE.add(bigFraction0);
      bigFraction1.TWO_THIRDS.getDenominatorAsInt();
      bigFraction1.THREE_QUARTERS.compareTo(bigFraction0);
      BigFraction bigFraction4 = bigFraction1.FOUR_FIFTHS.subtract(1324L);
      bigFraction4.ONE_HALF.multiply(3);
      BigFraction bigFraction5 = bigFraction0.add(6722166367014452318L);
      bigFraction5.ONE_THIRD.longValue();
      bigFraction1.subtract(6722166367014452318L);
      bigFraction5.getNumerator();
      bigFraction0.longValue();
      BigFraction bigFraction6 = BigFraction.TWO_THIRDS;
      bigFraction5.TWO.add(bigFraction6);
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue(1421);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = (-850);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, (-850));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1909.13845286241));
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.multiply(5648769086999809661L);
      bigFraction0.THREE_QUARTERS.equals("{(");
      Object object0 = new Object();
      bigFraction0.TWO_QUARTERS.equals(object0);
      bigFraction0.MINUS_ONE.toString();
      bigFraction0.toString();
      bigFraction0.pow((-1909.13845286241));
      bigFraction1.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.subtract(bigInteger0);
      bigFraction2.subtract((-1));
      bigFraction1.ONE_HALF.floatValue();
      bigFraction0.add(bigFraction1);
      bigFraction0.divide((-1160L));
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1618);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.subtract(bigInteger0);
      bigFraction1.MINUS_ONE.divide((-7400L));
      BigFraction bigFraction2 = bigFraction0.abs();
      bigFraction2.floatValue();
      bigFraction2.ONE_HALF.negate();
      bigFraction1.MINUS_ONE.pow((-1));
      BigFraction bigFraction3 = bigFraction2.ONE_FIFTH.add(0L);
      bigFraction3.ONE_QUARTER.getNumeratorAsLong();
      bigFraction1.longValue();
      BigFraction bigFraction4 = bigFraction2.add(bigInteger0);
      BigFraction bigFraction5 = bigFraction2.reduce();
      bigFraction4.getField();
      bigFraction5.add((-292));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      bigFraction0.intValue();
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction1.FOUR_FIFTHS.divide(bigInteger0);
      bigFraction1.pow(1);
      bigFraction1.subtract(52);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.ONE_FIFTH.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction1.negate();
      BigFraction bigFraction3 = bigFraction2.ONE_HALF.add(bigFraction0);
      BigFraction bigFraction4 = bigFraction3.ZERO.pow((long) 1);
      bigFraction1.ONE_THIRD.hashCode();
      BigFraction bigFraction5 = bigFraction3.ONE_THIRD.reciprocal();
      bigFraction3.FOUR_FIFTHS.equals(bigFraction1);
      BigFraction bigFraction6 = bigFraction0.divide(bigFraction1);
      bigFraction1.divide(bigFraction6);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction4.ONE_QUARTER.add((-2703L));
      BigFraction bigFraction7 = bigFraction3.TWO_QUARTERS.multiply(bigInteger0);
      bigFraction7.FOUR_FIFTHS.pow((-2703L));
      bigFraction7.TWO_THIRDS.subtract((long) 1);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction6.TWO_THIRDS.multiply(bigInteger1);
      bigFraction2.TWO.compareTo(bigFraction5);
      bigFraction3.pow(500);
      BigInteger bigInteger2 = bigFraction3.getNumerator();
      bigFraction1.subtract(bigFraction5);
      bigFraction6.subtract(bigInteger2);
      bigFraction1.subtract(1);
      bigFraction3.reduce();
      bigFraction1.negate();
      bigFraction1.getField();
      // Undeclared exception!
      try { 
        bigFraction4.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.ONE.add(bigFraction1);
      bigFraction0.ONE_QUARTER.toString();
      BigFraction bigFraction3 = bigFraction0.add(0);
      bigFraction3.getNumeratorAsInt();
      bigFraction2.ONE.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction2.ONE.add(bigFraction3);
      BigFraction bigFraction5 = bigFraction4.ONE.subtract(0);
      BigFraction bigFraction6 = bigFraction1.reduce();
      bigFraction0.intValue();
      bigFraction1.compareTo(bigFraction3);
      bigFraction6.TWO_THIRDS.subtract(0);
      bigFraction2.toString();
      BigInteger bigInteger0 = bigFraction6.getNumerator();
      bigFraction1.getNumeratorAsInt();
      BigFraction bigFraction7 = bigFraction3.multiply(bigInteger0);
      bigFraction7.MINUS_ONE.doubleValue();
      bigFraction6.getNumerator();
      bigFraction5.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.multiply(1);
      double double0 = bigFraction1.ONE_FIFTH.doubleValue();
      assertEquals(0.2, double0, 0.01);
      
      bigFraction2.ONE.multiply(bigFraction1);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction1.ONE_FIFTH.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction0.TWO_QUARTERS.add(bigFraction1);
      assertEquals((byte)1, bigFraction3.byteValue());
      
      BigFraction bigFraction4 = bigFraction0.subtract(bigInteger1);
      BigFraction bigFraction5 = bigFraction4.reciprocal();
      BigFraction bigFraction6 = bigFraction1.multiply(bigFraction4);
      BigFraction bigFraction7 = bigFraction4.ONE.add(54);
      BigFraction bigFraction8 = bigFraction4.pow(1);
      String string0 = bigFraction8.ONE_HALF.toString();
      assertEquals("1 / 2", string0);
      
      BigFraction bigFraction9 = bigFraction8.multiply(bigFraction2);
      BigFraction bigFraction10 = bigFraction5.subtract((long) 0);
      bigFraction4.ONE_THIRD.floatValue();
      bigFraction9.getDenominator();
      bigFraction7.divide(54);
      bigFraction10.TWO.divide(1189);
      BigFraction bigFraction11 = bigFraction10.divide(bigFraction8);
      BigFraction bigFraction12 = bigFraction9.negate();
      BigFraction bigFraction13 = bigFraction7.THREE_FIFTHS.divide(1);
      assertTrue(bigFraction13.equals((Object)bigFraction12));
      
      bigFraction11.add(0L);
      float float0 = bigFraction7.floatValue();
      assertEquals(55.0F, float0, 0.01F);
      
      bigFraction6.pow((-4514L));
      int int0 = bigFraction11.compareTo(bigFraction9);
      assertFalse(bigFraction11.equals((Object)bigFraction3));
      assertTrue(bigFraction8.equals((Object)bigFraction5));
      assertEquals(1, int0);
      assertFalse(bigFraction9.equals((Object)bigFraction6));
      assertEquals((short)1, bigFraction11.shortValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-2.893149098508887E-8), (-2.893149098508887E-8), 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -0 to fraction after 0 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.THREE_QUARTERS.getField();
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }
}
