/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:50:19 GMT 2020
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2147482676, 2147482676);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.add((long) 2147482676);
      bigFraction0.floatValue();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)86;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.divide(bigInteger0);
      int int0 = 2147482676;
      bigFraction1.subtract(2147482676);
      BigFraction bigFraction2 = bigFraction1.multiply((long) (byte) (-82));
      bigFraction2.ONE_FIFTH.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(2147482676, 3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.floatValue();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-6L));
      bigFraction0.TWO_THIRDS.getNumeratorAsInt();
      BigFraction bigFraction1 = new BigFraction((double) (-6L));
      bigFraction0.toString();
      // Undeclared exception!
      try { 
        bigFraction1.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 37L);
      bigFraction0.floatValue();
      bigFraction0.equals(bigFraction0);
      bigFraction0.pow(37L);
      BigFraction.getReducedFraction((-2146232199), (-2146232199));
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.846480131149292, 1722);
      BigFraction bigFraction1 = bigFraction0.divide((-202));
      bigFraction1.TWO_QUARTERS.multiply((-202));
      BigFraction bigFraction2 = bigFraction0.pow((-202));
      BigFraction bigFraction3 = new BigFraction(2.470824341016531E-6);
      bigFraction2.floatValue();
      bigFraction2.TWO_QUARTERS.bigDecimalValue();
      bigFraction3.multiply(bigFraction2);
      bigFraction2.getDenominator();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.divide(1);
      bigFraction0.ONE_HALF.floatValue();
      bigFraction0.compareTo(bigFraction1);
      bigFraction0.pow((-3313));
      BigFraction bigFraction2 = new BigFraction((double) (-3313));
      bigFraction2.floatValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3.378302153578261E-7);
      bigFraction0.subtract(37L);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction1.pow(592);
      bigFraction1.abs();
      bigFraction0.intValue();
      BigFraction bigFraction3 = bigFraction1.add(bigFraction2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.subtract(bigInteger0);
      bigFraction3.add(bigFraction2);
      BigFraction bigFraction4 = bigFraction2.multiply(1514);
      BigFraction bigFraction5 = new BigFraction(0.6059582233428955);
      bigFraction1.toString();
      bigFraction3.getDenominatorAsLong();
      bigFraction4.divide((-8076828387755836351L));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.6059582233428955);
      BigFraction bigFraction1 = bigFraction0.subtract(0L);
      bigFraction0.pow(592);
      BigFraction bigFraction2 = bigFraction0.abs();
      bigFraction1.intValue();
      bigFraction0.add(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.subtract(bigInteger0);
      bigFraction1.add(bigFraction0);
      bigFraction2.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(929624, 929624);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)117;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divide(bigInteger1);
      bigFraction0.pow(bigInteger0);
      bigFraction0.subtract(3685L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.846480131149292, 1722);
      BigFraction bigFraction1 = bigFraction0.divide(2147483542);
      BigFraction bigFraction2 = bigFraction1.pow((-2986));
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      bigFraction2.getDenominator();
      bigFraction3.hashCode();
      bigFraction2.getDenominatorAsInt();
      BigFraction bigFraction4 = BigFraction.TWO;
      bigFraction2.floatValue();
      bigFraction1.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.6059582233428955);
      BigFraction bigFraction1 = bigFraction0.subtract(0L);
      BigFraction bigFraction2 = bigFraction0.pow(592);
      bigFraction0.abs();
      bigFraction1.intValue();
      bigFraction0.add(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.subtract(bigInteger0);
      bigFraction1.add(bigFraction0);
      bigFraction2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-90));
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      bigFraction1.getDenominator();
      bigFraction1.add((long) (-90));
      bigFraction1.percentageValue();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      BigFraction bigFraction0 = new BigFraction(905, 3);
      bigFraction0.equals((Object) null);
      bigFraction0.bigDecimalValue(5, 3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.pow((-2758));
      BigFraction bigFraction2 = new BigFraction((-2758), (-2758));
      bigFraction2.FOUR_FIFTHS.reciprocal();
      bigFraction2.intValue();
      bigFraction2.add(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction3 = new BigFraction((-2758));
      BigFraction bigFraction4 = bigFraction3.add(bigFraction1);
      BigFraction bigFraction5 = bigFraction0.multiply(559);
      BigFraction bigFraction6 = new BigFraction((-1.0));
      bigFraction5.ONE_FIFTH.negate();
      bigFraction0.toString();
      bigFraction4.getDenominatorAsLong();
      bigFraction5.divide((long) (-2758));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_QUARTERS.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.intValue();
      BigFraction bigFraction1 = new BigFraction((long) 0);
      bigFraction1.getDenominatorAsInt();
      long long0 = 1144L;
      BigFraction bigFraction2 = bigFraction0.pow((long) 1);
      BigFraction.getReducedFraction((-149), 2639);
      BigFraction bigFraction3 = bigFraction2.pow(1144L);
      bigFraction1.intValue();
      bigFraction3.reduce();
      bigFraction0.percentageValue();
      bigFraction2.divide(1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction2.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.doubleValue();
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = new BigFraction(0.0);
      bigFraction1.toString();
      bigFraction0.pow(0.6666666666666666);
      bigFraction0.doubleValue();
      bigFraction0.equals("0");
      BigFraction bigFraction2 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction2.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(3.2671863888979078E277, 329.363202, 2717);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 32,671,863,888,979,078,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1511.15), 1052);
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction2 = bigFraction0.divide((long) 1052);
      bigFraction2.toString();
      BigFraction bigFraction3 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(1093);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.divide((-1766));
      bigFraction0.pow(678);
      bigFraction1.getDenominator();
      // Undeclared exception!
      try { 
        bigFraction1.THREE_QUARTERS.bigDecimalValue(678);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(136.8380952, 0);
      BigFraction bigFraction1 = bigFraction0.divide((-202));
      BigFraction bigFraction2 = bigFraction1.pow((-1809));
      bigFraction0.getDenominator();
      bigFraction0.hashCode();
      byte byte0 = (byte) (-113);
      BigFraction.getReducedFraction((-787), 8691275);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction2.ZERO.pow((long) (byte) (-113));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.longValue();
      bigFraction2.doubleValue();
      bigFraction0.equals(bigFraction1);
      BigFraction bigFraction3 = new BigFraction(1517.45);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction0.THREE_QUARTERS.add((-1));
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction2.multiply(bigInteger1);
      BigFraction bigFraction3 = bigFraction1.pow(bigInteger1);
      bigFraction3.subtract(131);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.995334552140326E-8, 719);
      bigFraction0.intValue();
      bigFraction0.ONE_FIFTH.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.pow(1144L);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(0, 5);
      BigFraction bigFraction3 = bigFraction1.MINUS_ONE.pow(4503599627370496L);
      bigFraction0.intValue();
      BigFraction bigFraction4 = bigFraction0.reduce();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction5 = bigFraction4.THREE_QUARTERS.pow(bigInteger0);
      bigFraction4.TWO_THIRDS.percentageValue();
      BigFraction bigFraction6 = bigFraction0.subtract(bigFraction2);
      BigFraction.getReducedFraction(719, 2147352583);
      bigFraction6.toString();
      bigFraction4.getNumeratorAsLong();
      bigFraction2.toString();
      bigFraction5.getNumeratorAsInt();
      bigFraction3.longValue();
      bigFraction3.toString();
      BigFraction bigFraction7 = BigFraction.TWO_QUARTERS;
      bigFraction7.intValue();
      bigFraction6.hashCode();
      bigFraction0.negate();
      // Undeclared exception!
      try { 
        bigFraction6.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-1);
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.divide(3281);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)77;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.doubleValue();
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      bigFraction1.percentageValue();
      bigFraction2.ONE.divide((long) (byte)7);
      bigFraction2.MINUS_ONE.add(6063);
      bigFraction1.getDenominatorAsInt();
      bigFraction2.subtract((long) (byte)77);
      bigFraction0.percentageValue();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = new BigFraction(1.0277209281921387);
      bigFraction1.toString();
      bigFraction1.pow(0.6);
      bigFraction1.reduce();
      BigFraction bigFraction2 = new BigFraction((long) Integer.MAX_VALUE, (long) Integer.MAX_VALUE);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0021885283433675795, (-2147483647));
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      int int0 = 39;
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(0.0021885283433675795, (-3261.245983224158), (-2147483647));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.002 to fraction after -2,147,483,647 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(314.0065602, 2147483619);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction2.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction0.multiply(bigInteger1);
      BigFraction bigFraction3 = new BigFraction((double) 2147483619);
      bigFraction3.pow(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 0);
      bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.multiply(bigInteger1);
      bigFraction2.ONE_THIRD.toString();
      bigFraction2.pow(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0);
      BigFraction bigFraction1 = new BigFraction(1211.3);
      bigFraction0.TWO_THIRDS.multiply(bigFraction1);
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      BigFraction bigFraction3 = bigFraction0.divide(bigFraction2);
      bigFraction1.floatValue();
      bigFraction3.hashCode();
      BigFraction bigFraction4 = bigFraction3.pow((long) 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-113);
      BigFraction.getReducedFraction((byte)88, (byte) (-56));
      byteArray0[3] = (byte)1;
      byte byte0 = (byte)72;
      byteArray0[4] = (byte)72;
      BigInteger bigInteger0 = null;
      try { 
        bigFraction4.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(1550L);
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-1249), (-509));
      BigFraction bigFraction3 = bigFraction2.pow(3433L);
      bigFraction3.intValue();
      BigFraction bigFraction4 = bigFraction3.reduce();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction5 = bigFraction0.pow(bigInteger0);
      bigFraction1.percentageValue();
      BigFraction bigFraction6 = bigFraction3.divide(1132);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction7 = bigFraction5.add(bigInteger0);
      bigFraction5.divide(bigFraction0);
      bigFraction2.reciprocal();
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigFraction bigFraction8 = bigFraction3.subtract(bigInteger0);
      bigFraction4.divide(bigFraction5);
      BigFraction bigFraction9 = new BigFraction(1067L);
      BigFraction bigFraction10 = bigFraction9.subtract(3244L);
      BigInteger bigInteger3 = BigInteger.ONE;
      bigFraction4.subtract(bigInteger3);
      bigFraction8.multiply(100);
      bigFraction10.getDenominatorAsLong();
      bigFraction6.getField();
      // Undeclared exception!
      try { 
        bigFraction7.bigDecimalValue((-1872500753));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.ONE_HALF.doubleValue();
      bigFraction0.TWO_THIRDS.doubleValue();
      BigFraction bigFraction1 = new BigFraction(0.0);
      bigFraction1.toString();
      bigFraction1.pow(0.0);
      bigFraction0.reduce();
      bigFraction0.divide(2147134179);
      // Undeclared exception!
      try { 
        bigFraction0.pow(2147134179);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(136.8380952, 0);
      BigFraction bigFraction1 = bigFraction0.divide((-202));
      BigFraction bigFraction2 = bigFraction1.pow((-1809));
      bigFraction0.getDenominator();
      bigFraction0.hashCode();
      bigFraction2.getDenominatorAsInt();
      bigFraction2.subtract((long) (-1809));
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.doubleValue();
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = new BigFraction(0.0);
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      bigFraction2.toString();
      bigFraction0.pow(0.6666666666666666);
      BigFraction bigFraction3 = bigFraction1.reduce();
      bigFraction2.longValue();
      bigFraction3.doubleValue();
      bigFraction3.equals("1 / 5");
      BigFraction bigFraction4 = new BigFraction(0.0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.ONE_FIFTH.intValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction2.bigDecimalValue(0);
      BigFraction bigFraction3 = bigFraction0.divide(38);
      BigFraction bigFraction4 = bigFraction3.pow(3916);
      bigFraction0.getDenominator();
      bigFraction2.hashCode();
      bigFraction4.getDenominatorAsInt();
      BigFraction bigFraction5 = BigFraction.FOUR_FIFTHS;
      bigFraction5.longValue();
      bigFraction1.subtract(152L);
      BigFraction bigFraction6 = BigFraction.FOUR_FIFTHS;
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.ONE_HALF.doubleValue();
      bigFraction0.TWO_THIRDS.doubleValue();
      BigFraction bigFraction1 = new BigFraction(0.0);
      bigFraction1.toString();
      bigFraction1.pow(0.0);
      BigFraction bigFraction2 = bigFraction0.reduce();
      bigFraction2.longValue();
      bigFraction0.doubleValue();
      bigFraction2.equals(bigFraction0);
      BigFraction bigFraction3 = new BigFraction(1955.754894568705);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(3952090531849364496L);
      bigFraction1.abs();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.ZERO.subtract(0L);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1, 1300);
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.pow(1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValue();
      // Undeclared exception!
      try { 
        bigFraction2.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.MINUS_ONE.multiply(bigInteger0);
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.pow(856.7034545231909);
      bigFraction0.getNumeratorAsLong();
      bigFraction0.bigDecimalValue(0);
      BigFraction bigFraction1 = bigFraction0.subtract(3476);
      bigFraction1.getField();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction2 = bigFraction1.abs();
      bigFraction2.floatValue();
      bigFraction2.add(bigInteger0);
      bigFraction1.getDenominator();
      bigFraction0.pow(0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      BigFraction bigFraction0 = new BigFraction(314.0065602, Integer.MAX_VALUE);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction2.toString();
      int int1 = 809;
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction((double) Integer.MAX_VALUE, 809);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.subtract(108303106048L);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(1300, 1300);
      BigFraction bigFraction3 = bigFraction2.pow(719);
      bigFraction2.abs();
      bigFraction1.intValue();
      BigFraction bigFraction4 = bigFraction3.add(bigFraction2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction5 = bigFraction2.subtract(bigInteger0);
      BigFraction bigFraction6 = new BigFraction(bigInteger0);
      bigFraction6.add(bigFraction4);
      bigFraction0.subtract(bigFraction5);
      bigFraction5.multiply((-923));
      bigFraction1.toString();
      bigFraction3.getDenominatorAsLong();
      bigFraction3.divide((long) (-923));
      bigFraction6.divide((long) 1300);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.reciprocal();
      bigFraction1.ONE_THIRD.pow(1483L);
      BigFraction bigFraction2 = bigFraction0.TWO.reduce();
      int int0 = 2147483627;
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.add(2147483627);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction4 = bigFraction3.ONE_THIRD.add(bigInteger0);
      int int1 = 1006;
      bigFraction4.ONE_FIFTH.add(1006);
      bigFraction0.ONE_HALF.bigDecimalValue();
      bigFraction2.TWO_QUARTERS.getField();
      bigFraction0.getNumerator();
      long long0 = 693L;
      BigFraction bigFraction5 = bigFraction3.pow(693L);
      int int2 = (-813);
      // Undeclared exception!
      try { 
        bigFraction5.ZERO.bigDecimalValue((-813), 1006);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      BigFraction bigFraction0 = new BigFraction(314.0065602, Integer.MAX_VALUE);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction2.toString();
      int int1 = 809;
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = new BigFraction(0);
      BigFraction bigFraction1 = new BigFraction(1211.3);
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.multiply(bigFraction1);
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      BigFraction bigFraction4 = bigFraction0.divide(bigFraction3);
      bigFraction1.floatValue();
      bigFraction4.hashCode();
      BigFraction bigFraction5 = bigFraction4.pow((long) 0);
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction5.subtract(bigInteger0);
      bigFraction1.add(bigFraction4);
      BigFraction bigFraction6 = new BigFraction((long) (byte)88);
      bigFraction6.subtract(bigFraction2);
      bigFraction5.floatValue();
      int int1 = 1134;
      BigFraction bigFraction7 = BigFraction.getReducedFraction(1134, 629);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigFraction1.multiply(bigInteger1);
      bigFraction7.abs();
      BigFraction bigFraction8 = BigFraction.ONE_THIRD;
      BigFraction bigFraction9 = bigFraction8.divide(bigFraction3);
      bigFraction9.toString();
      // Undeclared exception!
      try { 
        bigFraction7.bigDecimalValue(1075);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.divide(bigInteger0);
      bigFraction1.THREE_FIFTHS.multiply((-759));
      bigFraction1.ONE_QUARTER.toString();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction2 = new BigFraction((double) 2L);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = new BigFraction((-186.9377943012809));
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction1.subtract(9006649498927104L);
      bigFraction0.subtract(bigFraction2);
      BigFraction bigFraction3 = BigFraction.ONE_FIFTH;
      bigFraction3.subtract(1L);
      BigFraction bigFraction4 = BigFraction.ONE_THIRD;
      bigFraction4.pow(5);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(136.8380952, 0);
      BigFraction bigFraction1 = bigFraction0.divide((-194));
      BigFraction bigFraction2 = bigFraction1.pow((-1809));
      bigFraction0.getDenominator();
      bigFraction0.hashCode();
      bigFraction2.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction2.subtract((long) (-1809));
      bigFraction3.abs();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.995334552140326E-8, (-1));
      bigFraction0.intValue();
      bigFraction0.ONE_FIFTH.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.pow(1144L);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(0, 5);
      bigFraction1.MINUS_ONE.pow(4503599627370496L);
      bigFraction0.intValue();
      BigFraction bigFraction3 = bigFraction0.reduce();
      BigFraction bigFraction4 = bigFraction3.multiply(0);
      bigFraction4.toString();
      bigFraction2.getDenominatorAsLong();
      bigFraction2.divide((-14L));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.divide(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.pow(bigInteger0);
      bigFraction2.percentageValue();
      int int0 = 1017;
      BigFraction bigFraction3 = bigFraction0.divide(821);
      BigInteger bigInteger2 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction1.add(bigInteger0);
      bigFraction4.divide(bigFraction0);
      bigFraction4.reciprocal();
      BigInteger bigInteger3 = BigInteger.ZERO;
      BigFraction bigFraction5 = bigFraction1.subtract(bigInteger1);
      bigFraction3.divide(bigFraction5);
      BigFraction bigFraction6 = bigFraction5.subtract((-981L));
      bigFraction6.getField();
      BigInteger bigInteger4 = null;
      try {
        bigInteger4 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(2147483647L, 1538L);
      bigFraction0.TWO_QUARTERS.pow((long) 0);
      bigFraction0.divide(bigInteger0);
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction0.divide(9007199254740990L);
      bigFraction2.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      int int0 = (-1);
      BigFraction bigFraction1 = new BigFraction(5.510323869270588E-16, 2089.686313880808, (-1));
      bigFraction1.equals((Object) null);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.ONE_HALF.pow((-1481.111));
      int int0 = 1075;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 1075);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.TWO_QUARTERS.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction1.pow((-194));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.TWO_THIRDS.longValue();
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.09850110113620758);
      bigFraction0.ONE_QUARTER.reduce();
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = (-1);
      BigFraction bigFraction0 = new BigFraction((-1));
      BigFraction bigFraction1 = bigFraction0.ONE.add(0L);
      bigFraction1.TWO.hashCode();
      bigFraction0.intValue();
      BigFraction bigFraction2 = bigFraction0.ONE.divide(bigFraction1);
      bigFraction2.ONE_HALF.pow(301);
      BigFraction bigFraction3 = bigFraction0.subtract((-1));
      int int1 = (-3352);
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue((-3352));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.negate();
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.multiply(bigFraction0);
      bigFraction1.THREE_QUARTERS.subtract(0L);
      bigFraction2.MINUS_ONE.longValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.TWO_FIFTHS.hashCode();
      BigFraction bigFraction3 = bigFraction0.ZERO.negate();
      BigFraction bigFraction4 = bigFraction1.TWO_THIRDS.subtract(902L);
      BigFraction bigFraction5 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction6 = bigFraction5.THREE_QUARTERS.multiply(bigInteger0);
      bigFraction0.ONE_HALF.percentageValue();
      bigFraction6.ONE_QUARTER.divide((-499L));
      BigFraction bigFraction7 = bigFraction1.subtract(0L);
      bigFraction1.doubleValue();
      BigFraction bigFraction8 = bigFraction7.pow((-655));
      BigInteger bigInteger1 = bigFraction6.getDenominator();
      bigFraction8.getDenominatorAsInt();
      bigFraction4.intValue();
      BigFraction bigFraction9 = bigFraction3.divide(bigFraction4);
      bigFraction1.pow((-1));
      bigFraction4.compareTo(bigFraction3);
      bigFraction3.getField();
      BigFraction bigFraction10 = bigFraction9.subtract(bigInteger0);
      bigFraction10.TWO_FIFTHS.multiply(513);
      bigFraction0.ONE_FIFTH.intValue();
      BigFraction bigFraction11 = bigFraction3.multiply(902L);
      bigFraction11.TWO_THIRDS.divide(bigInteger1);
      bigFraction7.reciprocal();
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(1271, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0);
      bigFraction0.hashCode();
      bigFraction0.getNumeratorAsLong();
      bigFraction0.bigDecimalValue(0, 0);
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.add(2720);
      BigFraction bigFraction2 = new BigFraction(153);
      BigFraction bigFraction3 = bigFraction2.ONE_FIFTH.divide(153);
      bigFraction0.ONE_QUARTER.compareTo(bigFraction2);
      BigFraction bigFraction4 = bigFraction0.ONE_THIRD.multiply((long) 153);
      BigFraction bigFraction5 = bigFraction4.ONE.negate();
      bigFraction5.THREE_FIFTHS.divide((long) (-1));
      bigFraction5.MINUS_ONE.doubleValue();
      bigFraction4.ONE_QUARTER.divide((-437L));
      bigFraction0.doubleValue();
      BigFraction bigFraction6 = bigFraction0.divide(153);
      BigFraction bigFraction7 = new BigFraction(1905L);
      bigFraction6.TWO_FIFTHS.compareTo(bigFraction7);
      bigFraction0.longValue();
      bigFraction0.reduce();
      bigFraction3.reduce();
      bigFraction1.compareTo(bigFraction0);
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(1349, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.TWO_THIRDS.doubleValue();
      bigFraction0.FOUR_FIFTHS.pow(0.0);
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction0.THREE_QUARTERS.longValue();
      bigFraction1.doubleValue();
      bigFraction1.FOUR_FIFTHS.equals(bigFraction0);
      bigFraction1.TWO_FIFTHS.pow(0.0);
      bigFraction1.ZERO.getNumeratorAsLong();
      bigFraction0.bigDecimalValue(0);
      BigFraction bigFraction2 = bigFraction1.subtract(122);
      bigFraction2.THREE_QUARTERS.getField();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction3 = bigFraction0.abs();
      bigFraction3.ZERO.floatValue();
      BigFraction bigFraction4 = bigFraction2.add(bigInteger0);
      bigFraction4.getDenominator();
      bigFraction1.pow(880);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.negate();
      bigFraction0.TWO_QUARTERS.getDenominatorAsInt();
      bigFraction1.ONE.longValue();
      bigFraction0.pow((-3356.85));
      bigFraction0.getNumerator();
      bigFraction0.getDenominatorAsLong();
      bigFraction1.getDenominatorAsLong();
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.995334552140326E-8, (-1));
      bigFraction0.intValue();
      bigFraction0.ONE_FIFTH.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.pow(1144L);
      BigFraction.getReducedFraction(0, 5);
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.pow(4503599627370496L);
      bigFraction0.intValue();
      BigFraction bigFraction3 = bigFraction0.reduce();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction3.THREE_QUARTERS.pow(bigInteger0);
      bigFraction3.TWO_THIRDS.percentageValue();
      bigFraction2.THREE_QUARTERS.divide(1017);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction1.ONE_THIRD.add(bigInteger1);
      bigFraction4.THREE_QUARTERS.divide(bigFraction2);
      bigFraction4.THREE_QUARTERS.reciprocal();
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction2.subtract(bigInteger2);
      // Undeclared exception!
      try { 
        bigFraction1.ONE.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.TWO.subtract(0L);
      bigFraction1.TWO_THIRDS.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction0.subtract((-551L));
      bigFraction2.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction2.divide(2L);
      BigFraction bigFraction4 = bigFraction0.ZERO.multiply(bigFraction2);
      bigFraction0.pow((double) 2L);
      bigFraction2.getNumerator();
      bigFraction4.floatValue();
      BigFraction bigFraction5 = bigFraction4.subtract(bigFraction0);
      BigFraction.getReducedFraction((-1), (-1));
      BigFraction bigFraction6 = bigFraction5.FOUR_FIFTHS.subtract(2L);
      bigFraction2.getDenominatorAsInt();
      bigFraction0.FOUR_FIFTHS.divide(2L);
      BigFraction bigFraction7 = bigFraction3.TWO_FIFTHS.negate();
      BigFraction bigFraction8 = bigFraction4.TWO_QUARTERS.multiply(0L);
      bigFraction5.ONE.pow((-42L));
      bigFraction2.getNumeratorAsLong();
      BigFraction bigFraction9 = bigFraction3.divide((-3512299194304650054L));
      BigFraction bigFraction10 = bigFraction2.multiply((long) 2);
      BigFraction bigFraction11 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction12 = bigFraction10.ONE_FIFTH.subtract(bigFraction11);
      bigFraction11.TWO.hashCode();
      bigFraction6.getDenominatorAsLong();
      bigFraction10.ONE.compareTo(bigFraction3);
      bigFraction11.ZERO.percentageValue();
      bigFraction10.add(5L);
      bigFraction7.add((-3512299194304650054L));
      bigFraction12.compareTo(bigFraction9);
      bigFraction8.abs();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      int int0 = (-485);
      bigFraction0.add((-485));
      // Undeclared exception!
      try { 
        bigFraction0.MINUS_ONE.bigDecimalValue(3227, (-485));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.ONE_HALF.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE.multiply(bigInteger0);
      bigFraction1.THREE_QUARTERS.compareTo(bigFraction0);
      int int0 = 1;
      int int1 = 52;
      int int2 = (-2461);
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.subtract(2L);
      // Undeclared exception!
      try { 
        bigFraction2.THREE_QUARTERS.bigDecimalValue(52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 0.0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.ONE_FIFTH.intValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.reduce();
      bigFraction2.add((long) 0);
      BigFraction bigFraction3 = bigFraction0.subtract(bigInteger0);
      bigFraction3.multiply(1075);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction0.add(bigFraction1);
      bigFraction0.pow(1866);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.ZERO.subtract(0L);
      int int0 = 1300;
      BigFraction bigFraction2 = BigFraction.getReducedFraction(1, 1300);
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.pow(1);
      BigFraction bigFraction4 = bigFraction2.ONE_QUARTER.abs();
      bigFraction2.ONE_THIRD.intValue();
      bigFraction3.TWO.add(bigFraction2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.ONE_QUARTER.subtract(bigInteger0);
      bigFraction2.THREE_FIFTHS.add(bigFraction4);
      BigFraction bigFraction5 = bigFraction0.subtract(bigFraction2);
      bigFraction5.floatValue();
      BigFraction.getReducedFraction(1075, 1300);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = new BigFraction(1);
      bigFraction0.TWO_QUARTERS.negate();
      BigFraction bigFraction1 = bigFraction0.divide(1);
      bigFraction0.ONE_HALF.floatValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.TWO_FIFTHS.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.subtract(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction2.ONE.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-77);
      byte byte1 = (byte)77;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)55;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.ONE.equals(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.bigDecimalValue((-1), (int) (byte) (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.bigDecimalValue();
      bigFraction0.getNumeratorAsLong();
      bigFraction0.TWO_THIRDS.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.add(1);
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.negate();
      bigFraction2.MINUS_ONE.pow((-271L));
      bigFraction2.TWO.getDenominatorAsLong();
      bigFraction1.ONE_HALF.intValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.FOUR_FIFTHS.subtract(0L);
      bigFraction0.MINUS_ONE.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.TWO_THIRDS.subtract(bigInteger0);
      bigFraction1.intValue();
      bigFraction1.ONE.bigDecimalValue();
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction1.divide(1);
      bigFraction3.multiply((-2053L));
      bigFraction3.pow((double) 1L);
      bigFraction4.percentageValue();
      BigFraction bigFraction5 = bigFraction1.pow(bigInteger0);
      bigFraction3.pow((double) 1);
      BigFraction bigFraction6 = bigFraction0.multiply(bigInteger0);
      bigFraction6.getNumeratorAsLong();
      BigFraction bigFraction7 = bigFraction5.reduce();
      bigFraction7.subtract((long) 2);
      bigFraction2.abs();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-883L), (-883L));
      bigFraction0.ONE_FIFTH.reduce();
      BigFraction bigFraction1 = new BigFraction(744);
      bigFraction1.THREE_FIFTHS.pow((double) 744);
      bigFraction0.ONE.compareTo(bigFraction1);
      int int0 = (-1428);
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.negate();
      bigFraction2.MINUS_ONE.reciprocal();
      bigFraction0.TWO_THIRDS.longValue();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1428));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ONE_HALF.getNumeratorAsInt();
      bigFraction0.TWO_THIRDS.floatValue();
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.pow(1);
      BigFraction bigFraction3 = bigFraction1.ONE_FIFTH.divide(1);
      BigFraction bigFraction4 = bigFraction3.FOUR_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.MINUS_ONE.subtract(1);
      bigFraction4.MINUS_ONE.intValue();
      BigFraction bigFraction6 = bigFraction3.ONE_FIFTH.multiply((-1));
      bigFraction6.ONE_FIFTH.equals(bigFraction1);
      bigFraction3.FOUR_FIFTHS.pow(bigInteger0);
      BigFraction bigFraction7 = bigFraction0.subtract(128L);
      bigFraction0.TWO_THIRDS.doubleValue();
      BigFraction bigFraction8 = bigFraction1.MINUS_ONE.add(bigInteger0);
      bigFraction0.equals(bigFraction7);
      bigFraction0.getField();
      bigFraction4.TWO.bigDecimalValue();
      bigFraction7.divide(1);
      bigFraction4.TWO_FIFTHS.subtract(128L);
      bigFraction2.longValue();
      BigFraction bigFraction9 = bigFraction2.pow(bigInteger0);
      bigFraction9.ONE_HALF.floatValue();
      bigFraction6.doubleValue();
      BigFraction bigFraction10 = bigFraction8.negate();
      bigFraction10.MINUS_ONE.getNumeratorAsLong();
      bigFraction0.pow(0L);
      bigFraction5.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.divide(bigInteger0);
      bigFraction1.THREE_FIFTHS.multiply((-759));
      bigFraction1.ONE_QUARTER.toString();
      bigFraction0.getDenominatorAsLong();
      bigFraction1.divide(2147483648L);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-123);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.TWO.subtract((long) (byte) (-1));
      bigFraction0.TWO_THIRDS.subtract((int) (byte) (-1));
      BigFraction bigFraction1 = bigFraction0.pow((-963L));
      bigFraction1.FOUR_FIFTHS.add(bigInteger0);
      bigFraction1.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.TWO_FIFTHS.negate();
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.pow(bigInteger0);
      bigFraction1.ONE_QUARTER.intValue();
      bigFraction0.TWO.intValue();
      bigFraction0.TWO_THIRDS.percentageValue();
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.negate();
      bigFraction2.FOUR_FIFTHS.add(2);
      // Undeclared exception!
      try { 
        bigFraction1.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.getNumeratorAsInt();
      bigFraction0.bigDecimalValue();
      bigFraction0.divide(2);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-33);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      int int0 = 37;
      int int1 = (-1093);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      BigInteger bigInteger0 = new BigInteger(37, (-1093), mockRandom0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) 37, (long) (-1093));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      int int0 = 1498;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.bigDecimalValue(1498, 1498);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      int int0 = 917;
      BigFraction bigFraction0 = new BigFraction(917, 917);
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(0);
      // Undeclared exception!
      try { 
        bigFraction1.TWO_FIFTHS.bigDecimalValue(0, 1286);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.ONE_FIFTH.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.add((-1L));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.ONE_THIRD.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.multiply(2080);
      bigFraction0.getDenominatorAsInt();
      bigFraction0.hashCode();
      bigFraction1.getDenominator();
      bigFraction2.getNumerator();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction0.ONE_FIFTH.subtract(bigFraction1);
      BigFraction bigFraction2 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction3 = bigFraction0.divide(bigFraction2);
      bigFraction2.add(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0);
      BigFraction bigFraction1 = new BigFraction(1211.3);
      bigFraction0.TWO_THIRDS.multiply(bigFraction1);
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      BigFraction bigFraction3 = bigFraction0.divide(bigFraction2);
      bigFraction1.floatValue();
      bigFraction3.hashCode();
      bigFraction3.pow((long) 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-113);
      BigFraction.getReducedFraction((byte)88, (byte) (-56));
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)108;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction4 = bigFraction2.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue((int) (byte)88, (int) (byte)88);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.ZERO.getNumeratorAsInt();
      BigFraction bigFraction1 = bigFraction0.ZERO.abs();
      BigFraction bigFraction2 = bigFraction0.pow(20L);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction3 = bigFraction1.MINUS_ONE.multiply(20L);
      int int0 = bigFraction2.TWO.compareTo(bigFraction1);
      assertEquals(1, int0);
      
      bigFraction3.THREE_FIFTHS.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction2.THREE_QUARTERS.add(bigInteger1);
      bigFraction4.THREE_FIFTHS.subtract(bigInteger1);
      BigFraction bigFraction5 = BigFraction.getReducedFraction(5, 1177);
      BigFraction bigFraction6 = bigFraction5.MINUS_ONE.subtract(1355);
      bigFraction6.ONE_FIFTH.reciprocal();
      bigFraction3.MINUS_ONE.getNumeratorAsInt();
      bigFraction2.bigDecimalValue(1);
      BigFraction bigFraction7 = bigFraction1.subtract(bigFraction2);
      int int1 = bigFraction7.ONE_QUARTER.compareTo(bigFraction2);
      assertEquals(1, int1);
      
      BigFraction bigFraction8 = bigFraction3.multiply(403);
      BigFraction bigFraction9 = bigFraction3.negate();
      bigFraction9.TWO.getNumeratorAsInt();
      assertNotSame(bigFraction1, bigFraction7);
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      
      BigFraction bigFraction10 = bigFraction0.divide(bigFraction7);
      BigFraction bigFraction11 = bigFraction9.multiply((long) 5);
      BigFraction bigFraction12 = bigFraction11.ONE_QUARTER.reduce();
      assertFalse(bigFraction12.equals((Object)bigFraction0));
      
      bigFraction8.pow((-650));
      BigFraction bigFraction13 = bigFraction10.add(bigInteger0);
      assertNotSame(bigFraction1, bigFraction5);
      assertEquals((byte)23, bigFraction13.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction12));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2883, 2707);
      bigFraction0.ZERO.longValue();
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.add(0L);
      BigFraction bigFraction2 = bigFraction0.subtract(451);
      String string0 = bigFraction1.toString();
      assertEquals("1 / 3", string0);
      
      BigFraction bigFraction3 = bigFraction2.negate();
      BigFraction bigFraction4 = bigFraction3.subtract(bigFraction2);
      assertEquals((short)899, bigFraction4.shortValue());
      
      BigFraction bigFraction5 = bigFraction1.add(bigFraction3);
      assertEquals((short)450, bigFraction5.shortValue());
      assertFalse(bigFraction3.equals((Object)bigFraction4));
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(5, int0);
  }
}
