/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:56:06 GMT 2020
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 132;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) 2147483647L, 132);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)70;
      bigFraction0.TWO_THIRDS.getNumeratorAsInt();
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-49);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.divide(bigInteger0);
      BigFraction bigFraction2 = new BigFraction(9007199254730432L);
      bigFraction0.ONE.compareTo(bigFraction2);
      bigFraction2.TWO.subtract((int) (byte) (-119));
      BigFraction bigFraction3 = bigFraction0.ONE_QUARTER.multiply(bigFraction1);
      bigFraction2.ONE_HALF.add(2989L);
      bigFraction0.add(bigFraction2);
      bigFraction2.abs();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction4 = bigFraction1.TWO.pow(bigInteger1);
      BigFraction bigFraction5 = bigFraction4.FOUR_FIFTHS.add((long) (byte) (-119));
      bigFraction5.ZERO.multiply(52);
      Random.setNextRandom(151);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction0.subtract(bigInteger2);
      // Undeclared exception!
      try { 
        bigFraction3.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-2134701006), 2147086847);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.THREE_QUARTERS.add(2147086847);
      bigFraction0.MINUS_ONE.divide(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.pow(1784L);
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-557), 2147483639);
      bigFraction0.TWO_QUARTERS.longValue();
      bigFraction0.getDenominator();
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.divide(2147483647L);
      BigFraction bigFraction2 = bigFraction0.pow(4226);
      bigFraction1.intValue();
      BigFraction bigFraction3 = bigFraction2.subtract(4226);
      bigFraction2.multiply(1670);
      bigFraction1.hashCode();
      bigFraction2.getNumeratorAsLong();
      bigFraction3.percentageValue();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      Object object0 = new Object();
      bigFraction0.THREE_QUARTERS.equals(object0);
      BigFraction bigFraction1 = bigFraction0.divide((-34L));
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.pow(4226);
      BigFraction bigFraction4 = bigFraction3.ONE_QUARTER.subtract(4226);
      bigFraction4.ONE_FIFTH.compareTo(bigFraction2);
      bigFraction3.TWO_QUARTERS.multiply(2252);
      BigFraction bigFraction5 = new BigFraction((double) 4226);
      bigFraction3.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      Object object0 = new Object();
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction0.divide(bigFraction1);
      bigFraction1.THREE_QUARTERS.getField();
      bigFraction0.getDenominatorAsLong();
      bigFraction1.hashCode();
      bigFraction1.getNumeratorAsLong();
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      bigFraction2.percentageValue();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = new BigFraction((-3232.3));
      bigFraction1.bigDecimalValue(3, 5);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      Object object0 = new Object();
      bigFraction0.THREE_QUARTERS.equals(object0);
      BigFraction bigFraction1 = bigFraction0.divide((-34L));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.not();
      bigFraction1.ONE_QUARTER.multiply(bigInteger0);
      bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.pow(4226);
      bigFraction2.ONE_QUARTER.subtract(4226);
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.multiply(2252);
      BigFraction bigFraction4 = bigFraction2.divide(bigFraction0);
      bigFraction4.TWO_THIRDS.getDenominatorAsLong();
      bigFraction4.ONE_FIFTH.hashCode();
      bigFraction2.getNumeratorAsLong();
      bigFraction2.percentageValue();
      BigFraction bigFraction5 = bigFraction4.divide(bigInteger1);
      bigFraction3.intValue();
      bigFraction5.pow((-2475.0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      BigFraction bigFraction0 = new BigFraction(2839.1);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.reciprocal();
      bigFraction0.getDenominatorAsInt();
      bigFraction1.toString();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.divide(bigInteger0);
      bigFraction1.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1478));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483450);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction0.add(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger0);
      bigFraction2.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.THREE_FIFTHS.abs();
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      bigFraction0.THREE_FIFTHS.divide(bigFraction1);
      bigFraction0.getField();
      bigFraction0.hashCode();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)4;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.divide(bigInteger0);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((int) (byte)4, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(580245, 580245);
      bigFraction0.ONE_THIRD.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.divide((-2233L));
      // Undeclared exception!
      try { 
        bigFraction1.ONE_FIFTH.pow(2144802644);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = new BigFraction((-1548.3977957424725), 42);
      bigFraction0.floatValue();
      bigFraction1.FOUR_FIFTHS.subtract((long) 42);
      // Undeclared exception!
      try { 
        bigFraction1.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = new BigFraction((-1689.261875695));
      bigFraction1.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 2147418113;
      int int1 = 0;
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(2147418113, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(379, 379);
      bigFraction0.FOUR_FIFTHS.hashCode();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      bigFraction0.TWO_THIRDS.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.ONE.multiply(3308);
      bigFraction1.TWO_QUARTERS.add(bigFraction0);
      bigFraction1.getDenominatorAsInt();
      bigFraction0.toString();
      bigFraction0.FOUR_FIFTHS.longValue();
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger0);
      bigFraction2.TWO_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction2.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction1.abs();
      BigFraction bigFraction5 = bigFraction1.divide(bigFraction3);
      BigFraction bigFraction6 = bigFraction5.divide(bigFraction4);
      bigFraction5.ONE_HALF.divide(3308);
      BigFraction bigFraction7 = bigFraction0.subtract(4);
      bigFraction7.add(379);
      BigFraction bigFraction8 = bigFraction7.multiply(16L);
      bigFraction4.ONE_THIRD.subtract(bigFraction3);
      bigFraction5.ONE_FIFTH.abs();
      int int0 = (-1398);
      bigFraction8.MINUS_ONE.pow((-1398));
      bigFraction3.ONE_HALF.add(bigFraction1);
      bigFraction4.multiply(192);
      bigFraction1.getNumerator();
      BigFraction bigFraction9 = bigFraction5.reciprocal();
      bigFraction9.getField();
      BigFraction bigFraction10 = bigFraction2.multiply(bigFraction6);
      // Undeclared exception!
      try { 
        bigFraction10.divide(bigFraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.doubleValue();
      try { 
        bigFraction0.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      int int0 = 6246;
      bigFraction0.TWO_FIFTHS.subtract(1314);
      BigFraction bigFraction1 = bigFraction0.divide(6246);
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      bigFraction0.bigDecimalValue(629, 1);
      bigFraction1.TWO_THIRDS.longValue();
      BigFraction bigFraction3 = bigFraction2.TWO.divide((-2240L));
      bigFraction3.TWO_QUARTERS.multiply(6246);
      bigFraction3.THREE_QUARTERS.longValue();
      bigFraction0.TWO.subtract(6246);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1211), 135);
      bigFraction0.THREE_QUARTERS.percentageValue();
      bigFraction0.TWO_QUARTERS.doubleValue();
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.add((long) 135);
      BigFraction bigFraction3 = bigFraction0.add(bigFraction1);
      bigFraction3.ONE_HALF.multiply(135);
      bigFraction2.FOUR_FIFTHS.toString();
      BigFraction bigFraction4 = bigFraction1.ZERO.multiply(135);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction4.TWO.add(bigInteger0);
      bigFraction0.FOUR_FIFTHS.bigDecimalValue();
      BigFraction bigFraction5 = bigFraction2.reciprocal();
      BigFraction bigFraction6 = bigFraction0.multiply(bigFraction5);
      bigFraction6.abs();
      BigFraction bigFraction7 = bigFraction0.divide((-146));
      BigFraction bigFraction8 = bigFraction7.abs();
      // Undeclared exception!
      try { 
        bigFraction8.ONE_THIRD.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction1.bigDecimalValue();
      BigFraction bigFraction2 = new BigFraction(2147483647L, 2147483647L);
      bigFraction2.ONE_HALF.add(100L);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(2147432615, 4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.percentageValue();
      bigFraction0.TWO_QUARTERS.pow(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1315, 1315, 1315);
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.equals(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.TWO_FIFTHS.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = new BigFraction((-1693.4));
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction3 = bigFraction1.pow(100L);
      BigFraction bigFraction4 = bigFraction2.multiply(bigFraction1);
      BigFraction bigFraction5 = bigFraction3.multiply((-2146931736));
      BigFraction bigFraction6 = bigFraction5.subtract(bigFraction1);
      BigFraction bigFraction7 = new BigFraction((-3.064060124024764E-9), (byte)2, 140);
      BigFraction bigFraction8 = bigFraction5.FOUR_FIFTHS.divide(2147432886);
      bigFraction8.MINUS_ONE.compareTo(bigFraction0);
      bigFraction4.compareTo(bigFraction1);
      bigFraction6.divide(714632291);
      bigFraction1.pow(140);
      bigFraction5.subtract(bigFraction6);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1315);
      bigFraction0.bigDecimalValue();
      bigFraction0.percentageValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) 2147483648L, (-3056));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,648 to fraction (2,147,483,648/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.toString();
      BigFraction bigFraction2 = BigFraction.getReducedFraction((byte)2, 2147483548);
      bigFraction0.toString();
      bigFraction1.getField();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = BigFraction.TWO_FIFTHS;
      bigFraction3.toString();
      bigFraction2.doubleValue();
      BigFraction bigFraction4 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction5 = BigFraction.ZERO;
      bigFraction5.longValue();
      bigFraction3.floatValue();
      bigFraction3.intValue();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.multiply((-1990));
      bigFraction0.longValue();
      Object object0 = new Object();
      bigFraction1.toString();
      bigFraction0.getField();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.toString();
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      bigFraction2.doubleValue();
      // Undeclared exception!
      try { 
        bigFraction1.pow((-1990));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = new BigFraction((-1990));
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.divide(122L);
      bigFraction0.toString();
      BigFraction bigFraction4 = BigFraction.getReducedFraction(4, (-1990));
      bigFraction2.toString();
      bigFraction1.getField();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction5 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction6 = bigFraction5.multiply(bigInteger0);
      BigFraction bigFraction7 = BigFraction.ONE_FIFTH;
      bigFraction7.toString();
      bigFraction5.doubleValue();
      bigFraction5.multiply(bigFraction7);
      BigFraction bigFraction8 = bigFraction6.pow(4);
      bigFraction8.getNumeratorAsInt();
      BigFraction bigFraction9 = BigFraction.ONE_THIRD;
      BigFraction bigFraction10 = new BigFraction((double) (-1990));
      bigFraction9.divide(bigFraction10);
      bigFraction3.pow((-3167.2359));
      bigFraction5.add((long) 256);
      bigFraction10.pow(307);
      bigFraction4.pow(bigInteger0);
      bigFraction10.abs();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = new BigFraction((-1), (-1));
      BigFraction bigFraction2 = bigFraction1.multiply((-1));
      bigFraction0.longValue();
      Object object0 = new Object();
      BigFraction bigFraction3 = new BigFraction((double) (-1));
      BigFraction bigFraction4 = BigFraction.TWO;
      bigFraction4.bigDecimalValue();
      bigFraction3.percentageValue();
      BigFraction bigFraction5 = new BigFraction((long) (-1));
      bigFraction5.add(bigFraction2);
      bigFraction4.pow(0L);
      BigFraction bigFraction6 = BigFraction.TWO;
      bigFraction0.equals(bigFraction6);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1719.498748376455), (-1));
      bigFraction0.TWO_FIFTHS.bigDecimalValue();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      bigFraction0.pow(bigInteger0);
      bigFraction0.pow((double) (-1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.multiply(102);
      bigFraction1.intValue();
      BigFraction bigFraction2 = new BigFraction(0, (-4735));
      bigFraction2.doubleValue();
      bigFraction1.percentageValue();
      BigFraction bigFraction3 = new BigFraction((-4735));
      bigFraction3.intValue();
      BigFraction bigFraction4 = bigFraction3.add(bigFraction2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction5 = bigFraction0.multiply(bigInteger0);
      bigFraction4.longValue();
      bigFraction5.reduce();
      bigFraction3.subtract(bigFraction5);
      bigFraction4.longValue();
      bigFraction2.pow(3046.248253150324);
      BigFraction bigFraction6 = bigFraction3.divide(bigFraction0);
      bigFraction3.bigDecimalValue();
      bigFraction6.subtract(51);
      bigFraction4.getNumerator();
      BigFraction bigFraction7 = new BigFraction(0, 19L);
      // Undeclared exception!
      try { 
        bigFraction7.bigDecimalValue((-4735));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.multiply((-1990));
      bigFraction0.longValue();
      Object object0 = new Object();
      bigFraction1.equals(bigFraction0);
      BigFraction bigFraction2 = new BigFraction((-3137.60979120011));
      BigFraction bigFraction3 = BigFraction.TWO;
      bigFraction3.bigDecimalValue();
      bigFraction0.percentageValue();
      BigFraction bigFraction4 = bigFraction3.add(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction4.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.add(756);
      BigFraction bigFraction2 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction3 = bigFraction2.multiply(bigFraction0);
      bigFraction2.doubleValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction4 = bigFraction1.divide(bigInteger0);
      BigFraction bigFraction5 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction6 = bigFraction3.subtract(bigFraction5);
      BigFraction bigFraction7 = bigFraction5.multiply(780);
      bigFraction1.percentageValue();
      bigFraction5.reduce();
      BigFraction bigFraction8 = BigFraction.TWO_FIFTHS;
      bigFraction7.compareTo(bigFraction8);
      bigFraction6.getDenominatorAsLong();
      bigFraction4.toString();
      BigFraction bigFraction9 = BigFraction.TWO_FIFTHS;
      bigFraction9.negate();
      BigFraction.getReducedFraction(756, (-643));
      BigFraction bigFraction10 = bigFraction7.add(1132L);
      bigFraction10.divide(bigInteger0);
      BigFraction bigFraction11 = BigFraction.TWO_FIFTHS;
      bigFraction1.multiply(bigFraction11);
      bigFraction7.longValue();
      bigFraction9.intValue();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction1.multiply(650);
      bigFraction0.longValue();
      Object object0 = new Object();
      bigFraction1.equals(bigFraction0);
      BigFraction bigFraction2 = new BigFraction((double) (-610));
      bigFraction2.bigDecimalValue();
      bigFraction2.percentageValue();
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      int int0 = 4;
      bigFraction0.longValue();
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      bigFraction0.longValue();
      bigFraction1.pow((double) 20L);
      // Undeclared exception!
      try { 
        bigFraction2.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-315), (-1));
      BigFraction bigFraction1 = bigFraction0.ZERO.negate();
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.subtract((-1));
      bigFraction1.ONE_FIFTH.longValue();
      bigFraction0.getDenominator();
      bigFraction2.ONE_QUARTER.add((-315));
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction0);
      bigFraction3.TWO.doubleValue();
      bigFraction3.ONE_HALF.getDenominatorAsInt();
      bigFraction1.ONE_HALF.intValue();
      bigFraction2.equals(bigFraction0);
      bigFraction2.getDenominator();
      bigFraction1.longValue();
      int int0 = (-3692);
      bigFraction1.subtract((-3692));
      // Undeclared exception!
      try { 
        bigFraction1.pow((-3890L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      int int0 = 100;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(2023.0, 100);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,023 to fraction (9,223,372,036,854,773,786/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-315), (-1));
      BigFraction bigFraction1 = bigFraction0.ZERO.negate();
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.subtract((-1));
      bigFraction1.ONE_FIFTH.longValue();
      bigFraction0.getDenominator();
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.add((-315));
      BigFraction bigFraction4 = bigFraction2.subtract(bigFraction0);
      bigFraction4.TWO.doubleValue();
      bigFraction4.ONE_HALF.getDenominatorAsInt();
      bigFraction1.ONE_HALF.intValue();
      bigFraction0.getDenominator();
      bigFraction2.longValue();
      bigFraction0.percentageValue();
      BigFraction bigFraction5 = new BigFraction(9218868437227405312L);
      bigFraction5.reduce();
      bigFraction0.compareTo(bigFraction3);
      bigFraction1.getDenominatorAsLong();
      bigFraction1.toString();
      BigFraction bigFraction6 = BigFraction.TWO_THIRDS;
      bigFraction6.negate();
      BigFraction.getReducedFraction(1350, (-1));
      bigFraction3.add((long) 1);
      BigFraction bigFraction7 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction8 = bigFraction2.multiply(bigFraction6);
      bigFraction8.longValue();
      bigFraction8.intValue();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.bigDecimalValue();
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.subtract(1697L);
      BigFraction bigFraction2 = bigFraction0.abs();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction2.divide(bigInteger0);
      bigFraction2.compareTo(bigFraction3);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction1.multiply(bigFraction3);
      BigFraction bigFraction5 = BigFraction.ONE_QUARTER;
      bigFraction4.pow(bigInteger1);
      BigFraction bigFraction6 = BigFraction.ONE_QUARTER;
      bigFraction6.ONE_HALF.pow(1698L);
      bigFraction3.compareTo(bigFraction4);
      bigFraction5.add(bigFraction6);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.2778315000000475, 0.2778315000000475, 2420);
      BigFraction bigFraction1 = bigFraction0.divide(4);
      bigFraction0.ONE_QUARTER.divide(2420);
      BigFraction bigFraction2 = bigFraction1.multiply(104L);
      bigFraction2.bigDecimalValue(4);
      bigFraction2.getDenominator();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.TWO_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction0.MINUS_ONE.pow(5L);
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.reduce();
      bigFraction0.MINUS_ONE.percentageValue();
      BigFraction bigFraction3 = bigFraction0.subtract((-2198L));
      bigFraction1.divide(bigFraction3);
      BigFraction bigFraction4 = bigFraction1.MINUS_ONE.pow(4675L);
      bigFraction4.FOUR_FIFTHS.divide((-2198L));
      bigFraction0.getDenominatorAsInt();
      bigFraction2.ONE_QUARTER.pow((double) (-2198L));
      bigFraction0.TWO_FIFTHS.getDenominatorAsInt();
      long long0 = 0L;
      bigFraction0.subtract(0L);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(4, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-315), (-1));
      BigFraction bigFraction1 = bigFraction0.ZERO.negate();
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.subtract((-1));
      bigFraction1.ONE_FIFTH.longValue();
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      bigFraction2.ONE_QUARTER.add((-315));
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction0);
      bigFraction3.TWO.doubleValue();
      bigFraction3.ONE_HALF.getDenominatorAsInt();
      bigFraction1.ONE_HALF.intValue();
      bigFraction2.equals(bigFraction0);
      BigInteger bigInteger1 = bigFraction0.getDenominator();
      bigFraction2.longValue();
      BigFraction bigFraction4 = bigFraction1.subtract((-315));
      BigFraction bigFraction5 = bigFraction4.TWO.pow((long) 2);
      BigFraction bigFraction6 = bigFraction3.divide(bigFraction2);
      bigFraction6.longValue();
      BigFraction bigFraction7 = bigFraction2.add(bigFraction1);
      bigFraction7.ONE_HALF.doubleValue();
      BigFraction bigFraction8 = bigFraction3.reciprocal();
      BigFraction bigFraction9 = bigFraction4.ONE_FIFTH.subtract(bigInteger1);
      bigFraction8.ONE_THIRD.divide(1);
      bigFraction8.pow(bigInteger1);
      BigFraction bigFraction10 = bigFraction4.negate();
      bigFraction10.ONE_FIFTH.getDenominatorAsInt();
      bigFraction9.add(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigFraction8.multiply(bigFraction5);
      bigFraction5.pow(bigInteger0);
      BigFraction bigFraction11 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction12 = new BigFraction(1025.7221685, 2);
      BigFraction bigFraction13 = null;
      try {
        bigFraction13 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-315), (-1));
      BigFraction bigFraction1 = bigFraction0.ZERO.negate();
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.subtract((-1));
      bigFraction1.ONE_FIFTH.longValue();
      bigFraction0.getDenominator();
      bigFraction2.ONE_QUARTER.add((-315));
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction0);
      bigFraction3.TWO.doubleValue();
      bigFraction3.ONE_HALF.getDenominatorAsInt();
      bigFraction1.ONE_HALF.intValue();
      bigFraction2.equals(bigFraction0);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      bigFraction2.longValue();
      BigFraction bigFraction4 = BigFraction.THREE_QUARTERS;
      bigFraction4.TWO.pow((long) 2);
      BigFraction bigFraction5 = bigFraction3.divide(bigFraction2);
      bigFraction5.longValue();
      BigFraction bigFraction6 = bigFraction2.add(bigFraction1);
      BigFraction bigFraction7 = bigFraction3.reciprocal();
      BigFraction bigFraction8 = bigFraction4.ONE_FIFTH.subtract(bigInteger0);
      bigFraction8.ONE.getDenominatorAsLong();
      bigFraction7.ONE_THIRD.divide(1);
      bigFraction7.pow(bigInteger0);
      BigFraction bigFraction9 = bigFraction4.negate();
      bigFraction9.longValue();
      Object object0 = new Object();
      bigFraction6.equals("");
      bigFraction0.bigDecimalValue();
      bigFraction1.percentageValue();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-315), (-1));
      BigFraction bigFraction1 = bigFraction0.ZERO.negate();
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.subtract((-1));
      bigFraction1.ONE_FIFTH.longValue();
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.add((-315));
      BigFraction bigFraction4 = bigFraction2.subtract(bigFraction0);
      bigFraction4.TWO.doubleValue();
      bigFraction4.ONE_HALF.getDenominatorAsInt();
      bigFraction1.ONE_HALF.intValue();
      bigFraction2.equals(bigFraction0);
      BigInteger bigInteger1 = bigFraction0.getDenominator();
      BigFraction bigFraction5 = new BigFraction(bigInteger0);
      BigFraction bigFraction6 = bigFraction5.add(bigInteger0);
      bigInteger1.bitLength();
      BigFraction bigFraction7 = bigFraction5.negate();
      bigFraction3.pow((-1));
      BigFraction bigFraction8 = bigFraction6.add(bigFraction3);
      BigFraction bigFraction9 = bigFraction8.subtract(62);
      bigFraction8.add(bigInteger0);
      bigFraction9.add((long) (-1902));
      bigFraction7.multiply((-1));
      bigFraction6.getNumerator();
      bigFraction5.floatValue();
      bigFraction3.getField();
      BigInteger bigInteger2 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction5.divide(bigInteger2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1697.6329, 1315);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-9223372036854775808L), 3054L);
      BigFraction bigFraction1 = bigFraction0.pow(37);
      bigFraction1.getNumeratorAsLong();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2618L));
      bigFraction0.percentageValue();
      bigFraction0.subtract((long) 37);
      bigFraction0.abs();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)100;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      bigFraction1.compareTo(bigFraction0);
      bigFraction1.hashCode();
      bigFraction1.pow((int) (byte)100);
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      Object object0 = new Object();
      bigFraction0.doubleValue();
      double double0 = 0.0;
      int int0 = 726;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((-1.0), 0.0, 726);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1 to fraction (-9,223,372,036,854,775,806/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2618L));
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply((-610));
      bigFraction1.longValue();
      Object object0 = new Object();
      bigFraction1.equals(object0);
      BigFraction bigFraction2 = new BigFraction(1.3260791301727295);
      bigFraction2.bigDecimalValue();
      bigFraction0.percentageValue();
      bigFraction1.add(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.percentageValue();
      int int0 = 37;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction2.multiply(bigInteger0);
      bigFraction3.longValue();
      BigFraction bigFraction4 = bigFraction0.reduce();
      BigFraction bigFraction5 = BigFraction.getReducedFraction(37, 37);
      bigFraction5.subtract(bigFraction3);
      bigFraction4.longValue();
      BigFraction bigFraction6 = new BigFraction(16L, 479.348620395174, 37);
      bigFraction2.TWO_QUARTERS.divide(bigFraction6);
      bigFraction0.pow(0.5012516235449311);
      bigFraction3.divide(bigFraction5);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.ONE_THIRD.floatValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.ONE_QUARTER.multiply(0);
      bigFraction0.intValue();
      bigFraction1.ONE_THIRD.doubleValue();
      bigFraction0.percentageValue();
      bigFraction0.intValue();
      bigFraction1.multiply(872);
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      bigFraction2.TWO_THIRDS.subtract((long) 0);
      bigFraction2.divide(1279);
      bigFraction1.pow(0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.pow(0L);
      BigFraction bigFraction3 = bigFraction0.ONE_FIFTH.multiply(bigFraction1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)100;
      bigFraction0.TWO_QUARTERS.subtract((long) (byte)0);
      bigFraction1.ONE_THIRD.abs();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.divide(bigInteger0);
      bigFraction2.compareTo(bigFraction1);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction0.multiply(bigFraction3);
      BigFraction bigFraction4 = BigFraction.ONE_QUARTER;
      bigFraction4.pow(bigInteger0);
      BigFraction bigFraction5 = BigFraction.ONE_QUARTER;
      bigFraction1.compareTo(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2618L));
      bigFraction0.percentageValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      bigFraction2.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.negate();
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction4 = bigFraction1.add(bigFraction2);
      bigFraction1.hashCode();
      bigFraction4.divide(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction5 = BigFraction.ONE_HALF;
      bigFraction5.subtract(bigInteger1);
      bigFraction2.negate();
      bigFraction4.percentageValue();
      bigFraction3.pow((double) (-610));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483648L, 2147483648L);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.pow(0L);
      BigFraction bigFraction3 = bigFraction0.ONE_FIFTH.multiply(bigFraction1);
      BigFraction bigFraction4 = bigFraction2.pow((-1632L));
      BigFraction bigFraction5 = bigFraction3.divide(bigFraction4);
      bigFraction1.longValue();
      bigFraction1.add(bigFraction5);
      bigFraction2.doubleValue();
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-315), (-1));
      BigFraction bigFraction1 = bigFraction0.ZERO.negate();
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.subtract((-1));
      bigFraction1.ONE_FIFTH.longValue();
      bigFraction0.getDenominator();
      bigFraction2.ONE_QUARTER.add((-315));
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction0);
      bigFraction3.TWO.doubleValue();
      bigFraction3.ONE_HALF.getDenominatorAsInt();
      bigFraction1.ONE_HALF.intValue();
      bigFraction2.equals(bigFraction0);
      bigFraction0.getDenominator();
      bigFraction2.longValue();
      BigFraction bigFraction4 = bigFraction1.subtract((-315));
      byte byte0 = (byte)100;
      bigFraction4.subtract((long) (-315));
      bigFraction1.abs();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.divide((-2644281811660520851L));
      bigFraction0.hashCode();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.ZERO.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.reduce();
      bigFraction2.getDenominatorAsInt();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction0);
      BigFraction bigFraction4 = bigFraction3.THREE_QUARTERS.reduce();
      bigFraction3.TWO_THIRDS.getField();
      BigFraction bigFraction5 = bigFraction3.ONE_QUARTER.add(bigInteger0);
      bigFraction5.ONE_HALF.multiply(1);
      bigFraction5.TWO_QUARTERS.add(bigInteger0);
      bigInteger0.bitLength();
      BigFraction bigFraction6 = bigFraction3.ONE_FIFTH.negate();
      bigFraction6.TWO_FIFTHS.pow((-1902));
      BigFraction bigFraction7 = bigFraction0.FOUR_FIFTHS.add(bigFraction6);
      BigFraction bigFraction8 = bigFraction7.MINUS_ONE.subtract(1);
      BigFraction bigFraction9 = bigFraction8.ZERO.add(bigInteger0);
      bigFraction0.ONE.add((long) 2);
      bigFraction1.multiply(100);
      BigInteger bigInteger1 = bigFraction1.getNumerator();
      bigFraction1.floatValue();
      bigFraction4.getField();
      bigFraction3.divide(bigInteger1);
      bigFraction3.getNumeratorAsInt();
      bigFraction8.toString();
      BigFraction bigFraction10 = bigFraction6.multiply(bigInteger0);
      bigFraction9.multiply((long) 2);
      // Undeclared exception!
      try { 
        bigFraction10.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.ONE_THIRD.add(bigInteger0);
      bigFraction0.ZERO.compareTo(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = (-1973);
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1973), (-1973));
      bigFraction0.THREE_FIFTHS.getDenominatorAsInt();
      bigFraction0.reduce();
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.bigDecimalValue(223);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.add(941);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.TWO.reciprocal();
      BigFraction bigFraction4 = bigFraction0.add(915);
      BigFraction bigFraction5 = bigFraction3.divide(67);
      bigFraction5.ONE_FIFTH.multiply(bigInteger0);
      bigFraction2.add(bigFraction4);
      bigFraction5.pow(1.0);
      bigFraction0.reciprocal();
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.ONE_THIRD.floatValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.multiply(0);
      bigFraction0.intValue();
      bigFraction1.ONE_THIRD.doubleValue();
      bigFraction0.percentageValue();
      bigFraction0.intValue();
      BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction0.multiply(bigInteger1);
      bigFraction4.TWO_FIFTHS.longValue();
      bigFraction3.reduce();
      BigFraction bigFraction5 = bigFraction2.subtract(bigFraction1);
      bigFraction1.longValue();
      bigFraction5.pow((double) 0.33333334F);
      bigFraction1.ONE.divide(bigFraction3);
      bigFraction4.bigDecimalValue();
      bigFraction3.subtract(0);
      bigFraction1.getNumerator();
      bigFraction3.getNumerator();
      bigFraction0.bigDecimalValue(0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.ONE_FIFTH.longValue();
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction0.THREE_FIFTHS.add(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      Object object0 = new Object();
      bigFraction0.THREE_QUARTERS.equals(object0);
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.pow(0L);
      bigFraction0.ONE_FIFTH.multiply(bigFraction1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)100;
      BigFraction bigFraction3 = bigFraction0.TWO_QUARTERS.subtract((long) (byte)0);
      bigFraction1.ONE_THIRD.abs();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction4 = bigFraction0.divide(bigInteger0);
      bigFraction2.compareTo(bigFraction1);
      bigFraction4.hashCode();
      bigFraction3.pow(37);
      // Undeclared exception!
      try { 
        bigFraction4.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.ZERO.multiply(1);
      BigFraction bigFraction4 = bigFraction3.ONE_QUARTER.negate();
      bigFraction4.ONE_FIFTH.subtract(0L);
      BigFraction bigFraction5 = BigFraction.getReducedFraction(333, 333);
      bigFraction5.MINUS_ONE.negate();
      bigFraction0.subtract((long) Integer.MAX_VALUE);
      BigFraction bigFraction6 = bigFraction0.multiply((-1285));
      bigFraction3.add((long) (-1285));
      bigFraction2.multiply(Integer.MAX_VALUE);
      bigFraction6.intValue();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(1);
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.multiply(bigFraction1);
      bigFraction2.ONE.doubleValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction2.divide(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction5 = bigFraction0.multiply(0);
      bigFraction4.ONE_QUARTER.percentageValue();
      bigFraction4.reduce();
      bigFraction5.compareTo(bigFraction0);
      bigFraction4.getDenominatorAsLong();
      bigFraction2.toString();
      bigFraction1.negate();
      BigFraction bigFraction6 = BigFraction.getReducedFraction((-1), (-643));
      bigFraction6.ONE_HALF.add(1759L);
      bigFraction3.divide(bigInteger0);
      BigFraction bigFraction7 = bigFraction6.multiply(bigFraction2);
      bigFraction7.longValue();
      bigFraction5.intValue();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = new BigFraction((-1), (-1));
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.TWO.divide((long) (-1));
      bigFraction1.toString();
      BigFraction bigFraction4 = BigFraction.getReducedFraction(4, 4);
      bigFraction4.TWO.toString();
      bigFraction4.ONE_HALF.getField();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction5 = bigFraction1.multiply(bigInteger0);
      bigFraction0.FOUR_FIFTHS.toString();
      bigFraction5.doubleValue();
      BigFraction bigFraction6 = bigFraction5.TWO.multiply(bigFraction3);
      bigFraction6.ONE.pow(196);
      bigFraction1.getNumeratorAsInt();
      BigFraction bigFraction7 = bigFraction2.divide(bigFraction5);
      bigFraction7.TWO_FIFTHS.pow((-589.96799782));
      bigFraction6.add((long) (-1));
      bigFraction4.pow(4005);
      bigFraction7.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3129.62212917);
      bigFraction0.longValue();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.subtract((long) (byte) (-127));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction0.ONE.subtract(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.negate();
      bigFraction1.ONE_QUARTER.multiply((long) (byte) (-127));
      bigFraction0.ONE.getDenominatorAsLong();
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)103;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigFraction0.ONE_QUARTER.add(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigFraction2.TWO_THIRDS.multiply(bigFraction3);
      bigFraction0.pow(bigInteger2);
      BigFraction bigFraction4 = BigFraction.ONE_QUARTER;
      bigFraction2.compareTo(bigFraction4);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.abs();
      BigFraction bigFraction2 = BigFraction.THREE_FIFTHS;
      bigFraction0.THREE_FIFTHS.divide(bigFraction2);
      bigFraction0.getField();
      bigFraction0.hashCode();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)4;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.divide(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction1.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1L));
      bigFraction0.ONE_FIFTH.negate();
      bigFraction0.intValue();
      bigFraction0.ONE_THIRD.multiply((-1L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction1.ONE_THIRD.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.ZERO.toString();
      bigFraction0.ONE_HALF.toString();
      BigFraction bigFraction1 = bigFraction0.subtract(0);
      bigFraction0.floatValue();
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.multiply(2618);
      bigFraction1.ZERO.floatValue();
      bigFraction0.ONE_HALF.getNumeratorAsInt();
      bigFraction0.doubleValue();
      bigFraction0.intValue();
      BigFraction bigFraction3 = bigFraction1.TWO_QUARTERS.pow((long) 1);
      bigFraction1.getNumeratorAsLong();
      bigFraction2.MINUS_ONE.bigDecimalValue();
      bigFraction0.ZERO.compareTo(bigFraction2);
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction0.abs();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.TWO_QUARTERS.pow(bigInteger0);
      BigFraction bigFraction5 = bigFraction2.subtract(bigFraction1);
      bigFraction5.ONE.hashCode();
      bigFraction0.floatValue();
      bigFraction5.longValue();
      bigFraction4.reciprocal();
      bigFraction3.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.TWO.floatValue();
      BigFraction bigFraction1 = new BigFraction(2229, 2229);
      bigFraction1.MINUS_ONE.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.ONE.subtract(bigFraction1);
      bigFraction0.MINUS_ONE.compareTo(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction1.ONE_QUARTER.divide(bigFraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.FOUR_FIFTHS.pow(0.0);
      long long0 = 2392L;
      bigFraction0.ONE_THIRD.add(2392L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction1.TWO_QUARTERS.intValue();
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.add(0);
      // Undeclared exception!
      try { 
        bigFraction3.ZERO.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      int int0 = (-1);
      bigFraction0.TWO_FIFTHS.add((-1));
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-806), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = 1204;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 1204);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.FOUR_FIFTHS.bigDecimalValue();
      BigFraction bigFraction1 = bigFraction0.add(0L);
      bigFraction1.ONE.percentageValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.THREE_FIFTHS.add(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction1.multiply(bigInteger1);
      BigFraction.getReducedFraction((-4084), (-4084));
      BigFraction bigFraction3 = bigFraction2.ONE_HALF.divide(bigInteger1);
      BigFraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      BigFraction bigFraction4 = bigFraction0.multiply(bigInteger1);
      BigFraction bigFraction5 = bigFraction4.ONE_QUARTER.add(bigFraction0);
      BigFraction bigFraction6 = bigFraction5.THREE_QUARTERS.multiply(bigInteger0);
      bigFraction6.THREE_FIFTHS.pow(1540);
      bigFraction4.getField();
      BigFraction.getReducedFraction((-4084), Integer.MIN_VALUE);
      bigFraction4.multiply(bigInteger1);
      bigFraction3.multiply(bigFraction0);
      bigFraction0.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.FOUR_FIFTHS.doubleValue();
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(0.8, 0.8, (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.8 to fraction after -1 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = new BigFraction(0);
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.ONE.pow(bigInteger0);
      bigFraction0.divide(610L);
      bigFraction0.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction0.divide(bigFraction1);
      bigFraction0.reciprocal();
      bigFraction0.pow((-2.0582596893119236E-232));
      BigFraction.getReducedFraction((-1), (-1));
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.ONE_THIRD.getDenominatorAsInt();
      bigFraction0.THREE_QUARTERS.bigDecimalValue(3);
      bigFraction0.getField();
      bigFraction0.intValue();
      BigFraction bigFraction1 = bigFraction0.subtract((-302932621132653753L));
      BigFraction bigFraction2 = bigFraction1.reduce();
      bigFraction1.toString();
      bigFraction2.TWO_QUARTERS.bigDecimalValue();
      bigFraction2.THREE_QUARTERS.divide(bigFraction0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction2.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2618L));
      bigFraction0.percentageValue();
      bigFraction0.ONE_HALF.multiply((-610));
      bigFraction0.divide(37);
      bigFraction0.pow(1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-483.208039476495));
      byte[] byteArray0 = new byte[5];
      bigFraction0.MINUS_ONE.getField();
      byteArray0[0] = (byte)122;
      bigFraction0.ONE.percentageValue();
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      bigFraction0.TWO_THIRDS.subtract((long) (byte)0);
      byteArray0[4] = (byte) (-125);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction1.ONE.getField();
      bigFraction1.TWO.getField();
      bigFraction1.ONE_HALF.getDenominatorAsLong();
      bigFraction0.getNumeratorAsLong();
      bigFraction0.divide((long) (byte) (-125));
      bigFraction1.multiply(0);
      bigFraction0.longValue();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      long long0 = 0L;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_FIFTH.abs();
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.ONE_HALF.toString();
      bigFraction0.THREE_QUARTERS.add(bigFraction1);
      bigFraction0.getNumeratorAsInt();
      bigFraction0.toString();
      BigFraction bigFraction2 = bigFraction0.divide(1);
      bigFraction2.pow(1689L);
      // Undeclared exception!
      try { 
        bigFraction1.ONE_FIFTH.bigDecimalValue(1, 434);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-315), (-1));
      BigFraction bigFraction1 = bigFraction0.ZERO.negate();
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.subtract((-1));
      bigFraction1.ONE_FIFTH.longValue();
      bigFraction0.getDenominator();
      bigFraction2.ONE_QUARTER.add((-315));
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction0);
      bigFraction3.TWO.doubleValue();
      bigFraction3.ONE_HALF.getDenominatorAsInt();
      bigFraction1.ONE_HALF.intValue();
      bigFraction2.equals(bigFraction0);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      bigFraction2.longValue();
      BigFraction bigFraction4 = bigFraction1.subtract((-315));
      BigFraction bigFraction5 = bigFraction4.TWO.pow((long) 2);
      BigFraction bigFraction6 = bigFraction3.divide(bigFraction2);
      long long0 = bigFraction6.longValue();
      assertEquals((-209L), long0);
      
      BigFraction bigFraction7 = bigFraction2.add(bigFraction1);
      bigFraction7.ONE_HALF.doubleValue();
      BigFraction bigFraction8 = bigFraction3.reciprocal();
      bigFraction4.ONE_FIFTH.subtract(bigInteger0);
      BigFraction bigFraction9 = bigFraction8.ONE_THIRD.divide(1);
      BigFraction bigFraction10 = bigFraction8.pow(bigInteger0);
      BigFraction bigFraction11 = bigFraction4.negate();
      bigFraction11.ONE_FIFTH.getDenominatorAsInt();
      BigFraction bigFraction12 = bigFraction9.TWO_THIRDS.add(bigFraction10);
      assertEquals((short)0, bigFraction12.shortValue());
      
      bigFraction4.hashCode();
      BigFraction bigFraction13 = bigFraction10.divide(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction14 = bigFraction13.ONE_THIRD.subtract(bigInteger1);
      bigFraction9.negate();
      assertFalse(bigFraction8.equals((Object)bigFraction14));
      assertSame(bigFraction2, bigFraction7);
      assertTrue(bigFraction8.equals((Object)bigFraction13));
      
      bigFraction0.percentageValue();
      bigFraction5.pow(343.291);
      assertFalse(bigFraction1.equals((Object)bigFraction12));
      assertTrue(bigFraction0.equals((Object)bigFraction4));
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(136L);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction2.MINUS_ONE.getNumeratorAsInt();
      byte[] byteArray0 = new byte[7];
      BigFraction bigFraction3 = bigFraction1.TWO.pow(1);
      BigFraction bigFraction4 = bigFraction0.ONE_QUARTER.divide(1);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)117;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction5 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction6 = bigFraction5.TWO_THIRDS.add(bigInteger0);
      bigFraction6.THREE_FIFTHS.multiply(bigInteger0);
      bigFraction1.getNumeratorAsLong();
      bigFraction3.getNumerator();
      assertEquals((byte)2, bigFraction3.byteValue());
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      
      BigFraction bigFraction7 = bigFraction5.ONE_FIFTH.subtract(bigFraction4);
      BigFraction bigFraction8 = bigFraction7.FOUR_FIFTHS.subtract(1);
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertEquals((short)0, bigFraction8.shortValue());
      assertEquals((short)0, bigFraction7.shortValue());
      
      double double0 = bigFraction4.pow((-1144.4148109960022));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = bigFraction5.percentageValue();
      assertEquals(3.8844327669771817E18, double1, 0.01);
      
      BigFraction bigFraction9 = bigFraction4.negate();
      assertFalse(bigFraction9.equals((Object)bigFraction4));
      
      bigFraction1.getNumeratorAsInt();
      bigFraction2.getNumerator();
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertEquals((byte)120, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.multiply((-2620));
      bigFraction0.TWO_FIFTHS.intValue();
      bigFraction0.getField();
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.multiply(1404L);
      bigFraction2.THREE_FIFTHS.doubleValue();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction0.subtract(869);
      double double0 = bigFraction3.TWO_FIFTHS.pow((double) 869);
      assertEquals(0.0, double0, 0.01);
      
      bigFraction0.bigDecimalValue((-56), 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction2.ONE_FIFTH.divide(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.ONE_FIFTH.divide(bigFraction2);
      bigFraction5.ONE_FIFTH.getField();
      bigFraction3.MINUS_ONE.multiply(bigFraction2);
      BigFraction bigFraction6 = BigFraction.getReducedFraction(0, 869);
      bigFraction6.FOUR_FIFTHS.pow((double) 0);
      BigFraction bigFraction7 = bigFraction2.add(bigFraction3);
      bigFraction7.THREE_QUARTERS.floatValue();
      BigFraction bigFraction8 = bigFraction7.multiply(bigInteger0);
      bigFraction0.getDenominatorAsLong();
      bigFraction0.equals(bigFraction5);
      bigFraction0.longValue();
      BigFraction bigFraction9 = BigFraction.getReducedFraction(0, (-2620));
      bigFraction9.ONE_THIRD.getDenominatorAsInt();
      double double1 = bigFraction9.ONE.doubleValue();
      assertSame(bigFraction9, bigFraction6);
      assertFalse(bigFraction9.equals((Object)bigFraction8));
      assertEquals(1.0, double1, 0.01);
      assertEquals((byte)0, bigFraction9.byteValue());
      
      float float0 = bigFraction4.floatValue();
      assertEquals(0.02F, float0, 0.01F);
      
      int int0 = bigFraction1.compareTo(bigFraction2);
      assertEquals((-1), int0);
      assertEquals((short) (-2096), bigFraction1.shortValue());
      
      BigFraction bigFraction10 = bigFraction5.add(bigFraction3);
      bigFraction5.add(bigInteger0);
      BigFraction bigFraction11 = bigFraction10.multiply(bigFraction7);
      assertEquals((byte)81, bigFraction11.byteValue());
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      
      BigFraction bigFraction12 = bigFraction5.abs();
      assertFalse(bigFraction12.equals((Object)bigFraction10));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertNotSame(bigFraction0, bigFraction9);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      int int0 = 859;
      BigFraction bigFraction0 = new BigFraction((-159), 859);
      bigFraction0.ONE.divide((long) (-159));
      bigFraction0.floatValue();
      int int1 = 1292;
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.bigDecimalValue(1292);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
