/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:43:10 GMT 2020
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 703;
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ZERO.getNumeratorAsLong();
      bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert infinite value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.divide(1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger0);
      bigFraction1.ONE_FIFTH.equals(bigFraction2);
      bigFraction2.TWO_THIRDS.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction1.ONE_FIFTH.subtract(bigFraction0);
      bigFraction2.THREE_QUARTERS.pow(bigInteger0);
      bigFraction1.ZERO.compareTo(bigFraction2);
      BigFraction bigFraction4 = bigFraction2.TWO_FIFTHS.divide(2082408385);
      bigFraction1.TWO_FIFTHS.hashCode();
      bigFraction2.MINUS_ONE.subtract(2139127680);
      BigFraction bigFraction5 = bigFraction4.ONE_THIRD.negate();
      bigFraction3.ZERO.pow((long) 2082408385);
      bigFraction5.ZERO.reduce();
      bigFraction1.getField();
      BigFraction bigFraction6 = bigFraction4.pow(2646);
      bigFraction6.doubleValue();
      BigFraction bigFraction7 = BigFraction.getReducedFraction(1, 4);
      BigFraction bigFraction8 = bigFraction7.TWO_FIFTHS.reciprocal();
      bigFraction0.ZERO.subtract((-1));
      BigFraction bigFraction9 = bigFraction0.multiply(1217);
      BigFraction bigFraction10 = bigFraction9.ONE_FIFTH.negate();
      bigFraction10.ONE_THIRD.negate();
      BigFraction bigFraction11 = bigFraction8.multiply((-369L));
      bigFraction11.multiply(bigFraction3);
      bigFraction1.add((long) (-1));
      bigFraction1.subtract(bigFraction0);
      bigFraction8.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.THREE_QUARTERS.reciprocal();
      BigInteger bigInteger0 = BigInteger.valueOf((-1646L));
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2130836487, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.TWO_THIRDS.intValue();
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.divide((-3208));
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.subtract(2597);
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger0);
      bigFraction2.FOUR_FIFTHS.doubleValue();
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.negate();
      bigFraction3.THREE_QUARTERS.getField();
      BigFraction bigFraction5 = bigFraction3.multiply(bigFraction2);
      BigFraction bigFraction6 = bigFraction2.add(bigFraction4);
      bigFraction5.getField();
      bigFraction6.ONE_HALF.subtract(bigInteger0);
      bigFraction6.bigDecimalValue(3293, 0);
      bigFraction3.subtract(1431655765);
      bigFraction1.subtract((-1899L));
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(2114445438, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      bigFraction0.TWO_FIFTHS.getNumeratorAsLong();
      bigFraction0.ONE_QUARTER.getNumeratorAsInt();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1, (-6919));
      bigFraction1.THREE_QUARTERS.intValue();
      bigFraction0.ONE_FIFTH.floatValue();
      BigFraction bigFraction2 = bigFraction0.add((-4816));
      bigFraction2.THREE_QUARTERS.negate();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction2.add(bigInteger0);
      bigFraction3.bigDecimalValue(1);
      bigFraction2.getDenominatorAsInt();
      bigFraction2.floatValue();
      BigFraction bigFraction4 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.multiply(2L);
      bigFraction5.ONE_QUARTER.reciprocal();
      BigFraction.getReducedFraction(1, 1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction0.equals(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(8, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2146141470));
      bigFraction0.getNumeratorAsInt();
      bigFraction0.negate();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2130.5167207366353));
      BigFraction bigFraction1 = bigFraction0.pow((-1649));
      bigFraction1.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2146141470));
      // Undeclared exception!
      try { 
        bigFraction0.TWO_THIRDS.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-121L), (-121L));
      BigFraction bigFraction1 = new BigFraction((-1.0));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-42);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.06601906666662671);
      bigFraction0.getDenominatorAsInt();
      bigFraction0.equals("Ox 5");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        bigFraction1.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = null;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.5006662579253316E-11);
      bigFraction0.pow(1.5006662579253316E-11);
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_FIFTH.doubleValue();
      BigFraction bigFraction2 = bigFraction0.divide(2272);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.divide(100);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.equals((Object) null);
      bigFraction0.getNumeratorAsLong();
      bigFraction0.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      // Undeclared exception!
      try { 
        bigFraction0.ONE.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction((-121L), (-121L));
      bigFraction0.multiply(bigInteger0);
      bigFraction0.add(bigInteger0);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(2.4240442814945802E83, 0.0011206170341291205, 1431655765);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 242,404,428,149,458,020,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.TWO_QUARTERS.hashCode();
      bigFraction0.ONE.add(bigFraction1);
      bigFraction0.doubleValue();
      bigFraction0.multiply(4643211215818981376L);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2143.29197));
      Object object0 = new Object();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.divide(bigInteger0);
      Object object1 = new Object();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction0.TWO.reduce();
      bigFraction0.floatValue();
      bigFraction0.doubleValue();
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1114), (-1114));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigInteger0.signum();
      BigFraction bigFraction2 = bigFraction1.pow(176L);
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.divide((long) (-1114));
      bigFraction2.bigDecimalValue();
      bigFraction0.subtract(629);
      BigFraction bigFraction4 = new BigFraction(629);
      bigFraction1.ONE_QUARTER.intValue();
      bigFraction2.ONE.reciprocal();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction5 = BigFraction.ZERO;
      bigFraction3.reduce();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction6 = bigFraction0.subtract(bigInteger0);
      bigFraction6.pow(0);
      BigFraction.getReducedFraction(163, (-1114));
      bigFraction5.multiply(bigFraction3);
      BigFraction bigFraction7 = new BigFraction(bigInteger1, bigInteger0);
      bigFraction7.divide(1931);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(938L, 938L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction0.add(bigFraction1);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = BigFraction.TWO;
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction((-1330.436047245124));
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigInteger0.signum();
      bigFraction0.pow((long) 1);
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction3 = new BigFraction(2135350950);
      bigFraction0.intValue();
      BigFraction bigFraction4 = bigFraction3.reciprocal();
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction5 = BigFraction.ZERO;
      bigFraction4.reduce();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction5.subtract(bigInteger0);
      bigFraction3.pow(62);
      BigFraction.getReducedFraction(491, 1);
      bigFraction1.multiply(bigFraction0);
      bigFraction0.divide(1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.subtract(4194304L);
      BigFraction bigFraction3 = BigFraction.ONE;
      BigFraction bigFraction4 = bigFraction3.ONE.add(bigFraction0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction5 = bigFraction0.multiply(bigInteger1);
      BigFraction bigFraction6 = bigFraction5.FOUR_FIFTHS.multiply(bigFraction1);
      bigFraction6.ONE_HALF.multiply(bigInteger1);
      BigFraction bigFraction7 = bigFraction5.add(bigInteger1);
      BigFraction bigFraction8 = bigFraction7.divide(bigFraction0);
      BigFraction bigFraction9 = bigFraction8.FOUR_FIFTHS.reduce();
      bigFraction8.toString();
      BigFraction bigFraction10 = bigFraction2.pow(bigInteger0);
      bigFraction10.ZERO.multiply(2147373257);
      bigFraction6.divide(1908874353);
      bigFraction2.longValue();
      bigFraction9.compareTo(bigFraction4);
      // Undeclared exception!
      try { 
        bigFraction5.pow((-4194303L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9007199254455808L);
      bigFraction0.add(9007189909831680L);
      bigFraction0.floatValue();
      bigFraction0.doubleValue();
      bigFraction0.abs();
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1114), (-1114));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigInteger0.signum();
      BigFraction bigFraction2 = bigFraction1.pow(176L);
      bigFraction2.TWO_QUARTERS.divide((long) (-1114));
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction0.subtract(629);
      BigFraction bigFraction4 = new BigFraction(629);
      bigFraction1.ONE_QUARTER.intValue();
      bigFraction2.ONE.reciprocal();
      bigFraction4.MINUS_ONE.getDenominatorAsLong();
      BigFraction bigFraction5 = bigFraction3.multiply(bigInteger0);
      bigFraction5.reduce();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction5.subtract(bigInteger0);
      bigFraction3.pow(1);
      BigFraction bigFraction6 = BigFraction.MINUS_ONE;
      BigFraction bigFraction7 = bigFraction2.multiply(bigFraction3);
      // Undeclared exception!
      try { 
        bigFraction7.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(943L);
      bigFraction1.longValue();
      bigFraction1.percentageValue();
      bigFraction1.getDenominator();
      int int0 = (-710);
      bigFraction0.TWO_FIFTHS.abs();
      bigFraction1.ONE_HALF.negate();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-710));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1114), (-1114));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigInteger0.signum();
      BigFraction bigFraction2 = bigFraction1.pow(176L);
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.divide((long) (-1114));
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction0.subtract(629);
      BigFraction bigFraction5 = new BigFraction(629);
      bigFraction1.ONE_QUARTER.intValue();
      BigFraction bigFraction6 = bigFraction2.ONE.reciprocal();
      bigFraction5.MINUS_ONE.getDenominatorAsLong();
      BigFraction bigFraction7 = bigFraction4.multiply(bigInteger0);
      BigFraction bigFraction8 = bigFraction7.reduce();
      bigFraction8.MINUS_ONE.add((-418));
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction2.subtract(bigInteger1);
      bigFraction3.pow(1);
      bigFraction0.toString();
      bigFraction6.subtract(bigInteger1);
      Random.setNextRandom(350);
      bigFraction8.getNumerator();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.multiply((-1075));
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction1.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.multiply(bigFraction2);
      BigFraction bigFraction5 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction6 = bigFraction5.add(bigInteger0);
      BigFraction bigFraction7 = bigFraction6.divide(bigFraction3);
      BigFraction bigFraction8 = bigFraction1.reduce();
      bigFraction8.toString();
      bigFraction4.pow(bigInteger0);
      BigFraction bigFraction9 = bigFraction6.multiply((-1075));
      bigFraction2.divide((-1451));
      bigFraction6.divide(2060);
      bigFraction9.pow(bigInteger0);
      BigFraction.getReducedFraction(1646, (-1451));
      bigFraction9.divide((long) (-1075));
      bigFraction1.add(bigInteger0);
      bigFraction7.getDenominator();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-315L), 938L);
      bigFraction0.longValue();
      bigFraction0.percentageValue();
      bigFraction0.getDenominator();
      bigFraction0.toString();
      bigFraction0.longValue();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1114), (-1114));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigInteger0.signum();
      BigFraction bigFraction2 = bigFraction1.pow(176L);
      bigFraction2.TWO_QUARTERS.divide((long) (-1114));
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction0.subtract(629);
      BigFraction bigFraction4 = new BigFraction(629);
      bigFraction1.ONE_QUARTER.intValue();
      bigFraction2.ONE.reciprocal();
      bigFraction4.MINUS_ONE.getDenominatorAsLong();
      BigFraction bigFraction5 = bigFraction3.multiply(bigInteger0);
      BigFraction bigFraction6 = bigFraction5.reduce();
      bigFraction6.MINUS_ONE.add((-418));
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction2.subtract(bigInteger1);
      bigFraction4.divide(bigFraction5);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2148L), (-315L));
      BigFraction bigFraction1 = bigFraction0.pow(243L);
      bigFraction0.longValue();
      bigFraction1.percentageValue();
      bigFraction1.getDenominator();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue((-710));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-301L), 938L);
      BigFraction bigFraction1 = bigFraction0.pow(938L);
      bigFraction1.longValue();
      bigFraction1.hashCode();
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((double) 938L, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 938 to fraction (-937/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction1.divide((long) (-1));
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      bigFraction1.equals(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction0.add(bigFraction1);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.subtract(4194304L);
      BigFraction bigFraction3 = bigFraction2.ONE_FIFTH.multiply(2147373277);
      bigFraction3.ONE.add(bigFraction0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction0.multiply(bigInteger1);
      BigFraction bigFraction5 = bigFraction4.FOUR_FIFTHS.multiply(bigFraction1);
      bigFraction5.ONE_HALF.multiply(bigInteger1);
      BigFraction bigFraction6 = bigFraction4.add(bigInteger1);
      BigFraction bigFraction7 = bigFraction6.divide(bigFraction0);
      bigFraction7.FOUR_FIFTHS.reduce();
      bigFraction7.toString();
      BigFraction bigFraction8 = bigFraction2.pow(bigInteger0);
      bigFraction8.ZERO.multiply(2147373277);
      BigFraction bigFraction9 = bigFraction5.divide(1908874353);
      bigFraction0.ZERO.divide(2147483639);
      BigFraction bigFraction10 = bigFraction0.pow(bigInteger1);
      bigFraction10.divide((long) 2147483639);
      bigFraction9.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      int int0 = 1891;
      BigFraction bigFraction0 = new BigFraction(0.0011206170340756216, 0.0011206170340756216, 1891);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-128);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger2);
      bigInteger2.signum();
      BigFraction bigFraction2 = new BigFraction((-815L));
      bigFraction2.ZERO.longValue();
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      bigFraction1.add(177L);
      BigFraction bigFraction4 = bigFraction0.add(bigFraction3);
      bigFraction4.FOUR_FIFTHS.add(1891);
      bigFraction4.TWO_QUARTERS.subtract(bigFraction0);
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction(1.1004323959350586, (-815L), (byte)46);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1.1 to fraction (196,741,231,045/178,785,386,337)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.subtract(4194304L);
      BigFraction bigFraction3 = bigFraction2.ONE_FIFTH.multiply(Integer.MAX_VALUE);
      bigFraction3.ONE.add(bigFraction0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction0.multiply(bigInteger1);
      BigFraction bigFraction5 = bigFraction4.FOUR_FIFTHS.multiply(bigFraction1);
      bigFraction5.ONE_HALF.multiply(bigInteger1);
      BigFraction bigFraction6 = bigFraction4.add(bigInteger1);
      BigFraction bigFraction7 = bigFraction6.divide(bigFraction0);
      bigFraction7.FOUR_FIFTHS.reduce();
      bigFraction6.toString();
      BigFraction bigFraction8 = bigFraction2.pow(bigInteger0);
      BigFraction bigFraction9 = bigFraction8.ZERO.multiply(Integer.MAX_VALUE);
      bigFraction8.subtract(bigInteger1);
      bigFraction9.pow(2325);
      BigFraction bigFraction10 = BigFraction.MINUS_ONE;
      BigFraction bigFraction11 = BigFraction.ZERO;
      bigFraction5.multiply(bigFraction11);
      BigFraction bigFraction12 = BigFraction.ONE_THIRD;
      bigFraction12.divide(2325);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = new BigFraction(38.0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(24, mockRandom0);
      BigFraction bigFraction2 = new BigFraction(bigInteger1);
      bigFraction1.compareTo(bigFraction0);
      bigFraction1.divide(24);
      bigFraction0.longValue();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.subtract(4194304L);
      BigFraction bigFraction3 = bigFraction2.ONE_FIFTH.multiply(Integer.MAX_VALUE);
      BigFraction bigFraction4 = bigFraction3.ONE.add(bigFraction0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction5 = bigFraction0.multiply(bigInteger1);
      BigFraction bigFraction6 = bigFraction5.FOUR_FIFTHS.multiply(bigFraction1);
      bigFraction6.ONE_HALF.multiply(bigInteger1);
      BigFraction bigFraction7 = bigFraction5.add(bigInteger1);
      BigFraction bigFraction8 = bigFraction7.divide(bigFraction0);
      bigFraction8.FOUR_FIFTHS.reduce();
      bigFraction7.toString();
      BigFraction bigFraction9 = bigFraction2.pow(bigInteger0);
      bigFraction9.ZERO.multiply(Integer.MAX_VALUE);
      bigFraction6.divide(1908874353);
      bigFraction0.ZERO.divide(2147483639);
      bigFraction0.pow(bigInteger1);
      bigFraction4.floatValue();
      bigFraction4.divide(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.toString();
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(454L);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.add(454L);
      bigFraction1.ONE.floatValue();
      bigFraction1.doubleValue();
      bigFraction0.abs();
      BigFraction bigFraction2 = BigFraction.ONE_QUARTER;
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1114), (-1114));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigInteger0.signum();
      BigFraction bigFraction2 = bigFraction1.pow(176L);
      bigFraction2.TWO_QUARTERS.divide((long) (-1114));
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction0.subtract(629);
      BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.subtract(bigFraction2);
      bigFraction1.ONE_QUARTER.intValue();
      bigFraction2.ONE.reciprocal();
      bigFraction4.MINUS_ONE.getDenominatorAsLong();
      BigFraction bigFraction5 = bigFraction3.multiply(bigInteger0);
      bigFraction5.floatValue();
      bigFraction3.divide(1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(454L);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.add(0L);
      BigFraction bigFraction2 = bigFraction1.reduce();
      bigFraction2.add((-418));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.subtract(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-2145829191));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.subtract(2083);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction0.intValue();
      BigFraction bigFraction3 = bigFraction1.reciprocal();
      bigFraction3.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction2.divide(100);
      BigFraction bigFraction5 = bigFraction3.multiply(bigInteger0);
      BigFraction bigFraction6 = bigFraction5.reduce();
      bigFraction2.add(100);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction7 = new BigFraction(560, 2083, (-1981));
      bigFraction4.subtract(bigInteger0);
      bigFraction1.reciprocal();
      bigFraction5.multiply(bigFraction6);
      BigFraction bigFraction8 = BigFraction.FOUR_FIFTHS;
      bigFraction8.doubleValue();
      BigFraction bigFraction9 = new BigFraction(2746.60858152, 1320);
      bigFraction1.abs();
      bigFraction0.divide(2083L);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.toString();
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      bigFraction0.THREE_QUARTERS.getDenominatorAsInt();
      bigFraction1.TWO_FIFTHS.getNumeratorAsInt();
      bigFraction1.bigDecimalValue();
      bigFraction0.bigDecimalValue(2);
      bigFraction1.hashCode();
      bigFraction1.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ONE_FIFTH.subtract(bigInteger0);
      int int0 = 3;
      BigFraction bigFraction2 = new BigFraction((-107.3964183));
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.subtract(bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction3.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = bigFraction1.pow(bigInteger0);
      bigFraction2.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction2.multiply(bigInteger0);
      bigFraction3.doubleValue();
      bigFraction1.getDenominatorAsLong();
      bigFraction2.percentageValue();
      bigFraction1.getField();
      BigFraction bigFraction4 = bigFraction2.pow(1L);
      bigFraction4.longValue();
      bigFraction0.percentageValue();
      bigFraction1.getDenominator();
      BigDecimal bigDecimal0 = new BigDecimal(2143297520);
      bigFraction0.divide(1L);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(454L);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.add(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.multiply(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.reduce();
      BigFraction bigFraction4 = bigFraction1.add(2);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction4.subtract(bigInteger0);
      bigFraction1.pow(2);
      // Undeclared exception!
      try { 
        bigFraction3.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1114), (-1114));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigInteger0.signum();
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.reciprocal();
      bigFraction2.TWO_QUARTERS.multiply(bigInteger0);
      BigFraction bigFraction3 = new BigFraction(74L);
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      bigFraction4.add((-3174L));
      bigFraction1.add(bigFraction0);
      bigFraction3.add(935);
      int int0 = 2147483639;
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction(0.4339999999999691, 0L, 2147483639);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0.434 to fraction (28,082,254,944/64,705,656,553)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-315L), 938L);
      BigFraction bigFraction1 = bigFraction0.pow(938L);
      bigFraction1.longValue();
      bigFraction1.percentageValue();
      bigFraction1.getDenominator();
      int int0 = (-710);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-710));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1114), (-1114));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigInteger0.signum();
      BigFraction bigFraction2 = bigFraction1.pow(176L);
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.divide((long) (-1114));
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction0.subtract(629);
      BigFraction bigFraction5 = bigFraction4.THREE_FIFTHS.subtract(bigFraction2);
      bigFraction4.getDenominatorAsInt();
      bigFraction1.ONE_QUARTER.intValue();
      BigFraction bigFraction6 = bigFraction2.ONE.reciprocal();
      bigFraction5.getDenominatorAsLong();
      BigFraction bigFraction7 = bigFraction5.multiply(bigInteger0);
      bigFraction2.reduce();
      BigFraction bigFraction8 = bigFraction2.add(958);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction9 = bigFraction6.subtract(bigInteger0);
      BigFraction bigFraction10 = bigFraction3.pow((-1114));
      BigFraction bigFraction11 = bigFraction8.reciprocal();
      bigFraction11.multiply(bigFraction7);
      bigFraction6.doubleValue();
      bigFraction11.abs();
      bigFraction9.divide((long) 1);
      bigFraction10.pow((long) 1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1114), (-1114));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigInteger0.signum();
      BigFraction bigFraction2 = bigFraction1.pow(176L);
      bigFraction2.TWO_QUARTERS.divide((long) (-1114));
      bigFraction2.TWO.abs();
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction0.subtract(629);
      BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.subtract(bigFraction2);
      bigFraction1.ONE_QUARTER.intValue();
      bigFraction2.ONE.reciprocal();
      bigFraction0.getDenominatorAsLong();
      bigFraction2.multiply(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.reduce();
      bigFraction1.add(1);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction6 = bigFraction2.subtract(bigInteger1);
      bigFraction1.pow((-1114));
      bigFraction5.reciprocal();
      BigFraction bigFraction7 = bigFraction5.multiply(bigFraction6);
      bigFraction7.doubleValue();
      bigFraction5.abs();
      bigFraction3.divide(176L);
      bigFraction7.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      BigFraction bigFraction1 = bigFraction0.subtract(2143297520);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction3 = bigFraction1.subtract(bigFraction2);
      bigFraction1.divide(bigInteger0);
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction4 = bigFraction3.negate();
      bigFraction2.ONE_QUARTER.multiply(1L);
      BigFraction bigFraction5 = bigFraction4.multiply(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction5.ONE_THIRD.bigDecimalValue(2931);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1114), (-1114));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigInteger0.signum();
      BigFraction bigFraction2 = bigFraction1.pow(176L);
      bigFraction2.TWO_QUARTERS.divide((long) (-1114));
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction0.subtract(629);
      bigFraction3.THREE_FIFTHS.subtract(bigFraction2);
      bigFraction1.ONE_QUARTER.intValue();
      BigFraction bigFraction4 = new BigFraction(3061.55498207, 1, (-1114));
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(4317, 4317);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.divide((long) 1);
      bigFraction2.equals("zero not allowed here");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1114), (-1114));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigInteger0.signum();
      BigFraction bigFraction2 = new BigFraction(91L);
      bigFraction2.MINUS_ONE.subtract(bigFraction0);
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      bigFraction3.add((-3174L));
      bigFraction1.add(bigFraction0);
      int int0 = 2147483639;
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction(0.4339999999999691, 0L, 2147483639);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0.434 to fraction (28,082,254,944/64,705,656,553)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = (-1114);
      BigFraction bigFraction0 = new BigFraction((-1114), (-1114));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigInteger0.signum();
      BigFraction bigFraction2 = new BigFraction(91L);
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      bigFraction3.add((-3174L));
      bigFraction1.add(bigFraction0);
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction(0.4339999999999691, 0L, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.434 to fraction after 1 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.ONE;
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        bigFraction1.MINUS_ONE.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1114), (-1114));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigInteger0.signum();
      BigFraction bigFraction2 = new BigFraction(91L);
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      bigFraction3.add((-3174L));
      bigFraction1.add(bigFraction0);
      int int0 = 2147483639;
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction(0.4339999999999691, 0L, 2147483639);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0.434 to fraction (28,082,254,944/64,705,656,553)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(934L);
      BigFraction bigFraction1 = bigFraction0.pow(934L);
      BigFraction bigFraction2 = bigFraction1.divide(4096L);
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction3 = BigFraction.ONE_HALF;
      BigFraction bigFraction4 = bigFraction3.subtract(5);
      BigFraction bigFraction5 = bigFraction4.subtract(bigFraction2);
      bigFraction5.intValue();
      bigFraction4.reciprocal();
      bigFraction1.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.multiply(bigInteger0);
      BigFraction bigFraction6 = bigFraction3.add(629);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction6.subtract(bigInteger2);
      BigFraction bigFraction7 = bigFraction5.pow((-4));
      BigFraction bigFraction8 = bigFraction3.reciprocal();
      bigFraction6.multiply(bigFraction5);
      bigFraction7.doubleValue();
      bigFraction8.abs();
      bigFraction1.divide((long) 5);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1546.749714785), (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.divide(65536L);
      BigFraction bigFraction4 = new BigFraction(5.5737717715868425E-8);
      Object object0 = new Object();
      bigFraction4.equals(object0);
      bigFraction2.percentageValue();
      bigFraction3.divide(2147483646);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(3, mockRandom0);
      bigFraction0.getNumeratorAsInt();
      bigFraction0.getField();
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction1.percentageValue();
      bigFraction0.bigDecimalValue(1);
      bigFraction0.divide((long) 1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      MockRandom mockRandom0 = new MockRandom();
      bigFraction0.floatValue();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = bigFraction0.subtract((-2300L));
      bigFraction1.getField();
      // Undeclared exception!
      try { 
        bigFraction1.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      bigFraction0.TWO_THIRDS.getField();
      bigFraction0.TWO_QUARTERS.percentageValue();
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      bigFraction0.floatValue();
      bigFraction1.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction0.subtract(549755813888L);
      bigFraction0.getField();
      BigFraction bigFraction3 = bigFraction1.pow((long) 0);
      bigFraction1.percentageValue();
      bigFraction0.getDenominator();
      bigFraction2.bigDecimalValue(0);
      BigFraction bigFraction4 = bigFraction3.divide((-2312L));
      bigFraction4.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      bigFraction0.TWO_THIRDS.getField();
      bigFraction0.TWO_QUARTERS.percentageValue();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(0, mockRandom0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction1.compareTo(bigFraction0);
      BigFraction bigFraction2 = new BigFraction((long) 0);
      bigFraction2.divide(1908874353);
      bigFraction2.longValue();
      BigFraction.getReducedFraction((-1284), 1908874353);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.percentageValue();
      bigFraction0.add(3952090531849364496L);
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.TWO_THIRDS.add(1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(1409, byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid signum value
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.toString();
      int int0 = (-208);
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.divide((-208));
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.subtract(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.add(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.multiply(bigFraction0);
      BigFraction bigFraction5 = bigFraction0.reciprocal();
      bigFraction0.THREE_QUARTERS.divide(bigFraction3);
      int int1 = (-739);
      BigFraction bigFraction6 = bigFraction4.TWO_FIFTHS.abs();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction6.ONE.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue((-739), (-739));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(3, mockRandom0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction0.TWO_THIRDS.compareTo(bigFraction1);
      bigFraction0.THREE_FIFTHS.divide(3);
      bigFraction0.longValue();
      BigFraction.getReducedFraction(3, 3);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.pow(1395L);
      bigFraction0.TWO_THIRDS.percentageValue();
      BigFraction bigFraction2 = bigFraction0.negate();
      BigFraction bigFraction3 = bigFraction1.FOUR_FIFTHS.subtract(bigFraction0);
      bigFraction1.MINUS_ONE.getField();
      bigFraction0.TWO_FIFTHS.multiply(bigFraction3);
      bigFraction1.ONE.bigDecimalValue(5986, 0);
      bigFraction2.pow(5986);
      bigFraction2.TWO.intValue();
      bigFraction1.floatValue();
      BigFraction bigFraction4 = bigFraction2.add(1395L);
      bigFraction4.bigDecimalValue(5986, 2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      int int0 = (-1783);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1783));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(987.566, (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.divide((long) (-1));
      bigFraction1.equals("zero not allowed here");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.reduce();
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.pow((-530L));
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.subtract(1);
      bigFraction3.ZERO.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction0.TWO.pow(0L);
      bigFraction0.THREE_QUARTERS.pow(550);
      BigFraction bigFraction5 = BigFraction.getReducedFraction(33, 1);
      bigFraction0.ONE_HALF.getField();
      BigFraction bigFraction6 = bigFraction0.abs();
      BigFraction bigFraction7 = bigFraction0.abs();
      BigFraction bigFraction8 = bigFraction7.reduce();
      BigFraction bigFraction9 = bigFraction0.negate();
      BigInteger bigInteger0 = bigFraction6.getNumerator();
      bigFraction7.TWO.getNumeratorAsInt();
      bigFraction8.subtract(386);
      BigFraction bigFraction10 = bigFraction1.subtract(bigFraction3);
      bigFraction10.ONE_QUARTER.add((-1));
      bigFraction1.multiply(1);
      bigFraction9.abs();
      bigFraction8.pow(bigInteger0);
      BigFraction bigFraction11 = new BigFraction((long) 1, (long) 2);
      bigFraction5.equals(bigFraction11);
      bigFraction4.getDenominator();
      bigFraction3.equals("");
      BigFraction.getReducedFraction(33, 1541);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 1411;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 1411);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 0.0, 1177);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction1.THREE_FIFTHS.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.multiply(3L);
      bigFraction3.subtract(1);
      BigFraction bigFraction4 = bigFraction2.TWO_FIFTHS.divide(400L);
      bigFraction4.TWO_THIRDS.divide(799);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.TWO_QUARTERS.divide(bigInteger0);
      BigFraction bigFraction5 = bigFraction1.reduce();
      bigFraction5.multiply(0);
      bigFraction1.TWO.floatValue();
      BigFraction bigFraction6 = BigFraction.getReducedFraction(232, (-183));
      bigFraction6.THREE_QUARTERS.hashCode();
      bigFraction4.ONE_FIFTH.subtract(bigFraction5);
      bigFraction2.MINUS_ONE.add(bigFraction5);
      bigFraction6.getField();
      bigFraction1.getField();
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue((-333), (-2583));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.multiply((-2209L));
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.divide(104);
      BigFraction bigFraction3 = bigFraction1.reduce();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction3.ONE_QUARTER.subtract(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.TWO.divide(bigInteger0);
      bigFraction0.ONE.getNumeratorAsInt();
      bigFraction3.ONE.bigDecimalValue();
      bigFraction1.longValue();
      bigFraction1.getNumeratorAsLong();
      bigFraction2.TWO_QUARTERS.getNumeratorAsLong();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.min(bigInteger1);
      BigFraction bigFraction6 = bigFraction0.TWO.pow((-4085L));
      bigFraction2.TWO_FIFTHS.intValue();
      BigInteger bigInteger2 = BigInteger.TEN;
      bigFraction2.pow(bigInteger2);
      BigFraction bigFraction7 = bigFraction6.MINUS_ONE.multiply(bigInteger0);
      bigFraction7.THREE_QUARTERS.negate();
      BigFraction bigFraction8 = bigFraction5.subtract(104);
      bigFraction8.THREE_FIFTHS.abs();
      bigFraction6.multiply((-1767L));
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue(104);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.ZERO.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.subtract(3059);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.THREE_QUARTERS.subtract(bigFraction1);
      bigFraction1.THREE_FIFTHS.divide(bigInteger0);
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction0.negate();
      bigFraction0.multiply(bigFraction2);
      bigFraction0.equals("B\"7[G7i}?v^:r");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      Object object0 = new Object();
      bigFraction0.equals(object0);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-2555));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      int int0 = 902;
      BigFraction bigFraction1 = bigFraction0.ONE.add(902);
      BigFraction bigFraction2 = bigFraction0.negate();
      bigFraction2.ONE_HALF.floatValue();
      // Undeclared exception!
      try { 
        bigFraction1.ONE_FIFTH.bigDecimalValue(5, 1150);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 595);
      bigFraction0.ONE_THIRD.bigDecimalValue(595, 1);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.divide(612L);
      bigFraction0.THREE_FIFTHS.floatValue();
      bigFraction1.ONE_FIFTH.subtract(bigFraction0);
      bigFraction0.ONE.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction0.add(0);
      bigFraction2.ONE_HALF.doubleValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = new BigFraction(bigInteger0);
      BigFraction bigFraction4 = bigFraction1.ZERO.add(bigFraction3);
      bigFraction4.ONE_FIFTH.longValue();
      BigFraction bigFraction5 = bigFraction0.FOUR_FIFTHS.abs();
      bigFraction5.ONE_HALF.compareTo(bigFraction2);
      bigFraction5.reciprocal();
      BigFraction bigFraction6 = bigFraction0.add(bigInteger0);
      bigFraction0.getDenominator();
      bigFraction0.reduce();
      BigFraction.getReducedFraction(1, 1);
      BigFraction bigFraction7 = bigFraction6.abs();
      bigFraction7.ONE_HALF.floatValue();
      // Undeclared exception!
      try { 
        bigFraction1.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.toString();
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      bigFraction1.THREE_QUARTERS.getDenominatorAsInt();
      bigFraction2.TWO_FIFTHS.getNumeratorAsInt();
      bigFraction0.getNumeratorAsLong();
      bigFraction2.floatValue();
      bigFraction2.add(2);
      bigFraction2.equals(bigFraction0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)34;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
      bigFraction0.ONE_FIFTH.doubleValue();
      bigFraction1.TWO_QUARTERS.multiply(bigInteger0);
      bigFraction1.TWO.percentageValue();
      bigFraction1.FOUR_FIFTHS.intValue();
      bigFraction1.TWO_THIRDS.pow(0.0);
      bigFraction1.THREE_QUARTERS.compareTo(bigFraction0);
      BigFraction bigFraction2 = bigFraction0.divide((-669L));
      bigFraction2.multiply((-490));
      BigFraction bigFraction3 = bigFraction1.abs();
      bigFraction3.THREE_FIFTHS.intValue();
      bigFraction3.longValue();
      BigFraction bigFraction4 = bigFraction0.reciprocal();
      bigFraction4.pow(bigInteger0);
      BigFraction bigFraction5 = bigFraction1.add(798L);
      bigFraction4.add(bigInteger0);
      BigFraction bigFraction6 = bigFraction5.ONE_THIRD.reduce();
      bigFraction6.TWO_FIFTHS.subtract((long) 1);
      bigFraction6.MINUS_ONE.abs();
      BigFraction bigFraction7 = bigFraction0.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction7.bigDecimalValue(0, (-490));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1852L, 1852L);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.negate();
      bigFraction0.getNumeratorAsLong();
      bigFraction1.compareTo(bigFraction0);
      bigFraction1.TWO_THIRDS.divide(bigFraction0);
      bigFraction1.pow((double) (-1));
      bigFraction1.pow((-1.5));
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(510, 1);
      long long0 = 2018L;
      BigFraction bigFraction1 = bigFraction0.divide(2018L);
      int int0 = 153;
      // Undeclared exception!
      try { 
        bigFraction1.TWO_THIRDS.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow(239L);
      int int0 = (-376);
      BigFraction bigFraction2 = bigFraction0.add((-376));
      BigFraction bigFraction3 = bigFraction1.ZERO.subtract(bigFraction0);
      bigFraction0.ZERO.percentageValue();
      BigFraction bigFraction4 = bigFraction2.TWO_QUARTERS.multiply(bigFraction1);
      bigFraction3.ONE.longValue();
      bigFraction1.ZERO.pow(2.047863006591797);
      bigFraction4.bigDecimalValue(1, 1);
      bigFraction1.ONE_QUARTER.negate();
      bigFraction4.TWO_THIRDS.add(0L);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-376), 862);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = (-1947);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, (-3135.995290564143), (-1947));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-46);
      byte byte0 = (byte)57;
      byteArray0[3] = (byte)57;
      byte byte1 = (byte)41;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-1);
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3764.800881366012);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-315L), 938L);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction0.divide(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(934L);
      BigFraction bigFraction1 = new BigFraction(454L);
      bigFraction1.ONE_FIFTH.add(0L);
      bigFraction0.ONE_HALF.add(bigFraction1);
      int int0 = 858;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.bigDecimalValue(1, 858);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1114), (-1114));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigInteger0.signum();
      BigFraction bigFraction2 = bigFraction1.pow(176L);
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.divide((long) (-1114));
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction0.subtract(629);
      BigFraction bigFraction5 = bigFraction4.THREE_FIFTHS.subtract(bigFraction2);
      bigFraction1.ONE_QUARTER.intValue();
      bigFraction2.ONE.reciprocal();
      bigFraction5.MINUS_ONE.getDenominatorAsLong();
      BigFraction bigFraction6 = bigFraction4.multiply(bigInteger0);
      BigFraction bigFraction7 = bigFraction6.reduce();
      BigFraction bigFraction8 = bigFraction7.MINUS_ONE.add((-418));
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction9 = bigFraction2.subtract(bigInteger1);
      bigFraction3.pow(1);
      BigFraction bigFraction10 = bigFraction4.reciprocal();
      bigFraction10.FOUR_FIFTHS.multiply(bigFraction1);
      bigFraction1.doubleValue();
      bigFraction9.abs();
      bigFraction8.divide((-366L));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = null;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.intValue();
      bigFraction0.toString();
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.multiply(bigInteger0);
      int int0 = 100;
      // Undeclared exception!
      try { 
        bigFraction2.ONE_HALF.bigDecimalValue(100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.ONE_FIFTH.getNumeratorAsLong();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(485, 485);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.ZERO.divide(bigInteger0);
      BigFraction bigFraction3 = BigFraction.TWO;
      bigFraction3.THREE_QUARTERS.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction0.add(bigFraction3);
      bigFraction4.THREE_QUARTERS.bigDecimalValue();
      BigFraction bigFraction5 = bigFraction1.add(1384);
      BigFraction bigFraction6 = bigFraction5.MINUS_ONE.subtract(2088L);
      BigFraction bigFraction7 = bigFraction6.TWO_QUARTERS.reciprocal();
      bigFraction1.percentageValue();
      bigFraction1.divide(bigInteger0);
      bigFraction5.pow(532.643483);
      bigFraction3.getField();
      BigFraction bigFraction8 = bigFraction1.add(bigFraction0);
      bigFraction8.percentageValue();
      bigFraction2.MINUS_ONE.subtract(bigFraction0);
      bigFraction6.ONE.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction7.THREE_FIFTHS.bigDecimalValue((-604));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      double double0 = bigFraction0.ONE_QUARTER.doubleValue();
      assertEquals(0.25, double0, 0.01);
      
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigDecimal bigDecimal0 = bigFraction0.FOUR_FIFTHS.bigDecimalValue(1);
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.divide((-1234));
      BigFraction bigFraction2 = bigFraction0.ONE.subtract(288);
      BigFraction bigFraction3 = bigFraction2.ONE.negate();
      BigFraction bigFraction4 = bigFraction3.TWO.add((long) 288);
      BigFraction bigFraction5 = bigFraction4.pow((-1234));
      BigFraction bigFraction6 = bigFraction5.THREE_QUARTERS.pow((long) (-1234));
      BigFraction bigFraction7 = bigFraction6.ONE_THIRD.subtract((-1234));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      
      bigFraction1.equals(bigFraction0);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction8 = bigFraction2.TWO.divide(bigInteger0);
      bigFraction8.THREE_QUARTERS.multiply(bigInteger0);
      bigFraction0.pow(0.0);
      bigFraction2.longValue();
      BigFraction bigFraction9 = bigFraction8.add(bigInteger0);
      BigFraction bigFraction10 = bigFraction9.MINUS_ONE.add(1446);
      double double1 = bigFraction10.ONE_FIFTH.pow((double) 1);
      assertEquals(0.2, double1, 0.01);
      assertEquals((short)1445, bigFraction10.shortValue());
      assertFalse(bigFraction9.equals((Object)bigFraction3));
      
      float float0 = bigFraction3.floatValue();
      assertEquals((-1.0F), float0, 0.01F);
      
      bigFraction4.intValue();
      bigFraction3.multiply(9154082963658192752L);
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction3.equals((Object)bigFraction8));
      assertFalse(bigFraction3.equals((Object)bigFraction9));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_THIRD.intValue();
      BigFraction bigFraction1 = bigFraction0.reduce();
      int int0 = (-418);
      BigInteger bigInteger0 = null;
      try { 
        bigFraction1.ONE_HALF.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = new BigFraction(1);
      int int1 = 890;
      bigFraction0.TWO_QUARTERS.pow((-913.77754779));
      // Undeclared exception!
      try { 
        bigFraction0.ONE.bigDecimalValue(890);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.ONE.getField();
      BigFraction bigFraction1 = new BigFraction(1);
      BigFraction bigFraction2 = bigFraction1.ZERO.multiply(bigFraction0);
      bigFraction0.THREE_QUARTERS.equals(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction2.ZERO.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.THREE_QUARTERS.subtract(bigFraction0);
      bigFraction1.THREE_FIFTHS.add(bigInteger0);
      bigFraction4.MINUS_ONE.subtract((-88L));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      
      bigFraction0.longValue();
      bigFraction0.hashCode();
      float float0 = bigFraction0.floatValue();
      assertEquals(0.5F, float0, 0.01F);
      
      bigFraction2.pow(0.0);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2028);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      bigFraction0.pow((-204.0));
      bigFraction0.ONE.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.add(448);
      bigFraction1.ZERO.doubleValue();
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.multiply(bigFraction1);
      bigFraction2.MINUS_ONE.add((long) 448);
      bigFraction2.TWO_FIFTHS.add(bigFraction0);
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction4 = bigFraction0.divide(bigFraction3);
      bigFraction1.getDenominatorAsInt();
      bigFraction1.ONE_FIFTH.add(bigInteger0);
      BigFraction bigFraction5 = bigFraction3.add(bigFraction0);
      bigFraction5.TWO_THIRDS.compareTo(bigFraction3);
      BigFraction bigFraction6 = bigFraction3.THREE_FIFTHS.divide(bigInteger0);
      bigFraction6.getNumeratorAsInt();
      bigInteger0.shortValueExact();
      bigFraction4.ONE_THIRD.add(bigInteger0);
      bigFraction3.THREE_QUARTERS.bigDecimalValue(811, 1);
      BigFraction bigFraction7 = bigFraction5.divide(9218868437227405312L);
      bigFraction7.THREE_FIFTHS.toString();
      bigFraction4.getField();
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue(0, 2028);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3321L, 3321L);
      BigFraction bigFraction1 = bigFraction0.add(3321L);
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.pow((-3400));
      BigFraction bigFraction3 = BigFraction.getReducedFraction(37, 37);
      float float0 = bigFraction3.ONE_THIRD.floatValue();
      assertEquals(0.33333334F, float0, 0.01F);
      
      bigFraction2.THREE_FIFTHS.intValue();
      bigFraction1.getField();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.add(bigInteger0);
      double double0 = bigFraction1.percentageValue();
      assertEquals(332200.0, double0, 0.01);
      
      bigFraction2.percentageValue();
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      
      BigFraction bigFraction4 = bigFraction0.pow(3321L);
      assertTrue(bigFraction4.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.reduce();
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.divide(bigInteger0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      
      int int0 = bigFraction0.intValue();
      int int1 = bigFraction0.FOUR_FIFTHS.hashCode();
      assertFalse(int1 == int0);
      
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.TWO_THIRDS.pow(bigInteger0);
      bigFraction1.ONE_HALF.getDenominatorAsLong();
      BigFraction bigFraction5 = bigFraction0.multiply(bigInteger0);
      bigFraction2.doubleValue();
      bigFraction5.THREE_QUARTERS.getDenominatorAsLong();
      bigFraction5.THREE_FIFTHS.percentageValue();
      BigInteger bigInteger1 = bigFraction2.getNumerator();
      BigFraction bigFraction6 = bigFraction5.subtract(170);
      double double0 = bigFraction6.THREE_QUARTERS.percentageValue();
      assertEquals(75.0, double0, 0.01);
      
      bigFraction2.intValue();
      bigFraction4.negate();
      int int2 = bigFraction3.getDenominatorAsInt();
      assertEquals(2, int2);
      assertEquals((byte)1, bigFraction3.byteValue());
      
      bigFraction6.getField();
      assertSame(bigInteger0, bigInteger1);
      assertEquals((short) (-169), bigFraction6.shortValue());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      bigFraction0.TWO_THIRDS.getField();
      bigFraction0.TWO_QUARTERS.percentageValue();
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction1.ZERO.bigDecimalValue(125, 922);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.subtract(0L);
      int int0 = (-1);
      bigFraction1.TWO_QUARTERS.getDenominatorAsLong();
      bigFraction1.TWO_THIRDS.multiply((-1));
      bigFraction0.add(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.TWO_THIRDS.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
