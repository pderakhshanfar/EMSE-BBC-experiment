/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:39:46 GMT 2020
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1212);
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction1.divide(bigFraction2);
      bigFraction2.bigDecimalValue(5, 5);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(680.5697792676219, 7);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2638.70951), 1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.ONE.pow((double) 1);
      bigFraction0.TWO_THIRDS.pow(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ZERO.divide(1);
      bigFraction1.FOUR_FIFTHS.getDenominatorAsInt();
      BigFraction bigFraction2 = bigFraction0.multiply((-120L));
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1, 1);
      bigFraction3.ONE_THIRD.subtract(bigInteger0);
      bigFraction2.getNumerator();
      BigFraction bigFraction4 = bigFraction0.multiply(1951L);
      BigFraction bigFraction5 = bigFraction4.reciprocal();
      BigFraction bigFraction6 = BigFraction.getReducedFraction(5, 1075);
      bigFraction6.THREE_QUARTERS.longValue();
      bigFraction5.TWO_QUARTERS.getNumeratorAsInt();
      bigFraction1.getDenominatorAsLong();
      bigFraction4.multiply(1);
      bigFraction5.multiply(137406175232L);
      bigFraction4.toString();
      BigFraction bigFraction7 = bigFraction2.reduce();
      bigFraction7.percentageValue();
      bigFraction1.pow(bigInteger0);
      bigFraction5.getDenominator();
      bigFraction5.divide((-1122));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.bigDecimalValue();
      bigFraction0.bigDecimalValue(2507, 4);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((-1609), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.getField();
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.FOUR_FIFTHS.pow(bigInteger0);
      bigFraction0.toString();
      BigFraction bigFraction4 = bigFraction2.multiply(bigFraction1);
      BigFraction bigFraction5 = bigFraction2.reduce();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction6 = bigFraction5.TWO.divide(bigInteger1);
      int int0 = 271;
      bigFraction0.TWO.subtract(bigFraction3);
      BigFraction bigFraction7 = BigFraction.getReducedFraction(271, (-169));
      int int1 = 527;
      bigFraction4.pow(527);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigFraction6.pow(bigInteger2);
      bigFraction7.getDenominator();
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue((-169));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      int int0 = Integer.MAX_VALUE;
      bigFraction0.pow(1450);
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.bigDecimalValue(Integer.MAX_VALUE, 5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.4034725764547136E-8, 1.4034725764547136E-8, 488);
      bigFraction0.intValue();
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.multiply((-9223372036854775808L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger0);
      bigFraction1.doubleValue();
      BigFraction bigFraction3 = bigFraction1.add(bigFraction0);
      BigFraction bigFraction4 = bigFraction3.reciprocal();
      BigFraction bigFraction5 = bigFraction0.subtract(bigFraction4);
      BigFraction bigFraction6 = bigFraction3.pow(2272L);
      BigFraction bigFraction7 = bigFraction4.pow((-400));
      bigFraction0.pow((-400));
      bigFraction1.reduce();
      bigFraction3.pow(2);
      bigFraction4.subtract((-610));
      BigInteger bigInteger1 = bigFraction3.getDenominator();
      bigFraction6.getDenominatorAsInt();
      bigFraction4.percentageValue();
      bigFraction2.percentageValue();
      bigFraction7.multiply(4647714815446351872L);
      BigFraction bigFraction8 = bigFraction5.divide(bigInteger1);
      bigFraction8.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction6.bigDecimalValue(1686, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-399));
      int int0 = 0;
      // Undeclared exception!
      try { 
        bigFraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 1348;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1348, 1348);
      BigFraction bigFraction1 = bigFraction0.pow(1467);
      bigFraction0.getDenominator();
      bigFraction0.TWO_THIRDS.toString();
      bigFraction0.ZERO.toString();
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      bigFraction0.getDenominatorAsInt();
      bigFraction0.getField();
      bigFraction1.THREE_FIFTHS.divide((-1246));
      BigFraction bigFraction3 = bigFraction0.multiply((long) 1);
      BigFraction bigFraction4 = bigFraction1.multiply(bigFraction0);
      bigFraction1.add(bigFraction2);
      BigFraction bigFraction5 = BigFraction.TWO_FIFTHS;
      bigFraction5.getNumeratorAsLong();
      int int1 = (-1);
      bigFraction5.floatValue();
      BigFraction bigFraction6 = bigFraction4.subtract(bigFraction1);
      BigFraction.getReducedFraction(1348, 1348);
      bigFraction3.divide((-1));
      bigFraction6.subtract(bigFraction2);
      BigFraction bigFraction7 = new BigFraction((double) (-1));
      bigFraction7.pow(1882L);
      BigFraction bigFraction8 = null;
      try {
        bigFraction8 = new BigFraction(1467, (-1.0), 1467);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1,467 to fraction (9,223,372,036,854,774,342/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-666));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-1773));
      bigFraction0.abs();
      bigFraction0.divide((-1773));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = (-1125);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) Integer.MAX_VALUE, (-1125));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.reduce();
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(1.7976931348623157E308, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0018481600000086473);
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2098.93565184, 37);
      Random.setNextRandom(37);
      bigFraction0.getNumerator();
      bigFraction0.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.add(1406);
      BigFraction bigFraction2 = bigFraction1.add(bigInteger0);
      bigFraction2.equals(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(812);
      bigFraction1.MINUS_ONE.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.add((-3120));
      bigFraction1.THREE_QUARTERS.equals(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction2.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
      bigFraction0.subtract(4503599627370495L);
      BigFraction.getReducedFraction(1368, 478);
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction2 = new BigFraction(383);
      BigFraction bigFraction3 = bigFraction2.add((-3120));
      Object object0 = new Object();
      bigFraction2.equals(object0);
      bigFraction1.pow((long) (byte) (-85));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2309);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.doubleValue();
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2309, 2309);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction0.ONE.divide(bigFraction1);
      bigFraction0.ONE.multiply(bigFraction1);
      bigFraction0.floatValue();
      bigFraction0.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.THREE_FIFTHS.longValue();
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.ONE_FIFTH.divide((-4537L));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      bigFraction2.THREE_QUARTERS.subtract((int) (byte)79);
      byteArray0[1] = (byte)79;
      bigFraction1.ONE_QUARTER.negate();
      byteArray0[2] = (byte) (-59);
      bigFraction3.ZERO.add((-388L));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.subtract(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction4 = bigFraction0.pow(bigInteger1);
      bigFraction4.THREE_QUARTERS.longValue();
      bigFraction4.add(bigFraction3);
      bigFraction4.ONE_FIFTH.multiply(bigFraction2);
      bigFraction2.divide(bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction1.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = (-1266);
      BigFraction bigFraction0 = new BigFraction((-1266));
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.divide((-1266));
      bigFraction1.ONE_QUARTER.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-1266), (-1266));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(680.5697792676219);
      bigFraction0.TWO_QUARTERS.divide(3);
      bigFraction0.ONE_FIFTH.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(6.63595840453991E235);
      bigFraction0.intValue();
      BigFraction bigFraction1 = bigFraction0.add(2153L);
      bigFraction1.toString();
      bigFraction1.compareTo(bigFraction0);
      BigFraction bigFraction2 = BigFraction.ONE;
      bigFraction2.pow((double) 1);
      BigFraction bigFraction3 = bigFraction1.divide(2147483647L);
      bigFraction2.getField();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction3.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.equals(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(6.22277696038509E-8);
      BigFraction bigFraction1 = bigFraction0.add((-155));
      bigFraction1.negate();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = new BigFraction(65867618451456L, 65867618451456L);
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction2.intValue();
      bigFraction2.add(65867618451456L);
      bigFraction1.toString();
      bigFraction2.compareTo(bigFraction0);
      bigFraction2.pow((double) (-1));
      bigFraction0.divide(2182L);
      bigFraction0.getField();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction2.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      bigFraction0.TWO.doubleValue();
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.MINUS_ONE.bigDecimalValue(2);
      BigFraction bigFraction1 = new BigFraction(0.12569999999999482);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.getField();
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.add(2309);
      try { 
        bigFraction0.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = new BigFraction(812);
      bigFraction0.toString();
      bigFraction1.pow((double) 812);
      bigFraction0.getNumeratorAsInt();
      bigFraction0.bigDecimalValue(3);
      bigFraction1.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.multiply((-9223372036854775808L));
      bigFraction2.add(812);
      bigFraction0.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-950));
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow((-1296L));
      bigFraction0.ONE_HALF.getField();
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.add(bigFraction0);
      BigFraction.getReducedFraction((-950), (-950));
      bigFraction2.ONE_HALF.getNumeratorAsLong();
      bigFraction0.ONE_THIRD.toString();
      bigFraction2.toString();
      bigFraction2.equals(bigFraction1);
      bigFraction0.ONE_FIFTH.toString();
      bigFraction0.pow((-1.7790661150204172E-247));
      BigFraction bigFraction3 = new BigFraction((double) 1L);
      bigFraction2.reduce();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction0.intValue();
      BigFraction bigFraction2 = BigFraction.ZERO;
      bigFraction2.toString();
      bigFraction1.compareTo(bigFraction0);
      bigFraction1.pow(3493.059346544411);
      bigFraction1.divide((-3512299194304650054L));
      bigFraction0.getField();
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-950));
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow((-1296L));
      bigFraction0.ONE_HALF.getField();
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.add(bigFraction0);
      bigFraction2.ONE_HALF.getNumeratorAsLong();
      bigFraction0.pow((double) (-950));
      bigFraction2.equals("");
      bigFraction0.intValue();
      BigFraction bigFraction3 = bigFraction1.abs();
      bigFraction3.subtract(715827883);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(1483.6085523803147, 1483.6085523803147, 2099761789);
      bigFraction0.pow(0.0);
      BigFraction bigFraction1 = new BigFraction(1.9332630743320287E-8);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.floatValue();
      BigFraction bigFraction1 = new BigFraction(111);
      BigFraction bigFraction2 = bigFraction1.add((-1717));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-92);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.add(bigInteger0);
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction((byte)33, (byte) (-44), 2145276573);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 33 to fraction (9,223,372,036,854,775,776/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2279L, 2279L);
      bigFraction0.ZERO.floatValue();
      BigFraction bigFraction1 = bigFraction0.ZERO.divide(2279L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction3 = BigFraction.TWO_FIFTHS;
      bigFraction3.TWO.longValue();
      bigFraction1.equals(bigFraction3);
      bigFraction2.intValue();
      bigFraction1.abs();
      bigFraction2.subtract(11);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(4.116164446561962E-8, 35);
      bigFraction0.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(1.0);
      bigFraction0.floatValue();
      BigFraction bigFraction1 = new BigFraction((-2694));
      BigFraction bigFraction2 = bigFraction0.add(2136799649);
      bigFraction2.add(bigInteger0);
      BigFraction bigFraction3 = BigFraction.ONE;
      bigFraction2.equals(bigFraction3);
      bigFraction0.intValue();
      BigFraction bigFraction4 = bigFraction3.abs();
      bigFraction4.subtract((-2694));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.floatValue();
      bigFraction0.getField();
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction1.ONE_QUARTER.add(2346);
      bigFraction1.THREE_FIFTHS.toString();
      bigFraction0.equals(bigFraction1);
      bigFraction0.pow((double) 2.0F);
      BigFraction bigFraction2 = new BigFraction(200.0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = (-950);
      BigFraction bigFraction0 = new BigFraction((-950));
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow((-1296L));
      bigFraction0.ONE_HALF.getField();
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.add(bigFraction0);
      bigFraction2.ONE_HALF.getNumeratorAsLong();
      bigFraction0.ONE_THIRD.toString();
      bigFraction0.THREE_QUARTERS.bigDecimalValue();
      bigFraction0.pow((double) (-950));
      bigFraction1.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.pow(935472160);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.multiply((-1631));
      bigFraction1.TWO.multiply(bigFraction0);
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.negate();
      bigFraction1.add(1);
      BigFraction bigFraction3 = bigFraction0.negate();
      BigFraction bigFraction4 = bigFraction0.pow((-1631));
      bigFraction4.doubleValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction5 = bigFraction2.pow(bigInteger0);
      bigFraction3.multiply((-472L));
      bigFraction5.pow(4015);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigFraction1.MINUS_ONE.divide(1L);
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      bigFraction0.floatValue();
      BigFraction bigFraction2 = new BigFraction(812);
      bigFraction1.TWO_FIFTHS.add((-3120));
      BigFraction bigFraction3 = bigFraction1.add(bigInteger0);
      bigFraction2.THREE_QUARTERS.equals(bigFraction1);
      bigFraction3.intValue();
      BigFraction bigFraction4 = bigFraction0.abs();
      bigFraction4.TWO.pow((-1723.87771974));
      bigFraction2.subtract(651);
      bigFraction4.percentageValue();
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(2143092065);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-950));
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.add(bigFraction0);
      bigFraction1.ONE_HALF.getNumeratorAsLong();
      bigFraction0.ONE_THIRD.toString();
      bigFraction0.pow((double) (-950));
      bigFraction0.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-950));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2279L, 2279L);
      bigFraction0.ZERO.floatValue();
      BigFraction bigFraction1 = bigFraction0.ZERO.divide(2279L);
      bigFraction1.THREE_QUARTERS.hashCode();
      bigFraction0.pow(2279L);
      bigFraction1.getDenominatorAsLong();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-22);
      bigFraction1.THREE_QUARTERS.percentageValue();
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte) (-43);
      byteArray0[8] = (byte)35;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction1.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction((-1670L), 1501L);
      BigFraction bigFraction1 = new BigFraction(1501L);
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction2.add(481L);
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
      bigFraction3.multiply(1714L);
      bigFraction3.floatValue();
      BigFraction bigFraction4 = new BigFraction(980.7718344, (-1));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction((-2122L), (-2122L));
      bigFraction0.FOUR_FIFTHS.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.multiply(bigFraction0);
      bigFraction0.add((-2122L));
      bigFraction2.floatValue();
      BigFraction bigFraction3 = new BigFraction((-0.6666667F), 1138);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-950));
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow((-1296L));
      bigFraction0.ONE_HALF.getField();
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.add(bigFraction0);
      bigFraction2.ONE_HALF.getNumeratorAsLong();
      bigFraction0.ONE_THIRD.toString();
      bigFraction0.multiply(bigFraction1);
      bigFraction0.pow((double) (-950));
      bigFraction1.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue((-950));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.TWO.add(1);
      bigFraction1.floatValue();
      BigFraction bigFraction2 = new BigFraction(1);
      BigFraction bigFraction3 = bigFraction1.add((-3120));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction3.add(bigInteger0);
      bigFraction3.equals(bigFraction2);
      bigFraction1.intValue();
      bigFraction2.abs();
      bigFraction3.subtract(203);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(680.5697792676219);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction1.floatValue();
      BigFraction bigFraction2 = bigFraction1.divide(4577762542105553359L);
      bigFraction1.hashCode();
      BigFraction bigFraction3 = bigFraction2.pow((-983L));
      bigFraction1.getDenominatorAsLong();
      bigFraction3.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.intValue();
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.multiply((long) 3);
      bigFraction1.ONE_FIFTH.bigDecimalValue(0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger0);
      bigFraction2.TWO_FIFTHS.doubleValue();
      BigFraction bigFraction3 = bigFraction2.add(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.TWO_THIRDS.reciprocal();
      BigFraction bigFraction5 = bigFraction3.TWO_THIRDS.subtract(bigFraction2);
      BigFraction bigFraction6 = bigFraction3.ONE_FIFTH.pow(481L);
      BigFraction bigFraction7 = bigFraction4.ONE.pow((-400));
      bigFraction7.THREE_FIFTHS.pow((-610));
      BigFraction bigFraction8 = bigFraction0.reduce();
      bigFraction0.pow(3347);
      BigFraction bigFraction9 = bigFraction0.subtract(3347);
      BigInteger bigInteger1 = bigFraction8.getDenominator();
      bigFraction2.getDenominatorAsInt();
      bigFraction9.percentageValue();
      bigFraction5.percentageValue();
      bigFraction1.multiply((long) 0);
      bigFraction0.divide(bigInteger1);
      bigFraction8.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction6.bigDecimalValue(0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = (-610);
      BigFraction bigFraction0 = new BigFraction(1.4034725764547136E-8, 1.4034725764547136E-8, 488);
      bigFraction0.intValue();
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.multiply((-9223372036854775808L));
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-610));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      bigFraction0.floatValue();
      BigFraction bigFraction2 = new BigFraction(812);
      bigFraction1.TWO_FIFTHS.add((-3120));
      BigFraction bigFraction3 = bigFraction1.add(bigInteger0);
      bigFraction2.THREE_QUARTERS.equals(bigFraction1);
      bigFraction3.intValue();
      bigFraction0.abs();
      bigFraction2.subtract(651);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-119);
      byteArray0[0] = (byte) (-119);
      byte byte1 = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)34;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction1.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      bigFraction0.THREE_FIFTHS.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction1.pow(1944);
      bigFraction0.bigDecimalValue();
      bigFraction0.intValue();
      bigFraction1.equals(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.divide(bigInteger0);
      bigFraction0.ZERO.multiply(bigInteger0);
      bigFraction2.pow(bigInteger0);
      BigFraction bigFraction3 = new BigFraction(0.0);
      BigFraction bigFraction4 = bigFraction2.ONE_QUARTER.multiply(bigFraction3);
      bigFraction4.multiply(bigFraction0);
      bigFraction2.pow(bigInteger0);
      bigFraction1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      bigFraction0.THREE_FIFTHS.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.pow(1944);
      bigFraction0.bigDecimalValue();
      bigFraction0.intValue();
      bigFraction1.equals(bigFraction0);
      BigFraction bigFraction3 = bigFraction1.divide(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.add(0L);
      bigFraction4.ZERO.multiply(bigInteger0);
      BigFraction bigFraction5 = bigFraction3.pow(bigInteger0);
      BigFraction bigFraction6 = new BigFraction(0.0);
      bigFraction3.ONE_QUARTER.multiply(bigFraction6);
      bigFraction5.TWO_FIFTHS.add(bigInteger0);
      BigFraction bigFraction7 = bigFraction5.ONE.pow(5L);
      bigFraction7.FOUR_FIFTHS.subtract(bigFraction0);
      BigFraction.getReducedFraction(0, 1968);
      bigFraction2.bigDecimalValue(0);
      BigFraction bigFraction8 = new BigFraction(0L, 5L);
      BigFraction bigFraction9 = bigFraction2.multiply(bigFraction8);
      // Undeclared exception!
      try { 
        bigFraction9.bigDecimalValue(0, 5647);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.hashCode();
      bigFraction0.TWO_FIFTHS.doubleValue();
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction0.reciprocal();
      bigFraction2.subtract(bigFraction0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = new BigFraction(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.pow((long) (-400));
      BigFraction bigFraction5 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction6 = bigFraction5.pow((-400));
      bigFraction4.pow((-400));
      bigFraction0.reduce();
      bigFraction6.pow((-1544));
      BigFraction bigFraction7 = bigFraction2.subtract(2143092065);
      bigFraction7.getDenominator();
      bigFraction4.getDenominatorAsInt();
      bigFraction1.percentageValue();
      bigFraction2.percentageValue();
      BigFraction bigFraction8 = BigFraction.TWO_FIFTHS;
      bigFraction8.multiply((-375L));
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.add(663);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.negate();
      bigFraction2.bigDecimalValue();
      bigFraction1.add((long) 663);
      BigFractionField bigFractionField0 = bigFraction2.getField();
      bigFraction0.equals(bigFractionField0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.multiply((-2068));
      bigFraction1.reciprocal();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction1.add(bigInteger1);
      bigFraction0.intValue();
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction((-1670L), (-1670L));
      bigFraction0.FOUR_FIFTHS.compareTo(bigFraction1);
      bigFraction1.MINUS_ONE.multiply(bigFraction0);
      BigFraction bigFraction2 = bigFraction0.add((-2122L));
      BigFraction bigFraction3 = bigFraction2.multiply((-2122L));
      bigFraction3.floatValue();
      BigFraction bigFraction4 = new BigFraction(4501469.5F, 1138);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      int int0 = 753;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.add(753);
      bigFraction1.THREE_QUARTERS.subtract(4499201580859392L);
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.negate();
      bigFraction2.FOUR_FIFTHS.intValue();
      BigFraction bigFraction4 = bigFraction0.add((-305L));
      bigFraction4.TWO_FIFTHS.toString();
      bigFraction2.TWO_FIFTHS.compareTo(bigFraction3);
      bigFraction3.ONE_QUARTER.pow((double) (-305L));
      bigFraction4.TWO.divide((long) 753);
      bigFraction0.getField();
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction2.divide(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = 4030L;
      BigFraction bigFraction0 = new BigFraction(4030L);
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.ONE_THIRD.divide(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.subtract(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.ONE.subtract(629);
      bigFraction3.TWO_THIRDS.getField();
      bigFraction2.ONE_QUARTER.pow(4015);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow((-608L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      Object object0 = new Object();
      bigFraction0.THREE_QUARTERS.pow((long) 488);
      BigFraction bigFraction1 = bigFraction0.TWO.pow(488);
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.add(3818);
      bigFraction2.ONE_HALF.hashCode();
      bigFraction0.equals(object0);
      BigFraction bigFraction3 = null;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-950));
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow((-1296L));
      bigFraction0.ONE_HALF.getField();
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.add(bigFraction0);
      bigFraction2.ONE_HALF.getNumeratorAsLong();
      bigFraction0.ONE_THIRD.toString();
      bigFraction0.pow((double) (-950));
      bigFraction1.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = (-610);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.4034725764547136E-8, 1.4034725764547136E-8, (-610));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0 to fraction after -610 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.floatValue();
      bigFraction0.getField();
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction1.ONE_QUARTER.add(2346);
      bigFraction1.THREE_FIFTHS.toString();
      bigFraction0.equals(bigFraction1);
      bigFraction0.pow((double) 2.0F);
      bigFraction0.intValue();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction0.pow((long) 2);
      bigFraction2.compareTo(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-13);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.subtract((-173));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.negate();
      BigFraction bigFraction4 = bigFraction3.TWO.multiply((-173));
      bigFraction4.TWO_FIFTHS.equals(bigFraction1);
      bigFraction2.FOUR_FIFTHS.reciprocal();
      bigFraction2.ONE_FIFTH.subtract(2956L);
      bigFraction3.THREE_FIFTHS.add(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.THREE_FIFTHS.divide(9218868437227405312L);
      bigFraction5.TWO_THIRDS.reduce();
      bigFraction3.TWO_THIRDS.subtract(0L);
      int int0 = 4;
      BigFraction bigFraction6 = bigFraction0.multiply(4);
      bigFraction2.hashCode();
      bigFraction6.bigDecimalValue(4);
      bigFraction4.bigDecimalValue();
      BigFraction bigFraction7 = null;
      bigFraction3.MINUS_ONE.longValue();
      // Undeclared exception!
      try { 
        bigFraction2.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5.662033727488754E-22);
      bigFraction0.ONE_QUARTER.multiply(4095L);
      int int0 = 664;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-581), 664);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.ZERO.divide(bigFraction2);
      BigFraction bigFraction4 = BigFraction.ZERO;
      bigFraction4.ONE_FIFTH.add(3);
      bigFraction0.ONE_QUARTER.multiply(bigFraction2);
      // Undeclared exception!
      try { 
        bigFraction3.ONE.divide(bigFraction4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.TWO_FIFTHS.hashCode();
      bigFraction0.toString();
      bigFraction0.TWO.floatValue();
      bigFraction0.hashCode();
      bigFraction0.THREE_FIFTHS.multiply(4095L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.subtract(1129);
      bigFraction2.ONE_QUARTER.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction2.abs();
      BigFraction bigFraction4 = bigFraction1.subtract(bigInteger0);
      bigFraction4.TWO_THIRDS.pow(0);
      bigFraction3.MINUS_ONE.longValue();
      BigFraction bigFraction5 = bigFraction3.multiply(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction5.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 651;
      int int1 = 37;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(651, 37);
      bigFraction0.ZERO.hashCode();
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(0.0, 0.0, 537);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.longValue();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.ONE_FIFTH.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE.add(bigInteger0);
      bigFraction0.intValue();
      bigFraction0.compareTo(bigFraction1);
      bigFraction1.multiply(4577762542105553359L);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 801;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(801, (-1037));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.subtract((-3017));
      BigFraction bigFraction4 = bigFraction2.FOUR_FIFTHS.subtract((-4558));
      bigFraction4.ONE_QUARTER.getNumeratorAsLong();
      bigFraction1.FOUR_FIFTHS.pow(0.0);
      BigFraction bigFraction5 = bigFraction4.MINUS_ONE.pow(0);
      bigFraction5.MINUS_ONE.subtract(bigInteger0);
      bigFraction2.getDenominatorAsLong();
      bigFraction0.floatValue();
      bigFraction1.hashCode();
      bigFraction0.TWO_THIRDS.multiply((-5034868814120038111L));
      bigFraction1.getDenominatorAsLong();
      bigFraction3.getNumerator();
      // Undeclared exception!
      try { 
        bigFraction2.ONE_HALF.bigDecimalValue((-4558));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(680.5697792676219);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      bigFraction0.THREE_FIFTHS.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.pow(1944);
      bigFraction0.bigDecimalValue();
      bigFraction0.intValue();
      bigFraction1.equals(bigFraction0);
      BigFraction bigFraction3 = bigFraction1.divide(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.add(0L);
      bigFraction4.ZERO.multiply(bigInteger0);
      BigFraction bigFraction5 = bigFraction3.pow(bigInteger0);
      BigFraction bigFraction6 = new BigFraction(0.0);
      bigFraction3.ONE_QUARTER.multiply(bigFraction6);
      bigFraction5.TWO_FIFTHS.add(bigInteger0);
      bigFraction5.ONE.pow(5L);
      BigFraction.getReducedFraction(0, 1968);
      bigFraction2.bigDecimalValue(0);
      BigFraction bigFraction7 = new BigFraction(0L, 5L);
      bigFraction2.multiply(bigFraction7);
      bigFraction1.toString();
      // Undeclared exception!
      try { 
        bigFraction4.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.add((-246));
      bigFraction1.MINUS_ONE.add(2516);
      bigFraction1.ONE.pow((-1));
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.negate();
      bigFraction0.TWO.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction0.TWO_FIFTHS.pow(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.TWO.toString();
      BigFraction bigFraction4 = bigFraction0.pow(bigInteger0);
      bigFraction0.TWO_THIRDS.getNumeratorAsInt();
      BigFraction bigFraction5 = bigFraction4.MINUS_ONE.subtract((long) 2);
      bigFraction5.add(0);
      BigFraction bigFraction6 = bigFraction5.TWO_FIFTHS.multiply((-246));
      BigFraction bigFraction7 = bigFraction3.multiply(0L);
      BigFraction bigFraction8 = bigFraction7.ONE_QUARTER.subtract(bigInteger0);
      bigFraction7.THREE_FIFTHS.divide((-246));
      BigFraction bigFraction9 = bigFraction4.multiply(bigInteger0);
      bigFraction9.TWO_QUARTERS.divide((-545L));
      BigFraction bigFraction10 = bigFraction0.reduce();
      bigFraction9.getDenominator();
      bigFraction10.FOUR_FIFTHS.percentageValue();
      bigFraction4.longValue();
      BigFraction bigFraction11 = bigFraction10.subtract((long) 2);
      bigFraction11.MINUS_ONE.getField();
      bigFraction3.subtract(bigFraction6);
      bigFraction8.add(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction1.ONE.getNumeratorAsLong();
      bigFraction1.TWO.getField();
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.reciprocal();
      bigFraction0.compareTo(bigFraction1);
      bigFraction1.ONE_HALF.toString();
      // Undeclared exception!
      try { 
        bigFraction2.TWO_THIRDS.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.add(2147483647L);
      bigFraction2.THREE_QUARTERS.longValue();
      bigFraction0.floatValue();
      BigFraction bigFraction3 = bigFraction0.TWO_THIRDS.reciprocal();
      bigFraction3.ONE.floatValue();
      int int0 = (-270);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-270));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      byte[] byteArray0 = new byte[3];
      bigFraction0.MINUS_ONE.getField();
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-90);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.subtract(bigInteger0);
      bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.divide(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.abs();
      bigFraction1.TWO_FIFTHS.getNumeratorAsLong();
      bigFraction2.ZERO.multiply(109L);
      bigFraction0.getDenominator();
      bigFraction1.ONE_FIFTH.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction1.TWO.negate();
      BigFraction bigFraction5 = bigFraction0.subtract((long) (byte)33);
      bigFraction5.ONE.pow((double) (byte) (-115));
      bigFraction2.hashCode();
      bigFraction0.getNumeratorAsLong();
      bigFraction1.subtract(bigFraction2);
      BigFraction bigFraction6 = bigFraction4.multiply(bigInteger0);
      BigFraction bigFraction7 = bigFraction6.ONE_HALF.multiply(bigInteger0);
      bigFraction2.compareTo(bigFraction1);
      bigFraction6.intValue();
      bigFraction3.multiply((-1803L));
      bigFraction7.add(1128);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 722;
      BigFraction bigFraction0 = new BigFraction(722, 722);
      BigFraction bigFraction1 = bigFraction0.pow(0);
      // Undeclared exception!
      try { 
        bigFraction1.TWO_QUARTERS.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction((-1670L), (-1670L));
      bigFraction0.FOUR_FIFTHS.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.multiply(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.add((-2122L));
      BigFraction bigFraction4 = bigFraction3.multiply((-2122L));
      bigFraction4.floatValue();
      BigFraction bigFraction5 = bigFraction0.multiply((-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction5.TWO_QUARTERS.add(bigInteger0);
      bigFraction5.intValue();
      bigFraction2.abs();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.hashCode();
      bigFraction0.TWO_FIFTHS.doubleValue();
      BigFraction bigFraction1 = bigFraction0.add(0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.multiply(bigInteger0);
      bigFraction1.multiply(0L);
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = 0L;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(1075);
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.divide((long) 1075);
      bigFraction1.ZERO.intValue();
      BigFraction bigFraction3 = bigFraction0.add(119L);
      BigFraction bigFraction4 = bigFraction0.reduce();
      BigFraction bigFraction5 = BigFraction.getReducedFraction(0, 0);
      bigFraction5.ONE_THIRD.pow(119L);
      BigFraction bigFraction6 = bigFraction4.THREE_QUARTERS.pow(1156);
      BigFraction bigFraction7 = bigFraction6.TWO_QUARTERS.multiply(114);
      assertEquals((short)57, bigFraction7.shortValue());
      
      BigFraction bigFraction8 = bigFraction3.ZERO.multiply(1156);
      bigFraction0.ONE.getNumeratorAsLong();
      BigFraction.getReducedFraction(0, 225);
      bigFraction0.MINUS_ONE.bigDecimalValue();
      bigFraction3.TWO.getNumeratorAsInt();
      bigFraction4.getDenominatorAsLong();
      int int0 = bigFraction2.getNumeratorAsInt();
      assertEquals(1, int0);
      
      double double0 = bigFraction1.pow((double) 0);
      assertEquals(1.0, double0, 0.01);
      assertEquals((short)537, bigFraction1.shortValue());
      
      double double1 = bigFraction3.percentageValue();
      assertEquals(12000.0, double1, 0.01);
      
      bigFraction8.negate();
      assertTrue(bigFraction8.equals((Object)bigFraction5));
      
      bigFraction3.intValue();
      Object object0 = new Object();
      boolean boolean0 = bigFraction2.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1544), (-1544));
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.reciprocal();
      bigFraction0.percentageValue();
      BigFraction bigFraction2 = bigFraction0.reduce();
      bigFraction2.getNumeratorAsLong();
      double double0 = bigFraction1.TWO_FIFTHS.percentageValue();
      assertEquals(40.0, double0, 0.01);
      
      BigFraction bigFraction3 = bigFraction0.pow(52);
      bigFraction3.TWO_FIFTHS.bigDecimalValue((-1544), 5);
      long long0 = bigFraction1.getNumeratorAsLong();
      assertEquals((-1L), long0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction4 = bigFraction3.add(bigInteger0);
      BigFraction bigFraction5 = bigFraction1.subtract(bigFraction4);
      assertEquals((byte) (-3), bigFraction5.byteValue());
      
      BigFraction bigFraction6 = bigFraction4.add(0L);
      assertTrue(bigFraction6.equals((Object)bigFraction4));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 3019;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 3019);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction1.TWO.bigDecimalValue(812);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-74L));
      BigFraction bigFraction1 = new BigFraction((-74L), (-74L));
      bigFraction1.ONE_FIFTH.toString();
      bigFraction0.ONE_THIRD.compareTo(bigFraction1);
      bigFraction1.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction1.TWO_THIRDS.pow(204.884442874549);
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      bigFraction0.THREE_FIFTHS.toString();
      BigFraction bigFraction3 = BigFraction.getReducedFraction((-1), 1);
      bigFraction3.FOUR_FIFTHS.add(0L);
      bigFraction2.THREE_QUARTERS.multiply(0);
      BigFraction bigFraction4 = bigFraction0.divide(bigFraction2);
      // Undeclared exception!
      try { 
        bigFraction4.TWO_FIFTHS.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1), (-1));
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((short)2, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.add(0L);
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.pow(2272L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction0.ONE.pow(bigInteger0);
      bigFraction0.THREE_FIFTHS.bigDecimalValue(1, 1);
      BigFraction bigFraction5 = bigFraction4.TWO_THIRDS.multiply(bigFraction0);
      assertEquals((short)1, bigFraction5.shortValue());
      
      bigFraction0.ZERO.pow((double) 0L);
      bigFraction3.intValue();
      BigFraction bigFraction6 = bigFraction3.divide(2272L);
      bigFraction3.subtract(1887);
      bigFraction6.getNumeratorAsInt();
      assertEquals((short) (-10154), bigFraction6.shortValue());
      
      bigFraction0.intValue();
      double double0 = bigFraction0.pow((double) 0);
      assertEquals(1.0, double0, 0.01);
      
      int int0 = bigFraction2.getDenominatorAsInt();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-1), bigFraction2.byteValue());
      assertEquals(5, int0);
      assertFalse(bigFraction1.equals((Object)bigFraction3));
  }
}
