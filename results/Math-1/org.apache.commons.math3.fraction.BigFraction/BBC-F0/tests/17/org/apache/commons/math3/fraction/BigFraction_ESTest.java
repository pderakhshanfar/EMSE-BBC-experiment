/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 15:06:45 GMT 2020
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.pow((double) 2147483640);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction1.hashCode();
      BigFraction bigFraction2 = bigFraction0.reduce();
      bigFraction2.reduce();
      BigFraction bigFraction3 = new BigFraction(2147483640);
      bigFraction3.toString();
      bigFraction1.add((-308L));
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction(Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert NaN value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.pow(3527L);
      bigFraction1.divide((-582));
      bigFraction0.intValue();
      BigFraction bigFraction2 = bigFraction1.add((-1132));
      bigFraction0.divide((-582));
      bigFraction2.percentageValue();
      BigFraction bigFraction3 = new BigFraction((-1816.9678804));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction((double) (-500), (-3937));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -500 to fraction (501/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.pow(3560L);
      BigFraction bigFraction2 = bigFraction1.ZERO.divide((-504));
      bigFraction2.TWO_QUARTERS.intValue();
      BigFraction bigFraction3 = new BigFraction(1.5085256099700928, (-504));
      bigFraction3.ONE_THIRD.bigDecimalValue(0, 0);
      bigFraction1.doubleValue();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-126);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1717986918, Integer.MAX_VALUE);
      BigFraction bigFraction1 = new BigFraction((-2588.8989829745974), Integer.MAX_VALUE);
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.subtract(bigFraction1);
      bigFraction2.ZERO.toString();
      bigFraction0.ONE_FIFTH.getDenominatorAsInt();
      bigFraction0.doubleValue();
      BigFraction bigFraction3 = bigFraction0.abs();
      BigFraction bigFraction4 = bigFraction0.multiply(5);
      bigFraction4.intValue();
      BigFraction bigFraction5 = bigFraction3.TWO_THIRDS.multiply(1717986918);
      bigFraction4.ONE_HALF.pow(968L);
      bigFraction0.doubleValue();
      bigFraction4.MINUS_ONE.intValue();
      BigFraction bigFraction6 = bigFraction3.reduce();
      bigFraction2.subtract(9007198197776384L);
      BigFraction bigFraction7 = bigFraction5.subtract((long) 1717986918);
      BigFraction bigFraction8 = new BigFraction((-2255.9731602415), 924.9310305688543, 415362622);
      bigFraction7.THREE_FIFTHS.equals(bigFraction8);
      BigFraction bigFraction9 = bigFraction6.divide(bigFraction4);
      bigFraction6.hashCode();
      BigFraction bigFraction10 = bigFraction5.divide((-2872));
      bigFraction10.TWO.longValue();
      bigFraction3.reciprocal();
      BigFraction bigFraction11 = bigFraction4.reduce();
      bigFraction11.ONE.pow(2L);
      bigFraction9.reduce();
      BigInteger bigInteger0 = bigFraction4.getDenominator();
      BigFraction bigFraction12 = bigFraction3.negate();
      bigFraction12.ONE_HALF.subtract(bigInteger0);
      bigFraction6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.pow(3527L);
      bigFraction0.toString();
      BigFraction bigFraction2 = bigFraction1.ZERO.divide((-504));
      bigFraction2.TWO_QUARTERS.intValue();
      BigFraction bigFraction3 = bigFraction2.TWO.add(bigFraction1);
      bigFraction1.FOUR_FIFTHS.toString();
      bigFraction0.ZERO.add(866);
      bigFraction3.TWO.divide(100);
      bigFraction1.percentageValue();
      BigFraction bigFraction4 = bigFraction0.negate();
      bigFraction4.TWO.subtract((-2104533974));
      BigFraction bigFraction5 = bigFraction0.add((-313));
      bigFraction5.ONE_QUARTER.hashCode();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction6 = bigFraction1.abs();
      bigFraction6.TWO_THIRDS.subtract((-4716));
      bigFraction0.floatValue();
      BigFraction bigFraction7 = new BigFraction((-388.1530413520534), (-2395));
      bigFraction7.doubleValue();
      bigFraction1.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.pow(3527L);
      bigFraction0.toString();
      BigFraction bigFraction2 = bigFraction1.ZERO.divide((-504));
      bigFraction2.TWO_QUARTERS.intValue();
      BigFraction bigFraction3 = bigFraction2.TWO.add(bigFraction1);
      bigFraction1.toString();
      BigFraction bigFraction4 = bigFraction3.add(0);
      BigFraction bigFraction5 = bigFraction2.divide(1);
      bigFraction0.percentageValue();
      BigFraction bigFraction6 = bigFraction4.negate();
      BigFraction bigFraction7 = bigFraction5.subtract((-313));
      bigFraction3.add((-504));
      bigFraction5.hashCode();
      bigFraction7.subtract((-3273L));
      bigFraction6.abs();
      bigFraction3.floatValue();
      BigFraction bigFraction8 = null;
      try {
        bigFraction8 = new BigFraction((double) (-504), (-504));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -504 to fraction (505/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.pow(3527L);
      bigFraction0.toString();
      BigFraction bigFraction2 = bigFraction1.ZERO.divide((-504));
      bigFraction2.TWO_QUARTERS.intValue();
      bigFraction2.TWO.add(bigFraction1);
      bigFraction1.FOUR_FIFTHS.toString();
      bigFraction0.ZERO.add(866);
      BigFraction bigFraction3 = bigFraction1.divide(1585);
      bigFraction0.percentageValue();
      bigFraction3.negate();
      BigFraction bigFraction4 = bigFraction2.subtract((-504));
      bigFraction4.add(100);
      bigFraction0.hashCode();
      bigFraction0.subtract(2147483648L);
      bigFraction1.abs();
      bigFraction1.floatValue();
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction((double) 0, (-2395));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.pow(3527L);
      bigFraction0.toString();
      BigFraction bigFraction2 = bigFraction1.ZERO.divide((-504));
      bigFraction2.TWO_QUARTERS.intValue();
      BigFraction bigFraction3 = bigFraction2.TWO.add(bigFraction1);
      bigFraction1.FOUR_FIFTHS.toString();
      bigFraction0.ZERO.add(866);
      bigFraction3.TWO.divide(100);
      bigFraction1.percentageValue();
      BigFraction bigFraction4 = bigFraction0.negate();
      BigFraction bigFraction5 = bigFraction4.TWO.subtract((-2104533974));
      BigFraction bigFraction6 = bigFraction0.add((-313));
      bigFraction6.ONE_QUARTER.hashCode();
      bigFraction4.subtract(2147483647L);
      BigFraction bigFraction7 = bigFraction1.abs();
      bigFraction0.floatValue();
      bigFraction5.multiply((long) (-2104533974));
      bigFraction7.MINUS_ONE.floatValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.add(bigInteger0);
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction1.MINUS_ONE.percentageValue();
      bigFraction1.TWO.multiply(bigFraction0);
      BigFraction bigFraction2 = new BigFraction(52);
      bigFraction0.TWO_QUARTERS.compareTo(bigFraction2);
      BigFraction bigFraction3 = bigFraction0.TWO.reciprocal();
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.divide((long) (-1));
      bigFraction0.FOUR_FIFTHS.compareTo(bigFraction4);
      bigFraction0.ONE_FIFTH.getNumeratorAsInt();
      bigFraction0.getDenominator();
      bigFraction0.percentageValue();
      bigFraction4.FOUR_FIFTHS.getDenominatorAsInt();
      bigFraction3.ONE.pow(0.0);
      bigFraction4.getField();
      bigFraction3.ONE.getNumeratorAsLong();
      bigFraction4.compareTo(bigFraction2);
      BigFraction bigFraction5 = bigFraction4.add(4169);
      BigFraction bigFraction6 = bigFraction5.add(bigFraction4);
      bigFraction6.ONE_FIFTH.longValue();
      BigFraction bigFraction7 = bigFraction2.subtract((-599L));
      bigFraction0.hashCode();
      bigFraction7.equals(bigInteger0);
      bigFraction5.abs();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(1068346136, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.TWO_FIFTHS.multiply(bigInteger0);
      bigFraction0.bigDecimalValue(1336, 0);
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.pow(2719.04314792113);
      bigFraction0.hashCode();
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = BigFraction.ONE_THIRD;
      BigFraction bigFraction3 = bigFraction2.reduce();
      bigFraction0.toString();
      bigFraction0.add(4757L);
      bigFraction3.doubleValue();
      bigFraction1.multiply(4757L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction1.divide(bigInteger0);
      BigFraction bigFraction5 = bigFraction3.subtract(2678);
      bigFraction5.compareTo(bigFraction2);
      bigFraction1.multiply(2678);
      bigFraction4.pow((-2641.428));
      bigFraction4.divide(bigInteger0);
      BigFraction bigFraction6 = new BigFraction(Double.NaN, (-1));
      BigFraction bigFraction7 = BigFraction.ONE_THIRD;
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(2147480585, 2147480585);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-16);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.multiply(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.multiply(bigInteger1);
      bigFraction2.TWO_THIRDS.getField();
      bigFraction0.TWO_QUARTERS.divide(2147480585);
      bigFraction0.divide(1L);
      // Undeclared exception!
      try { 
        bigFraction2.pow((-150L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        bigFraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.multiply(13);
      bigFraction1.MINUS_ONE.pow((double) 13);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((double) 1203, 2115);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1,203 to fraction (9,223,372,036,854,774,606/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.toString();
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.add(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE.reciprocal();
      bigFraction1.FOUR_FIFTHS.equals(bigFraction0);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(0, 0);
      bigFraction2.ONE_QUARTER.bigDecimalValue(0);
      bigFraction1.TWO_QUARTERS.getDenominatorAsInt();
      bigFraction0.doubleValue();
      bigFraction1.doubleValue();
      bigFraction1.intValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction3.ONE_QUARTER.subtract(1);
      bigFraction1.divide(bigFraction3);
      bigFraction0.pow((-2570));
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.TWO_QUARTERS.getDenominatorAsLong();
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = new BigFraction((double) 1L);
      BigFraction bigFraction3 = BigFraction.ZERO;
      bigFraction3.TWO.hashCode();
      bigFraction1.multiply(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.FOUR_FIFTHS.add(bigInteger0);
      bigFraction0.divide(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 212813695);
      bigFraction0.divide((-2348L));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = new BigFraction(0.0);
      BigFraction bigFraction3 = new BigFraction((double) 0L);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      bigFraction0.equals(bigFraction2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.pow(bigInteger0);
      bigFraction1.bigDecimalValue(0);
      bigFraction1.multiply((long) (byte)1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      BigFraction bigFraction2 = new BigFraction(0.0);
      bigFraction0.equals(bigFraction2);
      // Undeclared exception!
      try { 
        bigFraction2.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.MINUS_ONE.toString();
      bigFraction0.ONE.pow(802.8827119634866);
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction1.toString();
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction0.getDenominatorAsLong();
      bigFraction1.add(bigFraction2);
      bigFraction1.getDenominatorAsLong();
      bigFraction2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.divide((-3141));
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.add((long) (-3141));
      bigFraction1.ZERO.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.subtract(bigInteger0);
      bigFraction3.TWO.compareTo(bigFraction1);
      bigFraction1.getDenominator();
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.ONE_QUARTER.floatValue();
      BigFraction bigFraction1 = bigFraction0.reduce();
      long long0 = 1228L;
      BigFraction bigFraction2 = bigFraction0.add(1228L);
      BigFraction bigFraction3 = bigFraction2.divide(1228L);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.TWO.subtract(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction0.THREE_FIFTHS.reduce();
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-119));
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = new BigFraction((double) 1L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = new BigFraction((-119));
      bigFraction2.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.46670228242874146);
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3348.79410402654), 3325);
      bigFraction0.floatValue();
      BigFraction bigFraction1 = bigFraction0.add(2147483647L);
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.abs();
      bigFraction0.subtract((long) 3325);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction1.equals(bigFraction0);
      BigFraction bigFraction2 = BigFraction.TWO_FIFTHS;
      bigFraction2.ONE_QUARTER.hashCode();
      bigFraction2.divide((-935));
      BigDecimal bigDecimal0 = new BigDecimal((-798));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(50900590592L, 4684L);
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.add(bigFraction1);
      bigFraction1.hashCode();
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction4 = bigFraction2.subtract(bigFraction0);
      BigFraction bigFraction5 = bigFraction0.reciprocal();
      bigFraction0.floatValue();
      bigFraction5.TWO.getNumeratorAsInt();
      bigFraction5.subtract(1288L);
      bigFraction4.add(583L);
      bigFraction1.equals(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.MINUS_ONE.toString();
      bigFraction0.ONE.pow(802.8827119634866);
      bigFraction0.toString();
      bigFraction0.subtract(bigFraction0);
      bigFraction0.getDenominatorAsLong();
      int int0 = (-1528);
      int int1 = 2147483646;
      BigFraction bigFraction1 = bigFraction0.subtract(2147483646);
      // Undeclared exception!
      try { 
        bigFraction1.pow(2147483646);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      bigFraction1.getDenominatorAsLong();
      bigFraction0.hashCode();
      BigFraction bigFraction2 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction3 = new BigFraction((-758.428379267873), (-420));
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      bigFraction3.multiply(bigFraction4);
      BigFraction bigFraction5 = bigFraction3.subtract(bigFraction2);
      bigFraction5.ONE_FIFTH.divide(5L);
      bigFraction5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.6625457394402474E-10);
      bigFraction0.floatValue();
      bigFraction0.equals("");
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE.reciprocal();
      bigFraction1.FOUR_FIFTHS.equals(bigFraction0);
      BigFraction bigFraction2 = BigFraction.THREE_FIFTHS;
      Object object0 = new Object();
      bigFraction1.equals(object0);
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      long long0 = 1598L;
      bigFraction1.divide(1598L);
      BigFraction bigFraction3 = new BigFraction((double) 1016L);
      bigFraction3.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue((-1109), 634169449);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-827L));
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction0.add(bigFraction1);
      BigFraction bigFraction2 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(3248, (-3394));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction1.divide(bigFraction2);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction3 = new BigFraction(304.41906, 0);
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      bigFraction1.floatValue();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = (-119);
      Object object0 = new Object();
      int int1 = 1365;
      BigFraction bigFraction0 = new BigFraction(1365, 1211);
      bigFraction0.doubleValue();
      double double0 = 1.7976931348623157E308;
      bigFraction0.doubleValue();
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.add(4);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.multiply(bigInteger0);
      bigFraction1.ONE.getDenominatorAsInt();
      bigFraction2.ONE.multiply(bigInteger0);
      bigFraction1.getField();
      BigFraction bigFraction3 = bigFraction1.MINUS_ONE.multiply(bigFraction0);
      bigFraction3.TWO_FIFTHS.reciprocal();
      bigFraction1.TWO_QUARTERS.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction1.subtract(1073);
      bigFraction0.getDenominator();
      bigFraction4.add(bigInteger0);
      bigFraction1.subtract((-964));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.divide(713);
      bigFraction1.ONE.pow(802.8827119634866);
      bigFraction1.ONE_HALF.hashCode();
      BigFraction bigFraction2 = bigFraction0.TWO.reduce();
      BigFraction bigFraction3 = bigFraction1.reduce();
      bigFraction1.toString();
      BigFraction bigFraction4 = bigFraction0.MINUS_ONE.multiply((-4014L));
      bigFraction4.ONE_FIFTH.doubleValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.divide(bigInteger0);
      BigFraction bigFraction5 = bigFraction3.subtract(713);
      bigFraction2.compareTo(bigFraction1);
      bigFraction5.pow(1423.345356146);
      BigFraction bigFraction6 = bigFraction5.multiply(0);
      bigFraction6.getNumerator();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.37035053968429565);
      bigFraction0.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction0.TWO.hashCode();
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction1.add(5L);
      bigFraction2.multiply((-4014L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = new BigFraction(828);
      BigFraction bigFraction4 = bigFraction3.divide(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.subtract(828);
      bigFraction1.compareTo(bigFraction5);
      bigFraction4.multiply(828);
      BigFraction bigFraction6 = new BigFraction(bigInteger0);
      bigFraction5.multiply((-16));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.37035053968429565);
      bigFraction0.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction0.TWO.hashCode();
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction3 = new BigFraction(0.37035053968429565, 0);
      bigFraction2.pow(0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-827L));
      bigFraction0.getDenominatorAsLong();
      bigFraction0.hashCode();
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction1.FOUR_FIFTHS.bigDecimalValue(2147483302);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.MINUS_ONE.toString();
      int int0 = 713;
      BigFraction bigFraction1 = bigFraction0.divide(713);
      bigFraction1.ONE.pow(802.8827119634866);
      bigFraction1.ONE_HALF.hashCode();
      BigFraction bigFraction2 = bigFraction0.TWO.reduce();
      bigFraction0.reduce();
      bigFraction1.toString();
      BigFraction bigFraction3 = new BigFraction((-9223372036854775808L));
      bigFraction3.add(4104L);
      bigFraction2.multiply((-1495L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction3.divide(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.37035053968429565);
      bigFraction0.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction0.TWO.hashCode();
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      bigFraction0.subtract(bigFraction1);
      bigFraction0.getDenominatorAsLong();
      int int0 = 0;
      BigFraction bigFraction2 = new BigFraction(0.37035053968429565, 0);
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigFraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.37035053968429565);
      bigFraction0.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction0.TWO.hashCode();
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      bigFraction2.getDenominatorAsLong();
      BigFraction bigFraction3 = new BigFraction(0.37035053968429565, 0);
      BigFraction bigFraction4 = bigFraction1.add(bigFraction0);
      bigFraction3.getNumeratorAsInt();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)122;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction4.multiply(bigInteger0);
      bigFraction1.floatValue();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1909.819079130805);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byte byte0 = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)51;
      byte byte1 = (byte)125;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-74);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction1.pow(bigInteger1);
      bigFraction1.TWO_FIFTHS.hashCode();
      bigFraction0.getDenominatorAsInt();
      bigFraction1.getNumeratorAsLong();
      bigFraction1.bigDecimalValue((int) (byte) (-16), 1);
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue((int) (byte)88);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 2146827125;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(941.7885839, 2146827125);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 941.789 to fraction (15,863,042,383/16,843,528)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.37035053968429565);
      bigFraction0.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction0.TWO.hashCode();
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      bigFraction0.subtract(bigFraction1);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction2 = new BigFraction(0.37035053968429565, 0);
      BigFraction bigFraction3 = bigFraction1.add(bigFraction2);
      bigFraction3.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.negate();
      bigFraction1.getNumeratorAsLong();
      bigFraction1.multiply((-3L));
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-1460));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = new BigFraction(1);
      bigFraction0.ZERO.abs();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1, 1);
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.divide(1);
      bigFraction2.ZERO.add(4577762542105553359L);
      bigFraction0.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.pow(bigInteger0);
      bigFraction2.intValue();
      bigFraction0.compareTo(bigFraction3);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-6);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      bigInteger3.bitLength();
      BigFraction bigFraction2 = new BigFraction(bigInteger0, bigInteger2);
      bigFraction1.doubleValue();
      bigFraction0.doubleValue();
      BigFraction bigFraction3 = new BigFraction((-1620L), (long) 4);
      bigFraction3.hashCode();
      BigFraction bigFraction4 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction5 = new BigFraction((long) (byte) (-74));
      bigFraction5.negate();
      BigFraction bigFraction6 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction6.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = new BigFraction(860.6256617);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction0.divide(3270);
      BigFraction bigFraction3 = bigFraction0.subtract(1822L);
      BigFraction bigFraction4 = bigFraction3.pow((-2152L));
      BigFraction bigFraction5 = BigFraction.ONE_THIRD;
      bigFraction4.subtract(bigFraction2);
      // Undeclared exception!
      try { 
        bigFraction5.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ONE_THIRD.multiply(2);
      bigFraction0.pow(3411.8231653);
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(179, mockRandom0);
      bigFraction0.multiply(bigInteger0);
      BigFraction.getReducedFraction(3, 100);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE.reciprocal();
      bigFraction1.FOUR_FIFTHS.equals(bigFraction0);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(0, 0);
      BigFraction bigFraction3 = bigFraction1.TWO_THIRDS.subtract(2356L);
      bigFraction3.THREE_FIFTHS.subtract(3979L);
      bigFraction2.ONE_QUARTER.bigDecimalValue(0);
      bigFraction1.TWO_QUARTERS.getDenominatorAsInt();
      bigFraction0.doubleValue();
      bigFraction1.doubleValue();
      bigFraction1.intValue();
      bigFraction1.subtract(bigFraction2);
      BigFraction bigFraction4 = BigFraction.ONE_HALF;
      BigFraction bigFraction5 = bigFraction4.pow((long) 1);
      bigFraction5.add(bigFraction1);
      bigFraction1.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      bigFraction0.TWO_THIRDS.add(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.divide(3270);
      BigFraction bigFraction3 = bigFraction2.ONE_HALF.subtract((long) 3270);
      bigFraction2.subtract(567);
      bigFraction3.ONE.pow((-2152L));
      BigFraction bigFraction4 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction5 = new BigFraction(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction4.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1);
      bigFraction0.ZERO.abs();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction.getReducedFraction(1, 1);
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.divide(1);
      bigFraction2.ZERO.add(4577762542105553359L);
      bigFraction0.pow(bigInteger0);
      bigFraction1.getNumeratorAsLong();
      BigFraction bigFraction3 = new BigFraction(1L, 4577762542105553359L, 1);
      bigFraction3.subtract(bigFraction2);
      bigFraction3.pow(117L);
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1);
      BigFraction bigFraction1 = bigFraction0.ZERO.abs();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger0);
      bigFraction2.equals(bigFraction1);
      bigFraction2.getField();
      BigFraction bigFraction3 = bigFraction2.negate();
      bigFraction3.reduce();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(1211);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.bigDecimalValue();
      int int0 = 613;
      BigFraction bigFraction1 = bigFraction0.subtract(613);
      BigFraction bigFraction2 = BigFraction.THREE_FIFTHS;
      bigFraction2.equals(bigFraction1);
      bigFraction1.getNumerator();
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-892L));
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = new BigFraction(182.98743403, 1.1311840353300795E-11, 1901);
      int int0 = 8;
      BigFraction bigFraction2 = bigFraction0.divide(8);
      BigFraction bigFraction3 = bigFraction2.multiply(bigFraction1);
      bigFraction0.hashCode();
      bigFraction0.subtract(198830432L);
      bigFraction3.getNumeratorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.37035053968429565);
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction1.MINUS_ONE.abs();
      bigFraction2.ONE_HALF.bigDecimalValue();
      bigFraction2.ONE_HALF.subtract(613);
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      bigFraction1.TWO_QUARTERS.equals(bigFraction3);
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      bigFraction0.divide(1016L);
      BigFraction bigFraction4 = bigFraction1.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction4.ONE_HALF.bigDecimalValue(613, 613);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-892L));
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.reduce();
      bigFraction0.ONE.floatValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.abs();
      bigFraction1.ONE_QUARTER.hashCode();
      bigFraction3.ONE_QUARTER.add(0L);
      BigFraction bigFraction4 = bigFraction0.TWO_FIFTHS.pow((long) 1);
      bigFraction4.ONE_HALF.toString();
      BigFraction bigFraction5 = bigFraction1.divide(bigInteger0);
      BigFraction bigFraction6 = bigFraction5.ONE_HALF.subtract(bigFraction1);
      bigFraction0.doubleValue();
      BigFraction bigFraction7 = bigFraction1.FOUR_FIFTHS.multiply(bigInteger0);
      BigFraction bigFraction8 = bigFraction0.divide(1);
      BigFraction bigFraction9 = bigFraction2.reciprocal();
      bigFraction9.ONE_QUARTER.bigDecimalValue(1);
      BigFraction bigFraction10 = bigFraction2.multiply(1);
      bigFraction10.TWO_FIFTHS.toString();
      bigFraction0.getDenominator();
      bigFraction0.bigDecimalValue(1);
      bigFraction7.longValue();
      bigFraction8.bigDecimalValue(1, 1);
      bigFraction5.bigDecimalValue();
      bigFraction6.toString();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)52;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-791), (byte)1);
      bigFraction1.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 25;
      BigFraction bigFraction0 = new BigFraction((-191.871168773347), 0.0, 25);
      BigFraction bigFraction1 = bigFraction0.ONE.divide(394);
      bigFraction0.ONE_QUARTER.multiply(bigFraction1);
      bigFraction0.ONE_THIRD.hashCode();
      bigFraction0.subtract((long) 25);
      bigFraction0.ONE_QUARTER.getNumeratorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.reduce();
      bigFraction0.intValue();
      bigFraction0.bigDecimalValue(0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.TWO_FIFTHS.divide(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.pow((-4316L));
      BigFraction bigFraction3 = bigFraction1.pow(bigInteger1);
      bigFraction2.ONE_QUARTER.hashCode();
      BigFraction bigFraction4 = bigFraction1.add(0L);
      BigFraction bigFraction5 = bigFraction4.ONE.add(0);
      bigFraction1.percentageValue();
      BigFraction bigFraction6 = bigFraction3.add(bigInteger1);
      bigFraction6.ZERO.getNumeratorAsLong();
      bigFraction5.equals((Object) null);
      BigFraction bigFraction7 = bigFraction0.multiply(bigFraction4);
      bigFraction7.TWO_THIRDS.compareTo(bigFraction5);
      bigFraction3.getNumerator();
      bigFraction2.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1);
      BigFraction bigFraction1 = bigFraction0.ZERO.abs();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger0);
      BigFraction.getReducedFraction(1, 1);
      BigFraction bigFraction3 = bigFraction0.ONE_FIFTH.divide(1);
      bigFraction3.ZERO.add(4577762542105553359L);
      bigFraction0.pow(bigInteger0);
      bigFraction2.getNumeratorAsLong();
      int int0 = (-1460);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-1460));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1528L), 100L);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ONE_THIRD.getNumeratorAsLong();
      bigInteger0.intValue();
      bigFraction0.TWO.getField();
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.add(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger1);
      bigFraction2.floatValue();
      bigFraction1.TWO_QUARTERS.subtract(bigInteger1);
      bigFraction0.toString();
      BigFraction bigFraction3 = bigFraction1.divide(bigFraction2);
      bigFraction3.THREE_QUARTERS.add(1);
      bigFraction3.MINUS_ONE.pow((double) (-16.28F));
      bigFraction0.getDenominator();
      bigFraction2.ONE_HALF.pow(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1909.819079130805);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byte byte0 = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)51;
      byte byte1 = (byte)125;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-74);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction1.TWO_FIFTHS.hashCode();
      bigFraction0.getDenominatorAsInt();
      bigFraction1.getNumeratorAsLong();
      bigFraction1.bigDecimalValue((int) (byte) (-16), 1);
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue((int) (byte)88);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE.reciprocal();
      bigFraction1.FOUR_FIFTHS.equals(bigFraction0);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(0, 0);
      bigFraction2.ONE_QUARTER.bigDecimalValue(0);
      bigFraction1.TWO_QUARTERS.getDenominatorAsInt();
      bigFraction0.doubleValue();
      bigFraction1.doubleValue();
      bigFraction1.intValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction1.divide(bigFraction3);
      bigFraction0.pow((-2570));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-602.4248015487914), (-1));
      bigFraction0.ZERO.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.add((-1));
      bigFraction0.toString();
      BigFraction.getReducedFraction((-1), 2);
      bigFraction0.getNumeratorAsInt();
      bigFraction1.getDenominator();
      bigFraction1.getNumerator();
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-892L));
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((double) (-892L), 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -892 to fraction (893/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      bigInteger0.bitLength();
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.doubleValue();
      bigFraction0.doubleValue();
      bigFraction0.hashCode();
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.negate();
      bigFraction1.TWO_THIRDS.pow(bigInteger2);
      bigFraction2.THREE_FIFTHS.intValue();
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.divide(bigInteger2);
      bigFraction3.bigDecimalValue(1, 1);
      bigFraction1.getField();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.14614200592041, 669);
      bigFraction0.FOUR_FIFTHS.getDenominatorAsInt();
      bigFraction0.TWO_THIRDS.toString();
      bigFraction0.subtract(689);
      BigFraction bigFraction1 = bigFraction0.abs();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)124;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      double double0 = 1545.807974;
      bigFraction0.TWO.toString();
      bigFraction0.ONE.negate();
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.bigDecimalValue(1671);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-119);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.0844638420493122E46, (-119));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 10,844,638,420,493,122,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.toString();
      int int0 = (-2858);
      BigFraction bigFraction1 = new BigFraction((-2858), (-2858));
      bigFraction1.TWO.getDenominatorAsInt();
      bigFraction0.compareTo(bigFraction1);
      bigFraction1.THREE_QUARTERS.add((-1));
      BigFraction bigFraction2 = bigFraction1.multiply((-1073741824L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.TWO_QUARTERS.pow((long) (-2858));
      BigFraction bigFraction5 = bigFraction3.ONE_FIFTH.abs();
      bigFraction4.TWO_THIRDS.getDenominatorAsInt();
      bigFraction0.equals("1 / 5");
      bigFraction3.ONE.add(bigFraction5);
      BigFraction.getReducedFraction(1, (-1));
      BigFraction bigFraction6 = bigFraction1.pow(2087L);
      bigFraction6.TWO.getDenominatorAsLong();
      bigFraction6.THREE_FIFTHS.getNumeratorAsInt();
      bigFraction2.doubleValue();
      bigFraction4.subtract(bigInteger0);
      bigFraction2.intValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.divideAndRemainder(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2, 2);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.add((long) 2);
      bigFraction1.FOUR_FIFTHS.reciprocal();
      BigFraction.getReducedFraction(2, (-353));
      bigFraction0.intValue();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction0.subtract((long) 1);
      bigFraction2.getDenominatorAsInt();
      bigFraction1.add(0L);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction1.MINUS_ONE.percentageValue();
      bigFraction1.TWO.multiply(bigFraction0);
      BigFraction bigFraction2 = new BigFraction(52);
      bigFraction0.TWO_QUARTERS.compareTo(bigFraction2);
      BigFraction bigFraction3 = bigFraction0.TWO.reciprocal();
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.divide((long) (-1));
      bigFraction0.FOUR_FIFTHS.compareTo(bigFraction4);
      bigFraction0.ONE_FIFTH.getNumeratorAsInt();
      bigFraction0.getDenominator();
      bigFraction0.percentageValue();
      bigFraction4.FOUR_FIFTHS.getDenominatorAsInt();
      bigFraction3.ONE.pow(0.0);
      bigFraction4.getField();
      bigFraction3.ONE.getNumeratorAsLong();
      bigFraction4.compareTo(bigFraction2);
      BigFraction bigFraction5 = bigFraction4.add(4169);
      BigFraction bigFraction6 = bigFraction5.add(bigFraction4);
      bigFraction6.ONE_FIFTH.longValue();
      BigFraction bigFraction7 = bigFraction2.subtract((-622L));
      bigFraction0.hashCode();
      bigFraction7.equals(bigInteger0);
      bigFraction5.abs();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0);
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.percentageValue();
      bigFraction0.TWO_THIRDS.toString();
      bigFraction0.ONE_HALF.hashCode();
      BigFraction bigFraction1 = new BigFraction(629, 629);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte) (-2);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.TWO_QUARTERS.multiply(bigInteger0);
      bigFraction0.ONE.multiply(bigFraction1);
      bigFraction0.hashCode();
      // Undeclared exception!
      try { 
        bigFraction0.TWO_THIRDS.bigDecimalValue(868);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1532, 5958);
      bigFraction0.TWO_THIRDS.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.37035053968429565);
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction2.ONE_HALF.bigDecimalValue();
      bigFraction2.ONE_HALF.subtract(613);
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      bigFraction1.TWO_QUARTERS.equals(bigFraction3);
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      bigFraction0.divide(1016L);
      BigFraction bigFraction4 = bigFraction1.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction4.ONE_HALF.bigDecimalValue(613, 613);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = (-3924);
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-3924), (-3924));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.TWO_THIRDS.getField();
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow(bigInteger0);
      bigFraction0.equals("org.apache.commons.math3.fraction.BigFraction");
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.add(bigInteger0);
      bigFraction0.THREE_FIFTHS.percentageValue();
      BigFraction bigFraction3 = bigFraction2.ONE.multiply(bigFraction0);
      bigFraction3.ONE.getDenominatorAsInt();
      bigFraction0.longValue();
      bigFraction1.pow(0L);
      int int1 = 3;
      bigFraction1.ONE.hashCode();
      int int2 = 0;
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(3, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.divide(3270);
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.subtract((long) 3270);
      BigFraction bigFraction5 = bigFraction4.ONE.pow((-2152L));
      BigFraction bigFraction6 = BigFraction.ONE_THIRD;
      BigFraction bigFraction7 = bigFraction4.ZERO.subtract(bigFraction6);
      assertEquals((byte)0, bigFraction7.byteValue());
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      
      BigFraction bigFraction8 = bigFraction2.pow((long) 3270);
      BigFraction bigFraction9 = bigFraction1.add(bigFraction3);
      int int0 = bigFraction8.getNumeratorAsInt();
      assertTrue(bigFraction0.equals((Object)bigFraction5));
      assertEquals((byte) (-43), bigFraction8.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertEquals((-1258079391), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.ONE_QUARTER.bigDecimalValue();
      int int0 = 2414;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.add(2414);
      BigFraction bigFraction2 = bigFraction1.ONE.divide((long) 2414);
      bigFraction1.TWO_THIRDS.longValue();
      byte[] byteArray0 = new byte[0];
      bigFraction2.ZERO.compareTo(bigFraction1);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1113.043678, 2.146925464473481E-8, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 1,113.044 to fraction after 1 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-870), (-870));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.ONE_THIRD.divide(688);
      bigFraction0.ONE_THIRD.multiply(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.divide((long) (-870));
      // Undeclared exception!
      try { 
        bigFraction1.ONE_FIFTH.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-127L));
      int int0 = (-2146);
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction0.THREE_QUARTERS.subtract(bigFraction1);
      bigFraction0.TWO.add((-2146));
      BigInteger bigInteger0 = null;
      try { 
        bigFraction0.ONE.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.MINUS_ONE.toString();
      BigFraction bigFraction1 = bigFraction0.divide(713);
      double double0 = bigFraction1.ONE.pow(802.8827119634866);
      assertEquals(1.0, double0, 0.01);
      
      bigFraction1.ONE_HALF.hashCode();
      BigFraction bigFraction2 = bigFraction0.TWO.reduce();
      BigFraction bigFraction3 = bigFraction1.reduce();
      String string0 = bigFraction1.toString();
      assertEquals("1 / 2139", string0);
      
      BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.add((-3280L));
      BigFraction bigFraction5 = bigFraction4.MINUS_ONE.multiply((-4014L));
      assertEquals((byte) (-82), bigFraction5.byteValue());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.divide(bigInteger0);
      BigFraction bigFraction6 = bigFraction3.subtract(713);
      int int0 = bigFraction2.compareTo(bigFraction4);
      assertEquals(1, int0);
      
      BigFraction bigFraction7 = bigFraction3.multiply(0);
      double double1 = bigFraction7.pow(1423.345356146);
      assertEquals(0.0, double1, 0.01);
      
      BigFraction bigFraction8 = bigFraction6.multiply(0);
      assertEquals((byte)56, bigFraction6.byteValue());
      assertFalse(bigFraction8.equals((Object)bigFraction6));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.TWO_THIRDS.longValue();
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(1685L);
      bigFraction1.THREE_FIFTHS.longValue();
      bigFraction0.ONE_HALF.pow((double) 0L);
      int int0 = (-2070);
      int int1 = 2220;
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-2070), 2220);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9007199254740990L, 9007199254740990L);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.subtract(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      
      BigFraction bigFraction3 = bigFraction0.TWO_FIFTHS.multiply(1617);
      assertEquals((short)646, bigFraction3.shortValue());
      
      BigFraction bigFraction4 = bigFraction0.divide(2);
      long long0 = bigFraction4.getDenominatorAsLong();
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow((-2151));
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.add((-2151));
      bigFraction2.ONE.getField();
      // Undeclared exception!
      try { 
        bigFraction2.ZERO.bigDecimalValue((-2151));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.reciprocal();
      BigFraction bigFraction2 = bigFraction0.negate();
      BigFraction bigFraction3 = bigFraction0.reciprocal();
      bigFraction3.TWO_THIRDS.equals(bigFraction2);
      BigFraction bigFraction4 = bigFraction2.add(bigFraction0);
      bigFraction3.floatValue();
      bigFraction0.equals(bigFraction2);
      BigFraction bigFraction5 = bigFraction2.subtract(0L);
      bigFraction5.ONE_THIRD.add(0L);
      bigFraction5.hashCode();
      BigInteger bigInteger0 = bigFraction4.getDenominator();
      BigFraction bigFraction6 = bigFraction4.add((-1));
      bigFraction4.hashCode();
      BigFraction bigFraction7 = BigFraction.getReducedFraction(2705, 2705);
      bigFraction7.ONE_THIRD.subtract(bigInteger0);
      bigFraction6.ONE_FIFTH.subtract(bigFraction7);
      bigFraction7.getNumeratorAsInt();
      bigFraction0.equals(bigFraction2);
      bigFraction2.multiply(bigFraction1);
      bigFraction4.bigDecimalValue();
      BigFraction bigFraction8 = bigFraction1.multiply(bigInteger0);
      bigFraction6.subtract(510);
      bigFraction8.pow(2705);
      int int0 = (-1426);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1426));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.ZERO.floatValue();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-92);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.TWO_QUARTERS.subtract(bigInteger0);
      BigInteger bigInteger1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(804.40209069, (-277));
      BigFraction bigFraction1 = new BigFraction((-31.37059623), (-571));
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.multiply((-277));
      String string0 = bigFraction0.ONE.toString();
      assertEquals("1", string0);
      
      boolean boolean0 = bigFraction3.ONE_QUARTER.equals("");
      assertFalse(boolean0);
      
      bigFraction2.MINUS_ONE.longValue();
      BigFraction bigFraction4 = BigFraction.getReducedFraction(792, 1);
      BigFraction bigFraction5 = bigFraction3.add((long) (-277));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-49);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.TWO_QUARTERS.add(bigInteger0);
      bigFraction5.THREE_QUARTERS.multiply(13);
      int int0 = bigFraction2.intValue();
      assertEquals(836, int0);
      
      bigFraction4.reciprocal();
      assertEquals((short)792, bigFraction4.shortValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-3138), (-3138));
      BigFraction bigFraction1 = bigFraction0.divide((-935));
      BigFraction bigFraction2 = bigFraction0.abs();
      BigFraction bigFraction3 = bigFraction0.add((long) (-935));
      assertEquals((short) (-934), bigFraction3.shortValue());
      
      bigFraction2.bigDecimalValue();
      assertEquals((byte)1, bigFraction2.byteValue());
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1355);
      BigFraction bigFraction1 = bigFraction0.divide(1355);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.divide((long) 1355);
      bigFraction2.ONE_QUARTER.percentageValue();
      bigFraction1.reduce();
      MockRandom mockRandom0 = new MockRandom();
      bigFraction1.TWO.reduce();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3321));
      float float0 = bigFraction0.THREE_FIFTHS.floatValue();
      assertEquals(0.6F, float0, 0.01F);
      
      BigFraction bigFraction1 = bigFraction0.ZERO.subtract((long) (-3321));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.subtract(bigInteger0);
      bigFraction2.THREE_FIFTHS.abs();
      int int0 = bigFraction0.getNumeratorAsInt();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals((-3321), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L, (-827L));
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.subtract((-1));
      bigFraction0.TWO.toString();
      bigFraction1.TWO_THIRDS.negate();
      bigFraction0.ONE_QUARTER.pow((-1));
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.subtract(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction2.FOUR_FIFTHS.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = 0L;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }
}
