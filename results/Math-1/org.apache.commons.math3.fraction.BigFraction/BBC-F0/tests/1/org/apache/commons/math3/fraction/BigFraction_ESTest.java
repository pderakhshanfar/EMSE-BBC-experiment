/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:38:55 GMT 2020
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(7.329670355514517E-6);
      BigInteger bigInteger0 = BigInteger.valueOf((-9223372036854775808L));
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction1.getDenominatorAsInt();
      bigFraction0.floatValue();
      bigFraction0.subtract(1L);
      bigFraction1.intValue();
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction3 = bigFraction1.divide(bigFraction2);
      BigFraction bigFraction4 = new BigFraction(3.470847514108755E-5);
      bigFraction4.ZERO.bigDecimalValue(0);
      bigFraction3.divide(482L);
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction((double) 1L, 160);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 0);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-2147483645), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) Integer.MAX_VALUE);
      BigFraction bigFraction1 = new BigFraction(Integer.MAX_VALUE, Integer.MAX_VALUE, 3276);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction3 = new BigFraction((-2133447806));
      bigFraction2.divide(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      int int0 = (-1133);
      BigFraction bigFraction1 = bigFraction0.ONE.pow((-1133));
      bigFraction1.MINUS_ONE.getNumeratorAsLong();
      bigFraction0.ONE.doubleValue();
      bigFraction0.FOUR_FIFTHS.percentageValue();
      BigFraction bigFraction2 = bigFraction0.multiply((long) (-1133));
      bigFraction2.MINUS_ONE.intValue();
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction(730, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1645.15778));
      bigFraction0.ONE.longValue();
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.subtract(3857);
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.divide((long) 3857);
      bigFraction0.bigDecimalValue();
      bigFraction2.THREE_QUARTERS.doubleValue();
      BigFraction bigFraction3 = bigFraction0.ONE_THIRD.add(1168);
      bigFraction0.bigDecimalValue(3, 3);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ONE_QUARTER.bigDecimalValue();
      BigInteger bigInteger1 = bigInteger0.flipBit(1748);
      BigFraction bigFraction4 = bigFraction3.divide(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.reciprocal();
      BigFraction bigFraction6 = bigFraction5.TWO.divide(bigInteger1);
      bigFraction2.divide(3);
      bigFraction3.multiply(9193070505571053912L);
      bigFraction6.divide(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-10325L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9.924030156169606E118);
      bigFraction0.ONE_HALF.abs();
      bigFraction0.divide(260);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(712);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.reduce();
      int int0 = (-2143536066);
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.add((-2143536066));
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.subtract(bigFraction0);
      bigFraction3.MINUS_ONE.subtract((-5305L));
      BigFraction bigFraction4 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.add(bigInteger0);
      BigFraction bigFraction6 = bigFraction1.multiply(bigInteger0);
      bigFraction6.ZERO.pow(3.5766313613670104E-15);
      BigFraction bigFraction7 = bigFraction5.multiply(1073741824);
      bigFraction7.ONE_HALF.add(1073741824);
      BigFraction bigFraction8 = bigFraction1.subtract(157454591590400L);
      bigFraction8.add((-2700L));
      // Undeclared exception!
      try { 
        bigFraction1.ZERO.bigDecimalValue(191);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.divide((long) (byte)94);
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.pow(2716L);
      BigFraction bigFraction3 = bigFraction0.pow(1);
      bigInteger0.getLowestSetBit();
      bigFraction3.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction0.divide(bigInteger0);
      bigFraction4.toString();
      bigFraction4.MINUS_ONE.subtract((int) (byte) (-1));
      bigFraction3.TWO_FIFTHS.divide(bigFraction2);
      bigFraction1.TWO.subtract(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.divide(bigInteger0);
      bigFraction5.THREE_QUARTERS.equals("1");
      bigFraction1.toString();
      BigFraction bigFraction6 = bigFraction2.multiply(1);
      BigFraction bigFraction7 = bigFraction3.reciprocal();
      bigFraction6.longValue();
      BigFraction.getReducedFraction((byte) (-1), (byte)52);
      bigFraction7.getDenominator();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.THREE_QUARTERS.abs();
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-62.416718), 2147483631);
      BigFraction bigFraction1 = bigFraction0.divide(4014L);
      bigFraction0.multiply(bigFraction1);
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ZERO.equals(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction3.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1090.34447, 313);
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)80;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction1.divide(bigInteger0);
      bigFraction2.getNumeratorAsInt();
      bigFraction1.doubleValue();
      bigFraction3.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(334.295337);
      BigFraction bigFraction1 = new BigFraction((-1076), 753.32, (-1076));
      bigFraction1.intValue();
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      BigFraction bigFraction3 = bigFraction2.divide(bigFraction1);
      bigFraction2.TWO_QUARTERS.floatValue();
      bigFraction3.getField();
      BigFraction bigFraction4 = BigFraction.THREE_QUARTERS;
      bigFraction2.abs();
      BigFraction bigFraction5 = bigFraction0.abs();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction4.subtract(bigInteger0);
      bigFraction5.getNumerator();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.ZERO.equals(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      BigFraction bigFraction3 = bigFraction2.subtract(4907594678272L);
      bigFraction3.multiply(4907594678272L);
      BigFraction bigFraction4 = BigFraction.TWO_THIRDS;
      bigFraction4.negate();
      bigFraction1.intValue();
      bigFraction4.pow(5);
      bigFraction4.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction1.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(334.295337);
      bigFraction0.TWO_THIRDS.toString();
      bigFraction0.ZERO.getNumeratorAsLong();
      bigFraction0.ONE.getDenominatorAsInt();
      BigFraction bigFraction1 = new BigFraction((-4465.7237), (-1));
      bigFraction1.TWO.toString();
      bigFraction0.getField();
      BigFraction bigFraction2 = bigFraction1.add((long) (-1));
      bigFraction0.getDenominator();
      bigFraction2.reduce();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      bigFraction0.FOUR_FIFTHS.add(1431655765);
      bigFraction0.ONE_FIFTH.getDenominatorAsInt();
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.TWO_THIRDS.toString();
      bigFraction0.ZERO.getNumeratorAsLong();
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction1.intValue();
      BigFraction bigFraction2 = bigFraction0.subtract(0L);
      BigFraction bigFraction3 = bigFraction1.subtract((long) (-2));
      bigFraction2.multiply(0L);
      BigFraction bigFraction4 = bigFraction3.negate();
      bigFraction3.intValue();
      bigFraction1.pow(0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.add(bigInteger0);
      bigFraction0.add(bigFraction1);
      bigFraction3.getDenominatorAsLong();
      bigFraction1.divide(5805L);
      bigFraction4.multiply(2);
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.24348026307613224);
      bigFraction0.getField();
      bigFraction0.add(2147467264);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.TWO_THIRDS.toString();
      bigFraction0.ZERO.getNumeratorAsLong();
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.THREE_FIFTHS.floatValue();
      bigFraction0.ONE_THIRD.intValue();
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      bigFraction1.toString();
      bigFraction1.divide((-1920L));
      bigFraction2.multiply(4);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.add(bigFraction0);
      bigFraction4.multiply(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.pow(bigInteger0);
      bigFraction5.abs();
      bigFraction3.reduce();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(56377433, 56377433);
      BigFraction bigFraction1 = bigFraction0.add(56377433);
      bigFraction1.THREE_QUARTERS.bigDecimalValue();
      bigFraction1.TWO.percentageValue();
      bigFraction0.MINUS_ONE.divide(1908874353);
      bigFraction1.getField();
      bigFraction1.toString();
      BigFraction bigFraction2 = bigFraction0.divide((-944));
      BigFraction bigFraction3 = bigFraction1.ONE_FIFTH.negate();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction4 = BigFraction.getReducedFraction(778, 1908874353);
      BigFraction bigFraction5 = bigFraction2.pow(bigInteger0);
      bigFraction5.TWO_THIRDS.floatValue();
      BigFraction bigFraction6 = bigFraction5.ONE_QUARTER.abs();
      bigFraction1.getDenominatorAsInt();
      bigFraction5.add(bigFraction6);
      BigFraction bigFraction7 = bigFraction4.add(bigInteger0);
      bigFraction7.MINUS_ONE.getField();
      BigFraction bigFraction8 = bigFraction3.pow(bigInteger0);
      bigFraction4.TWO_THIRDS.abs();
      BigFraction bigFraction9 = bigFraction0.divide(1009);
      bigFraction7.MINUS_ONE.pow((double) 1009);
      bigFraction9.ONE_THIRD.divide((long) 1908874353);
      bigFraction9.multiply(bigFraction7);
      bigFraction1.reciprocal();
      bigFraction8.multiply((long) 1009);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0, 1.0, 104);
      Object object0 = new Object();
      BigFraction bigFraction1 = new BigFraction(1.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.doubleValue();
      BigFraction bigFraction3 = BigFraction.ZERO;
      bigFraction3.divide((long) 104);
      BigFraction bigFraction4 = bigFraction0.multiply(2);
      bigFraction4.ZERO.intValue();
      BigFraction bigFraction5 = new BigFraction(3309.477569365, 3029.714632987, 1086);
      BigFraction bigFraction6 = bigFraction3.abs();
      bigFraction6.TWO.getDenominatorAsLong();
      BigFraction bigFraction7 = new BigFraction(1825L);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0, 1.0, 104);
      Object object0 = new Object();
      BigFraction bigFraction1 = new BigFraction(1.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.doubleValue();
      BigFraction bigFraction3 = new BigFraction((double) 104);
      bigFraction3.divide((long) 104);
      bigFraction0.multiply(2);
      BigFraction bigFraction4 = new BigFraction(3309.477569365, 3029.714632987, 1086);
      bigFraction3.abs();
      BigFraction bigFraction5 = new BigFraction((long) 1086);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction1.ZERO.equals(bigInteger0);
      bigFraction1.multiply(bigFraction0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction2 = BigFraction.ONE;
      BigFraction bigFraction3 = BigFraction.ONE_THIRD;
      bigFraction3.getNumeratorAsInt();
      bigFraction2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigFraction bigFraction2 = bigFraction1.pow(599);
      bigFraction2.divide(52);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction0.MINUS_ONE.hashCode();
      bigFraction1.FOUR_FIFTHS.divide(bigFraction0);
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction1);
      bigFraction2.multiply(bigFraction0);
      BigFraction bigFraction4 = bigFraction2.add((-1869));
      bigFraction0.pow((long) (-1869));
      bigFraction4.bigDecimalValue();
      bigFraction0.add(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction.getReducedFraction(5, (-1));
      BigFraction bigFraction0 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow((-1));
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction2 = BigFraction.ONE;
      BigFraction bigFraction3 = bigFraction1.reduce();
      BigFraction bigFraction4 = bigFraction3.TWO_THIRDS.multiply(bigInteger1);
      BigFraction bigFraction5 = new BigFraction(2891L);
      bigFraction1.abs();
      bigFraction4.percentageValue();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.getNumeratorAsLong();
      bigFraction0.getField();
      BigFraction bigFraction1 = new BigFraction(2L, 2L, 712);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = new BigFraction(2L);
      Object object0 = new Object();
      bigFraction0.equals(bigFraction2);
      BigFraction bigFraction3 = new BigFraction(2097152L);
      BigFraction bigFraction4 = bigFraction2.divide(bigFraction0);
      bigFraction4.reduce();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(334.295337);
      bigFraction0.TWO_THIRDS.toString();
      bigFraction0.ZERO.getNumeratorAsLong();
      bigFraction0.ONE.getDenominatorAsInt();
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-1), (-1));
      bigFraction0.THREE_FIFTHS.floatValue();
      bigFraction0.ONE_THIRD.intValue();
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      bigFraction1.toString();
      BigFraction bigFraction3 = bigFraction0.divide(bigFraction2);
      bigFraction3.ONE_HALF.getField();
      BigFraction bigFraction4 = new BigFraction((double) 0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(334.295337);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      Object object0 = new Object();
      bigFraction1.equals((Object) null);
      BigFraction bigFraction2 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction3 = bigFraction0.abs();
      try { 
        bigFraction3.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(334.295337);
      bigFraction0.TWO_THIRDS.toString();
      bigFraction0.ZERO.getNumeratorAsLong();
      Object object0 = new Object();
      bigFraction0.equals(object0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.multiply(bigFraction0);
      BigFraction bigFraction2 = BigFraction.THREE_FIFTHS;
      bigFraction2.floatValue();
      BigFraction bigFraction3 = new BigFraction((-1183L));
      bigFraction3.doubleValue();
      bigFraction0.longValue();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(334.295337);
      bigFraction0.TWO_THIRDS.toString();
      BigFraction bigFraction1 = bigFraction0.pow((-1758));
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      bigFraction3.abs();
      BigFraction bigFraction4 = new BigFraction((long) (-1758));
      bigFraction2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(334.295337);
      bigFraction0.TWO_THIRDS.toString();
      bigFraction0.ZERO.getNumeratorAsLong();
      bigFraction0.ONE.getDenominatorAsInt();
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-1), (-1));
      bigFraction0.THREE_FIFTHS.floatValue();
      bigFraction0.ONE_THIRD.intValue();
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      bigFraction1.toString();
      BigFraction bigFraction3 = bigFraction0.divide(bigFraction2);
      bigFraction3.ONE_HALF.getField();
      bigFraction3.abs();
      BigFraction bigFraction4 = new BigFraction((long) (-1));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-16), 509);
      bigFraction0.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction0.negate();
      bigFraction0.multiply((-16));
      BigFraction bigFraction1 = bigFraction0.pow(509L);
      bigFraction1.floatValue();
      BigFraction bigFraction2 = new BigFraction((long) 509);
      BigFraction bigFraction3 = new BigFraction(1888L);
      Random.setNextRandom((-16));
      bigFraction2.pow((double) 1888L);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.getNumeratorAsLong();
      bigFraction0.getField();
      BigFraction bigFraction1 = new BigFraction(2.1497923076907455E-4, 1.2264106498053147E-18, 712);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      Object object0 = new Object();
      Object object1 = new Object();
      bigFraction0.equals(object1);
      BigFraction bigFraction3 = new BigFraction((-3224L));
      BigFraction bigFraction4 = BigFraction.TWO_THIRDS;
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4, 509);
      bigFraction0.TWO_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction0.multiply(4);
      BigFraction bigFraction2 = new BigFraction(2040.4937959, 2382.3426146698, 37);
      Object object0 = new Object();
      bigFraction1.equals((Object) null);
      bigFraction1.compareTo(bigFraction2);
      BigFraction bigFraction3 = new BigFraction((long) 37);
      // Undeclared exception!
      try { 
        bigFraction1.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(334.295337);
      bigFraction0.TWO_THIRDS.toString();
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction1.ZERO.getNumeratorAsLong();
      bigFraction1.ONE.getDenominatorAsInt();
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-1), (-1));
      bigFraction1.THREE_FIFTHS.floatValue();
      BigFraction bigFraction3 = bigFraction2.TWO.pow((-1));
      bigFraction0.ONE_THIRD.intValue();
      BigFraction bigFraction4 = bigFraction1.reciprocal();
      bigFraction2.toString();
      BigFraction bigFraction5 = bigFraction0.divide(bigFraction4);
      BigFraction bigFraction6 = BigFraction.ZERO;
      bigFraction0.ZERO.equals(bigFraction6);
      bigFraction5.ONE_HALF.getField();
      bigFraction3.MINUS_ONE.reduce();
      bigFraction2.floatValue();
      bigFraction2.add(5251L);
      BigFraction bigFraction7 = new BigFraction((long) 0);
      bigFraction5.doubleValue();
      bigFraction5.reduce();
      bigFraction5.pow(2.5702462380650104E-10);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.add(4815);
      bigFraction1.ZERO.equals(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.multiply(bigFraction0);
      BigFraction bigFraction4 = bigFraction3.ZERO.subtract(4815);
      bigFraction4.TWO.doubleValue();
      bigFraction4.getDenominatorAsInt();
      BigFraction bigFraction5 = BigFraction.getReducedFraction(4815, (-1));
      bigFraction0.floatValue();
      bigFraction2.pow((-1));
      bigFraction4.intValue();
      BigFraction bigFraction6 = bigFraction1.reciprocal();
      bigFraction1.toString();
      bigFraction6.divide(bigFraction2);
      bigFraction6.getField();
      BigFraction bigFraction7 = bigFraction3.reduce();
      bigFraction2.floatValue();
      bigFraction0.add((long) (-1));
      BigFraction bigFraction8 = new BigFraction((-2378L));
      bigFraction1.doubleValue();
      bigFraction7.reduce();
      bigFraction5.pow(3.183001563655807E-5);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = new Object();
      BigFraction bigFraction0 = new BigFraction(1.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = bigFraction0.add((-1260L));
      BigFraction bigFraction3 = new BigFraction(2147483647L);
      BigFraction bigFraction4 = BigFraction.TWO_THIRDS;
      bigFraction4.doubleValue();
      BigFraction bigFraction5 = bigFraction1.add(bigFraction2);
      BigFraction bigFraction6 = BigFraction.ONE_HALF;
      bigFraction5.FOUR_FIFTHS.equals(bigFraction6);
      bigFraction5.getNumerator();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.add(4815);
      bigFraction1.ZERO.equals(bigInteger0);
      bigFraction1.multiply(bigFraction0);
      bigFraction2.abs();
      BigFraction bigFraction3 = new BigFraction((long) 4815);
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.ONE_THIRD.add(bigInteger0);
      bigFraction0.subtract(2146693260);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.getField();
      bigFraction0.divide(7910884519577875640L);
      BigFraction bigFraction1 = BigFraction.ONE;
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction1.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction1.TWO_FIFTHS.add(4815);
      bigFraction1.ZERO.equals(bigInteger0);
      bigFraction1.multiply(bigFraction0);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(9.924030156169606E118, 54.8427132246, 4815);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 99,240,301,561,696,060,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction1.TWO_FIFTHS.bigDecimalValue((-2891), 2146435583);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1182.438738367), 1239);
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.abs();
      BigFraction bigFraction2 = bigFraction1.pow(1239);
      BigFraction bigFraction3 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction5 = bigFraction3.subtract(bigFraction4);
      bigFraction5.ONE_HALF.getDenominatorAsInt();
      bigFraction2.getField();
      bigFraction1.getField();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction6 = new BigFraction(74L);
      bigFraction3.doubleValue();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.add(4815);
      bigFraction1.ZERO.equals(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.multiply(bigFraction0);
      BigFraction bigFraction4 = bigFraction3.ZERO.subtract(4815);
      bigFraction4.TWO.doubleValue();
      BigFraction bigFraction5 = bigFraction0.TWO_FIFTHS.add(bigFraction4);
      bigFraction5.TWO_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction6 = bigFraction0.subtract((-1));
      Object object0 = new Object();
      Object object1 = new Object();
      bigFraction3.equals(object1);
      BigFraction bigFraction7 = new BigFraction((long) (-1));
      bigFraction6.divide(bigFraction3);
      bigFraction2.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0, 1.0, 104);
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      bigFraction2.intValue();
      BigFraction bigFraction3 = bigFraction1.subtract((long) 104);
      BigFraction bigFraction4 = bigFraction3.subtract((long) 2);
      BigFraction bigFraction5 = bigFraction2.multiply(2339L);
      BigFraction bigFraction6 = bigFraction5.negate();
      bigFraction4.intValue();
      BigFraction bigFraction7 = bigFraction6.pow(104);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction8 = bigFraction2.add(bigInteger1);
      BigFraction bigFraction9 = bigFraction4.add(bigFraction8);
      bigFraction7.getDenominatorAsLong();
      bigFraction7.doubleValue();
      bigFraction9.divide((long) 2);
      BigFraction bigFraction10 = bigFraction4.multiply((-2805));
      bigFraction5.divide(bigInteger1);
      bigFraction3.add(bigFraction2);
      bigFraction3.multiply(bigInteger0);
      bigFraction10.pow(bigInteger1);
      bigFraction8.abs();
      bigFraction5.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.getNumeratorAsLong();
      bigFraction0.getField();
      BigFraction bigFraction1 = new BigFraction(2L, 2L, 712);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.MINUS_ONE.divide(bigInteger0);
      Object object0 = new Object();
      bigFraction0.equals(bigFraction1);
      BigFraction bigFraction2 = new BigFraction(408L);
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.TWO_THIRDS.toString();
      BigFraction bigFraction1 = bigFraction0.pow((-1758));
      bigFraction1.subtract(bigFraction0);
      BigFraction bigFraction2 = new BigFraction(3048L);
      bigFraction2.getField();
      bigFraction1.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.toString();
      int int0 = (-1823);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(1786.899464356252, (-59.54721645), (-1823));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 1,786.899 to fraction after -1,823 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3971.473039422), 1239);
      bigFraction0.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((double) 1239, 245);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1,239 to fraction (9,223,372,036,854,774,570/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.getNumeratorAsLong();
      bigFraction0.getField();
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      bigFraction0.getField();
      bigFraction1.getNumeratorAsInt();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction1.TWO_FIFTHS.add(4815);
      bigFraction1.ZERO.equals(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.ZERO.subtract(4815);
      int int0 = (-1);
      bigFraction3.TWO.doubleValue();
      BigFraction bigFraction4 = bigFraction0.TWO_FIFTHS.add(bigFraction3);
      bigFraction4.TWO_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction5 = bigFraction0.subtract((-1));
      bigFraction5.FOUR_FIFTHS.doubleValue();
      BigFraction bigFraction6 = bigFraction0.reduce();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction7 = bigFraction6.ONE_HALF.add(bigInteger1);
      bigFraction7.ONE_QUARTER.intValue();
      BigFraction bigFraction8 = bigFraction0.subtract(0L);
      BigFraction bigFraction9 = bigFraction8.subtract((long) 4815);
      BigFraction bigFraction10 = bigFraction9.TWO.multiply(0L);
      bigFraction10.THREE_FIFTHS.negate();
      bigFraction8.ONE_QUARTER.intValue();
      bigFraction7.pow(4815);
      bigFraction3.add(bigInteger1);
      BigFraction bigFraction11 = null;
      try {
        bigFraction11 = new BigFraction((long) (-1), (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(476, 476);
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction1.multiply(0);
      bigFraction0.doubleValue();
      bigFraction0.THREE_QUARTERS.equals(bigFraction2);
      BigFraction bigFraction3 = bigFraction2.subtract(476);
      BigFraction bigFraction4 = BigFraction.THREE_QUARTERS;
      bigFraction2.getDenominatorAsInt();
      BigFraction bigFraction5 = bigFraction3.abs();
      bigFraction5.ONE_THIRD.bigDecimalValue((-684), 1);
      bigFraction0.divide(bigFraction1);
      BigFraction bigFraction6 = bigFraction1.reduce();
      bigFraction3.multiply((long) 0);
      BigFraction bigFraction7 = BigFraction.getReducedFraction(1091, 476);
      BigFraction bigFraction8 = new BigFraction(1.0);
      bigFraction3.compareTo(bigFraction8);
      bigFraction6.multiply(1091);
      BigFraction bigFraction9 = new BigFraction((-1), 476);
      bigFraction9.doubleValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction7.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7619237899780273);
      BigFraction bigFraction1 = bigFraction0.subtract(142689);
      bigFraction0.doubleValue();
      bigFraction0.reduce();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.intValue();
      bigFraction1.subtract((long) 142689);
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      bigFraction2.subtract((long) (-142687));
      BigFraction bigFraction3 = new BigFraction(128L, (long) (-142687));
      BigFraction bigFraction4 = bigFraction3.multiply(0L);
      bigFraction2.negate();
      bigFraction3.intValue();
      // Undeclared exception!
      try { 
        bigFraction4.pow((-142687));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0, 1.0, 104);
      Object object0 = new Object();
      BigFraction bigFraction1 = new BigFraction(1.0);
      BigFraction bigFraction2 = bigFraction1.divide(104);
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      bigFraction3.equals("");
      bigFraction2.getDenominator();
      bigFraction2.percentageValue();
      bigFraction0.pow(764);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(334.295337);
      bigFraction0.TWO_THIRDS.toString();
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction1.ZERO.getNumeratorAsLong();
      bigFraction1.ONE.getDenominatorAsInt();
      bigFraction1.THREE_FIFTHS.floatValue();
      bigFraction0.ONE_THIRD.intValue();
      bigFraction1.reciprocal();
      bigFraction0.toString();
      bigFraction1.ONE_HALF.getField();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.subtract(bigInteger0);
      bigFraction1.divide(bigFraction0);
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      bigFraction2.getDenominator();
      bigFraction1.percentageValue();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = new Object();
      BigFraction bigFraction0 = new BigFraction((-1.1165866833118273E-8));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.getNumeratorAsLong();
      bigFraction0.compareTo(bigFraction0);
      BigFraction bigFraction1 = bigFraction0.multiply(0);
      bigFraction0.doubleValue();
      bigFraction1.equals(bigFraction0);
      bigFraction0.subtract(2176);
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(2176, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(334.295337);
      bigFraction0.TWO_THIRDS.toString();
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction1.ZERO.getNumeratorAsLong();
      bigFraction1.getDenominatorAsInt();
      int int0 = 1;
      BigFraction bigFraction2 = BigFraction.getReducedFraction(1, 2147483645);
      bigFraction2.floatValue();
      // Undeclared exception!
      try { 
        bigFraction2.pow(2147483645);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.add(4815);
      bigFraction2.bigDecimalValue();
      bigFraction1.ZERO.equals(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.multiply(bigFraction0);
      BigFraction bigFraction4 = bigFraction3.ZERO.subtract(4815);
      bigFraction4.TWO.doubleValue();
      BigFraction bigFraction5 = bigFraction0.TWO_FIFTHS.add(bigFraction4);
      bigFraction5.TWO_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction6 = bigFraction0.subtract((-1));
      bigFraction6.FOUR_FIFTHS.doubleValue();
      BigFraction bigFraction7 = bigFraction0.reduce();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction8 = bigFraction7.ONE_HALF.add(bigInteger1);
      bigInteger1.flipBit(4815);
      bigFraction8.ONE_QUARTER.intValue();
      BigFraction bigFraction9 = bigFraction0.subtract(0L);
      BigFraction bigFraction10 = bigFraction9.subtract((long) 4815);
      BigFraction bigFraction11 = bigFraction10.TWO.multiply(0L);
      bigFraction11.THREE_FIFTHS.negate();
      bigFraction9.ONE_QUARTER.intValue();
      BigFraction bigFraction12 = bigFraction8.pow(4815);
      BigFraction bigFraction13 = bigFraction4.add(bigInteger1);
      BigFraction bigFraction14 = bigFraction13.add(bigFraction3);
      bigFraction14.THREE_QUARTERS.getDenominatorAsLong();
      bigFraction12.TWO_THIRDS.doubleValue();
      BigFraction bigFraction15 = bigFraction3.TWO.divide((long) (-1));
      BigFraction bigFraction16 = bigFraction13.multiply(0);
      bigFraction1.divide(bigInteger1);
      BigFraction bigFraction17 = bigFraction4.add(bigFraction16);
      bigFraction17.TWO_QUARTERS.multiply(bigInteger0);
      bigFraction12.pow(bigInteger0);
      bigFraction10.abs();
      bigFraction15.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = new BigFraction(0.02696057799994378);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.multiply((-2174));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.negate();
      bigFraction0.bigDecimalValue();
      bigFraction1.divide((long) (-2174));
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction5 = bigFraction2.multiply(bigInteger1);
      BigFraction bigFraction6 = bigFraction4.divide(bigFraction3);
      BigFraction bigFraction7 = bigFraction4.abs();
      bigFraction5.abs();
      bigFraction3.getDenominatorAsInt();
      bigFraction7.percentageValue();
      BigFraction bigFraction8 = bigFraction7.multiply(bigFraction6);
      bigFraction1.toString();
      bigFraction7.reduce();
      bigFraction8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.flipBit(12);
      bigFraction0.intValue();
      BigFraction bigFraction1 = bigFraction0.subtract(4503599627370495L);
      BigFraction bigFraction2 = BigFraction.ONE_THIRD;
      BigFraction bigFraction3 = bigFraction2.subtract((long) 12);
      BigFraction bigFraction4 = bigFraction3.multiply(4503599627370495L);
      BigFraction bigFraction5 = bigFraction3.negate();
      bigFraction4.intValue();
      BigFraction bigFraction6 = bigFraction2.pow(4815);
      BigFraction bigFraction7 = new BigFraction(bigInteger0, bigInteger1);
      bigFraction7.add(bigInteger0);
      BigFraction bigFraction8 = bigFraction2.add(bigFraction4);
      bigFraction5.getDenominatorAsLong();
      bigFraction4.doubleValue();
      BigFraction bigFraction9 = bigFraction0.divide(9007199254740990L);
      BigFraction bigFraction10 = BigFraction.TWO_QUARTERS;
      bigFraction10.multiply(2239);
      bigFraction0.divide(bigInteger1);
      BigFraction bigFraction11 = bigFraction10.add(bigFraction8);
      BigFraction bigFraction12 = bigFraction11.ONE.multiply((long) 1);
      BigFraction bigFraction13 = bigFraction9.multiply(bigInteger1);
      bigFraction13.pow(bigInteger0);
      bigFraction6.abs();
      bigFraction0.getNumeratorAsLong();
      bigFraction12.getDenominatorAsLong();
      bigFraction1.divide((-3445));
      bigFraction7.multiply((long) (-3445));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 104;
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction0.ONE.compareTo(bigFraction1);
      bigFraction0.ZERO.multiply((-1));
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(344, 2143);
      bigFraction3.ONE.compareTo(bigFraction0);
      BigFraction bigFraction4 = bigFraction0.subtract(bigInteger0);
      bigFraction4.getField();
      BigFraction bigFraction5 = bigFraction0.TWO_QUARTERS.divide(bigInteger0);
      bigFraction5.ZERO.bigDecimalValue();
      bigFraction4.ONE.subtract(0L);
      bigFraction5.THREE_FIFTHS.getField();
      BigFraction bigFraction6 = bigFraction0.negate();
      bigFraction5.ONE_HALF.getDenominatorAsLong();
      bigFraction2.pow((double) 1L);
      bigFraction0.bigDecimalValue();
      bigFraction0.floatValue();
      bigFraction0.getDenominatorAsLong();
      bigFraction4.doubleValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction7 = bigFraction2.subtract(bigInteger1);
      bigFraction7.hashCode();
      BigFraction bigFraction8 = bigFraction6.divide(2143);
      bigFraction8.subtract(bigFraction5);
      BigFraction bigFraction9 = BigFraction.getReducedFraction(1260, 1);
      // Undeclared exception!
      try { 
        bigFraction9.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.ZERO.divide((-1662L));
      BigFraction bigFraction2 = bigFraction1.TWO.reciprocal();
      bigFraction2.TWO_FIFTHS.bigDecimalValue();
      bigFraction1.ZERO.pow(0.0);
      bigFraction2.ONE.multiply(0L);
      bigFraction0.TWO_THIRDS.pow(2.3501806259155273);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1388);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO.multiply(bigInteger0);
      bigFraction0.getField();
      BigFraction bigFraction2 = bigFraction0.pow((-1758));
      bigFraction2.ONE_FIFTH.abs();
      BigFraction.getReducedFraction((-1758), 476);
      bigFraction2.ONE.compareTo(bigFraction0);
      BigFraction bigFraction3 = bigFraction1.multiply(1237);
      bigFraction2.doubleValue();
      BigFraction bigFraction4 = bigFraction0.ONE.subtract(1);
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-1758), (-2490));
      bigFraction0.ZERO.getDenominatorAsInt();
      BigFraction bigFraction6 = bigFraction3.ONE_QUARTER.abs();
      bigFraction6.TWO_QUARTERS.subtract((-1758));
      bigFraction5.divide(bigFraction2);
      BigFraction bigFraction7 = bigFraction3.reduce();
      bigFraction7.ONE_HALF.multiply((long) (-1758));
      BigFraction bigFraction8 = bigFraction1.subtract(bigFraction5);
      bigFraction8.ONE_QUARTER.reduce();
      bigFraction1.subtract(bigFraction5);
      bigFraction1.equals(bigFraction8);
      bigFraction4.equals(bigFraction6);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(334.295337);
      bigFraction0.TWO_THIRDS.toString();
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction1.ZERO.getNumeratorAsLong();
      bigFraction1.ONE.getDenominatorAsInt();
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-1), (-1));
      bigFraction1.THREE_FIFTHS.floatValue();
      BigFraction bigFraction3 = bigFraction2.TWO.pow((-1));
      bigFraction0.ONE_THIRD.intValue();
      BigFraction bigFraction4 = bigFraction1.reciprocal();
      bigFraction2.toString();
      BigFraction bigFraction5 = bigFraction0.divide(bigFraction4);
      bigFraction5.ONE_HALF.getField();
      BigFraction bigFraction6 = bigFraction3.MINUS_ONE.reduce();
      BigFraction bigFraction7 = bigFraction6.multiply((-598));
      bigFraction7.TWO.getNumeratorAsLong();
      // Undeclared exception!
      try { 
        bigFraction6.ONE_HALF.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-83), (-83));
      bigFraction0.ONE_FIFTH.pow((long) (-83));
      bigFraction0.THREE_QUARTERS.intValue();
      BigFraction bigFraction1 = bigFraction0.add((long) (-83));
      bigFraction1.TWO_THIRDS.getField();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(0, 52);
      bigFraction2.ZERO.getNumeratorAsLong();
      bigFraction1.TWO_QUARTERS.toString();
      BigFraction bigFraction3 = bigFraction0.ZERO.subtract(320);
      bigFraction0.THREE_QUARTERS.negate();
      BigFraction bigFraction4 = bigFraction3.abs();
      bigFraction4.ONE.multiply((-408L));
      bigFraction0.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-83));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.add((-2413L));
      bigFraction0.ONE_THIRD.getField();
      bigFraction2.TWO.add(0);
      BigFraction bigFraction3 = bigFraction0.TWO_THIRDS.subtract(bigFraction1);
      bigFraction3.THREE_FIFTHS.floatValue();
      BigFraction bigFraction4 = bigFraction0.negate();
      BigFraction bigFraction5 = BigFraction.ONE;
      bigFraction5.TWO_FIFTHS.floatValue();
      bigFraction4.THREE_FIFTHS.equals(bigFraction5);
      BigFraction bigFraction6 = bigFraction1.divide(2058);
      bigFraction0.ONE_HALF.add((-2182L));
      bigFraction3.pow(1.7976931348623157E308);
      BigFraction bigFraction7 = bigFraction0.abs();
      bigFraction0.add(2058);
      bigFraction7.subtract(bigFraction4);
      bigFraction4.getNumeratorAsLong();
      BigFraction.getReducedFraction(2058, 2216);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)57;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction6.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 52;
      BigFraction bigFraction0 = new BigFraction(1124.154651898742, 3371.5321, 52);
      int int1 = 1399;
      BigFraction bigFraction1 = bigFraction0.add(1399);
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.add((long) 1399);
      // Undeclared exception!
      try { 
        bigFraction2.TWO_QUARTERS.bigDecimalValue((-377), 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      int int0 = 1398;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.divide(1398);
      bigFraction1.ZERO.toString();
      int int1 = 5766;
      BigFraction bigFraction2 = bigFraction0.multiply(5766);
      BigFraction bigFraction3 = bigFraction2.reciprocal();
      bigFraction3.MINUS_ONE.compareTo(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1459), 1398);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction0.getNumerator();
      // Undeclared exception!
      try { 
        bigFraction1.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4, 509);
      bigFraction0.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction0.negate();
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.multiply(4);
      BigFraction bigFraction2 = bigFraction0.pow((long) 509);
      bigFraction2.floatValue();
      BigFraction bigFraction3 = bigFraction1.add((long) 509);
      BigFraction bigFraction4 = bigFraction1.add(7910884519577875640L);
      BigFraction bigFraction5 = bigFraction4.THREE_QUARTERS.divide(bigFraction0);
      bigFraction5.TWO_THIRDS.multiply(bigFraction4);
      BigFraction bigFraction6 = bigFraction1.subtract(bigFraction3);
      bigFraction1.getField();
      bigFraction3.getField();
      bigFraction6.ONE.getNumeratorAsInt();
      bigFraction4.ONE.subtract(bigFraction6);
      BigFraction bigFraction7 = bigFraction0.TWO_THIRDS.multiply(422);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction6.THREE_QUARTERS.subtract(bigInteger0);
      BigFraction bigFraction8 = bigFraction7.ZERO.negate();
      bigFraction8.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction6.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.MINUS_ONE.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.TWO_THIRDS.intValue();
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      bigFraction0.intValue();
      bigFraction0.MINUS_ONE.subtract((-1632));
      bigFraction0.compareTo(bigFraction1);
      bigFraction1.TWO_QUARTERS.longValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.THREE_QUARTERS.multiply(bigInteger0);
      bigFraction1.longValue();
      bigFraction0.bigDecimalValue(0, 0);
      // Undeclared exception!
      try { 
        bigFraction1.THREE_FIFTHS.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      int int0 = 1;
      int int1 = (-4282);
      BigFraction bigFraction1 = new BigFraction(1, (-4282));
      bigFraction0.ONE_QUARTER.hashCode();
      String string0 = "yt9$CJ|$b-@>lv[=W";
      // Undeclared exception!
      try { 
        bigFraction1.ONE_QUARTER.bigDecimalValue(1357, (-4282));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction1.TWO_FIFTHS.add(4815);
      bigFraction1.ZERO.equals(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.ZERO.subtract(4815);
      bigFraction3.TWO.doubleValue();
      BigFraction bigFraction4 = bigFraction0.TWO_FIFTHS.add(bigFraction3);
      bigFraction4.TWO_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction5 = bigFraction0.subtract((-1));
      bigFraction5.FOUR_FIFTHS.doubleValue();
      BigFraction bigFraction6 = bigFraction0.reduce();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction7 = bigFraction6.ONE_HALF.add(bigInteger1);
      bigInteger1.flipBit(4815);
      bigFraction7.ONE_QUARTER.intValue();
      BigFraction bigFraction8 = bigFraction0.subtract(0L);
      BigFraction bigFraction9 = bigFraction8.subtract((long) 4815);
      BigFraction bigFraction10 = bigFraction9.TWO.multiply(0L);
      bigFraction10.THREE_FIFTHS.negate();
      bigFraction8.ONE_QUARTER.intValue();
      BigFraction bigFraction11 = bigFraction7.pow(4815);
      BigFraction bigFraction12 = bigFraction3.add(bigInteger1);
      BigFraction bigFraction13 = bigFraction12.add(bigFraction2);
      bigFraction13.THREE_QUARTERS.getDenominatorAsLong();
      bigFraction11.TWO_THIRDS.doubleValue();
      BigFraction bigFraction14 = bigFraction2.TWO.divide((long) (-1));
      BigFraction bigFraction15 = bigFraction12.multiply(0);
      bigFraction1.divide(bigInteger1);
      BigFraction bigFraction16 = bigFraction3.add(bigFraction15);
      bigFraction16.TWO_QUARTERS.multiply(bigInteger0);
      bigFraction11.pow(bigInteger0);
      bigFraction9.abs();
      bigFraction14.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7619237899780273);
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = bigFraction0.pow(0L);
      bigFraction1.subtract(1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.subtract(bigFraction1);
      bigFraction2.TWO_THIRDS.hashCode();
      bigFraction2.MINUS_ONE.compareTo(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.subtract(2);
      BigFraction bigFraction4 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.multiply(2147483647L);
      bigFraction5.ONE_THIRD.divide(bigInteger0);
      bigFraction5.divide(bigFraction0);
      bigFraction1.getDenominatorAsInt();
      bigFraction0.toString();
      bigFraction3.hashCode();
      BigFraction bigFraction6 = bigFraction2.negate();
      bigFraction6.MINUS_ONE.reduce();
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.add((-1688));
      bigFraction1.divide(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.divide(21);
      BigFraction bigFraction3 = bigFraction2.subtract((long) (-1688));
      bigFraction2.TWO_THIRDS.divide(bigFraction3);
      bigFraction2.getDenominatorAsInt();
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction3.floatValue();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L, (-9223372036854775808L));
      bigFraction0.FOUR_FIFTHS.longValue();
      bigFraction0.longValue();
      bigFraction0.bigDecimalValue();
      bigFraction0.TWO_THIRDS.longValue();
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.reduce();
      bigFraction2.FOUR_FIFTHS.getDenominatorAsInt();
      bigFraction2.bigDecimalValue(0);
      bigFraction1.ONE_HALF.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction0.add(bigFraction1);
      bigFraction1.hashCode();
      BigFraction bigFraction4 = bigFraction3.ZERO.pow(5);
      bigFraction4.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction3.getDenominator();
      bigFraction3.pow((long) 5);
      bigFraction0.longValue();
      bigFraction1.negate();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.divide((long) (byte)94);
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.pow(2716L);
      BigFraction bigFraction3 = bigFraction0.pow(1);
      bigInteger0.getLowestSetBit();
      bigFraction3.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction0.divide(bigInteger0);
      bigFraction4.toString();
      bigFraction3.TWO_FIFTHS.divide(bigFraction2);
      bigFraction1.TWO.subtract(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.divide(bigInteger0);
      bigFraction5.THREE_QUARTERS.equals("1");
      bigFraction1.toString();
      BigFraction bigFraction6 = bigFraction2.multiply(1);
      bigFraction3.reciprocal();
      bigFraction6.longValue();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.add(111L);
      bigFraction1.ONE_HALF.floatValue();
      bigFraction1.toString();
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.add(bigFraction0);
      bigFraction3.ONE_THIRD.add((-1L));
      BigFraction.getReducedFraction(1, 629);
      bigFraction3.ONE_QUARTER.pow(912);
      bigFraction3.THREE_FIFTHS.toString();
      BigInteger bigInteger0 = bigFraction2.getDenominator();
      bigFraction1.pow(912);
      bigFraction0.divide(bigInteger0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      bigFraction1.TWO_QUARTERS.floatValue();
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte)84;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigFraction1.multiply(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      int int0 = (-1133);
      BigFraction bigFraction1 = bigFraction0.ONE.pow((-1133));
      bigFraction1.MINUS_ONE.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-1.0), 0.0, (-382));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1 to fraction (-9,223,372,036,854,775,806/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 1239;
      BigFraction bigFraction0 = new BigFraction((-3971.473039422), 1239);
      double double0 = 80.643109841978;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.abs();
      bigFraction1.THREE_FIFTHS.getNumeratorAsLong();
      int int1 = 1673;
      bigFraction0.ONE.subtract((-2146L));
      // Undeclared exception!
      try { 
        bigFraction1.THREE_FIFTHS.bigDecimalValue(1673);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ZERO.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.multiply(0L);
      bigFraction2.ONE_HALF.getDenominatorAsLong();
      bigFraction0.TWO_QUARTERS.getDenominatorAsInt();
      bigFraction2.FOUR_FIFTHS.percentageValue();
      int int0 = (-1693);
      BigFraction bigFraction3 = bigFraction0.ONE_QUARTER.divide((-1693));
      bigFraction3.MINUS_ONE.pow((-1849L));
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction0.subtract(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction4.ONE_HALF.pow(bigInteger2);
      // Undeclared exception!
      try { 
        bigFraction4.TWO_QUARTERS.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(37, (-2250));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.add(37);
      bigFraction2.TWO.reduce();
      bigFraction0.hashCode();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.floatValue();
      BigFraction bigFraction3 = bigFraction0.add(0L);
      bigFraction3.ONE_FIFTH.pow((-2250));
      bigFraction1.getDenominatorAsLong();
      bigFraction1.divide(248L);
      bigFraction0.ZERO.divide(82);
      bigFraction1.add(0L);
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(37);
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.bigDecimalValue(37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract(0L);
      BigFraction bigFraction2 = BigFraction.TWO;
      BigFractionField bigFractionField0 = bigFraction2.MINUS_ONE.getField();
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction2);
      bigFraction3.ZERO.getField();
      BigFraction bigFraction4 = bigFraction0.add(3017L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)4;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction5 = BigFraction.getReducedFraction((byte)49, 1);
      BigFraction bigFraction6 = new BigFraction((byte)49, 1737.8120347419097, 2972);
      bigFraction6.FOUR_FIFTHS.pow(932);
      bigFraction0.equals(bigFraction6);
      bigFraction4.floatValue();
      bigFraction0.getDenominatorAsInt();
      bigFraction1.pow(bigInteger0);
      bigFraction6.THREE_QUARTERS.pow(1215);
      bigFraction3.equals(bigFractionField0);
      assertEquals((byte) (-1), bigFraction3.byteValue());
      
      BigFraction bigFraction7 = bigFraction2.subtract((long) 2972);
      bigFraction7.TWO_THIRDS.hashCode();
      bigFraction2.toString();
      bigFraction6.getDenominator();
      assertTrue(bigFraction6.equals((Object)bigFraction5));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.bigDecimalValue();
      bigFraction0.longValue();
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = (-338);
      BigFraction bigFraction0 = new BigFraction((-338), (-310));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-419), (-419));
      bigFraction0.THREE_FIFTHS.reciprocal();
      bigFraction0.ONE_THIRD.longValue();
      bigFraction0.TWO.getNumeratorAsInt();
      bigFraction0.toString();
      byte[] byteArray0 = new byte[3];
      BigFraction bigFraction1 = bigFraction0.ONE.multiply(4503599627370496L);
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)16;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.THREE_FIFTHS.divide(bigInteger0);
      byteArray0[2] = (byte)102;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigFraction0.FOUR_FIFTHS.divide(bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction0.MINUS_ONE.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.FOUR_FIFTHS.add(bigInteger0);
      bigFraction0.divide(887L);
      bigFraction0.hashCode();
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.ONE_QUARTER.add(bigInteger0);
      String string0 = bigFraction0.THREE_FIFTHS.toString();
      assertEquals("3 / 5", string0);
      
      bigFraction0.intValue();
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-1304), (-1));
      bigFraction1.TWO_FIFTHS.getNumeratorAsInt();
      double double0 = bigFraction1.pow((double) (byte)0);
      assertEquals(1.0, double0, 0.01);
      assertEquals((byte)24, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction0.pow((-1304));
      assertEquals((byte) (-75), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.THREE_FIFTHS.getNumeratorAsLong();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction1 = bigFraction0.multiply(2147483647L);
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      bigFraction1.TWO_QUARTERS.pow(2);
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.divide((-615));
      assertEquals((byte)0, bigFraction3.byteValue());
      
      bigFraction2.hashCode();
      boolean boolean0 = bigFraction1.equals(bigFraction0);
      assertFalse(boolean0);
      
      bigFraction0.getDenominator();
      double double0 = bigFraction1.percentageValue();
      assertEquals(1.2884901882E11, double0, 0.01);
      
      bigFraction0.pow(764);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(805L);
      bigFraction0.getDenominatorAsInt();
      bigFraction0.bigDecimalValue(1, 1);
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.abs();
      bigFraction0.THREE_QUARTERS.getNumeratorAsLong();
      bigFraction3.ONE_THIRD.multiply((long) 1);
      bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction4 = bigFraction1.add(805);
      bigFraction4.getDenominator();
      int int0 = (-1);
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction((-1.0), (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1 to fraction (-9,223,372,036,854,775,806/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1341L), (-1341L));
      bigFraction0.TWO_FIFTHS.getDenominatorAsInt();
      bigFraction0.MINUS_ONE.longValue();
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction1.THREE_FIFTHS.longValue();
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction0.TWO.subtract(5);
      Object object0 = new Object();
      bigFraction1.FOUR_FIFTHS.equals(object0);
      bigFraction1.floatValue();
      bigFraction2.TWO.compareTo(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.subtract(5);
      BigFraction bigFraction4 = bigFraction3.ZERO.divide((-1341L));
      bigFraction2.divide(bigFraction0);
      BigFraction bigFraction5 = bigFraction2.divide((long) 5);
      BigInteger bigInteger0 = bigFraction4.getNumerator();
      bigFraction5.bigDecimalValue();
      bigFraction5.compareTo(bigFraction1);
      BigFraction bigFraction6 = bigFraction1.divide((-1341L));
      bigFraction3.multiply(bigInteger0);
      bigFraction4.longValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction6.divide(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 1;
      int int1 = (-1);
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1, (-1));
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.multiply((long) 1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.ONE_HALF.divide((long) 1);
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger0);
      bigFraction2.MINUS_ONE.subtract(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }
}
