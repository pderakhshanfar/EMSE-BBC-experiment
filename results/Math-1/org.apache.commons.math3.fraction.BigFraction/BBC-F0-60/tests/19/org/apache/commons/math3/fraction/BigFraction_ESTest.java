/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 13:56:56 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3797.25435);
      int int0 = Integer.MAX_VALUE;
      MockRandom mockRandom0 = new MockRandom(9218868437227405312L);
      BigInteger bigInteger0 = new BigInteger(Integer.MAX_VALUE, mockRandom0);
      // Undeclared exception!
      try { 
        bigFraction0.multiply(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 9007199254739976L);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction1.add((-3104));
      bigFraction1.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert infinite value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.negate();
      BigFraction bigFraction0 = BigFraction.getReducedFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      bigFraction0.subtract((long) Integer.MAX_VALUE);
      bigFraction0.add(bigInteger1);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((double) Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.bigDecimalValue(0, 0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction0.ONE.compareTo(bigFraction1);
      bigFraction0.getField();
      bigFraction1.TWO.multiply(1);
      bigFraction0.MINUS_ONE.equals((Object) null);
      int int0 = 2141648094;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2141648094, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1283.569014348);
      bigFraction0.bigDecimalValue(5, 5);
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction0.ONE_QUARTER.compareTo(bigFraction1);
      bigFraction0.ONE.bigDecimalValue(5);
      bigFraction0.ONE_THIRD.divide(9007199254622464L);
      bigFraction0.ONE_THIRD.pow(15);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.add(bigInteger0);
      bigFraction2.FOUR_FIFTHS.subtract(919);
      int int0 = (-2147483646);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-2147483646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction1.negate();
      bigFraction0.bigDecimalValue(6);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction.getReducedFraction(2123, 647);
      bigFraction0.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsLong();
      bigFraction0.pow(1075);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4398046511103L);
      bigFraction0.MINUS_ONE.subtract(9007199254740990L);
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigInteger bigInteger1 = bigFraction0.getDenominator();
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.pow(672L);
      int int0 = (-1671);
      BigFraction bigFraction2 = bigFraction1.ONE.add((-1671));
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.negate();
      BigFraction bigFraction4 = bigFraction0.add((-1383));
      bigFraction4.THREE_QUARTERS.floatValue();
      bigFraction4.MINUS_ONE.bigDecimalValue();
      bigFraction2.TWO_QUARTERS.add((-1671));
      bigFraction4.THREE_QUARTERS.hashCode();
      BigInteger bigInteger2 = bigFraction4.getNumerator();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction5 = bigFraction4.pow(bigInteger2);
      bigFraction2.TWO.reciprocal();
      bigFraction2.TWO_THIRDS.percentageValue();
      bigFraction5.THREE_QUARTERS.multiply(bigInteger0);
      bigFraction3.divide(bigFraction2);
      BigFraction bigFraction6 = bigFraction1.divide(bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction6.ZERO.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.toString();
      bigFraction0.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 1393;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1393, 1393);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.divide(2L);
      bigFraction1.ONE.pow((-1553.255882356346));
      // Undeclared exception!
      try { 
        bigFraction1.ONE_FIFTH.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-119);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(bigInteger0);
      bigFraction0.toString();
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.divide(bigFraction1);
      bigFraction1.TWO_QUARTERS.add(bigFraction0);
      BigFraction bigFraction3 = bigFraction1.subtract(761);
      bigFraction3.toString();
      BigFraction bigFraction4 = BigFraction.TWO;
      bigFraction3.THREE_FIFTHS.divide(bigFraction4);
      BigFraction.getReducedFraction((byte) (-65), (-1118));
      bigFraction3.ONE_FIFTH.pow(51200L);
      bigFraction1.subtract((long) (byte) (-65));
      bigFraction2.pow((double) (byte) (-119));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction(8.623968972387222E211);
      bigFraction1.TWO_QUARTERS.getNumeratorAsInt();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.divide(bigInteger0);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1704.0269004129414);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      bigFraction1.TWO_THIRDS.equals(bigFraction0);
      bigFraction1.divide(1199L);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.pow((-1020));
      bigFraction1.equals(bigFraction0);
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction2.multiply((-3949L));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1209);
      BigFraction bigFraction1 = bigFraction0.subtract(1209);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger0);
      bigFraction2.ONE_FIFTH.getDenominatorAsInt();
      bigFraction2.ONE_HALF.negate();
      bigFraction2.getNumeratorAsLong();
      bigFraction1.intValue();
      // Undeclared exception!
      try { 
        bigFraction1.pow((-2880));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.add(9007199252643840L);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = BigFraction.getReducedFraction(600, 52);
      BigFraction bigFraction3 = bigFraction2.pow(94L);
      bigFraction2.reciprocal();
      bigFraction3.equals(bigFraction1);
      bigFraction0.abs();
      BigFraction bigFraction4 = new BigFraction(0.03897706759460107);
      bigFraction3.abs();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = bigFraction0.add(524L);
      bigFraction0.TWO_THIRDS.getDenominatorAsInt();
      bigFraction0.ONE_THIRD.abs();
      bigFraction1.ONE_QUARTER.bigDecimalValue();
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction4 = bigFraction0.subtract(bigFraction3);
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-2136), (-1));
      bigFraction4.ONE_FIFTH.getDenominatorAsInt();
      bigFraction5.TWO_THIRDS.multiply(504);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.abs();
      bigFraction5.divide(bigInteger0);
      bigFraction2.reduce();
      BigFraction bigFraction6 = bigFraction2.divide((-1903));
      bigFraction5.toString();
      bigFraction3.ONE_FIFTH.add((long) 5);
      // Undeclared exception!
      try { 
        bigFraction6.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-619.499512664748));
      bigFraction0.ONE_HALF.getField();
      BigFraction bigFraction1 = bigFraction0.pow((-3002));
      BigFraction bigFraction2 = bigFraction1.negate();
      bigFraction2.floatValue();
      bigFraction1.abs();
      bigFraction2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(262.98145, 1209);
      BigFraction bigFraction1 = bigFraction0.subtract(1209);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction0.getNumeratorAsLong();
      bigFraction1.intValue();
      BigFraction bigFraction3 = bigFraction2.add(256L);
      BigFraction bigFraction4 = BigFraction.ONE_THIRD;
      BigFraction bigFraction5 = bigFraction4.pow(227L);
      BigFraction bigFraction6 = bigFraction5.reciprocal();
      Object object0 = new Object();
      bigFraction1.equals(object0);
      BigFraction bigFraction7 = bigFraction2.abs();
      bigFraction5.subtract(3650);
      bigFraction1.hashCode();
      bigFraction3.divide(bigFraction5);
      bigFraction5.multiply(bigInteger0);
      BigFraction bigFraction8 = BigFraction.TWO_THIRDS;
      bigFraction8.getDenominatorAsLong();
      BigFraction bigFraction9 = BigFraction.TWO;
      bigFraction6.toString();
      bigFraction3.getDenominator();
      bigFraction9.subtract(bigFraction6);
      BigFraction bigFraction10 = new BigFraction(4400L, 1326L);
      bigFraction7.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      bigFraction0.getField();
      // Undeclared exception!
      try { 
        bigFraction0.pow(2147483136);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = new BigFraction(0.0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction1.multiply(bigFraction2);
      int int0 = 0;
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction((-1275), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(262.98145, 1209);
      BigFraction bigFraction1 = bigFraction0.subtract(1209);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction0.getNumeratorAsLong();
      bigFraction1.intValue();
      bigFraction1.TWO_QUARTERS.pow(2355);
      bigFraction1.add(155948L);
      BigFraction bigFraction2 = BigFraction.ONE_THIRD;
      bigFraction2.FOUR_FIFTHS.pow(3889L);
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction(1.7976931348623157E308, 839);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(262.98145, 1209);
      BigFraction bigFraction1 = bigFraction0.subtract(1209);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction0.getNumeratorAsLong();
      bigFraction1.intValue();
      int int0 = 2355;
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      bigFraction1.add(155948L);
      BigFraction bigFraction3 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction1.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(615, 615);
      BigFraction bigFraction3 = bigFraction2.multiply(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.TWO_QUARTERS.subtract((long) 615);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction5 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction6 = bigFraction0.subtract(615);
      bigFraction1.compareTo(bigFraction3);
      bigFraction6.getField();
      bigFraction3.pow(bigInteger0);
      bigFraction0.floatValue();
      bigFraction4.abs();
      bigFraction1.pow((-3585L));
      // Undeclared exception!
      try { 
        bigFraction5.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = new BigFraction(2.0);
      bigFraction1.ONE_THIRD.subtract(bigFraction0);
      bigFraction0.THREE_QUARTERS.multiply(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      int int0 = (-18);
      bigFraction2.FOUR_FIFTHS.getDenominatorAsInt();
      bigFraction2.TWO_QUARTERS.divide((-18));
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-619.499512664748));
      BigFraction bigFraction1 = new BigFraction((-619.499512664748));
      BigFraction bigFraction2 = new BigFraction((-1.0995299963140049E-7));
      bigFraction0.subtract(bigFraction2);
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction4 = bigFraction3.multiply(bigFraction0);
      bigFraction3.add(bigFraction1);
      bigFraction4.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction4.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), 23);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.divide((long) (-1));
      BigFraction bigFraction2 = new BigFraction((double) 23);
      BigFraction bigFraction3 = bigFraction1.subtract(bigFraction0);
      bigFraction2.multiply(bigFraction1);
      bigFraction2.add(bigFraction3);
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction4 = bigFraction2.divide(5);
      bigFraction4.getDenominatorAsLong();
      bigFraction4.pow((-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.pow(bigInteger0);
      bigFraction2.divide((-1634L));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(455.78186, (-1));
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = new BigFraction(1.7043828964233398);
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      BigFraction bigFraction3 = BigFraction.ONE_QUARTER;
      bigFraction1.getDenominatorAsInt();
      bigFraction2.divide((-1));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.subtract(bigInteger0);
      bigFraction2.longValue();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-619.499512664748));
      bigFraction0.getField();
      bigFraction0.toString();
      BigFraction bigFraction1 = new BigFraction((-1261.86488655), 1249.519, 184);
      BigFraction bigFraction2 = bigFraction1.pow(2255);
      bigFraction2.MINUS_ONE.add(1047);
      bigFraction2.negate();
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      bigFraction1.floatValue();
      BigFraction bigFraction4 = bigFraction1.abs();
      bigFraction4.doubleValue();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(455.78186, (-1));
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = new BigFraction(1.7043828964233398);
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      BigFraction bigFraction3 = BigFraction.ONE_QUARTER;
      bigFraction1.add(bigFraction2);
      BigFraction bigFraction4 = BigFraction.THREE_QUARTERS;
      bigFraction4.getDenominatorAsInt();
      BigFraction bigFraction5 = bigFraction2.divide((-1));
      bigFraction1.getDenominatorAsLong();
      bigFraction3.pow((-1));
      BigFraction bigFraction6 = new BigFraction(1.7043828964233398, 1.7043828964233398, 0);
      BigFraction bigFraction7 = bigFraction6.multiply(bigFraction3);
      bigFraction6.divide((-1));
      bigFraction4.subtract(bigFraction7);
      bigFraction5.pow(1138.534);
      BigFraction bigFraction8 = BigFraction.TWO_QUARTERS;
      bigFraction2.subtract(bigFraction8);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = new BigFraction(0.0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction1.multiply(bigFraction2);
      bigFraction2.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction1.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(262.98145, 1209);
      BigFraction bigFraction1 = bigFraction0.subtract(1209);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction3 = new BigFraction((-2147483645), 1209);
      bigFraction3.ONE_THIRD.doubleValue();
      BigFraction bigFraction4 = bigFraction3.reduce();
      bigFraction2.getNumerator();
      bigFraction4.multiply(2143297520);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.intValue();
      bigFraction0.pow(2);
      bigFraction0.add((-1L));
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = new BigFraction(1075);
      bigFraction2.pow(246L);
      BigFraction bigFraction3 = bigFraction0.reciprocal();
      BigFraction bigFraction4 = BigFraction.MINUS_ONE;
      bigFraction4.equals(bigFraction3);
      bigFraction2.abs();
      BigFraction bigFraction5 = BigFraction.ONE;
      BigFraction bigFraction6 = bigFraction5.subtract(1075);
      bigFraction6.hashCode();
      // Undeclared exception!
      try { 
        bigFraction4.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.negate();
      int int0 = 1349;
      BigFraction bigFraction2 = new BigFraction(0.04953393340110779, 1349);
      BigFraction bigFraction3 = bigFraction0.subtract(1349);
      bigFraction3.ONE_FIFTH.multiply(bigFraction2);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.subtract(bigInteger0);
      bigFraction0.getNumeratorAsLong();
      bigFraction1.intValue();
      bigFraction0.pow(0);
      bigFraction0.add((-930L));
      BigFraction bigFraction4 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.pow((-930L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-619.499512664748));
      bigFraction0.ONE_HALF.getField();
      bigFraction0.toString();
      BigFraction bigFraction1 = bigFraction0.pow((-3002));
      BigFraction bigFraction2 = bigFraction1.negate();
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      bigFraction1.floatValue();
      bigFraction2.abs();
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-619.499512664748));
      bigFraction0.ONE_HALF.getField();
      BigFraction bigFraction1 = bigFraction0.pow((-3002));
      bigFraction1.negate();
      bigFraction1.floatValue();
      bigFraction0.abs();
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(455.78186, (-1));
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      BigFraction bigFraction2 = BigFraction.ONE_QUARTER;
      bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
      bigFraction3.getDenominatorAsInt();
      bigFraction1.divide((-1));
      bigFraction0.getDenominatorAsLong();
      bigFraction2.pow((-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.pow(bigInteger0);
      BigFraction bigFraction4 = BigFraction.ONE_THIRD;
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-619.499512664748));
      bigFraction0.ONE_HALF.getField();
      bigFraction0.toString();
      BigFraction bigFraction1 = bigFraction0.pow((-3002));
      bigFraction1.negate();
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((-619.499512664748), (-619.499512664748), (-3002));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -619.5 to fraction after -3,002 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(455.78186, (-1));
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = new BigFraction(1.7043828964233398);
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      BigFraction bigFraction3 = BigFraction.ONE_QUARTER;
      bigFraction1.add(bigFraction2);
      BigFraction bigFraction4 = BigFraction.THREE_QUARTERS;
      bigFraction4.getDenominatorAsInt();
      bigFraction2.divide((-1));
      bigFraction1.getDenominatorAsLong();
      bigFraction3.pow((-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.pow(bigInteger0);
      bigFraction4.divide(34359738368L);
      bigFraction2.getDenominator();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.getNumeratorAsLong();
      bigFraction0.intValue();
      BigFraction bigFraction1 = bigFraction0.pow(2355);
      BigFraction bigFraction2 = bigFraction1.add((long) 2355);
      BigFraction bigFraction3 = BigFraction.ONE_THIRD;
      bigFraction0.pow((long) 2);
      bigFraction2.reciprocal();
      bigFraction1.equals(bigFraction2);
      bigFraction2.abs();
      BigFraction bigFraction4 = bigFraction2.subtract(2355);
      BigFraction bigFraction5 = BigFraction.TWO_THIRDS;
      bigFraction5.hashCode();
      bigFraction4.divide(bigFraction3);
      bigFraction0.getNumerator();
      bigFraction0.multiply(4);
      bigFraction2.longValue();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), 23);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.divide((long) (-1));
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      BigFraction bigFraction3 = bigFraction2.THREE_FIFTHS.add(bigFraction0);
      BigFraction bigFraction4 = bigFraction2.THREE_FIFTHS.subtract((long) 23);
      BigFraction bigFraction5 = bigFraction0.pow((long) 23);
      bigFraction0.getDenominatorAsLong();
      bigFraction1.subtract(bigFraction4);
      bigFraction3.reduce();
      BigFraction bigFraction6 = BigFraction.THREE_FIFTHS;
      bigFraction6.divide((-177));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction7 = bigFraction3.subtract(bigInteger0);
      BigFraction bigFraction8 = bigFraction3.reciprocal();
      bigFraction3.toString();
      BigFraction bigFraction9 = bigFraction1.divide(bigFraction5);
      BigFraction bigFraction10 = new BigFraction(bigInteger0);
      bigFraction10.pow((-177));
      bigFraction8.pow((-1));
      BigFraction bigFraction11 = bigFraction4.multiply(bigFraction8);
      BigFraction bigFraction12 = bigFraction9.divide((long) (-177));
      bigFraction3.getNumeratorAsLong();
      bigFraction7.divide(4066L);
      bigFraction10.bigDecimalValue();
      bigFraction7.hashCode();
      bigFraction12.getDenominatorAsLong();
      bigFraction0.add(bigFraction9);
      bigFraction1.getField();
      BigInteger bigInteger1 = bigFraction11.getDenominator();
      bigFraction5.equals(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      int int0 = 29;
      int int1 = (-408);
      int int2 = 885;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(29, (-408), 885);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 29 to fraction (9,223,372,036,854,775,780/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(262.98145, 1209);
      BigFraction bigFraction1 = bigFraction0.subtract(1209);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction0.getNumeratorAsLong();
      bigFraction1.intValue();
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.pow(2355);
      BigFraction bigFraction3 = bigFraction1.add(155948L);
      BigFraction bigFraction4 = BigFraction.ONE_THIRD;
      bigFraction4.FOUR_FIFTHS.pow(3889L);
      bigFraction4.THREE_FIFTHS.reciprocal();
      bigFraction3.ONE_QUARTER.equals(bigFraction4);
      BigFraction bigFraction5 = bigFraction0.abs();
      bigFraction5.TWO_THIRDS.subtract(1209);
      bigFraction3.THREE_QUARTERS.hashCode();
      bigFraction5.THREE_FIFTHS.divide(bigFraction3);
      bigFraction2.getNumerator();
      bigFraction2.multiply(2355);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ONE_HALF.toString();
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.pow(bigInteger0);
      bigFraction0.reduce();
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.multiply(bigInteger0);
      bigFraction3.getDenominatorAsLong();
      BigFraction bigFraction4 = BigFraction.TWO_FIFTHS;
      bigFraction0.multiply(bigFraction4);
      bigFraction2.compareTo(bigFraction1);
      bigFraction3.bigDecimalValue();
      bigFraction3.pow((-2643));
      bigFraction2.subtract((-2643));
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-2643), 2389);
      bigFraction5.getNumerator();
      bigFraction3.longValue();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.add(3350);
      BigFraction bigFraction2 = bigFraction1.pow(0L);
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction4 = bigFraction2.reduce();
      BigFraction bigFraction5 = bigFraction4.divide((-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction6 = bigFraction1.subtract(bigInteger0);
      bigFraction1.reciprocal();
      bigFraction2.toString();
      BigFraction bigFraction7 = bigFraction6.divide(bigFraction0);
      BigFraction bigFraction8 = bigFraction6.pow(3350);
      bigFraction0.pow(3);
      bigFraction3.multiply(bigFraction8);
      bigFraction0.divide(2147483647L);
      bigFraction5.getNumeratorAsLong();
      bigFraction7.divide(4L);
      bigFraction7.bigDecimalValue();
      bigFraction2.hashCode();
      bigFraction4.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction4.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-722.429), 0.0, 1125);
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = new BigFraction(1125, 1125);
      bigFraction1.add(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.pow(bigInteger0);
      int int0 = 52;
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction((-3834.0), 52);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -3,834 to fraction (3,835/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-619.499512664748));
      bigFraction0.ONE_HALF.getField();
      bigFraction0.toString();
      BigFraction bigFraction1 = bigFraction0.pow((-3002));
      bigFraction1.negate();
      BigFraction bigFraction2 = BigFraction.TWO_THIRDS;
      bigFraction2.floatValue();
      bigFraction0.abs();
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = (-1);
      int int1 = 1;
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), 1);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.divide((long) (-1));
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      bigFraction2.THREE_FIFTHS.add(bigFraction0);
      bigFraction2.THREE_FIFTHS.subtract((long) 1);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = new BigFraction(2.0);
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.subtract(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.THREE_QUARTERS.multiply(bigFraction1);
      BigFraction bigFraction4 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction5 = BigFraction.getReducedFraction(0, 0);
      bigFraction2.compareTo(bigFraction3);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction6 = bigFraction2.multiply(bigInteger0);
      bigFraction5.multiply(bigInteger0);
      int int0 = 100;
      bigFraction1.divide(100);
      bigFraction4.multiply(100);
      // Undeclared exception!
      try { 
        bigFraction6.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(823L, 823L);
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ONE_QUARTER.add(bigInteger0);
      bigFraction0.TWO.hashCode();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-121);
      bigFraction0.ONE.intValue();
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)0;
      BigFraction bigFraction1 = bigFraction0.divide(6282611584435168L);
      bigFraction0.toString();
      BigInteger bigInteger1 = bigFraction1.getDenominator();
      bigFraction0.subtract(bigFraction1);
      bigFraction0.subtract(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = 0.0;
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.negate();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction2.getField();
      BigFraction bigFraction3 = bigFraction0.reduce();
      BigFraction bigFraction4 = bigFraction3.THREE_QUARTERS.pow(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.pow(5013);
      bigFraction5.FOUR_FIFTHS.pow((-1031.12314306));
      BigFraction bigFraction6 = new BigFraction(Double.NaN, 5013, 5013);
      bigFraction4.ONE_QUARTER.add((-2074));
      BigFraction bigFraction7 = bigFraction3.ONE_QUARTER.reduce();
      bigFraction7.THREE_QUARTERS.getDenominatorAsInt();
      bigFraction0.divide(bigFraction2);
      bigFraction1.getNumerator();
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(656L, 656L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction0.THREE_FIFTHS.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.divide((-1165L));
      BigFraction bigFraction3 = bigFraction0.ONE.multiply(3639);
      bigFraction3.MINUS_ONE.pow(3639);
      bigFraction0.getDenominatorAsInt();
      bigFraction2.multiply(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1139, 1369);
      BigFraction bigFraction1 = new BigFraction((-1), 2361);
      bigFraction0.THREE_QUARTERS.divide(bigFraction1);
      bigFraction0.multiply((-1877L));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
      bigFraction0.ZERO.percentageValue();
      BigFraction bigFraction1 = bigFraction0.pow(0L);
      bigFraction1.TWO_FIFTHS.bigDecimalValue();
      bigFraction0.divide(1350);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.TWO.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.TWO.getField();
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.ONE_HALF.getNumeratorAsLong();
      bigFraction1.TWO_FIFTHS.floatValue();
      bigFraction1.longValue();
      int int0 = 265;
      BigFraction bigFraction2 = bigFraction0.pow(265);
      bigFraction2.ONE_QUARTER.multiply(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction2.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction1.TWO_THIRDS.add((-2644281811660520851L));
      bigFraction1.ONE_THIRD.divide((-561L));
      bigFraction0.THREE_FIFTHS.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.add(bigFraction1);
      Object object0 = new Object();
      bigFraction2.TWO_QUARTERS.equals(object0);
      bigFraction2.ONE_HALF.intValue();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1278, (-1591));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.percentageValue();
      bigFraction0.TWO_FIFTHS.divide((-1159L));
      bigFraction0.intValue();
      BigFraction bigFraction1 = bigFraction0.divide(1860);
      BigFraction bigFraction2 = bigFraction0.add(1572L);
      bigFraction2.TWO_THIRDS.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction0.pow(1350);
      BigFraction bigFraction4 = bigFraction3.divide(bigFraction1);
      bigFraction3.subtract(0L);
      bigFraction3.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue(1860);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      int int0 = 29;
      int int1 = (-408);
      Object object0 = new Object();
      bigFraction0.TWO_FIFTHS.equals(object0);
      int int2 = 885;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(1.0, (-408), 885);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(823L, 823L);
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply((long) 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.ONE_QUARTER.add(bigInteger0);
      bigFraction1.TWO.hashCode();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-121);
      bigFraction0.ONE.intValue();
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(1, byteArray0);
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.multiply(bigInteger1);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)1;
      BigInteger bigInteger2 = new BigInteger(byteArray1);
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger2);
      bigFraction3.ONE_THIRD.intValue();
      BigFraction bigFraction4 = bigFraction3.TWO.reduce();
      bigFraction4.TWO_THIRDS.reciprocal();
      bigFraction3.TWO_FIFTHS.subtract(bigFraction2);
      bigFraction0.negate();
      bigFraction1.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(471);
      BigInteger bigInteger0 = null;
      try { 
        bigFraction0.TWO.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.add(5);
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.negate();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.TWO_THIRDS.subtract(bigInteger0);
      bigFraction1.MINUS_ONE.negate();
      bigFraction3.ONE_QUARTER.add((-2320L));
      bigFraction3.THREE_QUARTERS.divide(bigFraction2);
      bigFraction3.ONE.subtract((long) 5);
      BigFraction bigFraction4 = bigFraction2.ONE_QUARTER.reduce();
      bigFraction4.ONE_QUARTER.reduce();
      bigFraction0.ONE_QUARTER.getDenominatorAsInt();
      bigFraction2.ONE_FIFTH.percentageValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction4.ONE.subtract(bigInteger1);
      bigFraction0.getDenominator();
      bigFraction2.compareTo(bigFraction0);
      bigFraction1.abs();
      bigFraction2.add(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.pow(772);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction2.multiply(bigInteger0);
      BigFraction bigFraction5 = bigFraction1.pow(0L);
      bigFraction5.hashCode();
      bigFraction4.getNumeratorAsInt();
      BigFraction bigFraction6 = bigFraction4.reduce();
      bigFraction3.getDenominatorAsLong();
      bigFraction5.intValue();
      bigFraction5.compareTo(bigFraction6);
      bigFraction0.bigDecimalValue();
      bigFraction5.pow(0L);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)124;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ONE.reduce();
      bigFraction0.TWO_THIRDS.intValue();
      BigFraction bigFraction1 = bigFraction0.add((int) (byte)0);
      bigFraction0.MINUS_ONE.pow((-3512299194304650054L));
      bigFraction1.ONE_HALF.longValue();
      bigFraction1.ONE_QUARTER.add(bigFraction0);
      long long0 = (-381L);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((double) (byte)1, (int) (byte) (-5));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = (-1);
      int int1 = 23;
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), 23);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.divide((long) (-1));
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      bigFraction2.THREE_FIFTHS.add(bigFraction0);
      bigFraction2.THREE_FIFTHS.subtract((long) 23);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-619.499512664748));
      bigFraction0.ONE_HALF.getField();
      bigFraction0.toString();
      BigFraction bigFraction1 = bigFraction0.pow((-3002));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.MINUS_ONE.multiply(bigInteger0);
      bigFraction1.ONE_QUARTER.abs();
      bigFraction1.negate();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      long long0 = (-1L);
      BigFraction bigFraction1 = new BigFraction((-1L));
      bigFraction0.TWO_THIRDS.add(bigFraction1);
      bigFraction1.ONE_THIRD.getDenominatorAsLong();
      bigFraction1.ZERO.equals("`EW,\"Cc~!B-2?r6;}");
      // Undeclared exception!
      try { 
        bigFraction1.MINUS_ONE.bigDecimalValue(1808);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.TWO_QUARTERS.getDenominatorAsInt();
      bigFraction1.THREE_QUARTERS.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction2.ONE_THIRD.add((long) 2);
      bigFraction2.ZERO.getField();
      bigFraction2.ONE.getDenominatorAsInt();
      bigFraction1.multiply(1138);
      bigFraction1.reduce();
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.ONE_QUARTER.getNumeratorAsLong();
      bigFraction0.pow(1834.2872);
      bigFraction0.negate();
      bigFraction0.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(bigInteger0, bigInteger1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.setBit((byte)0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction1.negate();
      bigFraction1.floatValue();
      bigFraction1.abs();
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-1);
      byte byte0 = (byte)117;
      byteArray0[2] = (byte)117;
      byte byte1 = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.ONE_THIRD.add(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.subtract((-1694));
      bigFraction2.FOUR_FIFTHS.bigDecimalValue(3);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1596));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1104, (-4012));
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction0.THREE_FIFTHS.compareTo(bigFraction1);
      bigFraction0.add(1104);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.THREE_FIFTHS.subtract(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.multiply((long) Integer.MAX_VALUE);
      bigFraction0.ONE_THIRD.percentageValue();
      bigFraction2.ONE_FIFTH.getField();
      // Undeclared exception!
      try { 
        bigFraction2.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(262.98145, 1209);
      BigFraction bigFraction1 = bigFraction0.subtract(1209);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction0.getNumeratorAsLong();
      bigFraction1.intValue();
      bigFraction1.TWO_QUARTERS.pow(2355);
      BigFraction bigFraction3 = bigFraction1.add(969L);
      BigFraction bigFraction4 = BigFraction.ONE_THIRD;
      bigFraction4.FOUR_FIFTHS.pow(3889L);
      bigFraction4.THREE_FIFTHS.reciprocal();
      bigFraction3.ONE_QUARTER.equals(bigFraction4);
      BigFraction bigFraction5 = bigFraction0.abs();
      bigFraction5.TWO_THIRDS.subtract(1209);
      bigFraction3.THREE_QUARTERS.hashCode();
      bigFraction5.THREE_FIFTHS.divide(bigFraction3);
      BigFraction bigFraction6 = bigFraction3.multiply(bigInteger0);
      bigFraction6.TWO.getDenominatorAsLong();
      bigFraction0.multiply(bigFraction2);
      bigFraction3.compareTo(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2375L, 4294967295L);
      bigFraction0.ZERO.hashCode();
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.add((-1705));
      BigFraction bigFraction2 = bigFraction0.pow(0L);
      bigFraction1.TWO_QUARTERS.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction2.ONE.subtract(bigFraction1);
      bigFraction3.TWO_THIRDS.reduce();
      bigFraction2.ONE_THIRD.divide((-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.TWO_FIFTHS.subtract(bigInteger0);
      assertEquals((byte) (-85), bigFraction3.byteValue());
      
      BigFraction bigFraction4 = bigFraction2.ONE_FIFTH.reciprocal();
      String string0 = bigFraction2.toString();
      assertEquals("1", string0);
      
      BigFraction bigFraction5 = bigFraction0.divide(bigFraction1);
      bigFraction2.THREE_FIFTHS.pow(1770);
      BigFraction bigFraction6 = bigFraction2.pow(1);
      BigFraction bigFraction7 = bigFraction6.MINUS_ONE.multiply(bigFraction5);
      BigFraction bigFraction8 = bigFraction7.THREE_FIFTHS.divide((long) 1770);
      bigFraction2.getNumeratorAsLong();
      BigFraction bigFraction9 = bigFraction4.divide(2L);
      bigFraction9.ONE_HALF.bigDecimalValue();
      bigFraction5.hashCode();
      bigFraction9.getDenominatorAsLong();
      assertEquals((byte)2, bigFraction9.byteValue());
      
      BigFraction bigFraction10 = bigFraction8.add(bigFraction5);
      bigFraction6.getField();
      BigInteger bigInteger1 = bigFraction10.getDenominator();
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertEquals((byte)13, bigInteger1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertTrue(bigFraction6.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.ONE_HALF.percentageValue();
      bigFraction0.ONE_FIFTH.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.multiply(1L);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction2 = bigFraction0.ZERO.divide(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.ONE_HALF.reciprocal();
      bigFraction0.ZERO.getDenominatorAsInt();
      BigFraction bigFraction4 = bigFraction2.THREE_FIFTHS.multiply(bigFraction1);
      bigFraction3.ZERO.bigDecimalValue();
      BigFraction bigFraction5 = bigFraction0.pow(0L);
      BigFraction bigFraction6 = bigFraction3.multiply(bigInteger0);
      Object object0 = new Object();
      bigFraction6.TWO_QUARTERS.equals(object0);
      bigFraction4.ZERO.getDenominatorAsLong();
      bigFraction3.getDenominatorAsInt();
      BigFraction bigFraction7 = bigFraction2.multiply(bigFraction5);
      bigFraction4.bigDecimalValue(1, 1);
      bigFraction7.subtract(1);
      bigFraction1.subtract(bigInteger0);
      bigFraction7.getDenominatorAsLong();
      bigFraction6.equals(bigFraction3);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)107;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.gcd(bigInteger1);
      bigFraction2.add(1402);
      BigInteger bigInteger2 = null;
      // Undeclared exception!
      try { 
        bigFraction4.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(788, (-2671));
      bigFraction0.ONE_HALF.reduce();
      BigFraction bigFraction1 = bigFraction0.pow(788);
      boolean boolean0 = bigFraction1.equals(bigFraction0);
      assertFalse(boolean0);
      
      BigFraction bigFraction2 = bigFraction0.divide(168);
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = new BigFraction(2.0);
      bigFraction1.ONE_THIRD.subtract(bigFraction0);
      bigFraction0.THREE_QUARTERS.multiply(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      int int0 = 0;
      bigFraction2.FOUR_FIFTHS.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction2.TWO_QUARTERS.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ZERO.bigDecimalValue();
      double double0 = bigFraction0.ONE_QUARTER.pow((-1151.6132281817));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      bigFraction0.ONE.intValue();
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.pow(2013);
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.add(1295);
      assertEquals((byte)15, bigFraction3.byteValue());
      
      BigFraction bigFraction4 = bigFraction0.divide(bigFraction1);
      bigFraction0.bigDecimalValue();
      assertTrue(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.pow(bigInteger0);
      assertEquals((byte)0, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction0.reduce();
      bigFraction2.getNumerator();
      BigFraction bigFraction3 = bigFraction2.multiply((-1431));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short) (-2862), bigFraction3.shortValue());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 855);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      long long0 = 86L;
      BigFraction bigFraction1 = bigFraction0.pow(86L);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction0.ONE_THIRD.multiply(405);
      // Undeclared exception!
      try { 
        bigFraction2.TWO_THIRDS.bigDecimalValue((-1154));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      byte[] byteArray0 = new byte[2];
      BigFraction bigFraction1 = bigFraction0.add((-1));
      bigFraction1.FOUR_FIFTHS.subtract(bigFraction0);
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-25);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.divide(457L);
      bigFraction3.ONE_THIRD.getNumeratorAsInt();
      bigFraction3.ONE_FIFTH.getField();
      bigFraction3.ONE_HALF.getDenominatorAsInt();
      bigFraction3.TWO_FIFTHS.floatValue();
      BigFraction bigFraction4 = bigFraction2.multiply((long) (byte) (-25));
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigFraction4.TWO_FIFTHS.add(bigInteger1);
      bigFraction4.TWO.floatValue();
      bigFraction2.floatValue();
      bigFraction2.ONE.add((-1));
      bigFraction4.bigDecimalValue();
      BigFraction.getReducedFraction(1984, 571);
      BigFraction bigFraction5 = bigFraction2.add(2);
      bigFraction5.TWO_THIRDS.multiply(113236205062349959L);
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(1039, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(0L);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.TWO_THIRDS.add(bigInteger0);
      bigFraction2.multiply(0L);
      bigFraction1.abs();
      int int0 = (-1294);
      BigFraction bigFraction3 = BigFraction.getReducedFraction((-1294), (-1294));
      bigFraction3.ONE_FIFTH.intValue();
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.divide(1490L);
      bigFraction4.ONE.bigDecimalValue();
      bigFraction1.TWO.negate();
      BigFraction bigFraction5 = bigFraction0.subtract(1167);
      // Undeclared exception!
      try { 
        bigFraction5.FOUR_FIFTHS.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = bigFraction0.TWO.add(0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.ONE_THIRD.add(bigInteger0);
      bigFraction1.ZERO.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction0.add(0L);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction0.subtract(bigInteger1);
      BigFraction bigFraction3 = bigFraction2.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction3.divide(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.TWO.add(bigInteger0);
      bigFraction1.ONE.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.add((-1536));
      assertEquals((short) (-1535), bigFraction2.shortValue());
      
      bigFraction0.getDenominatorAsLong();
      bigFraction0.getDenominatorAsInt();
      bigFraction0.longValue();
      BigFraction bigFraction3 = bigFraction0.abs();
      BigFraction bigFraction4 = BigFraction.TWO_THIRDS;
      boolean boolean0 = bigFraction1.equals(bigFraction4);
      assertSame(bigFraction0, bigFraction3);
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(472L, (-3964L));
      int int0 = Integer.MAX_VALUE;
      BigFraction.getReducedFraction(863, (-142));
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      double double0 = bigFraction0.doubleValue();
      assertEquals(0.2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = 0.0;
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.ONE_FIFTH.negate();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.divide(bigInteger0);
      bigFraction1.getField();
      BigFraction bigFraction2 = bigFraction0.reduce();
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.pow(5013);
      bigFraction4.FOUR_FIFTHS.pow((-1031.12314306));
      bigFraction4.ONE_QUARTER.subtract(bigFraction3);
      bigFraction3.ONE_QUARTER.add((-2074));
      bigFraction2.ONE_QUARTER.reduce();
      bigFraction0.divide(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }
}
