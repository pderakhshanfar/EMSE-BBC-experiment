/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 18:49:37 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.pow((double) 9218868437227405312L);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.ONE_HALF.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.TWO_FIFTHS.pow(0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.TWO_QUARTERS.hashCode();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.add(0);
      bigFraction0.add(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1L, 2257.297, (-5147));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-39));
      bigFraction0.TWO_QUARTERS.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-3514), (-3514));
      bigFraction0.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-2093796555), 2147483631);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-26);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.THREE_FIFTHS.subtract((long) 1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.MINUS_ONE.subtract((long) 0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.ONE_THIRD.subtract(1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      bigFraction0.subtract(21);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.reduce();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add((long) 185);
      bigFraction1.reduce();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.ONE.reciprocal();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-39));
      bigFraction0.MINUS_ONE.reciprocal();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-39));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3351));
      bigFraction0.pow((long) 1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1);
      bigFraction0.pow(1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.pow(1351);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-855L), (-855L));
      BigFraction bigFraction1 = bigFraction0.subtract(13735200555008L);
      bigFraction1.pow((double) (-855L));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-39));
      BigFraction bigFraction1 = bigFraction0.TWO.pow((long) (-39));
      bigFraction1.pow((double) (-39.0F));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-39));
      bigFraction0.pow((double) (-39));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.subtract(3460L);
      bigFraction1.percentageValue();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.negate();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      bigFraction0.negate();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.divide(bigFraction0);
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1590.8406367074695);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.multiply(1102);
      bigFraction1.ONE_HALF.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.TWO.subtract(bigInteger0);
      bigFraction1.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1));
      bigFraction0.multiply((long) (-1));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.multiply((long) Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.multiply(185);
      bigFraction1.reduce();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1034, (-372));
      bigFraction0.multiply((-372));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.longValue();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.subtract(9218868437227405312L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction1.subtract(bigInteger0);
      bigFraction2.longValue();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.add(1102);
      bigFraction1.intValue();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.intValue();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.ZERO.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.MINUS_ONE.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.ONE_QUARTER.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-39));
      bigFraction0.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3514));
      BigFraction bigFraction1 = bigFraction0.pow((long) (-3514));
      bigFraction1.getNumerator();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ZERO.abs();
      bigFraction1.getNumerator();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.pow(4882);
      bigFraction1.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_HALF.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(562.647836);
      BigFraction bigFraction1 = bigFraction0.pow((-1948L));
      bigFraction1.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(829, Integer.MAX_VALUE);
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1034, (-372));
      bigFraction0.THREE_QUARTERS.doubleValue();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.multiply(0L);
      bigFraction1.divide(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(37);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.divide(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1034, (-372));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.subtract(3460L);
      bigFraction1.divide((-1108L));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-855L), (-855L));
      bigFraction0.divide((-1L));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.4818955063819885);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)7;
      byteArray0[5] = (byte) (-8);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      bigFraction1.divide((int) (byte)75);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1);
      bigFraction0.divide(1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.compareTo(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.TWO_QUARTERS.compareTo(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.bigDecimalValue(0, 0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-449), 2010);
      bigFraction0.bigDecimalValue(0, 0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.bigDecimalValue(1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-39));
      BigFraction bigFraction1 = bigFraction0.TWO.pow((long) (-39));
      bigFraction1.bigDecimalValue(2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.TWO_QUARTERS.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3186.6));
      bigFraction0.MINUS_ONE.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction((-5034868814120038111L));
      bigFraction1.add(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction1.ONE_QUARTER.add(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.MINUS_ONE.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.THREE_QUARTERS.add(0L);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1034, (-372));
      bigFraction0.add((long) (-372));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.add(1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      bigFraction1.add(1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3553.0482123158);
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_QUARTERS.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2536.5212150318);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.pow((-292L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-39));
      // Undeclared exception!
      try { 
        bigFraction0.pow(2147483607);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((-882), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-855L), (-855L));
      // Undeclared exception!
      try { 
        bigFraction0.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.bigDecimalValue(0, 506);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2146559999, 5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.multiply(694);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      try { 
        bigFraction0.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-2147482839), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.TWO.subtract(bigInteger0);
      bigFraction1.bigDecimalValue(3);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE_HALF.multiply(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-5147), (-5147));
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-5147), (-5147));
      bigFraction0.equals(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.abs();
      bigFraction0.equals(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(135L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ZERO.toString();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-5147), (-5147));
      bigFraction0.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.TWO_QUARTERS.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction0.MINUS_ONE.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-449), 2010);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-449), 2010);
      bigFraction0.pow((long) 0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-2728));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      bigFraction0.ONE_QUARTER.multiply(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.multiply(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3514));
      BigFraction bigFraction1 = bigFraction0.pow((long) (-3514));
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3514));
      BigFraction bigFraction1 = bigFraction0.pow((long) (-3514));
      BigFraction bigFraction2 = BigFraction.ONE_THIRD;
      bigFraction2.equals(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-449), 2010);
      bigFraction0.ONE_QUARTER.equals("");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.equals(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.add(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-855L), (-855L));
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.MINUS_ONE.abs();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigFraction.getReducedFraction(0, 0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3677.3728856199), 1393);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1340.421585, 1.1920928910669204E-8, 146);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.900000000000091, 0.900000000000091, (-3779));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.9 to fraction after -3,779 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1736.9, (-411.0), 1075);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1,736.9 to fraction (1,909,368,822,677,183/1,099,296,921,341)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(2.9621181706527444E172, 0.42158500000005006, 473);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 29,621,181,706,527,444,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1243.0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.4818955063819885);
      bigFraction0.ONE_HALF.getNumeratorAsLong();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.divide(1268L);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.0, (-1350));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(562.647836);
      bigFraction0.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.1368683772161603E-13);
      BigFraction bigFraction1 = bigFraction0.multiply(9214364837600034816L);
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      bigFraction2.abs();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1590.8406367074695);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1450);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-449), 2010);
      bigFraction0.TWO_THIRDS.bigDecimalValue((-449), 0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.multiply((-1367));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-5147), (-5147));
      bigFraction0.longValue();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-855L), (-855L));
      bigFraction0.negate();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1590.8406367074695);
      bigFraction0.subtract(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(562.647836);
      bigFraction0.MINUS_ONE.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.ONE_FIFTH.percentageValue();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, 1590.8406367074695, (-2147483646));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1590.8406367074695);
      bigFraction0.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.add((long) 4);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-449), 2010);
      bigFraction0.ZERO.compareTo(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.divide(829);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.getField();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3514));
      BigFraction bigFraction1 = bigFraction0.pow((long) (-3514));
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      double double0 = bigFraction2.doubleValue();
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)70, bigFraction0.byteValue());
      assertEquals((-3514.0), double0, 0.01);
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertEquals((short) (-3514), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      int int0 = bigFraction0.THREE_QUARTERS.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1590.8406367074695);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertEquals((short)1590, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }
}
