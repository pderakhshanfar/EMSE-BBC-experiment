/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 16:55:21 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-624L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 830;
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-757), 830);
      BigFraction bigFraction1 = bigFraction0.pow(908);
      BigFraction bigFraction2 = new BigFraction((double) (-757));
      bigFraction1.doubleValue();
      bigFraction1.reduce();
      int int1 = 1252;
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction(4.9676467850127455E-37, (-1.0), 1252);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.reciprocal();
      bigFraction0.TWO_FIFTHS.getDenominatorAsLong();
      int int0 = 2136582715;
      int int1 = 1;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2136582715, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE.pow(1.7976931348623157E308);
      BigFraction bigFraction1 = bigFraction0.pow(16L);
      bigFraction1.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.divide(4503599627370495L);
      bigFraction0.toString();
      bigFraction0.ONE_HALF.percentageValue();
      BigFraction bigFraction2 = bigFraction0.multiply(43000103);
      BigFraction bigFraction3 = bigFraction2.ONE.add(1075);
      bigFraction3.TWO_THIRDS.multiply(1075);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.TWO_THIRDS.subtract(bigInteger0);
      bigFraction0.bigDecimalValue(1, 1);
      bigFraction1.ONE_HALF.add(bigFraction0);
      BigFraction bigFraction4 = bigFraction2.abs();
      bigFraction1.doubleValue();
      bigFraction4.ONE.add(1075);
      bigFraction4.getField();
      bigFraction4.abs();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(38600704L);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction2.MINUS_ONE.multiply(bigFraction0);
      bigFraction1.TWO_FIFTHS.doubleValue();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byte byte0 = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)105;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction1.THREE_QUARTERS.pow(bigInteger0);
      int int0 = 4;
      bigFraction3.MINUS_ONE.bigDecimalValue(4);
      BigFraction bigFraction4 = bigFraction0.multiply(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction4.ONE_QUARTER.bigDecimalValue(2026);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-897.0));
      bigFraction0.divide(324L);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.pow((-189L));
      BigFraction bigFraction2 = new BigFraction((-2858.7814217210816));
      bigFraction1.abs();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2819, (-43));
      bigFraction0.percentageValue();
      BigInteger bigInteger0 = BigInteger.valueOf((-735L));
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.floatValue();
      bigFraction0.percentageValue();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.divide((-2585L));
      // Undeclared exception!
      try { 
        bigFraction1.pow((-2585L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.pow(0);
      bigFraction1.floatValue();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1372, 150);
      bigFraction0.percentageValue();
      BigInteger bigInteger0 = BigInteger.valueOf(6939L);
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.floatValue();
      bigFraction0.pow(6939L);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      int int0 = (-1);
      bigFraction0.pow((double) (-1));
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4);
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(1);
      BigFraction bigFraction2 = new BigFraction((-2791.305227144), 2145457720);
      bigFraction1.percentageValue();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)119;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1212));
      bigFraction0.THREE_FIFTHS.getDenominatorAsInt();
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-1212), 2147483636);
      bigFraction1.subtract(421);
      bigFraction0.reciprocal();
      BigFraction bigFraction2 = bigFraction1.subtract((-4270));
      bigFraction2.getDenominator();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(1);
      bigFraction1.equals(bigFraction0);
      bigFraction0.floatValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.subtract(bigInteger0);
      bigFraction0.bigDecimalValue(1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ONE_FIFTH.bigDecimalValue(0);
      bigFraction0.getNumerator();
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.6011195182800293);
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction.getReducedFraction(1017, (-3512));
      bigFraction1.floatValue();
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(1);
      bigFraction1.TWO_FIFTHS.subtract(bigFraction0);
      bigFraction1.equals(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-668));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-572), (-572));
      BigFraction bigFraction1 = new BigFraction((-1.5448896980490041));
      bigFraction1.floatValue();
      BigFraction bigFraction2 = new BigFraction((double) (-572));
      BigFraction bigFraction3 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction((-1.5448896980490041), (-572), (-572));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -1.545 to fraction after -572 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2250.366));
      bigFraction0.TWO.divide(1500L);
      BigFraction bigFraction1 = bigFraction0.divide((-2147483635L));
      bigFraction0.ONE_QUARTER.equals(bigFraction1);
      BigInteger bigInteger0 = null;
      bigFraction1.ONE_HALF.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction1.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = new BigFraction((-1.0));
      bigFraction1.floatValue();
      BigFraction bigFraction2 = bigFraction1.abs();
      bigFraction2.pow((-3017));
      BigFraction.getReducedFraction(100, (-3017));
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, 1);
      bigFraction0.reduce();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.MINUS_ONE.pow((double) 1);
      BigFraction bigFraction1 = bigFraction0.divide(2);
      bigFraction1.subtract(1508L);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = (-1212);
      BigFraction bigFraction0 = new BigFraction((-1212));
      bigFraction0.THREE_FIFTHS.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.MINUS_ONE.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.floatValue();
      bigFraction0.ZERO.abs();
      bigFraction0.pow(100);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction1.divide(bigInteger1);
      bigFraction1.divide((-713));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.floatValue();
      BigFraction bigFraction1 = bigFraction0.ZERO.abs();
      BigFraction bigFraction2 = bigFraction0.pow(100);
      bigFraction2.getNumeratorAsInt();
      BigFraction bigFraction3 = BigFraction.ONE_QUARTER;
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction4 = new BigFraction((-3468.335509079414), 0);
      bigFraction4.getNumerator();
      bigFraction0.multiply(1L);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      int int0 = 1;
      bigFraction0.getDenominatorAsLong();
      bigFraction0.getNumeratorAsLong();
      int int1 = 2484;
      BigFraction bigFraction1 = new BigFraction(1, 2484);
      bigFraction0.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 5685;
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      int int1 = (-1022);
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(5685, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-293L), (-293L));
      bigFraction0.getDenominatorAsLong();
      int int0 = 1;
      bigFraction0.ONE_HALF.getNumeratorAsLong();
      BigFraction bigFraction1 = new BigFraction(1, 1);
      bigFraction1.FOUR_FIFTHS.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.negate();
      bigFraction3.ONE_FIFTH.divide(363840L);
      BigFraction bigFraction4 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction5 = bigFraction4.multiply(bigFraction2);
      // Undeclared exception!
      try { 
        bigFraction5.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.toString();
      bigFraction0.intValue();
      BigFraction bigFraction1 = bigFraction0.multiply(0);
      bigFraction0.negate();
      bigFraction0.equals(bigFraction0);
      bigFraction1.subtract(967);
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-293L), (-293L));
      bigFraction0.getDenominatorAsLong();
      bigFraction0.ONE_HALF.getNumeratorAsLong();
      BigFraction bigFraction1 = new BigFraction(1, 1);
      bigFraction1.FOUR_FIFTHS.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.negate();
      bigFraction2.divide(1);
      bigFraction3.reciprocal();
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction(1.7976931348623157E308, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-293L), (-293L));
      bigFraction0.getDenominatorAsLong();
      bigFraction0.ONE_HALF.getNumeratorAsLong();
      BigFraction bigFraction1 = new BigFraction(1, 1);
      bigFraction1.FOUR_FIFTHS.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.negate();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ONE_HALF.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.divide(1);
      BigFraction bigFraction5 = bigFraction4.multiply(bigFraction2);
      BigFraction bigFraction6 = bigFraction5.ONE_THIRD.divide(1);
      bigFraction4.getDenominator();
      bigFraction3.getNumerator();
      BigFraction bigFraction7 = bigFraction6.divide(2147483647L);
      bigFraction7.add(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction.getReducedFraction((-1257), 421);
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction1.getNumerator();
      bigFraction1.FOUR_FIFTHS.negate();
      BigFraction bigFraction2 = bigFraction1.subtract(463);
      bigFraction2.reciprocal();
      BigFraction bigFraction3 = new BigFraction(12);
      bigFraction3.reciprocal();
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction((double) (-1257), 1178);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1,257 to fraction (-9,223,372,036,854,774,550/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = new BigFraction(1.5873015877332364E-4);
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      MockRandom mockRandom0 = new MockRandom((-1022));
      BigInteger bigInteger0 = BigInteger.probablePrime(421, mockRandom0);
      bigFraction2.subtract(bigInteger0);
      bigFraction1.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction1.divide((long) 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 5685);
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction1.ONE_FIFTH.subtract((-1477));
      bigFraction0.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.divide(bigInteger0);
      bigFraction2.divide(5685);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.floatValue();
      BigFraction bigFraction1 = bigFraction0.pow(100);
      BigFraction bigFraction2 = new BigFraction(0.0);
      bigFraction0.equals(bigFraction2);
      bigFraction2.getNumeratorAsLong();
      bigFraction0.doubleValue();
      BigFraction bigFraction3 = bigFraction0.subtract((-1));
      bigFraction2.ZERO.add(4503599627370495L);
      bigFraction3.reciprocal();
      BigFraction bigFraction4 = new BigFraction(7.692307692650502E-4, (-1));
      bigFraction1.getDenominatorAsLong();
      bigFraction2.getNumerator();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.floatValue();
      BigFraction bigFraction1 = bigFraction0.multiply((-2993));
      BigFraction bigFraction2 = bigFraction0.negate();
      bigFraction0.bigDecimalValue((-4312), 0);
      bigFraction0.equals(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.subtract(100);
      bigFraction1.negate();
      BigFraction bigFraction4 = bigFraction3.divide((-4312));
      BigFraction bigFraction5 = bigFraction1.multiply(bigFraction2);
      BigFraction bigFraction6 = BigFraction.ONE;
      BigFraction bigFraction7 = BigFraction.ONE_HALF;
      bigFraction6.TWO_THIRDS.divide(bigFraction7);
      bigFraction2.divide((-369));
      bigFraction4.add(bigFraction5);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      bigFraction1.TWO_THIRDS.add(bigFraction0);
      bigFraction1.negate();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1733.73), Integer.MAX_VALUE);
      BigFraction bigFraction1 = bigFraction0.TWO.abs();
      bigFraction1.ONE_FIFTH.hashCode();
      bigFraction1.TWO_FIFTHS.longValue();
      bigFraction1.ONE_FIFTH.add(1075);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction0.getNumeratorAsLong();
      bigFraction0.doubleValue();
      bigFraction1.reduce();
      BigFraction bigFraction2 = BigFraction.THREE_FIFTHS;
      bigFraction2.ONE.bigDecimalValue();
      bigFraction2.getNumeratorAsLong();
      BigInteger bigInteger2 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = new BigFraction(1.5873015877332364E-4);
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      BigFraction bigFraction3 = BigFraction.getReducedFraction(0, 421);
      bigFraction2.getNumerator();
      bigFraction0.subtract((-1022));
      bigFraction0.reciprocal();
      BigFraction bigFraction4 = new BigFraction(1.5873015877332364E-4, (-1022));
      bigFraction4.getDenominatorAsLong();
      bigFraction3.getNumerator();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(1);
      bigFraction1.ONE_HALF.equals((Object) null);
      bigFraction0.TWO_FIFTHS.getNumeratorAsLong();
      bigFraction0.doubleValue();
      BigFraction bigFraction2 = bigFraction0.reduce();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction2.TWO.pow(bigInteger0);
      bigFraction0.getNumeratorAsLong();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction1.divide(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.floatValue();
      BigFraction bigFraction1 = bigFraction0.pow(100);
      BigFraction bigFraction2 = new BigFraction(0.0);
      bigFraction0.equals(bigFraction2);
      bigFraction2.getNumeratorAsLong();
      bigFraction0.doubleValue();
      BigFraction bigFraction3 = bigFraction0.reduce();
      bigFraction3.ONE.subtract(bigFraction0);
      bigFraction2.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = (-572);
      BigFraction bigFraction0 = new BigFraction((-572), (-572));
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction2.ONE_THIRD.toString();
      bigFraction1.THREE_FIFTHS.intValue();
      BigFraction bigFraction3 = bigFraction1.ONE.multiply((-2993));
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.negate();
      bigFraction1.ZERO.bigDecimalValue((-572), 0);
      bigFraction1.equals("}_`hab{");
      bigFraction2.divide(bigFraction4);
      bigFraction1.negate();
      // Undeclared exception!
      try { 
        bigFraction2.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1733.73), Integer.MAX_VALUE);
      BigFraction bigFraction1 = bigFraction0.TWO.abs();
      bigFraction1.ONE_FIFTH.hashCode();
      bigFraction1.TWO_FIFTHS.longValue();
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.add(1075);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction1.TWO.reduce();
      bigFraction3.MINUS_ONE.negate();
      bigInteger0.gcd(bigInteger1);
      Object object0 = new Object();
      bigFraction2.equals(object0);
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-1835), 181);
      BigFraction bigFraction5 = bigFraction4.subtract(3885);
      bigFraction5.negate();
      bigFraction4.divide(2147483646);
      bigFraction1.multiply(bigFraction5);
      BigFraction bigFraction6 = BigFraction.ONE;
      bigFraction0.divide(1075);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(1);
      bigFraction1.ONE_HALF.equals((Object) null);
      BigFraction bigFraction2 = bigFraction0.subtract(1);
      BigFraction bigFraction3 = bigFraction1.multiply(13753511936L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = new BigFraction(bigInteger0);
      BigFraction bigFraction5 = bigFraction2.subtract(bigFraction4);
      bigFraction3.longValue();
      bigFraction4.hashCode();
      bigFraction1.bigDecimalValue();
      bigFraction2.getDenominator();
      bigFraction5.longValue();
      bigFraction0.divide(1436);
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue((-42));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1212));
      bigFraction0.THREE_FIFTHS.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.abs();
      bigFraction1.intValue();
      BigFraction bigFraction2 = bigFraction0.multiply(Integer.MAX_VALUE);
      BigFraction bigFraction3 = bigFraction2.negate();
      bigFraction2.bigDecimalValue(2165, 6);
      bigFraction3.equals(bigFraction1);
      BigFraction bigFraction4 = bigFraction2.subtract(3412);
      bigFraction2.negate();
      BigFraction bigFraction5 = new BigFraction(9218868437227405312L);
      BigFraction bigFraction6 = bigFraction5.divide(6);
      BigFraction bigFraction7 = bigFraction4.multiply(bigFraction6);
      BigFraction bigFraction8 = BigFraction.ONE;
      bigFraction6.THREE_FIFTHS.divide((long) 2165);
      bigFraction7.divide(127906550);
      bigFraction2.divide((-2267));
      Random.setNextRandom((-137));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.6011195182800293);
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction.getReducedFraction(1209, (-1022));
      BigFraction bigFraction2 = new BigFraction(100L, 107449312L);
      // Undeclared exception!
      try { 
        bigFraction1.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-572), (-572));
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction2.ONE_THIRD.toString();
      bigFraction1.THREE_FIFTHS.intValue();
      bigFraction2.percentageValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.equals(bigFraction0);
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      bigFraction3.bigDecimalValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.remainder(bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction1.divide((long) 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.floatValue();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction1 = new BigFraction(1, 1);
      bigFraction1.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.negate();
      BigFraction bigFraction4 = bigFraction3.divide(1);
      bigFraction2.multiply(bigFraction3);
      BigFraction bigFraction5 = BigFraction.ONE_FIFTH;
      bigFraction5.ONE.bigDecimalValue(1, 1);
      bigFraction5.divide(1);
      BigInteger bigInteger0 = bigFraction4.getDenominator();
      bigFraction1.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.THREE_FIFTHS.hashCode();
      int int0 = 2147483488;
      BigFraction bigFraction1 = bigFraction0.divide(2147483488);
      int int1 = (-1);
      bigFraction0.THREE_QUARTERS.percentageValue();
      bigFraction1.TWO_FIFTHS.bigDecimalValue();
      bigFraction0.ZERO.abs();
      bigFraction1.TWO.multiply(2147483488);
      bigFraction1.THREE_FIFTHS.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1), 2147483488);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(113236205062349959L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.divide(bigInteger0);
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction4 = bigFraction0.ONE_THIRD.add(bigFraction3);
      bigFraction4.FOUR_FIFTHS.pow(1.88679244956802E-5);
      BigFraction bigFraction5 = bigFraction0.THREE_QUARTERS.subtract(bigInteger0);
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction6 = bigFraction0.divide((long) 1);
      bigFraction6.ONE_HALF.getNumeratorAsLong();
      BigFraction bigFraction7 = bigFraction6.ZERO.subtract(bigFraction5);
      bigFraction7.TWO_THIRDS.reciprocal();
      BigFraction bigFraction8 = bigFraction0.divide(bigInteger0);
      bigFraction8.MINUS_ONE.multiply(113236205062349959L);
      bigFraction8.subtract(bigFraction2);
      bigFraction1.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.multiply(0L);
      BigFraction.getReducedFraction((-2568), 1019);
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction0.add((-9223372036854775808L));
      bigFraction1.getField();
      bigFraction0.pow(746L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.add(bigInteger0);
      BigFraction bigFraction3 = new BigFraction((int) (byte) (-1), 2);
      bigFraction3.doubleValue();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction0.subtract(bigFraction1);
      bigFraction0.toString();
      bigFraction0.intValue();
      bigFraction0.multiply(0);
      bigFraction0.negate();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-2993), (-2993));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.6011195182800293);
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = BigFraction.getReducedFraction(1209, (-1022));
      bigFraction2.getNumerator();
      bigFraction2.subtract((-1022));
      BigFraction bigFraction3 = bigFraction1.reciprocal();
      bigFraction3.getDenominatorAsLong();
      bigFraction1.getNumerator();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), (-1));
      BigFraction bigFraction1 = bigFraction0.multiply((-1));
      BigFraction bigFraction2 = bigFraction0.abs();
      BigFraction bigFraction3 = bigFraction2.negate();
      BigFraction bigFraction4 = bigFraction0.divide((-1));
      double double0 = bigFraction4.ONE_FIFTH.doubleValue();
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertEquals(0.2, double0, 0.01);
      
      bigFraction3.TWO_FIFTHS.subtract(943);
      BigFraction bigFraction5 = bigFraction1.TWO_FIFTHS.subtract((long) (-1));
      BigFraction bigFraction6 = bigFraction5.FOUR_FIFTHS.pow(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction6.THREE_QUARTERS.add(bigInteger0);
      BigFraction bigFraction7 = bigFraction0.add(1741L);
      double double1 = bigFraction5.percentageValue();
      assertEquals(140.0, double1, 0.01);
      
      BigFraction bigFraction8 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction9 = bigFraction1.TWO.reduce();
      bigFraction9.FOUR_FIFTHS.multiply((-1));
      BigFraction bigFraction10 = bigFraction0.multiply((long) (-1));
      Object object0 = new Object();
      bigFraction10.ONE_THIRD.equals(object0);
      BigFraction bigFraction11 = bigFraction8.add((-1));
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction0.multiply(bigInteger1);
      BigFraction bigFraction12 = bigFraction7.subtract((-2162));
      assertEquals((short)3904, bigFraction12.shortValue());
      
      bigFraction10.getDenominatorAsInt();
      bigFraction5.ONE_QUARTER.multiply(bigInteger0);
      int int0 = bigFraction3.getDenominatorAsInt();
      assertEquals(1, int0);
      
      bigFraction1.divide(1237);
      BigInteger bigInteger2 = bigFraction6.getDenominator();
      assertSame(bigInteger2, bigInteger1);
      
      bigFraction1.multiply((long) 1);
      bigFraction0.reduce();
      double double2 = bigFraction11.pow(2642.847);
      assertTrue(bigFraction1.equals((Object)bigFraction11));
      assertTrue(bigFraction1.equals((Object)bigFraction4));
      assertEquals(Double.NaN, double2, 0.01);
      
      bigFraction10.pow((long) 1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.6011195182800293);
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction0.THREE_FIFTHS.subtract(bigFraction1);
      bigFraction0.ONE_FIFTH.getField();
      bigFraction0.hashCode();
      bigFraction0.TWO_FIFTHS.subtract((-1));
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction2 = BigFraction.TWO;
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction0.ONE_THIRD.subtract((long) 729);
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.add((-1));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction4.ONE_QUARTER.multiply(bigInteger0);
      try { 
        bigFraction1.ZERO.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.floatValue();
      bigFraction0.ONE.pow(0.0);
      bigFraction0.ONE_QUARTER.pow(2489.1);
      bigFraction0.ONE_THIRD.hashCode();
      BigFraction bigFraction1 = bigFraction0.subtract(41);
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.multiply((long) 2921);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.ONE.abs();
      bigFraction4.FOUR_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction5 = bigFraction1.subtract(bigInteger0);
      bigFraction3.multiply(41);
      bigFraction2.abs();
      bigFraction0.equals("");
      BigFraction bigFraction6 = bigFraction2.pow(bigInteger0);
      bigFraction2.doubleValue();
      BigFraction bigFraction7 = BigFraction.ONE_HALF;
      bigFraction7.getNumeratorAsInt();
      bigFraction6.add(41);
      BigFraction bigFraction8 = bigFraction4.add(5L);
      bigFraction8.bigDecimalValue();
      BigFraction bigFraction9 = bigFraction5.subtract(bigInteger0);
      bigFraction9.reciprocal();
      bigFraction7.toString();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 37;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(37, 37);
      int int1 = (-1);
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.divide(bigFraction0);
      bigFraction0.TWO.multiply((long) (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.multiply(bigInteger0);
      bigFraction2.THREE_FIFTHS.getField();
      bigFraction0.TWO_FIFTHS.add((-1248L));
      bigFraction1.MINUS_ONE.getField();
      bigFraction0.TWO_THIRDS.divide(37);
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.floatValue();
      bigFraction0.ONE.pow(0.0);
      bigFraction0.toString();
      BigFraction bigFraction1 = bigFraction0.multiply(0);
      BigFraction bigFraction2 = new BigFraction((-2993));
      bigFraction2.negate();
      bigFraction0.subtract((-2993));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction1.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-572), (-572));
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction2.ONE_THIRD.toString();
      bigFraction1.THREE_FIFTHS.intValue();
      BigFraction bigFraction3 = bigFraction1.ONE.multiply((-2993));
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.negate();
      bigFraction1.ZERO.bigDecimalValue((-572), 0);
      bigFraction1.equals("}_`hab{");
      BigFraction bigFraction5 = bigFraction2.subtract(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction5.subtract(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ONE;
      BigFraction bigFraction6 = bigFraction2.add(bigInteger2);
      BigFraction bigFraction7 = bigFraction3.add((-572));
      bigFraction7.hashCode();
      BigFraction.getReducedFraction(0, 1);
      bigFraction6.multiply(1000L);
      bigFraction4.pow((-5201L));
      bigFraction7.pow((double) (-5201L));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(1);
      bigFraction1.ONE_HALF.equals((Object) null);
      bigFraction0.getNumeratorAsLong();
      bigFraction0.doubleValue();
      BigFraction bigFraction2 = BigFraction.ONE;
      BigFraction bigFraction3 = bigFraction2.reduce();
      bigFraction3.ONE_THIRD.reduce();
      BigFraction.getReducedFraction(58, 513);
      bigFraction2.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = new BigFraction(1.8487854656676722E-177, 1L, 229);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction4.subtract(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-293L), (-293L));
      bigFraction0.getDenominatorAsLong();
      bigFraction0.ONE_HALF.getNumeratorAsLong();
      BigFraction bigFraction1 = new BigFraction(1, 1);
      bigFraction1.FOUR_FIFTHS.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction2.negate();
      BigFraction bigFraction3 = bigFraction2.divide(1);
      BigFraction bigFraction4 = bigFraction3.multiply(bigFraction2);
      bigFraction4.ONE_THIRD.divide(1);
      BigInteger bigInteger0 = bigFraction3.getDenominator();
      bigFraction3.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(488, 488);
      bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.subtract(1);
      // Undeclared exception!
      try { 
        bigFraction1.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
      bigFraction0.MINUS_ONE.divide(1476L);
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction2.TWO_FIFTHS.negate();
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.negate();
      BigFraction bigFraction4 = bigFraction3.FOUR_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction5 = bigFraction1.FOUR_FIFTHS.multiply(bigFraction2);
      BigFraction bigFraction6 = bigFraction0.ONE_THIRD.multiply(bigFraction1);
      BigFraction bigFraction7 = bigFraction5.ONE_HALF.divide(bigInteger0);
      bigFraction7.floatValue();
      BigFraction bigFraction8 = bigFraction0.divide((-1));
      BigFraction bigFraction9 = BigFraction.getReducedFraction((-1), (-1));
      bigFraction6.ZERO.getNumeratorAsLong();
      bigFraction8.reduce();
      bigFraction5.ONE_HALF.longValue();
      BigFraction bigFraction10 = bigFraction0.abs();
      bigFraction6.getDenominatorAsInt();
      bigFraction0.intValue();
      bigFraction9.ONE_QUARTER.equals(bigFraction10);
      BigFraction bigFraction11 = bigFraction6.reciprocal();
      bigFraction11.ONE_HALF.hashCode();
      bigFraction11.compareTo(bigFraction0);
      bigFraction10.add(0L);
      BigFraction bigFraction12 = bigFraction2.multiply(bigFraction5);
      BigFraction bigFraction13 = bigFraction9.add(3);
      bigFraction13.FOUR_FIFTHS.percentageValue();
      bigFraction12.MINUS_ONE.multiply(3);
      bigFraction8.percentageValue();
      bigFraction6.add(0L);
      bigFraction12.toString();
      bigFraction12.toString();
      bigFraction0.add(bigInteger1);
      bigFraction4.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(335.283, 0.0, 2114);
      bigFraction0.TWO.intValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      bigFraction1.ONE_QUARTER.subtract(1288);
      BigFraction bigFraction2 = bigFraction1.ZERO.multiply(37);
      BigFraction bigFraction3 = bigFraction1.multiply((-1));
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.multiply(4038);
      BigFraction bigFraction5 = bigFraction0.MINUS_ONE.add(bigFraction2);
      BigFraction bigFraction6 = bigFraction3.TWO_THIRDS.add(580L);
      BigFraction bigFraction7 = bigFraction3.MINUS_ONE.subtract(4038);
      bigFraction7.ONE_THIRD.compareTo(bigFraction4);
      bigFraction7.TWO_FIFTHS.hashCode();
      BigFraction bigFraction8 = bigFraction1.multiply(bigInteger0);
      bigFraction8.THREE_FIFTHS.getField();
      bigFraction5.THREE_QUARTERS.negate();
      bigFraction8.subtract(629);
      bigFraction8.compareTo(bigFraction1);
      BigFraction bigFraction9 = bigFraction2.divide(bigFraction5);
      bigFraction9.ONE.percentageValue();
      bigFraction1.pow((-4.518315366841937E55));
      bigFraction3.hashCode();
      bigFraction6.divide((long) 629);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2235L, 2235L);
      bigFraction0.MINUS_ONE.longValue();
      int int0 = (-946);
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.bigDecimalValue((-946));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      BigFraction bigFraction0 = new BigFraction((-1733.73), Integer.MAX_VALUE);
      BigFraction bigFraction1 = bigFraction0.TWO.abs();
      bigFraction1.ONE_FIFTH.hashCode();
      bigFraction1.TWO_FIFTHS.longValue();
      int int1 = 1075;
      bigFraction1.ONE_FIFTH.add(1075);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.TWO.reduce();
      bigFraction2.MINUS_ONE.negate();
      bigInteger0.gcd(bigInteger1);
      bigFraction0.FOUR_FIFTHS.multiply(bigInteger0);
      bigFraction1.ONE_HALF.pow(1.0);
      bigFraction0.hashCode();
      // Undeclared exception!
      try { 
        bigFraction0.pow(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(1);
      bigFraction1.ONE_HALF.equals((Object) null);
      bigFraction0.TWO_FIFTHS.getNumeratorAsLong();
      bigFraction0.doubleValue();
      BigFraction bigFraction2 = bigFraction0.reduce();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1, 1);
      bigFraction3.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction2.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      double double0 = bigFraction0.percentageValue();
      assertEquals(20.0, double0, 0.01);
      
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = BigFraction.ZERO;
      BigFraction bigFraction3 = bigFraction1.multiply(bigFraction2);
      bigFraction3.toString();
      BigFraction bigFraction4 = bigFraction0.reduce();
      long long0 = bigFraction4.getNumeratorAsLong();
      assertEquals(1L, long0);
      
      BigFraction bigFraction5 = bigFraction4.subtract(1L);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction5.TWO_FIFTHS.hashCode();
      BigFraction bigFraction6 = bigFraction2.subtract(bigInteger0);
      BigFraction bigFraction7 = bigFraction5.add(bigInteger0);
      BigFraction bigFraction8 = bigFraction5.divide((-2340L));
      bigFraction8.TWO_THIRDS.getNumeratorAsLong();
      bigFraction6.subtract(bigInteger0);
      bigFraction0.longValue();
      bigFraction8.longValue();
      bigFraction1.hashCode();
      BigFraction bigFraction9 = bigFraction3.pow(bigInteger0);
      bigFraction9.THREE_FIFTHS.bigDecimalValue();
      bigFraction9.TWO_THIRDS.intValue();
      assertSame(bigFraction3, bigFraction2);
      
      long long1 = bigFraction8.longValue();
      assertEquals(0L, long1);
      
      double double1 = bigFraction7.pow((double) 0L);
      assertEquals(1.0, double1, 0.01);
      
      BigFraction bigFraction10 = bigFraction5.divide((-2340L));
      assertEquals((byte)0, bigFraction5.byteValue());
      assertFalse(bigFraction10.equals((Object)bigFraction9));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.floatValue();
      int int0 = 922;
      bigFraction0.TWO.multiply(922);
      BigFraction bigFraction1 = bigFraction0.subtract(0L);
      bigFraction0.ONE_FIFTH.compareTo(bigFraction1);
      int int1 = 52;
      bigFraction0.TWO_FIFTHS.subtract(bigFraction1);
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.divide(52);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction2.TWO_FIFTHS.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 721;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(721, 721);
      bigFraction0.FOUR_FIFTHS.getDenominatorAsInt();
      BigFraction bigFraction1 = new BigFraction((-1828));
      bigFraction0.THREE_FIFTHS.add(bigFraction1);
      BigFraction bigFraction2 = BigFraction.getReducedFraction(721, 721);
      BigFraction bigFraction3 = null;
      // Undeclared exception!
      try { 
        bigFraction2.THREE_FIFTHS.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.add(9218868437227405312L);
      // Undeclared exception!
      try { 
        bigFraction1.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-3.9986783938944604E-8), (-3.9986783938944604E-8), 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -0 to fraction after 0 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1935);
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction0.ZERO.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.divide(1397L);
      bigFraction0.ONE_HALF.floatValue();
      BigFraction bigFraction3 = bigFraction0.THREE_FIFTHS.divide(bigFraction2);
      bigFraction0.ONE_THIRD.getDenominatorAsLong();
      bigFraction3.TWO.multiply(1935);
      BigFraction bigFraction4 = bigFraction2.multiply(1935);
      bigFraction4.ONE_THIRD.pow((long) 1935);
      // Undeclared exception!
      try { 
        bigFraction0.ONE.bigDecimalValue(766);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0662027949814858E-7), (-1391));
      BigFraction bigFraction1 = bigFraction0.multiply((long) (-1391));
      bigFraction0.ZERO.pow(536.369077218);
      BigFraction bigFraction2 = bigFraction0.add((-1391));
      bigFraction2.TWO.intValue();
      bigFraction1.pow((long) (-1391));
      bigFraction2.ZERO.negate();
      bigFraction1.getDenominatorAsInt();
      bigFraction0.hashCode();
      bigFraction0.intValue();
      long long0 = 0L;
      // Undeclared exception!
      try { 
        bigFraction1.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-857L));
      bigFraction0.getDenominatorAsInt();
      bigFraction0.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ZERO.subtract(bigInteger0);
      bigFraction1.MINUS_ONE.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.add(134L);
      bigFraction2.ZERO.pow((double) 134L);
      // Undeclared exception!
      try { 
        bigFraction2.FOUR_FIFTHS.bigDecimalValue(3341);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1519, 1519);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.add((long) 1519);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.FOUR_FIFTHS.multiply(560);
      int int0 = 1534;
      bigFraction3.TWO_QUARTERS.add(37);
      // Undeclared exception!
      try { 
        bigFraction4.FOUR_FIFTHS.bigDecimalValue(1519, 1534);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.add(bigFraction1);
      int int0 = (-1249);
      bigFraction2.ONE_QUARTER.subtract((-1249));
      BigFraction bigFraction3 = bigFraction1.TWO_THIRDS.abs();
      bigFraction3.TWO.reciprocal();
      bigFraction0.THREE_FIFTHS.pow(2813.15414758);
      // Undeclared exception!
      try { 
        bigFraction0.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.floatValue();
      bigFraction0.ONE.pow(0.0);
      BigFraction bigFraction1 = bigFraction0.pow(2559);
      bigFraction0.ONE_QUARTER.pow(2489.1);
      int int0 = 2921;
      bigFraction1.ONE_THIRD.hashCode();
      // Undeclared exception!
      try { 
        bigFraction1.MINUS_ONE.bigDecimalValue(2921, 2559);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.reciprocal();
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.multiply(5);
      BigFraction bigFraction3 = bigFraction0.ONE.add(bigInteger0);
      bigFraction0.TWO.getNumeratorAsInt();
      BigInteger bigInteger1 = bigFraction0.getNumerator();
      bigFraction0.percentageValue();
      bigFraction0.pow(0L);
      bigFraction1.percentageValue();
      BigFraction bigFraction4 = bigFraction0.subtract(bigInteger0);
      bigFraction4.TWO_QUARTERS.equals(bigFraction0);
      bigFraction4.bigDecimalValue();
      bigInteger0.remainder(bigInteger1);
      BigFraction bigFraction5 = bigFraction0.divide((long) 5);
      bigFraction5.TWO_THIRDS.reciprocal();
      bigFraction2.ONE_HALF.getNumeratorAsLong();
      BigFraction bigFraction6 = bigFraction2.pow(bigInteger0);
      bigFraction6.compareTo(bigFraction3);
      long long0 = (-9223372036854775808L);
      BigFraction bigFraction7 = bigFraction0.subtract((-9223372036854775808L));
      bigFraction7.THREE_QUARTERS.pow((double) (-9223372036854775808L));
      BigFraction.getReducedFraction(2, 1);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-909));
      bigFraction0.ZERO.getDenominatorAsLong();
      long long0 = 0L;
      BigFraction bigFraction1 = new BigFraction(0L);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.TWO_THIRDS.subtract((-909));
      BigFraction bigFraction3 = bigFraction2.MINUS_ONE.add(bigInteger0);
      bigFraction3.ZERO.intValue();
      bigFraction2.MINUS_ONE.longValue();
      BigFraction bigFraction4 = bigFraction2.subtract(100L);
      bigFraction4.TWO_THIRDS.abs();
      bigFraction1.getDenominatorAsLong();
      bigFraction1.pow(0L);
      int int0 = 2178;
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-909), 2178);
      BigFraction bigFraction6 = bigFraction5.subtract((-718));
      bigFraction6.THREE_QUARTERS.abs();
      // Undeclared exception!
      try { 
        bigFraction4.THREE_FIFTHS.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.TWO_QUARTERS.intValue();
      bigFraction0.doubleValue();
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.subtract(2811L);
      bigFraction1.TWO_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.multiply(2811L);
      bigFraction0.floatValue();
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction4 = bigFraction2.TWO_THIRDS.pow(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction4.MINUS_ONE.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1212));
      bigFraction0.THREE_FIFTHS.getDenominatorAsInt();
      bigFraction0.ONE_THIRD.abs();
      bigFraction0.THREE_FIFTHS.hashCode();
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.ONE_THIRD.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1687);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.multiply(0L);
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-2568), 1019);
      assertEquals((short) (-2), bigFraction2.shortValue());
      
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction0.add((-9223372036854775808L));
      float float0 = bigFraction1.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      
      bigFraction1.getNumeratorAsLong();
      assertFalse(bigFraction0.equals((Object)bigFraction3));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(2, 2);
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.divide(2);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)58;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.divide(bigInteger0);
      double double0 = bigFraction1.THREE_FIFTHS.percentageValue();
      assertEquals(60.0, double0, 0.01);
      
      float float0 = bigFraction0.floatValue();
      assertEquals(0.5F, float0, 0.01F);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-18);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-11);
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)5;
      byteArray1[5] = (byte) (-92);
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte)35;
      byteArray1[8] = (byte) (-40);
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigFraction1.ZERO.subtract(bigInteger1);
      double double1 = bigFraction0.pow((double) 2);
      assertEquals(0.25, double1, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      
      int int0 = bigFraction1.intValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.TWO_QUARTERS.abs();
      BigFraction bigFraction1 = bigFraction0.negate();
      // Undeclared exception!
      try { 
        bigFraction1.TWO.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4503599627370496L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-53);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.TWO_THIRDS.add(0);
      // Undeclared exception!
      try { 
        bigFraction0.TWO_QUARTERS.bigDecimalValue(0, (-88));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 37;
      BigFraction.getReducedFraction(37, 37);
      int int1 = (-1);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) 37, (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 37 to fraction (9,223,372,036,854,775,772/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-572), (-572));
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      String string0 = bigFraction2.ONE_THIRD.toString();
      assertEquals("1 / 3", string0);
      
      bigFraction1.THREE_FIFTHS.intValue();
      BigFraction bigFraction3 = bigFraction1.ONE.multiply((-2993));
      bigFraction3.ONE_FIFTH.negate();
      assertEquals((short) (-2993), bigFraction3.shortValue());
      
      bigFraction1.ZERO.bigDecimalValue((-572), 0);
      boolean boolean0 = bigFraction1.equals("}_`hab{");
      assertFalse(boolean0);
      
      BigFraction bigFraction4 = bigFraction2.subtract(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction5 = bigFraction2.TWO_FIFTHS.pow(bigInteger0);
      bigFraction5.FOUR_FIFTHS.multiply(bigInteger0);
      double double0 = bigFraction4.doubleValue();
      assertEquals(2.0, double0, 0.01);
      
      bigFraction5.MINUS_ONE.getNumeratorAsInt();
      BigFraction bigFraction6 = bigFraction2.add((-572));
      BigFraction bigFraction7 = bigFraction6.THREE_FIFTHS.add(1L);
      assertEquals((short) (-570), bigFraction6.shortValue());
      assertEquals((short)1, bigFraction7.shortValue());
      
      bigFraction1.bigDecimalValue();
      BigFraction bigFraction8 = bigFraction1.pow((int) (byte) (-73));
      bigFraction5.subtract(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction8));
      assertTrue(bigFraction2.equals((Object)bigFraction4));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4080L));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-90);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertEquals((byte)96, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.6011195182800293);
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.subtract(bigFraction1);
      bigFraction0.ONE_FIFTH.getField();
      bigFraction0.hashCode();
      int int0 = (-1);
      bigFraction0.TWO_FIFTHS.subtract((-1));
      bigFraction0.getNumeratorAsLong();
      bigFraction2.negate();
      int int1 = 729;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(729);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.divide((long) 1345);
      BigFraction bigFraction2 = bigFraction0.ONE_THIRD.divide(1345);
      BigFraction bigFraction3 = bigFraction0.negate();
      BigFraction bigFraction4 = bigFraction0.TWO_THIRDS.multiply(1345);
      bigFraction4.THREE_QUARTERS.getNumeratorAsInt();
      bigFraction4.TWO.getField();
      BigFraction bigFraction5 = bigFraction4.pow((-2904L));
      bigFraction5.pow(bigInteger0);
      BigFraction bigFraction6 = bigFraction3.pow((long) 1345);
      bigFraction6.ONE.multiply(bigInteger0);
      bigFraction6.THREE_FIFTHS.divide((long) 1345);
      bigFraction2.doubleValue();
      BigFraction bigFraction7 = bigFraction3.multiply(bigFraction6);
      bigFraction7.TWO_FIFTHS.percentageValue();
      bigFraction6.FOUR_FIFTHS.divide((-2904L));
      BigFraction bigFraction8 = bigFraction3.multiply(1615);
      bigFraction1.THREE_QUARTERS.pow(40.0);
      bigFraction1.getNumeratorAsInt();
      bigFraction8.add((long) 1);
      BigFraction bigFraction9 = bigFraction3.pow(bigInteger0);
      bigFraction2.getField();
      bigFraction9.hashCode();
      bigFraction6.longValue();
  }
}
