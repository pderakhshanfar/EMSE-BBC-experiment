/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 15:48:07 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-278), 100);
      BigFraction bigFraction1 = bigFraction0.pow(13);
      bigFraction0.getNumeratorAsInt();
      bigFraction1.getDenominatorAsLong();
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction2 = bigFraction0.negate();
      BigFraction bigFraction3 = bigFraction2.divide(bigInteger0);
      BigFraction bigFraction4 = BigFraction.TWO_THIRDS;
      bigFraction3.multiply(bigFraction0);
      bigFraction4.subtract((long) (-139));
      BigFraction bigFraction5 = bigFraction1.pow((long) 2338);
      bigFraction5.getField();
      bigFraction1.subtract((long) (-278));
      BigFraction bigFraction6 = new BigFraction((-1134.9170334165487), 687.0, (-278));
      BigFraction bigFraction7 = BigFraction.FOUR_FIFTHS;
      bigFraction7.multiply(37);
      bigFraction7.compareTo(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction(1683.5388557196);
      BigFraction bigFraction2 = bigFraction0.pow(2647);
      bigFraction2.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(708.600517768);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)24;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = 1226L;
      BigFraction bigFraction0 = new BigFraction(1226L, 1226L);
      long long1 = 1350L;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert infinite value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, 9.650358667643114E174, 6);
      bigFraction0.multiply((-2189));
      BigFraction bigFraction1 = new BigFraction((long) (-2380));
      bigFraction0.compareTo(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-1667));
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-1667), (-1285));
      bigFraction1.ZERO.getNumeratorAsInt();
      bigFraction0.bigDecimalValue(1, 1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(8.841732324071927E-8, (-2383));
      // Undeclared exception!
      try { 
        bigFraction0.pow((long) (-2383));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.ONE.reciprocal();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(627, 627);
      BigFraction bigFraction2 = bigFraction1.pow(2338);
      bigFraction1.getNumeratorAsInt();
      bigFraction1.getDenominatorAsLong();
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      bigFraction1.ONE_QUARTER.pow((double) 1);
      bigFraction0.negate();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction3 = BigFraction.ONE;
      bigFraction3.THREE_QUARTERS.pow(7.209138839286427E-16);
      bigFraction2.equals(bigFraction3);
      bigFraction1.equals(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      int int0 = 629;
      bigFraction0.THREE_FIFTHS.pow((-1336.28209));
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.reciprocal();
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.multiply(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction2.FOUR_FIFTHS.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3349.961));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.THREE_QUARTERS.pow(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9007199254740990L);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction0.divide(bigFraction1);
      bigFraction0.abs();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(0, (-1494));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction.getReducedFraction(0, 3);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.bigDecimalValue(2147481600, 5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.toString();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      bigFraction1.TWO.bigDecimalValue(3, 3);
      BigFraction bigFraction2 = bigFraction0.multiply(954);
      bigFraction2.getDenominatorAsLong();
      Random.setNextRandom(3);
      bigFraction0.multiply(1081L);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1607, 1215);
      bigFraction0.THREE_QUARTERS.hashCode();
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.THREE_QUARTERS.percentageValue();
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-808), (-1));
      BigFraction bigFraction3 = bigFraction0.ONE_FIFTH.negate();
      bigFraction1.TWO.intValue();
      bigFraction2.TWO_FIFTHS.longValue();
      bigFraction3.compareTo(bigFraction0);
      bigFraction0.equals(bigFraction1);
      bigFraction0.FOUR_FIFTHS.doubleValue();
      bigFraction0.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction2.pow(bigInteger0);
      bigFraction4.MINUS_ONE.multiply(693812537266L);
      bigFraction4.bigDecimalValue();
      bigFraction0.divide((-1));
      // Undeclared exception!
      try { 
        bigFraction4.ZERO.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction0.MINUS_ONE.compareTo(bigFraction1);
      bigFraction0.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)64;
      bigFraction0.add(bigFraction1);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)125;
      byteArray0[8] = (byte) (-8);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction1.pow(bigInteger0);
      bigFraction2.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.multiply((long) 2147483645);
      BigFraction bigFraction1 = new BigFraction(13964L);
      bigFraction1.negate();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1397));
      bigFraction0.subtract((-1397));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = new BigFraction(622);
      bigFraction0.ONE.compareTo(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.MINUS_ONE.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction0);
      bigFraction2.getNumerator();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.MINUS_ONE.pow((-1.0));
      bigFraction0.FOUR_FIFTHS.getDenominatorAsInt();
      bigFraction0.toString();
      bigFraction0.multiply(9007198650761216L);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1011, 28);
      BigFraction bigFraction1 = bigFraction0.pow(0);
      bigFraction0.getNumeratorAsInt();
      bigFraction0.equals(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(627, 146);
      BigFraction bigFraction1 = bigFraction0.pow(799);
      bigFraction0.getNumeratorAsInt();
      bigFraction0.getDenominatorAsLong();
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      BigFraction bigFraction2 = bigFraction1.negate();
      bigFraction0.getNumeratorAsInt();
      bigFraction1.divide(bigInteger0);
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      bigFraction0.multiply(bigFraction2);
      bigFraction0.subtract((long) 627);
      bigFraction0.pow((long) 627);
      BigFraction bigFraction4 = new BigFraction((-2320.639633649862), 7.201319954099161E239, 2147483438);
      bigFraction3.compareTo(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction2.getNumeratorAsInt();
      bigFraction1.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction2.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-17);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO.multiply(1);
      BigInteger bigInteger1 = bigFraction0.getDenominator();
      BigFraction bigFraction2 = bigFraction0.THREE_FIFTHS.add((-2489L));
      bigFraction0.ONE_QUARTER.toString();
      bigFraction0.getField();
      BigFraction bigFraction3 = bigFraction0.ONE.divide(bigInteger0);
      bigFraction3.THREE_FIFTHS.add(bigInteger1);
      BigFraction bigFraction4 = bigFraction2.ONE.reciprocal();
      bigFraction4.TWO_THIRDS.multiply(bigInteger1);
      BigFraction bigFraction5 = bigFraction2.ONE.subtract((long) (byte)0);
      bigFraction0.getDenominatorAsLong();
      bigFraction2.bigDecimalValue();
      bigFraction1.multiply(bigFraction0);
      bigFraction0.multiply(bigInteger0);
      bigFraction5.getDenominator();
      bigFraction1.getField();
      BigFraction bigFraction6 = bigFraction2.subtract((int) (byte) (-17));
      bigFraction6.ONE_HALF.hashCode();
      bigFraction1.subtract(73400320L);
      bigFraction5.getDenominator();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 627);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.pow(1);
      bigFraction0.THREE_FIFTHS.getNumeratorAsInt();
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction3 = BigFraction.ONE_THIRD;
      bigFraction3.subtract(bigFraction1);
      bigFraction2.bigDecimalValue(3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(627.31052358174);
      BigFraction bigFraction1 = new BigFraction((-785.217340501), 1073741824);
      BigFraction bigFraction2 = new BigFraction(18192L, 7006528L);
      bigFraction2.add(1706);
      BigFraction bigFraction3 = bigFraction2.multiply(1073741824);
      BigFraction bigFraction4 = BigFraction.TWO_QUARTERS;
      bigFraction4.multiply(105);
      bigFraction3.getDenominator();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction5 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigFraction5.add(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = new BigFraction(4.6871403168921666E-8, 629);
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction4 = bigFraction2.divide(bigFraction1);
      BigFraction bigFraction5 = BigFraction.TWO_FIFTHS;
      bigFraction3.getDenominatorAsInt();
      BigFraction bigFraction6 = BigFraction.ONE_FIFTH;
      bigFraction4.subtract(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = new BigFraction((-1075));
      bigFraction2.getNumeratorAsInt();
      BigFraction bigFraction3 = BigFraction.ONE_FIFTH;
      BigFraction.getReducedFraction((-1075), (-1961));
      bigFraction1.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction3.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(627.31052358174);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1073741824, 1073741824);
      bigFraction0.add(1073741824);
      bigFraction1.multiply((-1326));
      BigFraction bigFraction2 = bigFraction1.multiply(1158);
      bigFraction1.getDenominator();
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction2.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigFraction bigFraction2 = bigFraction0.pow(627);
      bigFraction0.getNumeratorAsInt();
      bigFraction0.subtract(bigFraction1);
      bigFraction2.compareTo(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.MINUS_ONE.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction1.TWO.intValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction0.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction2.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.6871403168921666E-8, (-1662));
      BigFraction bigFraction1 = bigFraction0.add((long) (-1662));
      bigFraction1.add(bigFraction0);
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(1, (-1662));
      bigFraction2.ZERO.abs();
      BigFraction bigFraction3 = bigFraction1.pow((-1662));
      bigFraction3.getNumeratorAsInt();
      BigFraction bigFraction4 = BigFraction.ONE_FIFTH;
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = new BigFraction(1948.338841393221);
      bigFraction0.divide(bigFraction1);
      bigFraction1.getDenominatorAsInt();
      bigFraction1.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.6871403168921666E-8, (-1662));
      BigFraction bigFraction1 = bigFraction0.add((long) (-1662));
      bigFraction1.add(bigFraction0);
      bigFraction1.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.ONE.subtract(bigInteger0);
      BigFraction.getReducedFraction((-3225), (-1374));
      // Undeclared exception!
      try { 
        bigFraction0.pow((-1662));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.THREE_QUARTERS.subtract(1747);
      BigFraction bigFraction1 = bigFraction0.divide((long) 1747);
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction1.abs();
      int int0 = 329;
      BigFraction bigFraction3 = new BigFraction(1747, 3494L);
      BigFraction bigFraction4 = bigFraction3.add(329);
      bigFraction2.multiply(329);
      // Undeclared exception!
      try { 
        bigFraction4.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.ONE.reciprocal();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(627, 627);
      BigFraction bigFraction2 = bigFraction1.pow(2338);
      bigFraction1.getNumeratorAsInt();
      bigFraction1.getDenominatorAsLong();
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      BigFraction bigFraction3 = bigFraction0.negate();
      bigFraction0.getNumeratorAsInt();
      bigFraction3.divide(bigInteger0);
      BigFraction bigFraction4 = BigFraction.TWO_THIRDS;
      bigFraction4.multiply(bigFraction2);
      bigFraction1.subtract(15L);
      bigFraction2.pow((-1657L));
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction(627, 0.0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 627 to fraction (9,223,372,036,854,775,182/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(157.273381933446);
      BigFraction bigFraction1 = bigFraction0.pow((-4624));
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(3181, 3181);
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction2);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.pow(bigInteger0);
      bigFraction1.toString();
      bigFraction2.getNumerator();
      bigFraction0.floatValue();
      BigFraction bigFraction4 = new BigFraction(406);
      bigFraction4.toString();
      bigFraction0.add(1431655765);
      bigFraction4.doubleValue();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.ONE.reciprocal();
      // Undeclared exception!
      try { 
        bigFraction0.pow(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-420), 15);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(4, (-1651));
      bigFraction1.subtract(bigInteger0);
      bigFraction0.toString();
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      bigFraction1.getNumeratorAsInt();
      Object object0 = new Object();
      Object object1 = new Object();
      bigFraction0.equals(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.6871403168921666E-8, (-1662));
      BigFraction bigFraction1 = bigFraction0.add((long) (-1662));
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction2.subtract((-2932L));
      bigFraction3.getDenominatorAsInt();
      BigFraction.getReducedFraction(556, 452);
      bigFraction3.equals(bigFraction2);
      Object object0 = new Object();
      BigInteger bigInteger0 = null;
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 627);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.pow(1);
      bigFraction0.THREE_FIFTHS.getNumeratorAsInt();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction2.equals(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.6871403168921666E-8, (-1662));
      BigFraction bigFraction1 = bigFraction0.add((long) (-1662));
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction2.subtract((long) (-1662));
      bigFraction3.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction4 = new BigFraction(100, 1209);
      bigFraction4.subtract(bigInteger0);
      bigFraction0.toString();
      BigFraction bigFraction5 = BigFraction.TWO_QUARTERS;
      bigFraction5.getNumeratorAsInt();
      Object object0 = new Object();
      Object object1 = new Object();
      bigFraction3.equals(object1);
      BigFraction.getReducedFraction(100, 2147483620);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = null;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.subtract(1746);
      bigFraction0.longValue();
      bigFraction0.longValue();
      bigFraction1.divide((-877));
      bigFraction1.reciprocal();
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.6871403168921666E-8, (-1662));
      BigFraction bigFraction1 = bigFraction0.add((long) (-1662));
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction3 = bigFraction2.subtract((-2932L));
      bigFraction3.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction4 = new BigFraction(100, 1209);
      bigFraction4.subtract(bigInteger0);
      bigFraction0.toString();
      BigFraction bigFraction5 = BigFraction.TWO_QUARTERS;
      bigFraction5.getNumeratorAsInt();
      Object object0 = new Object();
      Object object1 = new Object();
      bigFraction3.equals(object1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(627.31052358174);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.negate();
      BigFraction bigFraction3 = bigFraction0.ONE.add(bigFraction1);
      bigFraction0.TWO_THIRDS.getDenominatorAsLong();
      bigFraction3.THREE_FIFTHS.multiply(2403);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction1.TWO_THIRDS.pow(bigInteger0);
      bigFraction1.toString();
      BigInteger bigInteger1 = bigFraction0.getNumerator();
      BigInteger bigInteger2 = bigFraction4.getNumerator();
      bigFraction2.pow((long) 2403);
      bigFraction2.divide(bigFraction3);
      bigFraction2.reciprocal();
      BigFraction bigFraction5 = new BigFraction(bigInteger2, bigInteger1);
      bigFraction1.divide(bigFraction5);
      bigFraction4.subtract(bigFraction1);
      BigFraction bigFraction6 = new BigFraction(2403, 5);
      bigFraction1.subtract(bigFraction6);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(157.273381933446);
      BigFraction bigFraction1 = bigFraction0.pow((-4624));
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(3181, 3181);
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction2);
      BigFraction bigFraction4 = bigFraction2.add(1431655765);
      bigFraction1.floatValue();
      bigFraction0.toString();
      bigFraction4.getNumeratorAsLong();
      bigFraction3.add((-5571));
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction((-163L), 9007198789173263L);
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      BigFraction bigFraction3 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction4 = bigFraction3.pow((-2163));
      bigFraction4.getNumeratorAsLong();
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-1888), 3);
      BigFraction bigFraction6 = bigFraction0.subtract(bigFraction4);
      BigFraction bigFraction7 = bigFraction0.add((-2738));
      bigFraction5.floatValue();
      bigFraction7.toString();
      bigFraction2.getNumeratorAsLong();
      bigFraction6.add((-1888));
      bigFraction6.doubleValue();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = new BigFraction((-2644281811660520851L), (-2644281811660520851L));
      bigFraction0.TWO.subtract(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.pow(545);
      bigFraction2.getNumeratorAsLong();
      BigFraction.getReducedFraction(319, (-1));
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction2);
      BigFraction bigFraction4 = bigFraction3.add((-1));
      bigFraction4.floatValue();
      bigFraction4.toString();
      bigFraction3.getNumeratorAsLong();
      bigFraction4.add(1731);
      BigFraction bigFraction5 = new BigFraction((double) (-444));
      bigFraction5.doubleValue();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.ONE.reciprocal();
      bigFraction0.THREE_FIFTHS.percentageValue();
      bigFraction1.TWO_FIFTHS.reciprocal();
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.abs();
      bigFraction0.longValue();
      BigInteger bigInteger0 = null;
      bigFraction2.subtract(0L);
      bigFraction2.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction2.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1948.338841393221, 0);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.add((long) 0);
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.add(bigFraction1);
      bigFraction1.ONE_HALF.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction2.add(bigInteger0);
      BigFraction bigFraction4 = BigFraction.getReducedFraction(2147371945, 2147483645);
      bigFraction3.add(bigFraction4);
      bigFraction1.longValue();
      bigFraction3.longValue();
      BigFraction bigFraction5 = bigFraction0.divide(2147483645);
      bigFraction5.reciprocal();
      bigFraction2.divide(bigFraction5);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = (-1662);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.7976931348623157E308, (-1662));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(627.31052358174);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.negate();
      BigFraction bigFraction3 = bigFraction0.ONE.add(bigFraction1);
      bigFraction0.TWO_THIRDS.getDenominatorAsLong();
      bigFraction3.THREE_FIFTHS.multiply(2403);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction4 = bigFraction1.TWO_THIRDS.pow(bigInteger0);
      bigFraction1.toString();
      bigFraction0.getNumerator();
      bigFraction4.getNumerator();
      bigFraction2.pow((long) 2403);
      bigFraction2.divide(bigFraction3);
      bigFraction4.getField();
      BigFraction bigFraction5 = new BigFraction((double) 2403);
      bigFraction5.percentageValue();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 627);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.pow(1);
      bigFraction0.THREE_FIFTHS.getNumeratorAsInt();
      bigFraction0.TWO_FIFTHS.getField();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.subtract(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.divide(bigFraction2);
      bigFraction3.multiply((long) 1);
      BigFraction bigFraction4 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction5 = new BigFraction((-2708L), 9007199254740990L);
      bigFraction4.add(bigFraction5);
      bigFraction3.longValue();
      try { 
        bigFraction4.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0);
      bigFraction0.divide(1405L);
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2209.8256209071));
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction1.negate();
      BigFraction bigFraction3 = bigFraction2.add(bigFraction0);
      bigFraction1.getDenominatorAsLong();
      bigFraction0.multiply(2403);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.pow(bigInteger0);
      bigFraction3.toString();
      bigFraction1.getNumerator();
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-830), (-410));
      bigFraction4.floatValue();
      bigFraction0.toString();
      bigFraction0.getNumeratorAsLong();
      bigFraction1.add((-830));
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1015.74168697151), 1);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction2.TWO_THIRDS.hashCode();
      bigFraction0.subtract(1608L);
      BigFraction bigFraction3 = bigFraction0.TWO_FIFTHS.reciprocal();
      bigFraction0.getField();
      int int0 = 4;
      // Undeclared exception!
      try { 
        bigFraction3.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1015.74168697151), 1);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction2.TWO_THIRDS.hashCode();
      BigFraction bigFraction3 = bigFraction0.subtract(1608L);
      BigFraction bigFraction4 = bigFraction0.TWO_FIFTHS.reciprocal();
      bigFraction0.getField();
      BigFraction bigFraction5 = bigFraction2.subtract(4);
      BigFraction bigFraction6 = bigFraction1.subtract(1);
      bigFraction3.toString();
      bigFraction1.longValue();
      bigFraction0.divide(5);
      bigFraction4.reciprocal();
      bigFraction3.divide(bigFraction6);
      bigFraction5.subtract(bigFraction6);
      BigFraction bigFraction7 = BigFraction.ONE;
      bigFraction7.reduce();
      bigFraction5.subtract(bigFraction7);
      bigFraction2.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 627);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.pow(1);
      bigFraction0.THREE_FIFTHS.getNumeratorAsInt();
      bigFraction0.TWO_FIFTHS.getField();
      bigFraction0.ZERO.multiply(1);
      BigFraction bigFraction2 = bigFraction0.pow((-402L));
      bigFraction1.doubleValue();
      bigFraction2.bigDecimalValue(4);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3549.32669684246);
      bigFraction0.hashCode();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.multiply(1491);
      bigFraction0.pow(882.2429553);
      bigFraction1.divide((long) 1491);
      BigFraction bigFraction3 = bigFraction2.add(551);
      bigFraction0.multiply(2);
      bigFraction3.bigDecimalValue(2);
      BigFraction bigFraction4 = bigFraction1.abs();
      BigFraction bigFraction5 = bigFraction1.divide(bigInteger0);
      bigFraction3.getField();
      bigFraction4.add((-1632L));
      bigFraction5.abs();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-420), 15);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(4, (-1651));
      bigFraction0.ZERO.equals(bigFraction1);
      Object object0 = new Object();
      bigFraction0.equals(object0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.ONE.reciprocal();
      bigFraction1.TWO.bigDecimalValue();
      bigFraction0.doubleValue();
      bigFraction1.THREE_QUARTERS.intValue();
      bigFraction1.ONE.floatValue();
      bigFraction0.ZERO.intValue();
      bigFraction0.getNumeratorAsInt();
      bigFraction0.hashCode();
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction0.compareTo(bigFraction2);
      bigFraction1.divide((long) 1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.MINUS_ONE.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.reduce();
      bigFraction1.TWO.intValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.ONE_THIRD.add(bigInteger0);
      BigFraction.getReducedFraction(5, 5);
      bigFraction1.subtract((long) 2);
      bigFraction1.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = new BigFraction((-2644281811660520851L), (-2644281811660520851L));
      BigFraction bigFraction2 = bigFraction0.TWO.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.MINUS_ONE.pow(545);
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-1), 3181);
      bigFraction0.ZERO.subtract(bigFraction2);
      BigFraction bigFraction5 = bigFraction3.add((-2960));
      bigFraction4.getNumerator();
      BigFraction bigFraction6 = bigFraction3.pow((-2644281811660520851L));
      bigFraction5.divide(bigFraction6);
      bigFraction4.getField();
      bigFraction2.percentageValue();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.signum();
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.divide(1);
      bigFraction1.TWO.subtract(4);
      bigFraction0.ONE_FIFTH.longValue();
      BigFraction bigFraction2 = new BigFraction(4607182418800017408L, 527L);
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction2);
      BigFraction bigFraction4 = bigFraction3.MINUS_ONE.multiply(bigFraction0);
      bigFraction4.MINUS_ONE.getDenominatorAsInt();
      BigFraction bigFraction5 = bigFraction3.TWO.pow(4);
      bigFraction5.ZERO.doubleValue();
      bigFraction2.ZERO.percentageValue();
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.ONE.reduce();
      bigFraction1.TWO_THIRDS.intValue();
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction3 = bigFraction0.TWO_THIRDS.add(bigFraction2);
      BigFraction bigFraction4 = bigFraction0.TWO_FIFTHS.divide((-9223372036854775808L));
      bigFraction4.ONE.add((-9223372036854775808L));
      long long0 = (-2290L);
      bigFraction4.ONE_THIRD.floatValue();
      bigFraction1.TWO_FIFTHS.add((-2290L));
      bigFraction3.THREE_QUARTERS.floatValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.THREE_QUARTERS.subtract(1747);
      try { 
        bigFraction0.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = (-17);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(4.560067256086347E-9, 4.560067256086347E-9, (-17));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0 to fraction after -17 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-20), (-1));
      BigFraction bigFraction1 = new BigFraction(1701);
      bigFraction1.MINUS_ONE.intValue();
      bigFraction0.ONE.compareTo(bigFraction1);
      bigFraction0.intValue();
      BigFraction bigFraction2 = bigFraction0.reduce();
      bigFraction2.percentageValue();
      bigFraction2.doubleValue();
      bigFraction0.getDenominator();
      bigFraction0.getNumeratorAsLong();
      bigFraction0.intValue();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1414, (-801));
      bigFraction2.subtract(bigFraction3);
      bigFraction3.pow((-274L));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      int int0 = (-66);
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.divide((-66));
      bigFraction2.MINUS_ONE.getField();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction0.THREE_QUARTERS.subtract(239);
      bigFraction3.pow(bigInteger0);
      BigFraction.getReducedFraction(2, (-66));
      BigFraction bigFraction4 = bigFraction1.FOUR_FIFTHS.divide(2);
      bigFraction0.longValue();
      bigFraction4.FOUR_FIFTHS.add(bigFraction0);
      bigFraction2.TWO_QUARTERS.longValue();
      bigFraction0.getField();
      bigFraction2.getDenominatorAsLong();
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction((-2182L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1948.338841393221, 0);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.add((long) 0);
      bigFraction0.MINUS_ONE.add(bigFraction1);
      bigFraction1.ONE_HALF.getDenominatorAsInt();
      BigFraction bigFraction2 = bigFraction0.subtract(9154082963658192752L);
      bigFraction2.ONE_QUARTER.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction0.subtract(bigInteger0);
      bigFraction3.toString();
      bigFraction3.ONE.getNumeratorAsInt();
      bigFraction0.floatValue();
      BigFraction bigFraction4 = bigFraction3.multiply(302);
      bigFraction4.TWO_QUARTERS.intValue();
      bigFraction2.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.multiply(bigInteger0);
      bigFraction0.FOUR_FIFTHS.hashCode();
      bigFraction0.ONE.negate();
      bigFraction1.TWO_QUARTERS.abs();
      bigFraction0.getDenominator();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-360));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.floatValue();
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.divide(1313L);
      BigFraction bigFraction2 = bigFraction1.ONE.divide(1313L);
      bigFraction2.TWO.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction1.pow(bigInteger0);
      BigInteger bigInteger1 = bigFraction1.getNumerator();
      BigFraction bigFraction4 = bigFraction0.ONE_FIFTH.subtract(1313L);
      bigFraction0.getNumerator();
      int int0 = 0;
      BigFraction bigFraction5 = bigFraction0.ONE_QUARTER.pow(bigInteger1);
      bigFraction5.TWO_QUARTERS.pow(268.3961197766558);
      bigFraction0.MINUS_ONE.multiply(0);
      bigFraction0.TWO_FIFTHS.multiply((long) 0);
      bigFraction0.toString();
      bigFraction4.getDenominatorAsLong();
      BigFraction bigFraction6 = BigFraction.ONE_HALF;
      bigFraction4.ONE_HALF.subtract(bigFraction6);
      bigFraction0.getField();
      bigFraction0.divide(bigInteger0);
      bigFraction4.doubleValue();
      bigFraction3.getNumeratorAsInt();
      bigFraction0.hashCode();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(3911);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(157.273381933446);
      // Undeclared exception!
      try { 
        bigFraction0.TWO_THIRDS.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.ONE_QUARTER.hashCode();
      BigFractionField bigFractionField0 = bigFraction0.ONE.getField();
      bigFraction0.MINUS_ONE.equals(bigFractionField0);
      bigFraction0.intValue();
      BigFraction bigFraction1 = bigFraction0.pow(0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigFraction1.ONE_QUARTER.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow((-3527L));
      bigFraction1.ONE_THIRD.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction0.ONE.pow(2171L);
      bigFraction2.THREE_QUARTERS.subtract(bigFraction1);
      bigFraction1.THREE_FIFTHS.longValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction1.subtract(bigInteger0);
      BigInteger bigInteger1 = null;
      bigFraction3.ONE_FIFTH.pow(1503.5453974744619);
      // Undeclared exception!
      try { 
        bigFraction1.MINUS_ONE.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(627.31052358174);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.negate();
      BigFraction bigFraction3 = bigFraction0.ONE.add(bigFraction1);
      bigFraction0.TWO_THIRDS.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.multiply(2403);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction5 = bigFraction1.TWO_THIRDS.pow(bigInteger0);
      bigFraction1.toString();
      bigFraction0.getNumerator();
      bigFraction3.floatValue();
      bigFraction5.toString();
      bigFraction2.getNumeratorAsLong();
      bigFraction2.add(2403);
      bigFraction4.doubleValue();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.add((-663));
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.reduce();
      bigFraction2.ONE_QUARTER.equals("=Tw6W}\"`");
      // Undeclared exception!
      try { 
        bigFraction2.TWO_QUARTERS.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2724, (-1166));
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertEquals((byte) (-2), bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction1.pow((-3483));
      BigFraction bigFraction3 = bigFraction1.THREE_FIFTHS.subtract(bigFraction0);
      assertEquals((byte)2, bigFraction3.byteValue());
      
      bigFraction0.toString();
      bigFraction0.doubleValue();
      double double0 = bigFraction2.percentageValue();
      assertEquals((-1.8164000470737793E-308), double0, 0.01);
      
      BigFraction bigFraction4 = bigFraction1.reciprocal();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte)117;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction4.subtract(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      int int0 = 106;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.pow(106);
      long long0 = 1363L;
      BigFraction bigFraction2 = bigFraction1.TWO.pow(1363L);
      bigFraction2.ONE_QUARTER.divide(1363L);
      bigFraction2.ONE_QUARTER.reciprocal();
      bigFraction1.FOUR_FIFTHS.getDenominatorAsInt();
      bigFraction0.multiply((-1816L));
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((-204), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 189;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(4140.62914, (-426.1126), 189);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 4,140.629 to fraction (12,442,472,172,691/3,004,971,407)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = (-2096);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 0.0, (-2096));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE.multiply(bigInteger0);
      bigFraction1.TWO_THIRDS.pow(1166);
      bigFraction1.FOUR_FIFTHS.bigDecimalValue();
      assertEquals((short)10, bigFraction1.shortValue());
      
      bigFraction0.bigDecimalValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      long long0 = (-461L);
      // Undeclared exception!
      try { 
        bigFraction0.ONE.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.ONE.reciprocal();
      bigFraction0.THREE_FIFTHS.percentageValue();
      bigFraction1.TWO_FIFTHS.reciprocal();
      bigFraction0.MINUS_ONE.abs();
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.subtract((-573));
      // Undeclared exception!
      try { 
        bigFraction2.TWO.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.TWO.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.abs();
      bigFraction2.TWO.subtract(1090);
      BigFraction bigFraction3 = bigFraction1.ONE_HALF.pow(1L);
      bigFraction3.TWO_QUARTERS.subtract(bigFraction1);
      bigFraction2.THREE_QUARTERS.divide((-1));
      bigFraction2.toString();
      bigFraction1.TWO_FIFTHS.getNumeratorAsInt();
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-3388), (-1951));
      // Undeclared exception!
      try { 
        bigFraction4.TWO.bigDecimalValue(1779, (-3388));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 3018;
      BigFraction bigFraction0 = new BigFraction(3018);
      bigFraction0.FOUR_FIFTHS.getDenominatorAsLong();
      bigFraction0.TWO_THIRDS.add(0L);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.add(5L);
      bigFraction1.ONE_FIFTH.getNumeratorAsLong();
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.hashCode();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.hashCode();
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigDecimal bigDecimal0 = bigFraction1.ONE_HALF.bigDecimalValue(2);
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      BigFraction bigFraction2 = bigFraction1.divide((-2433L));
      double double0 = bigFraction2.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 627);
      bigFraction0.ONE_HALF.pow(1);
      bigFraction0.THREE_FIFTHS.getNumeratorAsInt();
      bigFraction0.TWO_FIFTHS.getField();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.ZERO.multiply(1);
      BigFraction bigFraction3 = bigFraction1.FOUR_FIFTHS.multiply(bigFraction0);
      int int0 = 4;
      bigFraction3.ONE_THIRD.percentageValue();
      BigFraction bigFraction4 = bigFraction0.TWO_QUARTERS.divide(4);
      bigFraction4.ONE.bigDecimalValue(1);
      bigFraction4.getDenominatorAsLong();
      bigFraction0.pow((-402L));
      BigFraction bigFraction5 = bigFraction1.negate();
      bigFraction5.FOUR_FIFTHS.bigDecimalValue();
      bigFraction5.THREE_QUARTERS.toString();
      BigFraction bigFraction6 = bigFraction5.ONE_HALF.divide(2047L);
      BigFraction bigFraction7 = bigFraction6.ZERO.add(1);
      bigFraction7.ONE_FIFTH.multiply(0);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(627);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.divide((-672));
      bigFraction1.longValue();
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-672), (-672));
      BigFraction bigFraction3 = bigFraction0.TWO.add(1355L);
      bigFraction1.THREE_QUARTERS.reciprocal();
      BigFraction bigFraction4 = bigFraction3.TWO_FIFTHS.subtract(922);
      assertEquals((short) (-921), bigFraction4.shortValue());
      
      boolean boolean0 = bigFraction3.ONE.equals(bigFraction0);
      assertTrue(boolean0);
      
      bigFraction1.ONE.getDenominatorAsInt();
      BigFraction bigFraction5 = new BigFraction(237L);
      BigFraction bigFraction6 = bigFraction0.multiply(bigFraction5);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction6.MINUS_ONE.divide(bigInteger0);
      BigFraction bigFraction7 = bigFraction6.abs();
      assertEquals((short)237, bigFraction7.shortValue());
      
      BigFraction bigFraction8 = bigFraction1.divide(1);
      bigFraction8.TWO_THIRDS.longValue();
      assertTrue(bigFraction8.equals((Object)bigFraction1));
      
      BigDecimal bigDecimal0 = bigFraction5.bigDecimalValue(1699, 1);
      assertEquals((byte) (-19), bigDecimal0.byteValue());
      
      BigFraction bigFraction9 = bigFraction3.pow(922);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertEquals((byte) (-119), bigFraction9.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(450);
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.reduce();
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.multiply(bigFraction1);
      bigFraction3.MINUS_ONE.intValue();
      bigFraction1.ONE_THIRD.equals("0");
      BigFraction bigFraction4 = bigFraction1.FOUR_FIFTHS.add(1129);
      bigFraction4.ONE.add(bigFraction3);
      bigFraction0.TWO.add(1129);
      bigFraction0.TWO_FIFTHS.compareTo(bigFraction3);
      BigFraction bigFraction5 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction6 = bigFraction5.TWO_QUARTERS.negate();
      int int0 = 2;
      BigFraction bigFraction7 = BigFraction.getReducedFraction(2254, 2);
      bigFraction7.ONE_QUARTER.multiply(bigFraction6);
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction5.compareTo(bigFraction0);
      bigFraction1.ZERO.compareTo(bigFraction2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 766);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.ONE.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.pow(3119);
      bigFraction1.THREE_QUARTERS.getNumeratorAsLong();
      bigFraction0.TWO_THIRDS.hashCode();
      bigFraction1.getField();
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      bigFraction2.ONE_HALF.longValue();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(1215, 2);
      BigFraction bigFraction4 = bigFraction1.add(1L);
      bigFraction4.MINUS_ONE.getNumeratorAsLong();
      bigFraction3.TWO.hashCode();
      bigFraction4.TWO_THIRDS.getField();
      assertEquals((byte)1, bigFraction4.byteValue());
      
      bigFraction3.MINUS_ONE.getField();
      assertEquals((byte)95, bigFraction3.byteValue());
      
      double double0 = bigFraction2.percentageValue();
      assertEquals(0.0, double0, 0.01);
      
      BigFraction bigFraction5 = bigFraction2.subtract(2147483647L);
      Object object0 = new Object();
      bigFraction5.TWO_QUARTERS.equals(object0);
      assertEquals((short)2, bigFraction5.shortValue());
      
      bigFraction0.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.pow(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ONE_THIRD.hashCode();
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1772.88757, 1772.88757, 1);
      bigFraction0.MINUS_ONE.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.pow(bigInteger0);
      bigFraction1.TWO_FIFTHS.reciprocal();
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.pow(bigInteger0);
      bigFraction0.THREE_QUARTERS.pow(1225L);
      bigFraction2.FOUR_FIFTHS.bigDecimalValue(1, 1);
      bigFraction0.getNumeratorAsInt();
      bigFraction0.ONE.doubleValue();
      BigFraction bigFraction3 = bigFraction0.THREE_QUARTERS.add(1);
      int int0 = (-1);
      bigFraction3.TWO_FIFTHS.add((-1));
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-1489), 1772);
      BigFraction bigFraction5 = bigFraction3.pow((long) (-1489));
      bigFraction5.FOUR_FIFTHS.multiply((long) 1772);
      bigFraction5.FOUR_FIFTHS.getNumeratorAsInt();
      bigFraction0.getDenominator();
      bigFraction4.toString();
      BigFraction bigFraction6 = bigFraction3.reduce();
      bigFraction6.FOUR_FIFTHS.pow(3949.38772995);
      BigFraction bigFraction7 = bigFraction3.pow((-1));
      // Undeclared exception!
      try { 
        bigFraction7.TWO_QUARTERS.bigDecimalValue((-781), 245);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1015.74168697151), 1);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction2.TWO_THIRDS.hashCode();
      BigFraction bigFraction3 = bigFraction0.subtract(1608L);
      bigFraction0.TWO_FIFTHS.reciprocal();
      bigFraction0.getField();
      BigFraction bigFraction4 = bigFraction2.subtract(4);
      bigFraction1.subtract(1);
      bigFraction3.toString();
      bigFraction1.longValue();
      bigFraction0.bigDecimalValue();
      bigFraction4.compareTo(bigFraction3);
      bigFraction0.floatValue();
      // Undeclared exception!
      try { 
        bigFraction4.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3549.32669684246);
      bigFraction0.hashCode();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.multiply(bigInteger0);
      int int0 = 1491;
      bigFraction0.ONE_HALF.multiply(1491);
      bigFraction0.pow(882.2429553);
      bigFraction0.doubleValue();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(1491);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO.abs();
      float float0 = bigFraction0.ONE_HALF.floatValue();
      assertEquals(0.5F, float0, 0.01F);
      
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.multiply((-1));
      assertEquals((short)0, bigFraction2.shortValue());
      
      BigFraction bigFraction3 = bigFraction1.TWO.pow((-197L));
      BigFraction bigFraction4 = bigFraction0.add(233);
      BigFraction bigFraction5 = bigFraction4.divide((-197L));
      bigFraction5.TWO_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction6 = bigFraction0.THREE_QUARTERS.abs();
      bigFraction6.ONE.add(329);
      BigFraction bigFraction7 = bigFraction5.multiply(233);
      assertEquals((byte) (-20), bigFraction7.byteValue());
      
      long long0 = bigFraction1.longValue();
      assertEquals(2L, long0);
      
      bigFraction3.multiply(233);
      assertEquals((byte)2, bigFraction1.byteValue());
  }
}
