/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 13:41:50 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Random;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3336L), 952L);
      bigFraction0.MINUS_ONE.bigDecimalValue(3537, 2);
      bigFraction0.TWO_QUARTERS.pow((double) (-3336L));
      BigFraction bigFraction1 = new BigFraction(4.90899765281938E-9);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2779.179333346));
      BigFraction bigFraction1 = bigFraction0.pow((-3605L));
      Object object0 = new Object();
      bigFraction1.equals(bigFraction0);
      bigFraction0.floatValue();
      // Undeclared exception!
      try { 
        bigFraction1.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigDecimal bigDecimal0 = new BigDecimal(1654.2742289827786);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(372, 74);
      bigFraction0.equals(bigFraction0);
      bigFraction1.intValue();
      BigFraction bigFraction2 = bigFraction1.pow((long) 372);
      bigFraction0.getField();
      BigFraction bigFraction3 = bigFraction2.multiply(bigFraction1);
      bigFraction3.getDenominatorAsLong();
      bigFraction3.getField();
      bigFraction3.doubleValue();
      bigFraction2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(372, 52);
      bigFraction0.equals(bigFraction0);
      bigFraction1.intValue();
      bigFraction0.pow((long) 52);
      BigFraction bigFraction2 = bigFraction1.pow((long) 372);
      bigFraction0.equals(bigFraction2);
      bigFraction0.getField();
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2882.53723768));
      bigFraction0.bigDecimalValue();
      long long0 = (-2258L);
      BigFraction bigFraction1 = bigFraction0.add((-2258L));
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.add((-2258L));
      bigFraction2.MINUS_ONE.longValue();
      bigFraction0.TWO.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction1.THREE_FIFTHS.pow(bigInteger0);
      bigFraction3.TWO.bigDecimalValue(376, 5);
      bigFraction0.abs();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(390, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigDecimal bigDecimal0 = new BigDecimal((-911.65587275));
      BigFraction bigFraction1 = BigFraction.getReducedFraction(372, 52);
      bigFraction0.equals(bigFraction0);
      bigFraction1.intValue();
      bigFraction0.pow((long) 52);
      BigFraction bigFraction2 = bigFraction1.pow((long) 372);
      bigFraction0.equals(bigFraction2);
      bigFraction0.getField();
      BigFraction bigFraction3 = bigFraction2.multiply(bigFraction1);
      bigFraction3.getDenominatorAsLong();
      bigFraction3.getField();
      bigFraction3.doubleValue();
      bigFraction2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(2147483535, 2147483535);
      bigFraction0.ONE_THIRD.compareTo(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-2032));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigDecimal bigDecimal0 = new BigDecimal((-911.65587275));
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction1.floatValue();
      BigFraction bigFraction2 = BigFraction.getReducedFraction(379, 52);
      bigFraction1.equals(bigFraction0);
      bigFraction2.intValue();
      bigFraction0.pow((long) 52);
      BigFraction bigFraction3 = bigFraction2.pow((long) 379);
      bigFraction0.equals(bigFraction3);
      bigFraction0.getField();
      BigFraction bigFraction4 = bigFraction3.multiply(bigFraction2);
      bigFraction4.getNumerator();
      bigFraction3.multiply((-2322));
      bigFraction4.getDenominatorAsLong();
      bigFraction4.getField();
      bigFraction4.doubleValue();
      bigFraction4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte) (-111);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(379, 52);
      bigFraction0.intValue();
      bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.ZERO.multiply(379);
      bigFraction1.TWO.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction0.reduce();
      bigFraction2.TWO_THIRDS.doubleValue();
      int int0 = 0;
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.subtract(0);
      bigFraction1.FOUR_FIFTHS.equals(bigFraction0);
      Object object0 = new Object();
      bigFraction3.subtract(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction1.pow((-2721L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      int int0 = 7;
      // Undeclared exception!
      try { 
        bigFraction1.ONE_QUARTER.bigDecimalValue(7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = new BigFraction(0.0);
      bigFraction1.getNumerator();
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-52);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.MINUS_ONE.getDenominatorAsInt();
      bigFraction0.divide(bigInteger0);
      org.evosuite.runtime.Random.setNextRandom(2417);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.equals(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(5.31750271790054E282);
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1147.80960788391));
      bigFraction0.divide(1075);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      int int0 = 830;
      bigFraction0.ZERO.abs();
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.subtract(830);
      BigFraction bigFraction2 = bigFraction0.ZERO.subtract(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction2.FOUR_FIFTHS.bigDecimalValue(830, 830);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-3296), (-3296));
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1147.80960788391));
      bigFraction0.doubleValue();
      bigFraction0.getDenominator();
      bigFraction0.negate();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      org.evosuite.runtime.Random.setNextRandom(1103);
      BigFraction bigFraction2 = bigFraction1.add((long) 1103);
      BigFraction bigFraction3 = bigFraction2.reciprocal();
      bigFraction3.getDenominator();
      BigFraction bigFraction4 = bigFraction3.abs();
      bigFraction4.ONE.bigDecimalValue();
      bigFraction1.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.ONE.hashCode();
      bigFraction0.MINUS_ONE.getNumeratorAsInt();
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.divide(bigFraction1);
      bigFraction2.TWO.subtract((long) (-1));
      bigFraction2.TWO_QUARTERS.getDenominatorAsInt();
      bigFraction2.TWO_QUARTERS.compareTo(bigFraction0);
      bigFraction0.FOUR_FIFTHS.intValue();
      BigFraction bigFraction3 = bigFraction0.multiply(397);
      BigFraction bigFraction4 = bigFraction0.ONE_FIFTH.divide(230);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction5 = bigFraction4.THREE_QUARTERS.add(bigInteger0);
      bigFraction5.FOUR_FIFTHS.divide((long) 397);
      bigFraction4.THREE_QUARTERS.getDenominatorAsInt();
      BigInteger bigInteger1 = bigFraction1.getNumerator();
      BigFraction bigFraction6 = bigFraction3.divide((long) (-1));
      BigFraction bigFraction7 = bigFraction1.pow((long) (-1));
      bigFraction4.equals((Object) null);
      BigFraction bigFraction8 = bigFraction0.multiply(bigFraction6);
      bigFraction0.multiply(bigInteger1);
      BigFraction bigFraction9 = bigFraction5.add((long) (-1));
      bigFraction9.subtract(bigFraction0);
      bigFraction8.getDenominatorAsLong();
      bigFraction3.reduce();
      bigFraction4.ZERO.divide(bigInteger1);
      bigFraction0.divide(bigInteger0);
      bigFraction7.getNumerator();
      bigFraction3.pow((long) 4);
      bigFraction6.divide(bigInteger1);
      bigFraction9.add(bigInteger1);
      bigFraction0.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction0.ONE_HALF.divide(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1714.7341632, (-40));
      bigFraction0.FOUR_FIFTHS.percentageValue();
      bigFraction0.MINUS_ONE.intValue();
      bigFraction0.toString();
      bigFraction0.add(1L);
      BigFraction bigFraction1 = bigFraction0.divide((long) (-1));
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-1), (-790));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2147483642);
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1894, 416);
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1987));
      bigFraction0.FOUR_FIFTHS.getField();
      bigFraction0.ONE.intValue();
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.equals(bigFraction0);
      bigFraction0.THREE_FIFTHS.toString();
      BigFraction bigFraction2 = bigFraction0.ZERO.negate();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction2.subtract((long) (-1987));
      BigFraction bigFraction3 = bigFraction0.add(bigInteger0);
      bigFraction2.THREE_QUARTERS.multiply(bigFraction3);
      BigFraction bigFraction4 = BigFraction.getReducedFraction(2147483646, 1);
      bigFraction1.equals(bigFraction3);
      BigFraction bigFraction5 = bigFraction0.multiply(2452L);
      bigFraction5.ONE_HALF.equals(bigFraction0);
      BigFraction bigFraction6 = bigFraction2.subtract(bigInteger0);
      bigFraction6.MINUS_ONE.floatValue();
      bigFraction2.doubleValue();
      bigFraction0.bigDecimalValue();
      bigFraction3.getDenominatorAsLong();
      BigFraction bigFraction7 = bigFraction6.add((long) 1);
      bigFraction7.MINUS_ONE.bigDecimalValue();
      bigFraction3.bigDecimalValue();
      BigFraction bigFraction8 = bigFraction5.subtract(1L);
      bigFraction8.FOUR_FIFTHS.subtract(3769635304173888L);
      BigFraction bigFraction9 = bigFraction7.divide((-1987));
      bigFraction9.divide(bigInteger0);
      bigFraction3.subtract(bigFraction6);
      bigFraction0.subtract(6);
      BigFraction bigFraction10 = bigFraction4.divide(bigFraction3);
      org.evosuite.runtime.Random.setNextRandom(1);
      bigFraction10.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.FOUR_FIFTHS.add(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction0.divide(bigInteger1);
      // Undeclared exception!
      try { 
        bigFraction0.pow(2125570549);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)87;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.floatValue();
      bigFraction0.divide((int) (byte)34);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.bigDecimalValue();
      bigFraction0.divide(4503599627370496L);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = new BigFraction(4, 4);
      bigFraction2.equals(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.add((-221L));
      bigFraction2.TWO_QUARTERS.compareTo(bigFraction0);
      bigFraction2.THREE_QUARTERS.percentageValue();
      BigFraction bigFraction3 = new BigFraction(2467, 2467);
      bigFraction3.equals(bigFraction0);
      bigFraction3.add(bigFraction2);
      bigFraction3.pow((long) 2467);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0432705223151927);
      bigFraction0.MINUS_ONE.hashCode();
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      bigFraction0.TWO.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.TWO.pow(bigInteger0);
      bigFraction1.floatValue();
      bigFraction0.add((-1L));
      bigFraction2.divide(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftRight(2592);
      bigInteger0.signum();
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.divide((long) 2592);
      BigFraction bigFraction2 = bigFraction1.TWO.divide(1338);
      BigFraction bigFraction3 = bigFraction2.ONE_FIFTH.multiply(1117);
      bigFraction0.MINUS_ONE.add(1338);
      BigFraction bigFraction4 = BigFraction.getReducedFraction(1, 1);
      bigFraction4.floatValue();
      bigFraction2.multiply(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigFraction4.getNumeratorAsLong();
      BigFraction bigFraction5 = bigFraction4.multiply(bigInteger2);
      bigFraction4.abs();
      bigFraction1.doubleValue();
      bigFraction3.reduce();
      bigFraction3.TWO_THIRDS.abs();
      BigFraction bigFraction6 = bigFraction0.divide((-2104));
      bigFraction6.THREE_QUARTERS.doubleValue();
      BigFraction bigFraction7 = bigFraction4.add(bigInteger1);
      BigFraction bigFraction8 = bigFraction7.ONE.multiply(1);
      bigFraction8.ONE_QUARTER.bigDecimalValue();
      bigFraction5.toString();
      BigFraction bigFraction9 = bigFraction0.add(1189L);
      bigFraction3.subtract(bigFraction9);
      bigFraction6.multiply(1183);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = new BigFraction(2467, 2467);
      bigFraction2.ONE_FIFTH.getNumeratorAsLong();
      bigFraction2.equals(bigFraction0);
      try { 
        bigFraction2.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = new BigFraction(2467, 2467);
      bigFraction2.equals(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = new BigFraction((-378L));
      BigFraction bigFraction3 = bigFraction2.add(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction3.pow(bigInteger1);
      bigFraction0.toString();
      bigFraction3.getNumerator();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-7.683019590615251E-133));
      bigFraction0.hashCode();
      Object object0 = new Object();
      bigFraction0.equals(object0);
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction1.floatValue();
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((-1423.052354742905), (-7.683019590615251E-133), (-61));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -1,423.052 to fraction after -61 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.7976931348623157E308, 2655);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.subtract((-1096L));
      BigFraction bigFraction2 = bigFraction1.multiply(2949547092075080L);
      bigFraction0.floatValue();
      bigFraction2.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2228.068331224);
      bigFraction0.hashCode();
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = BigFraction.TWO_THIRDS;
      bigFraction2.add(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction2.pow(bigInteger1);
      bigFraction0.toString();
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(906.6979804864728, 2147483642);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 906.698 to fraction (5,133,371,260/5,661,611)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(926.11359243645, 2147483642);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction1.abs();
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      bigFraction1.MINUS_ONE.getDenominatorAsLong();
      bigFraction1.compareTo(bigFraction2);
      BigFraction.getReducedFraction(0, 0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(379, 52);
      bigFraction0.intValue();
      bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.ZERO.multiply(379);
      bigFraction1.TWO.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction0.reduce();
      bigFraction2.TWO_THIRDS.doubleValue();
      BigFraction bigFraction3 = bigFraction2.ONE_THIRD.subtract(0);
      Object object0 = new Object();
      bigFraction3.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction0.TWO_FIFTHS.divide(bigFraction1);
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      BigFraction bigFraction3 = BigFraction.ONE_HALF;
      int int0 = (-504);
      BigFraction bigFraction4 = null;
      try {
        bigFraction4 = new BigFraction((-504), (-1), (-504));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -504 to fraction (505/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(0.0);
      bigFraction0.add(bigFraction1);
      bigFraction1.toString();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.divide(bigInteger0);
      bigFraction1.ONE_THIRD.hashCode();
      bigFraction1.ONE_QUARTER.divide(bigInteger0);
      bigFraction0.TWO.getDenominatorAsInt();
      bigFraction1.THREE_QUARTERS.toString();
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.pow((-4394));
      bigFraction1.intValue();
      bigFraction0.TWO_THIRDS.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction0.multiply(100);
      bigFraction3.ONE_QUARTER.longValue();
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.subtract(bigInteger0);
      BigFraction bigFraction5 = bigFraction0.add(2125344641);
      bigFraction5.ONE_HALF.getNumeratorAsInt();
      bigFraction5.ONE_QUARTER.percentageValue();
      bigFraction4.ONE.getDenominatorAsInt();
      BigInteger bigInteger1 = bigFraction3.getDenominator();
      BigFraction bigFraction6 = bigFraction3.divide(100L);
      BigFraction bigFraction7 = BigFraction.getReducedFraction(1, 100);
      bigFraction6.divide(bigFraction7);
      bigFraction1.getDenominatorAsLong();
      bigFraction2.getDenominator();
      BigFraction.getReducedFraction((-4394), (-4394));
      bigFraction7.divide(1);
      bigFraction4.pow(bigInteger1);
      bigFraction6.multiply(bigFraction7);
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue(136);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.MINUS_ONE.hashCode();
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.toString();
      bigFraction0.getDenominatorAsInt();
      bigFraction0.negate();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.MINUS_ONE.hashCode();
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.multiply(bigFraction0);
      bigFraction1.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      bigFraction1.intValue();
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(3446, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.MINUS_ONE.hashCode();
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction0.add(bigFraction1);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(926.11359243645, 2147483642);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction1.abs();
      bigFraction2.negate();
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction4 = bigFraction2.add(bigFraction3);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction4.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = 9007192942313472L;
      BigFraction bigFraction0 = new BigFraction(9007192942313472L);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 76;
      BigFraction bigFraction0 = new BigFraction(76, 76);
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.add(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.pow((long) 76);
      int int1 = 2147479849;
      BigFraction bigFraction4 = bigFraction3.add(2147479849);
      BigFraction bigFraction5 = bigFraction2.multiply(bigFraction4);
      bigFraction0.compareTo(bigFraction5);
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue(1015, 2147461802);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.75);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.subtract(bigFraction0);
      bigFraction1.ONE_THIRD.percentageValue();
      BigFraction bigFraction3 = new BigFraction((-3010.0));
      bigFraction3.hashCode();
      bigFraction2.add(bigFraction3);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-7.019891063126053E-9));
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      int int0 = (-1418);
      BigFraction bigFraction3 = new BigFraction((-1418));
      BigFraction bigFraction4 = bigFraction3.divide(bigFraction0);
      BigFraction bigFraction5 = bigFraction2.add(bigFraction0);
      BigFraction bigFraction6 = bigFraction3.divide(4417);
      bigFraction5.equals(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction7 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction8 = bigFraction7.add(bigInteger0);
      BigFraction bigFraction9 = bigFraction4.multiply(bigFraction6);
      BigFraction bigFraction10 = BigFraction.TWO_THIRDS;
      bigFraction10.getDenominatorAsInt();
      BigFraction bigFraction11 = new BigFraction((double) 4417);
      BigFraction bigFraction12 = bigFraction11.subtract(3);
      bigFraction0.getDenominatorAsLong();
      bigFraction5.negate();
      bigFraction9.multiply(3);
      bigFraction4.hashCode();
      bigFraction12.add(bigInteger0);
      bigFraction5.pow(bigInteger0);
      bigFraction8.add(1069);
      bigFraction7.pow(1069);
      // Undeclared exception!
      try { 
        bigFraction2.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2069.6659282346, 1);
      BigFraction bigFraction1 = new BigFraction((long) 1, (long) 1);
      bigFraction0.TWO_THIRDS.getField();
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      bigFraction2.getDenominatorAsLong();
      bigFraction1.getNumeratorAsInt();
      bigFraction0.longValue();
      BigFraction bigFraction3 = bigFraction0.negate();
      bigFraction0.percentageValue();
      bigFraction2.floatValue();
      bigFraction0.negate();
      bigFraction1.getNumeratorAsLong();
      BigFraction bigFraction4 = bigFraction2.negate();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.divide(bigInteger0);
      bigFraction4.floatValue();
      bigFraction0.compareTo(bigFraction1);
      bigFraction0.longValue();
      bigFraction3.pow(1);
      bigFraction4.doubleValue();
      BigFraction bigFraction5 = new BigFraction(1, (-1323));
      bigFraction5.subtract((-2618));
      bigFraction3.multiply(bigInteger0);
      bigFraction0.reciprocal();
      bigFraction5.toString();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-7.019891063126053E-9));
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction1.THREE_QUARTERS.add(bigFraction0);
      BigFraction bigFraction2 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
      MockRandom mockRandom0 = new MockRandom((-318L));
      BigInteger bigInteger0 = new BigInteger(Integer.MAX_VALUE, mockRandom0);
      // Undeclared exception!
      try { 
        bigFraction3.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(629);
      bigFraction1.pow(1639L);
      int int0 = 2147483642;
      BigFraction bigFraction2 = bigFraction1.divide(2147483642);
      int int1 = 2600;
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(2600);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.subtract(49152L);
      BigFraction bigFraction2 = bigFraction0.divide((-1233));
      BigFraction bigFraction3 = bigFraction2.subtract((long) (-1233));
      bigFraction3.TWO.divide(bigFraction0);
      BigFraction bigFraction4 = bigFraction1.add(25769803776L);
      bigFraction3.intValue();
      BigFraction bigFraction5 = bigFraction4.subtract((-1233));
      bigFraction2.doubleValue();
      bigFraction2.bigDecimalValue(3493, 1);
      BigFraction bigFraction6 = bigFraction1.pow((-1233));
      BigFraction bigFraction7 = BigFraction.ONE_HALF;
      bigFraction7.pow(1232);
      bigFraction5.toString();
      bigFraction6.getDenominatorAsInt();
      BigFraction bigFraction8 = bigFraction0.negate();
      bigFraction8.subtract((-407L));
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.75);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.subtract(bigFraction0);
      bigFraction1.ONE_THIRD.percentageValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction1.pow(0L);
      BigFraction bigFraction5 = bigFraction1.FOUR_FIFTHS.add((-44));
      BigFraction bigFraction6 = bigFraction4.ZERO.multiply(bigFraction1);
      bigFraction3.ONE_THIRD.getNumeratorAsInt();
      bigFraction5.ZERO.compareTo(bigFraction3);
      BigFraction bigFraction7 = bigFraction6.TWO.reduce();
      bigFraction7.ONE_HALF.bigDecimalValue(0);
      bigFraction6.ONE_QUARTER.getDenominatorAsInt();
      bigFraction7.MINUS_ONE.equals(bigFraction5);
      bigFraction4.intValue();
      bigFraction2.bigDecimalValue(1);
      bigFraction6.pow(0L);
      BigFraction bigFraction8 = bigFraction3.divide((-4175));
      bigFraction1.bigDecimalValue(1);
      bigFraction2.subtract((-393L));
      bigFraction8.divide(3539);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.THREE_FIFTHS.getNumeratorAsInt();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.add(bigFraction1);
      MockRandom mockRandom0 = new MockRandom(3);
      bigFraction2.ONE_FIFTH.add(bigFraction0);
      BigInteger bigInteger0 = new BigInteger(3, mockRandom0);
      // Undeclared exception!
      try { 
        bigFraction2.ONE_QUARTER.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getNumeratorAsInt();
      bigFraction0.longValue();
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction1.percentageValue();
      bigFraction1.floatValue();
      BigFraction bigFraction2 = bigFraction1.negate();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction1.negate();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction4 = bigFraction0.divide(bigInteger0);
      bigFraction2.floatValue();
      bigFraction0.compareTo(bigFraction1);
      bigFraction4.longValue();
      BigFraction bigFraction5 = bigFraction4.pow(3137);
      bigFraction3.doubleValue();
      BigFraction bigFraction6 = bigFraction5.subtract(560);
      bigFraction6.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction5.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.multiply(241);
      bigFraction0.TWO_THIRDS.equals(bigFraction1);
      BigFraction bigFraction2 = bigFraction1.TWO.reduce();
      BigFraction bigFraction3 = bigFraction1.ONE_HALF.subtract((long) 241);
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.reduce();
      bigFraction4.TWO.longValue();
      bigFraction1.THREE_QUARTERS.getDenominatorAsInt();
      bigFraction0.ONE_THIRD.getNumeratorAsInt();
      BigFraction bigFraction5 = bigFraction1.ZERO.multiply((-89));
      bigFraction2.ONE_THIRD.multiply(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction4.ONE_QUARTER.subtract(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction0.ONE_QUARTER.percentageValue();
      BigFraction bigFraction6 = bigFraction2.TWO_QUARTERS.add(bigInteger1);
      bigFraction0.getNumerator();
      BigFraction bigFraction7 = bigFraction0.add((-118));
      BigFraction bigFraction8 = bigFraction1.ONE_HALF.negate();
      bigFraction7.ONE_FIFTH.toString();
      bigFraction2.longValue();
      bigFraction1.getNumeratorAsLong();
      bigFraction0.MINUS_ONE.abs();
      bigFraction4.divide((-89));
      bigFraction5.floatValue();
      bigFraction6.getDenominatorAsInt();
      bigFraction2.getDenominatorAsInt();
      bigFraction2.multiply((-241L));
      bigFraction8.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4130L);
      bigFraction0.TWO_FIFTHS.intValue();
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-1), (-1));
      bigFraction0.THREE_FIFTHS.add(bigFraction1);
      bigFraction1.longValue();
      bigFraction1.TWO.equals(bigFraction0);
      bigFraction0.TWO_THIRDS.getDenominatorAsInt();
      bigFraction0.toString();
      bigFraction0.getNumeratorAsInt();
      bigFraction0.toString();
      BigFraction bigFraction2 = bigFraction0.negate();
      BigFraction bigFraction3 = bigFraction2.reduce();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.ZERO.subtract(bigInteger0);
      bigFraction3.pow((double) 1L);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(804);
      bigFraction0.getDenominatorAsLong();
      bigFraction0.getDenominator();
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 1123);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.ZERO.add(bigInteger0);
      bigFraction1.getNumeratorAsInt();
      bigFraction0.TWO_FIFTHS.pow(1.7976931348623157E308);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      long long0 = 3061L;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.subtract(3061L);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.reciprocal();
      BigFraction bigFraction3 = bigFraction0.divide((-1L));
      BigFraction bigFraction4 = bigFraction3.ONE_THIRD.add(bigFraction2);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction5 = bigFraction4.TWO.pow(bigInteger0);
      bigFraction5.TWO_THIRDS.subtract(108);
      bigFraction0.ONE_FIFTH.multiply(bigFraction1);
      bigFraction3.longValue();
      bigFraction3.bigDecimalValue(0);
      bigFraction3.getField();
      BigFraction bigFraction6 = bigFraction0.multiply(0);
      BigFraction bigFraction7 = bigFraction1.pow((-1L));
      bigFraction7.MINUS_ONE.add(bigInteger0);
      BigFraction bigFraction8 = bigFraction7.TWO.multiply(bigInteger0);
      bigFraction8.TWO_THIRDS.abs();
      bigFraction2.floatValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction3.ONE_QUARTER.negate();
      bigFraction4.subtract(bigInteger1);
      bigFraction6.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction3.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction0.add(bigFraction1);
      bigFraction1.getNumerator();
      bigFraction0.compareTo(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L, 1029L);
      int int0 = (-468);
      bigFraction0.MINUS_ONE.add((-468));
      int int1 = 0;
      bigFraction0.TWO.intValue();
      BigFraction bigFraction1 = bigFraction0.multiply(0);
      // Undeclared exception!
      try { 
        bigFraction1.FOUR_FIFTHS.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      long long0 = 0L;
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2069.6659282346, 1);
      BigFraction bigFraction1 = new BigFraction((long) 1, (long) 1);
      bigFraction0.TWO_THIRDS.getField();
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.divide(bigFraction1);
      BigFraction bigFraction4 = bigFraction2.ONE_THIRD.add(bigFraction1);
      bigFraction2.FOUR_FIFTHS.divide(1);
      bigFraction4.FOUR_FIFTHS.equals(bigFraction2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction4.TWO_THIRDS.add(bigInteger0);
      bigFraction1.MINUS_ONE.multiply(bigFraction2);
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction5 = bigFraction1.subtract(1);
      bigFraction5.ONE_FIFTH.getDenominatorAsLong();
      bigFraction5.TWO_QUARTERS.negate();
      BigFraction bigFraction6 = bigFraction5.multiply(1);
      bigFraction6.THREE_FIFTHS.hashCode();
      BigFraction bigFraction7 = bigFraction6.ZERO.add(bigInteger0);
      BigFraction bigFraction8 = bigFraction7.pow(bigInteger0);
      bigFraction8.ONE_THIRD.add((-1));
      BigFraction bigFraction9 = bigFraction3.pow(2717);
      // Undeclared exception!
      try { 
        bigFraction9.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2607L);
      BigFraction bigFraction1 = null;
      int int0 = (-3971);
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.bigDecimalValue((-3971), 1690);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)18;
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction1.ZERO.subtract(bigInteger0);
      bigFraction2.MINUS_ONE.percentageValue();
      bigFraction2.ONE.doubleValue();
      BigFraction bigFraction3 = bigFraction0.ONE_HALF.divide(bigFraction1);
      BigFraction bigFraction4 = bigFraction3.ONE_QUARTER.subtract((-964L));
      BigFraction bigFraction5 = bigFraction4.THREE_QUARTERS.pow(bigInteger0);
      BigFraction bigFraction6 = BigFraction.ONE_QUARTER;
      bigFraction4.TWO_QUARTERS.floatValue();
      BigFraction bigFraction7 = bigFraction0.divide(bigFraction6);
      BigFraction bigFraction8 = bigFraction6.ONE_FIFTH.add(bigInteger0);
      bigFraction1.ONE_HALF.doubleValue();
      BigFraction bigFraction9 = bigFraction1.reduce();
      bigFraction3.ONE_FIFTH.reciprocal();
      bigFraction3.longValue();
      bigFraction5.ONE_FIFTH.longValue();
      BigFraction bigFraction10 = bigFraction1.ONE_THIRD.multiply((-542));
      BigFraction bigFraction11 = bigFraction10.FOUR_FIFTHS.subtract(1006);
      bigFraction11.THREE_FIFTHS.add(bigFraction9);
      bigFraction11.ONE.abs();
      BigFraction bigFraction12 = bigFraction7.ONE_THIRD.divide(bigFraction5);
      bigFraction12.ONE_FIFTH.pow(2L);
      BigFraction bigFraction13 = bigFraction8.MINUS_ONE.pow(0);
      bigFraction7.percentageValue();
      bigFraction0.compareTo(bigFraction8);
      bigFraction9.subtract(418);
      bigFraction7.getNumeratorAsInt();
      bigFraction13.subtract(bigInteger0);
      BigFraction bigFraction14 = bigFraction1.subtract((-1));
      bigFraction14.ONE.add(bigInteger0);
      bigFraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1.0, 17);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3738.621116, 3738.621116, (-504));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit(132);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.multiply(1756L);
      bigFraction2.THREE_QUARTERS.subtract(1756L);
      bigFraction1.THREE_QUARTERS.getField();
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger0);
      bigFraction3.THREE_QUARTERS.floatValue();
      bigFraction3.toString();
      bigFraction3.MINUS_ONE.hashCode();
      bigFraction3.TWO_THIRDS.bigDecimalValue(0);
      // Undeclared exception!
      try { 
        bigFraction3.ONE.bigDecimalValue(59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction1.TWO.subtract(bigFraction0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction2.ONE_THIRD.add(bigInteger0);
      BigFraction.getReducedFraction(1140, 1269);
      bigFraction1.ZERO.pow((double) 1269);
      BigFraction bigFraction3 = bigFraction0.ONE.divide(bigFraction1);
      bigFraction3.ONE_QUARTER.floatValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction0.THREE_FIFTHS.divide(bigInteger1);
      bigFraction4.ONE_QUARTER.add(bigFraction0);
      BigFraction bigFraction5 = bigFraction0.ONE_HALF.add(bigFraction1);
      bigFraction0.getNumeratorAsInt();
      bigFraction5.ONE_FIFTH.bigDecimalValue();
      bigFraction1.ONE_QUARTER.floatValue();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(2700, 2700);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.multiply(bigFraction0);
      bigFraction2.TWO_THIRDS.toString();
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.multiply(bigInteger0);
      bigFraction3.FOUR_FIFTHS.getField();
      BigFraction bigFraction4 = bigFraction0.subtract(bigFraction1);
      bigFraction4.ONE_HALF.multiply(5);
      BigFraction bigFraction5 = bigFraction0.multiply(bigFraction1);
      bigFraction4.ONE.longValue();
      bigFraction0.THREE_FIFTHS.floatValue();
      BigFraction bigFraction6 = BigFraction.ONE_THIRD;
      bigFraction0.equals(bigFraction6);
      BigFraction bigFraction7 = BigFraction.ONE;
      BigFraction bigFraction8 = bigFraction6.multiply(bigFraction7);
      BigFraction bigFraction9 = bigFraction8.abs();
      BigFraction bigFraction10 = BigFraction.ONE_THIRD;
      BigFraction bigFraction11 = bigFraction1.add(bigFraction10);
      BigFraction bigFraction12 = BigFraction.ONE;
      bigFraction11.ONE_HALF.subtract(bigFraction5);
      bigFraction11.TWO_FIFTHS.equals(bigFraction12);
      bigFraction11.toString();
      BigFraction bigFraction13 = bigFraction0.divide((-532));
      BigFraction bigFraction14 = bigFraction13.TWO.pow(5);
      bigFraction14.percentageValue();
      BigFraction bigFraction15 = bigFraction9.add(bigInteger0);
      BigFraction bigFraction16 = bigFraction1.multiply(bigInteger0);
      bigFraction15.TWO_QUARTERS.toString();
      bigFraction16.reduce();
      bigFraction9.percentageValue();
      bigFraction14.add((-532));
      bigFraction1.getNumeratorAsLong();
      bigFraction15.getDenominator();
      // Undeclared exception!
      try { 
        bigFraction14.bigDecimalValue((-4243));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.multiply(9218868437227405312L);
      BigFraction.getReducedFraction((-3368), (-2640));
      bigFraction0.doubleValue();
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.multiply(2609);
      bigFraction3.reciprocal();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.divide(bigInteger0);
      BigFraction bigFraction4 = BigFraction.ONE_FIFTH;
      bigFraction2.divide(bigFraction4);
      bigFraction3.subtract(2046L);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.bigDecimalValue(3);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.pow(0.0);
      bigFraction0.TWO_FIFTHS.bigDecimalValue();
      bigFraction0.floatValue();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(379, 52);
      bigFraction1.THREE_QUARTERS.equals(bigFraction0);
      bigFraction1.intValue();
      BigFraction bigFraction2 = bigFraction0.pow(0L);
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.pow(2496L);
      bigFraction3.TWO.equals(bigFraction1);
      bigFraction2.ONE_HALF.getField();
      bigFraction2.multiply(bigFraction1);
      bigFraction1.getNumerator();
      BigFraction bigFraction4 = bigFraction1.ZERO.multiply(379);
      bigFraction4.TWO.getDenominatorAsLong();
      bigFraction0.getField();
      BigFraction bigFraction5 = bigFraction1.reduce();
      bigFraction5.TWO_THIRDS.doubleValue();
      bigFraction5.ONE_THIRD.subtract(0);
      Object object0 = new Object();
      bigFraction5.TWO_QUARTERS.equals(object0);
      bigFraction4.subtract(0L);
      bigFraction0.subtract(7);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.MINUS_ONE.doubleValue();
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(195, 195);
      bigFraction0.MINUS_ONE.longValue();
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction1 = new BigFraction((-213), 1075);
      bigFraction0.ONE_HALF.add((-213));
      BigFraction bigFraction2 = bigFraction0.TWO.divide(bigFraction1);
      bigFraction2.TWO.reciprocal();
      bigFraction2.toString();
      bigFraction0.ONE.divide(bigFraction1);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(Integer.MAX_VALUE, 1060, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Prime search implementation restriction on bitLength
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(100L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2);
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.FOUR_FIFTHS.divide(2);
      bigFraction0.getField();
      BigFraction bigFraction4 = bigFraction2.divide(2);
      BigFraction bigFraction5 = bigFraction4.MINUS_ONE.reciprocal();
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertEquals((byte) (-1), bigFraction5.byteValue());
      
      BigFraction bigFraction6 = bigFraction2.multiply((long) 2);
      assertEquals((byte)1, bigFraction6.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction5));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(629);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals((short) (-628), bigFraction2.shortValue());
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.75);
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.subtract(bigFraction0);
      bigFraction1.ONE_THIRD.percentageValue();
      bigFraction0.ONE_HALF.add(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.multiply(bigInteger0);
      long long0 = 0L;
      BigFraction bigFraction4 = bigFraction1.pow(0L);
      BigFraction bigFraction5 = bigFraction1.FOUR_FIFTHS.add((-44));
      bigFraction4.ZERO.multiply(bigFraction1);
      bigFraction5.ZERO.compareTo(bigFraction3);
      // Undeclared exception!
      try { 
        bigFraction2.ZERO.bigDecimalValue((-44), 286);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction0.getDenominatorAsInt();
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction2.TWO_QUARTERS.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-7.019891063126053E-9));
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals((-4243263778547537L), long0);
      
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.add(bigFraction0);
      bigFraction1.ONE_FIFTH.getDenominatorAsLong();
      bigFraction0.ONE_QUARTER.getNumeratorAsInt();
      bigFraction2.ONE_HALF.longValue();
      bigFraction2.TWO_THIRDS.negate();
      bigFraction1.percentageValue();
      bigFraction0.floatValue();
      BigFraction bigFraction3 = bigFraction2.negate();
      bigFraction2.ONE_THIRD.getNumeratorAsLong();
      bigFraction3.FOUR_FIFTHS.negate();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.TWO.divide(bigInteger0);
      float float0 = bigFraction1.floatValue();
      assertEquals((-1.42452352E8F), float0, 0.01F);
      
      int int0 = bigFraction3.compareTo(bigFraction2);
      assertEquals((-1), int0);
      
      bigFraction0.longValue();
      BigFraction bigFraction4 = bigFraction3.pow(1);
      double double0 = bigFraction4.TWO_QUARTERS.doubleValue();
      assertEquals(0.5, double0, 0.01);
      
      BigFraction bigFraction5 = bigFraction3.subtract(560);
      assertEquals((byte) (-48), bigFraction5.byteValue());
      
      BigFraction bigFraction6 = bigFraction4.multiply(bigInteger0);
      bigFraction6.MINUS_ONE.reciprocal();
      String string0 = bigFraction3.toString();
      assertEquals("-453347178112222161967279 / 604462909807314587353088", string0);
      assertTrue(bigFraction3.equals((Object)bigFraction4));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 720;
      BigFraction bigFraction0 = new BigFraction(720, 720);
      BigFraction bigFraction1 = bigFraction0.ZERO.divide(720);
      bigFraction0.ONE_QUARTER.divide((long) 720);
      bigFraction1.ZERO.divide(1);
      bigFraction0.THREE_FIFTHS.toString();
      BigFraction bigFraction2 = bigFraction0.add(636L);
      // Undeclared exception!
      try { 
        bigFraction2.ONE_FIFTH.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.THREE_FIFTHS.getNumeratorAsInt();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.add(bigFraction1);
      MockRandom mockRandom0 = new MockRandom(3);
      BigInteger bigInteger0 = new BigInteger(3, mockRandom0);
      // Undeclared exception!
      try { 
        bigFraction2.ONE_QUARTER.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      int int0 = (-1076);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.abs();
      bigFraction0.THREE_FIFTHS.reciprocal();
      bigFraction1.getField();
      bigFraction0.THREE_FIFTHS.hashCode();
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.bigDecimalValue((-1076), (-1076));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.getNumeratorAsInt();
      bigFraction0.ONE_QUARTER.reciprocal();
      bigFraction0.bigDecimalValue(2);
      BigFraction bigFraction1 = bigFraction0.divide((-395));
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      BigFraction bigFraction3 = BigFraction.getReducedFraction((-1607), 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)117;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction4 = bigFraction2.add(bigInteger0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)117, bigFraction4.byteValue());
      
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-1), (-1));
      assertEquals((short)1, bigFraction5.shortValue());
      assertFalse(bigFraction5.equals((Object)bigFraction3));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.reduce();
      long long0 = 607L;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.divide(607L);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.multiply(0L);
      bigFraction0.intValue();
      bigFraction0.ONE_QUARTER.pow((-1));
      bigFraction0.floatValue();
      BigFraction bigFraction2 = bigFraction1.multiply(1);
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigFraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }
}
