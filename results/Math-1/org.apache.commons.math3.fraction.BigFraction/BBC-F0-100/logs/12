* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: org.apache.commons.math3.fraction.BigFraction
* Starting Client-0
* Connecting to master process on port 21819
* Analyzing classpath: 
  - subjects/buggy-versions/Math-1/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math3.fraction.BigFraction
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1792
* Using seed 1926174691
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 621 / 1792
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.<init>(D)V: I60 Branch 7 IFEQ L185 - true: 216,0,0| Number of FF evals: 1295
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.<init>(D)V: I114 Branch 11 IFGE L198 - true: 7,0,0| Number of FF evals: 1330
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.doubleValue()D: I14 Branch 31 IFEQ L685 - false: 3162,2840,0| Number of FF evals: 5933
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.<init>(DDII)V: I130 Branch 14 IFGT L303 - true: 35,0,0| Number of FF evals: 805
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.multiply(Lorg/apache/commons/math3/fraction/BigFraction;)Lorg/apache/commons/math3/fraction/BigFraction;: I24 Branch 40 IFEQ L915 - false: 28,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.<init>(D)V: I94 Branch 9 IFEQ L193 - true: 81,0,0| Number of FF evals: 1428
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.equals(Ljava/lang/Object;)Z: I37 Branch 34 IFEQ L720 - false: 101,0,0| Number of FF evals: 324
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.divide(Lorg/apache/commons/math3/fraction/BigFraction;)Lorg/apache/commons/math3/fraction/BigFraction;: I19 Branch 30 IFEQ L666 - false: 73,0,0| Number of FF evals: 260
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.<init>(DDII)V: I23 Branch 12 IFLE L275 - false: 39,0,0| Number of FF evals: 808
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.<init>(D)V: I22 Branch 6 IFEQ L176 - false: 9502,8764,3334| Number of FF evals: 9442
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.equals(Ljava/lang/Object;)Z: I43 Branch 35 IFEQ L720 - true: 300,0,0| Number of FF evals: 926
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.floatValue()F: I15 Branch 36 IFEQ L738 - false: 2509,2108,0| Number of FF evals: 5930
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.<init>(DDII)V: I206 Branch 20 IF_ICMPLT L324 - false: 126,0,0| Number of FF evals: 983
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.<init>(DDII)V: I163 Branch 17 IFLE L310 - true: 28,0,0| Number of FF evals: 387
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.subtract(Ljava/math/BigInteger;)Lorg/apache/commons/math3/fraction/BigFraction;: I3 Branch 44 IFNONNULL L1054 - false: 17,0,0| Number of FF evals: 116
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.<init>(DDII)V: I221 Branch 21 IFGE L328 - false: 23,0,0| Number of FF evals: 488
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.divide(Ljava/math/BigInteger;)Lorg/apache/commons/math3/fraction/BigFraction;: I3 Branch 27 IFNONNULL L614 - false: 377,0,0| Number of FF evals: 640
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.getReducedFraction(II)Lorg/apache/commons/math3/fraction/BigFraction;: I3 Branch 22 IFNE L435 - false: 313,0,0| Number of FF evals: 1089
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.<init>(D)V: I8 Branch 5 IFEQ L173 - false: 9502,8764,3347| Number of FF evals: 9442
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.multiply(Lorg/apache/commons/math3/fraction/BigFraction;)Lorg/apache/commons/math3/fraction/BigFraction;: I3 Branch 38 IFNONNULL L912 - false: 528,0,0| Number of FF evals: 968
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.toString()Ljava/lang/String;: I24 Branch 49 IFEQ L1131 - false: 581,201,0| Number of FF evals: 1703
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.<init>(DDII)V: I156 Branch 16 IF_ICMPGE L310 - true: 123,0,0| Number of FF evals: 983
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.multiply(Ljava/math/BigInteger;)Lorg/apache/commons/math3/fraction/BigFraction;: I3 Branch 37 IFNONNULL L867 - false: 53,0,0| Number of FF evals: 132
Number of times BBC is called, activated, and useful for org.apache.commons.math3.fraction.BigFraction.equals(Ljava/lang/Object;)Z: I43 Branch 35 IFEQ L720 - false: 101,0,0| Number of FF evals: 322
* Search finished after 608s and 184 generations, 51019 statements, best individual has fitness: 87.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 00:48:28.096 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 99%
* Total number of goals: 214
* Number of covered goals: 212
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 98%
* Total number of goals: 133
* Number of covered goals: 131
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 99%
* Total number of goals: 963
* Number of covered goals: 950
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 85%
* Total number of goals: 243
* Number of covered goals: 207
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 53
* Number of covered goals: 53
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 53
* Number of covered goals: 53
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 98%
* Total number of goals: 133
* Number of covered goals: 131
* Generated 112 tests with total length 1385
* Resulting test suite's coverage: 92% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 00:49:10.686 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7054166666666667% of time used, but only 18/112 tests minimized), falling back to using all assertions
[MASTER] 00:49:39.935 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 29%
* Compiling and checking tests
[MASTER] 00:49:40.040 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 11 seconds more than allowed.
[MASTER] 00:49:44.408 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_50_1628297384376/org/apache/commons/math3/fraction/BigFraction_50_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_50_1628297384376/org/apache/commons/math3/fraction/BigFraction_50_tmp__ESTest_scaffolding.java]]
[MASTER] 00:49:44.408 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Math-1/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Math-1/target/classes
[MASTER] 00:49:44.408 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Math-1/target/classes
[MASTER] 00:49:44.411 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   variable bigFraction3
  location: class org.apache.commons.math3.fraction.BigFraction_50_tmp__ESTest: 58
[MASTER] 00:49:44.412 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_50_1628297384376/org/apache/commons/math3/fraction/BigFraction_50_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Sat Aug 07 00:49:44 GMT 2021
4:  */
5: 
6: package org.apache.commons.math3.fraction;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.math.BigInteger;
11: import org.apache.commons.math3.fraction.BigFraction;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class BigFraction_50_tmp__ESTest extends BigFraction_50_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       BigFraction bigFraction0 = BigFraction.MINUS_ONE;
22:       assertNotNull(bigFraction0);
23:       assertEquals((short) (-1), bigFraction0.shortValue());
24:       assertEquals((byte) (-1), bigFraction0.byteValue());
25:       
26:       int int0 = bigFraction0.getDenominatorAsInt();
27:       assertEquals(1, int0);
28:       assertEquals((short) (-1), bigFraction0.shortValue());
29:       assertEquals((byte) (-1), bigFraction0.byteValue());
30:       
31:       BigInteger bigInteger0 = BigInteger.ZERO;
32:       assertNotNull(bigInteger0);
33:       assertEquals((short)0, bigInteger0.shortValue());
34:       assertEquals((byte)0, bigInteger0.byteValue());
35:       
36:       BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.add(bigInteger0);
37:       assertNotNull(bigFraction1);
38:       assertEquals((short) (-1), bigFraction0.shortValue());
39:       assertEquals((byte) (-1), bigFraction0.byteValue());
40:       assertEquals((short)0, bigInteger0.shortValue());
41:       assertEquals((byte)0, bigInteger0.byteValue());
42:       assertEquals((short)0, bigFraction1.shortValue());
43:       assertEquals((byte)0, bigFraction1.byteValue());
44:       assertNotSame(bigFraction0, bigFraction1);
45:       assertNotSame(bigFraction1, bigFraction0);
46:       assertFalse(bigFraction1.equals((Object)bigFraction0));
47:       
48:       BigFraction bigFraction2 = BigFraction.getReducedFraction(1, (-1627));
49:       assertNotNull(bigFraction2);
50:       assertEquals((byte)0, bigFraction2.byteValue());
51:       assertEquals((short)0, bigFraction2.shortValue());
52:       assertNotSame(bigFraction2, bigFraction0);
53:       assertNotSame(bigFraction2, bigFraction1);
54:       assertFalse(bigFraction2.equals((Object)bigFraction0));
55:       assertFalse(bigFraction2.equals((Object)bigFraction1));
56:       
57:       int int1 = bigFraction0.intValue();
58:       assertNotNull(bigFraction3);
59:       assertEquals((-1), int1);
60:       assertEquals((short) (-1), bigFraction0.shortValue());
61:       assertEquals((byte) (-1), bigFraction0.byteValue());
62:       assertNotSame(bigFraction0, bigFraction1);
63:       assertNotSame(bigFraction0, bigFraction2);
64:       assertFalse(bigFraction0.equals((Object)bigFraction1));
65:       assertFalse(bigFraction0.equals((Object)bigFraction2));
66:       assertFalse(int1 == int0);
67:       
68:       BigFraction bigFraction4 = bigFraction0.subtract((-1));
69:       assertNotNull(bigFraction4);
70:       assertEquals((short) (-1), bigFraction0.shortValue());
71:       assertEquals((byte) (-1), bigFraction0.byteValue());
72:       assertEquals((byte)0, bigFraction4.byteValue());
73:       assertEquals((short)0, bigFraction4.shortValue());
74:       assertNotSame(bigFraction0, bigFraction1);
75:       assertNotSame(bigFraction0, bigFraction2);
76:       assertNotSame(bigFraction0, bigFraction4);
77:       assertNotSame(bigFraction4, bigFraction0);
78:       assertNotSame(bigFraction4, bigFraction2);
79:       assertNotSame(bigFraction4, bigFraction1);
80:       assertFalse(bigFraction0.equals((Object)bigFraction1));
81:       assertFalse(bigFraction0.equals((Object)bigFraction2));
82:       assertFalse(bigFraction4.equals((Object)bigFraction0));
83:       assertFalse(bigFraction4.equals((Object)bigFraction2));
84:       assertFalse(bigFraction4.equals((Object)bigFraction1));
85:       
86:       int int2 = bigFraction4.intValue();
87:       assertEquals(0, int2);
88:       assertEquals((short) (-1), bigFraction0.shortValue());
89:       assertEquals((byte) (-1), bigFraction0.byteValue());
90:       assertEquals((byte)0, bigFraction4.byteValue());
91:       assertEquals((short)0, bigFraction4.shortValue());
92:       assertNotSame(bigFraction0, bigFraction1);
93:       assertNotSame(bigFraction0, bigFraction2);
94:       assertNotSame(bigFraction0, bigFraction4);
95:       assertNotSame(bigFraction4, bigFraction0);
96:       assertNotSame(bigFraction4, bigFraction2);
97:       assertNotSame(bigFraction4, bigFraction1);
98:       assertFalse(bigFraction0.equals((Object)bigFraction1));
99:       assertFalse(bigFraction0.equals((Object)bigFraction2));
100:       assertFalse(bigFraction0.equals((Object)bigFraction4));
101:       assertFalse(bigFraction4.equals((Object)bigFraction0));
102:       assertFalse(bigFraction4.equals((Object)bigFraction2));
103:       assertFalse(bigFraction4.equals((Object)bigFraction1));
104:       assertFalse(int2 == int1);
105:       assertFalse(int2 == int0);
106:       
107:       BigFraction bigFraction5 = bigFraction1.add((-1470L));
108:       assertNotNull(bigFraction5);
109:       assertEquals((short) (-1), bigFraction0.shortValue());
110:       assertEquals((byte) (-1), bigFraction0.byteValue());
111:       assertEquals((short)0, bigInteger0.shortValue());
112:       assertEquals((byte)0, bigInteger0.byteValue());
113:       assertEquals((short)0, bigFraction1.shortValue());
114:       assertEquals((byte)0, bigFraction1.byteValue());
115:       assertEquals((short) (-1469), bigFraction5.shortValue());
116:       assertEquals((byte)67, bigFraction5.byteValue());
117:       assertNotSame(bigFraction0, bigFraction5);
118:       assertNotSame(bigFraction0, bigFraction1);
119:       assertNotSame(bigFraction0, bigFraction2);
120:       assertNotSame(bigFraction0, bigFraction4);
121:       assertNotSame(bigFraction1, bigFraction5);
122:       assertNotSame(bigFraction1, bigFraction4);
123:       assertNotSame(bigFraction1, bigFraction2);
124:       assertNotSame(bigFraction1, bigFraction0);
125:       assertNotSame(bigFraction5, bigFraction1);
126:       assertNotSame(bigFraction5, bigFraction2);
127:       assertNotSame(bigFraction5, bigFraction0);
128:       assertNotSame(bigFraction5, bigFraction4);
129:       assertFalse(bigFraction0.equals((Object)bigFraction1));
130:       assertFalse(bigFraction0.equals((Object)bigFraction2));
131:       assertFalse(bigFraction0.equals((Object)bigFraction4));
132:       assertFalse(bigFraction1.equals((Object)bigFraction4));
133:       assertFalse(bigFraction1.equals((Object)bigFraction2));
134:       assertFalse(bigFraction1.equals((Object)bigFraction0));
135:       assertFalse(bigFraction5.equals((Object)bigFraction1));
136:       assertFalse(bigFraction5.equals((Object)bigFraction2));
137:       assertFalse(bigFraction5.equals((Object)bigFraction0));
138:       assertFalse(bigFraction5.equals((Object)bigFraction4));
139:       
140:       BigFraction bigFraction6 = BigFraction.ONE_FIFTH;
141:       assertNotNull(bigFraction6);
142:       assertEquals((byte)0, bigFraction6.byteValue());
143:       assertEquals((short)0, bigFraction6.shortValue());
144:       assertNotSame(bigFraction6, bigFraction0);
145:       assertNotSame(bigFraction6, bigFraction2);
146:       assertNotSame(bigFraction6, bigFraction1);
147:       assertNotSame(bigFraction6, bigFraction4);
148:       assertNotSame(bigFraction6, bigFraction5);
149:       assertFalse(bigFraction6.equals((Object)bigFraction0));
150:       assertFalse(bigFraction6.equals((Object)bigFraction2));
151:       assertFalse(bigFraction6.equals((Object)bigFraction1));
152:       assertFalse(bigFraction6.equals((Object)bigFraction4));
153:       assertFalse(bigFraction6.equals((Object)bigFraction5));
154:       
155:       BigFraction bigFraction7 = bigFraction6.divide(bigFraction2);
156:       assertNotNull(bigFraction7);
157:       assertEquals((byte)0, bigFraction2.byteValue());
158:       assertEquals((short)0, bigFraction2.shortValue());
159:       assertEquals((byte)0, bigFraction6.byteValue());
160:       assertEquals((short)0, bigFraction6.shortValue());
161:       assertEquals((short) (-325), bigFraction7.shortValue());
162:       assertEquals((byte) (-69), bigFraction7.byteValue());
163:       assertNotSame(bigFraction2, bigFraction0);
164:       assertNotSame(bigFraction2, bigFraction5);
165:       assertNotSame(bigFraction2, bigFraction4);
166:       assertNotSame(bigFraction2, bigFraction7);
167:       assertNotSame(bigFraction2, bigFraction6);
168:       assertNotSame(bigFraction2, bigFraction1);
169:       assertNotSame(bigFraction6, bigFraction7);
170:       assertNotSame(bigFraction6, bigFraction0);
171:       assertNotSame(bigFraction6, bigFraction2);
172:       assertNotSame(bigFraction6, bigFraction1);
173:       assertNotSame(bigFraction6, bigFraction4);
174:       assertNotSame(bigFraction6, bigFraction5);
175:       assertNotSame(bigFraction7, bigFraction5);
176:       assertNotSame(bigFraction7, bigFraction6);
177:       assertNotSame(bigFraction7, bigFraction4);
178:       assertNotSame(bigFraction7, bigFraction0);
179:       assertNotSame(bigFraction7, bigFraction2);
180:       assertNotSame(bigFraction7, bigFraction1);
181:       assertFalse(bigFraction2.equals((Object)bigFraction0));
182:       assertFalse(bigFraction2.equals((Object)bigFraction5));
183:       assertFalse(bigFraction2.equals((Object)bigFraction4));
184:       assertFalse(bigFraction2.equals((Object)bigFraction6));
185:       assertFalse(bigFraction2.equals((Object)bigFraction1));
186:       assertFalse(bigFraction6.equals((Object)bigFraction0));
187:       assertFalse(bigFraction6.equals((Object)bigFraction2));
188:       assertFalse(bigFraction6.equals((Object)bigFraction1));
189:       assertFalse(bigFraction6.equals((Object)bigFraction4));
190:       assertFalse(bigFraction6.equals((Object)bigFraction5));
191:       assertFalse(bigFraction7.equals((Object)bigFraction5));
192:       assertFalse(bigFraction7.equals((Object)bigFraction6));
193:       assertFalse(bigFraction7.equals((Object)bigFraction4));
194:       assertFalse(bigFraction7.equals((Object)bigFraction0));
195:       assertFalse(bigFraction7.equals((Object)bigFraction2));
196:       assertFalse(bigFraction7.equals((Object)bigFraction1));
197:   }
198: }
RegularFileObject[/tmp/EvoSuite_50_1628297384376/org/apache/commons/math3/fraction/BigFraction_50_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Sat Aug 07 00:49:44 GMT 2021
5:  */
6: 
7: package org.apache.commons.math3.fraction;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class BigFraction_50_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.math3.fraction.BigFraction"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(BigFraction_50_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "org.apache.commons.math3.fraction.BigFractionField",
70:       "org.apache.commons.math3.exception.util.ExceptionContextProvider",
71:       "org.apache.commons.math3.fraction.BigFraction",
72:       "org.apache.commons.math3.exception.util.ArgUtils",
73:       "org.apache.commons.math3.exception.MathArithmeticException",
74:       "org.apache.commons.math3.exception.NumberIsTooSmallException",
75:       "org.apache.commons.math3.util.FastMath$ExpIntTable",
76:       "org.apache.commons.math3.util.FastMath$lnMant",
77:       "org.apache.commons.math3.exception.NotPositiveException",
78:       "org.apache.commons.math3.exception.MathIllegalStateException",
79:       "org.apache.commons.math3.util.FastMath$ExpFracTable",
80:       "org.apache.commons.math3.exception.MathIllegalArgumentException",
81:       "org.apache.commons.math3.util.MathUtils",
82:       "org.apache.commons.math3.exception.MathIllegalNumberException",
83:       "org.apache.commons.math3.exception.util.LocalizedFormats",
84:       "org.apache.commons.math3.exception.ZeroException",
85:       "org.apache.commons.math3.exception.ConvergenceException",
86:       "org.apache.commons.math3.util.FastMath",
87:       "org.apache.commons.math3.FieldElement",
88:       "org.apache.commons.math3.exception.util.Localizable",
89:       "org.apache.commons.math3.fraction.FractionConversionException",
90:       "org.apache.commons.math3.exception.util.ExceptionContext",
91:       "org.apache.commons.math3.util.ArithmeticUtils",
92:       "org.apache.commons.math3.exception.NullArgumentException",
93:       "org.apache.commons.math3.Field",
94:       "org.apache.commons.math3.exception.NotFiniteNumberException",
95:       "org.apache.commons.math3.util.FastMathLiteralArrays",
96:       "org.apache.commons.math3.fraction.BigFractionField$LazyHolder"
97:     );
98:   } 
99: 
100:   private static void resetClasses() {
101:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(BigFraction_50_tmp__ESTest_scaffolding.class.getClassLoader()); 
102: 
103:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
104:       "org.apache.commons.math3.exception.util.LocalizedFormats",
105:       "org.apache.commons.math3.util.MathUtils",
106:       "org.apache.commons.math3.fraction.BigFraction",
107:       "org.apache.commons.math3.util.FastMath",
108:       "org.apache.commons.math3.util.FastMathLiteralArrays",
109:       "org.apache.commons.math3.util.FastMath$lnMant",
110:       "org.apache.commons.math3.util.FastMath$ExpIntTable",
111:       "org.apache.commons.math3.util.FastMath$ExpFracTable",
112:       "org.apache.commons.math3.fraction.BigFractionField",
113:       "org.apache.commons.math3.fraction.BigFractionField$LazyHolder",
114:       "org.apache.commons.math3.exception.MathArithmeticException",
115:       "org.apache.commons.math3.exception.util.ExceptionContext",
116:       "org.apache.commons.math3.exception.util.ArgUtils",
117:       "org.apache.commons.math3.exception.MathIllegalArgumentException",
118:       "org.apache.commons.math3.exception.NullArgumentException",
119:       "org.apache.commons.math3.exception.MathIllegalStateException",
120:       "org.apache.commons.math3.exception.ConvergenceException",
121:       "org.apache.commons.math3.fraction.FractionConversionException",
122:       "org.apache.commons.math3.util.ArithmeticUtils",
123:       "org.apache.commons.math3.exception.MathIllegalNumberException",
124:       "org.apache.commons.math3.exception.ZeroException",
125:       "org.apache.commons.math3.exception.NumberIsTooSmallException",
126:       "org.apache.commons.math3.exception.NotPositiveException"
127:     );
128:   }
129: }

[MASTER] 00:49:44.413 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
BigFraction bigFraction0 = BigFraction.MINUS_ONE;
assertNotNull(bigFraction0);
assertEquals((short) (-1), bigFraction0.shortValue());
assertEquals((byte) (-1), bigFraction0.byteValue());

int int0 = bigFraction0.getDenominatorAsInt();
assertEquals(1, int0);
assertEquals((short) (-1), bigFraction0.shortValue());
assertEquals((byte) (-1), bigFraction0.byteValue());

BigInteger bigInteger0 = BigInteger.ZERO;
assertNotNull(bigInteger0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());

BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.add(bigInteger0);
assertNotNull(bigFraction1);
assertEquals((short) (-1), bigFraction0.shortValue());
assertEquals((byte) (-1), bigFraction0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigFraction1.shortValue());
assertEquals((byte)0, bigFraction1.byteValue());
assertNotSame(bigFraction0, bigFraction1);
assertNotSame(bigFraction1, bigFraction0);
assertFalse(bigFraction1.equals((Object)bigFraction0));

BigFraction bigFraction2 = BigFraction.getReducedFraction(1, (-1627));
assertNotNull(bigFraction2);
assertEquals((byte)0, bigFraction2.byteValue());
assertEquals((short)0, bigFraction2.shortValue());
assertNotSame(bigFraction2, bigFraction0);
assertNotSame(bigFraction2, bigFraction1);
assertFalse(bigFraction2.equals((Object)bigFraction0));
assertFalse(bigFraction2.equals((Object)bigFraction1));

int int1 = bigFraction0.intValue();
assertNotNull(bigFraction3);
assertEquals((-1), int1);
assertEquals((short) (-1), bigFraction0.shortValue());
assertEquals((byte) (-1), bigFraction0.byteValue());
assertNotSame(bigFraction0, bigFraction1);
assertNotSame(bigFraction0, bigFraction2);
assertFalse(bigFraction0.equals((Object)bigFraction1));
assertFalse(bigFraction0.equals((Object)bigFraction2));
assertFalse(int1 == int0);

BigFraction bigFraction4 = bigFraction0.subtract((-1));
assertNotNull(bigFraction4);
assertEquals((short) (-1), bigFraction0.shortValue());
assertEquals((byte) (-1), bigFraction0.byteValue());
assertEquals((byte)0, bigFraction4.byteValue());
assertEquals((short)0, bigFraction4.shortValue());
assertNotSame(bigFraction0, bigFraction1);
assertNotSame(bigFraction0, bigFraction2);
assertNotSame(bigFraction0, bigFraction4);
assertNotSame(bigFraction4, bigFraction0);
assertNotSame(bigFraction4, bigFraction2);
assertNotSame(bigFraction4, bigFraction1);
assertFalse(bigFraction0.equals((Object)bigFraction1));
assertFalse(bigFraction0.equals((Object)bigFraction2));
assertFalse(bigFraction4.equals((Object)bigFraction0));
assertFalse(bigFraction4.equals((Object)bigFraction2));
assertFalse(bigFraction4.equals((Object)bigFraction1));

int int2 = bigFraction4.intValue();
assertEquals(0, int2);
assertEquals((short) (-1), bigFraction0.shortValue());
assertEquals((byte) (-1), bigFraction0.byteValue());
assertEquals((byte)0, bigFraction4.byteValue());
assertEquals((short)0, bigFraction4.shortValue());
assertNotSame(bigFraction0, bigFraction1);
assertNotSame(bigFraction0, bigFraction2);
assertNotSame(bigFraction0, bigFraction4);
assertNotSame(bigFraction4, bigFraction0);
assertNotSame(bigFraction4, bigFraction2);
assertNotSame(bigFraction4, bigFraction1);
assertFalse(bigFraction0.equals((Object)bigFraction1));
assertFalse(bigFraction0.equals((Object)bigFraction2));
assertFalse(bigFraction0.equals((Object)bigFraction4));
assertFalse(bigFraction4.equals((Object)bigFraction0));
assertFalse(bigFraction4.equals((Object)bigFraction2));
assertFalse(bigFraction4.equals((Object)bigFraction1));
assertFalse(int2 == int1);
assertFalse(int2 == int0);

BigFraction bigFraction5 = bigFraction1.add((-1470L));
assertNotNull(bigFraction5);
assertEquals((short) (-1), bigFraction0.shortValue());
assertEquals((byte) (-1), bigFraction0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigFraction1.shortValue());
assertEquals((byte)0, bigFraction1.byteValue());
assertEquals((short) (-1469), bigFraction5.shortValue());
assertEquals((byte)67, bigFraction5.byteValue());
assertNotSame(bigFraction0, bigFraction5);
assertNotSame(bigFraction0, bigFraction1);
assertNotSame(bigFraction0, bigFraction2);
assertNotSame(bigFraction0, bigFraction4);
assertNotSame(bigFraction1, bigFraction5);
assertNotSame(bigFraction1, bigFraction4);
assertNotSame(bigFraction1, bigFraction2);
assertNotSame(bigFraction1, bigFraction0);
assertNotSame(bigFraction5, bigFraction1);
assertNotSame(bigFraction5, bigFraction2);
assertNotSame(bigFraction5, bigFraction0);
assertNotSame(bigFraction5, bigFraction4);
assertFalse(bigFraction0.equals((Object)bigFraction1));
assertFalse(bigFraction0.equals((Object)bigFraction2));
assertFalse(bigFraction0.equals((Object)bigFraction4));
assertFalse(bigFraction1.equals((Object)bigFraction4));
assertFalse(bigFraction1.equals((Object)bigFraction2));
assertFalse(bigFraction1.equals((Object)bigFraction0));
assertFalse(bigFraction5.equals((Object)bigFraction1));
assertFalse(bigFraction5.equals((Object)bigFraction2));
assertFalse(bigFraction5.equals((Object)bigFraction0));
assertFalse(bigFraction5.equals((Object)bigFraction4));

BigFraction bigFraction6 = BigFraction.ONE_FIFTH;
assertNotNull(bigFraction6);
assertEquals((byte)0, bigFraction6.byteValue());
assertEquals((short)0, bigFraction6.shortValue());
assertNotSame(bigFraction6, bigFraction0);
assertNotSame(bigFraction6, bigFraction2);
assertNotSame(bigFraction6, bigFraction1);
assertNotSame(bigFraction6, bigFraction4);
assertNotSame(bigFraction6, bigFraction5);
assertFalse(bigFraction6.equals((Object)bigFraction0));
assertFalse(bigFraction6.equals((Object)bigFraction2));
assertFalse(bigFraction6.equals((Object)bigFraction1));
assertFalse(bigFraction6.equals((Object)bigFraction4));
assertFalse(bigFraction6.equals((Object)bigFraction5));

BigFraction bigFraction7 = bigFraction6.divide(bigFraction2);
assertNotNull(bigFraction7);
assertEquals((byte)0, bigFraction2.byteValue());
assertEquals((short)0, bigFraction2.shortValue());
assertEquals((byte)0, bigFraction6.byteValue());
assertEquals((short)0, bigFraction6.shortValue());
assertEquals((short) (-325), bigFraction7.shortValue());
assertEquals((byte) (-69), bigFraction7.byteValue());
assertNotSame(bigFraction2, bigFraction0);
assertNotSame(bigFraction2, bigFraction5);
assertNotSame(bigFraction2, bigFraction4);
assertNotSame(bigFraction2, bigFraction7);
assertNotSame(bigFraction2, bigFraction6);
assertNotSame(bigFraction2, bigFraction1);
assertNotSame(bigFraction6, bigFraction7);
assertNotSame(bigFraction6, bigFraction0);
assertNotSame(bigFraction6, bigFraction2);
assertNotSame(bigFraction6, bigFraction1);
assertNotSame(bigFraction6, bigFraction4);
assertNotSame(bigFraction6, bigFraction5);
assertNotSame(bigFraction7, bigFraction5);
assertNotSame(bigFraction7, bigFraction6);
assertNotSame(bigFraction7, bigFraction4);
assertNotSame(bigFraction7, bigFraction0);
assertNotSame(bigFraction7, bigFraction2);
assertNotSame(bigFraction7, bigFraction1);
assertFalse(bigFraction2.equals((Object)bigFraction0));
assertFalse(bigFraction2.equals((Object)bigFraction5));
assertFalse(bigFraction2.equals((Object)bigFraction4));
assertFalse(bigFraction2.equals((Object)bigFraction6));
assertFalse(bigFraction2.equals((Object)bigFraction1));
assertFalse(bigFraction6.equals((Object)bigFraction0));
assertFalse(bigFraction6.equals((Object)bigFraction2));
assertFalse(bigFraction6.equals((Object)bigFraction1));
assertFalse(bigFraction6.equals((Object)bigFraction4));
assertFalse(bigFraction6.equals((Object)bigFraction5));
assertFalse(bigFraction7.equals((Object)bigFraction5));
assertFalse(bigFraction7.equals((Object)bigFraction6));
assertFalse(bigFraction7.equals((Object)bigFraction4));
assertFalse(bigFraction7.equals((Object)bigFraction0));
assertFalse(bigFraction7.equals((Object)bigFraction2));
assertFalse(bigFraction7.equals((Object)bigFraction1));


[MASTER] 00:49:50.164 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:50.313 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:50.476 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:50.653 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:50.817 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:50.953 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:51.060 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:51.144 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:51.259 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:51.646 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:51.763 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:51.857 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:51.942 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:52.035 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:52.116 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:52.266 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:52.386 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:52.489 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:52.582 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:52.674 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:52.826 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:52.912 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:52.991 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:53.071 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:53.204 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:53.520 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:53.606 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:53.775 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:53.936 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:54.046 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:54.152 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:54.294 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:54.363 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:54.440 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:54.563 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:54.650 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:54.733 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:54.805 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:54.879 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:54.950 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:55.050 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:55.121 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:55.217 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:55.299 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:55.394 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:55.514 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:55.588 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:55.674 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:55.739 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:58.936 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:59.035 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:59.104 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:59.191 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:59.269 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:59.348 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:59.434 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:59.514 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:59.594 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:59.663 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:59.750 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:59.840 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:49:59.966 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:00.052 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:01.455 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:01.529 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:01.594 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:01.679 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:01.785 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:01.855 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:01.931 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:01.997 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:02.062 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:02.133 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:02.212 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:02.286 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:02.355 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:02.439 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:02.517 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:02.588 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:02.669 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:02.745 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:02.812 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:02.879 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:02.950 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:03.020 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:03.096 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:03.175 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:03.248 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:03.320 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:03.399 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:03.474 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:03.543 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:03.621 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:05.189 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:05.268 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:05.336 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:05.413 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:05.495 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:05.567 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:05.632 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:05.695 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:05.762 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:05.854 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:05.926 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:08.120 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:09.254 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:09.327 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:11.632 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:11.831 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:11.909 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:11.986 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:50:24.701 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'BigFraction_ESTest' to results/Math-1/org.apache.commons.math3.fraction.BigFraction/BBC-F0-100/tests/12
* Done!

* Computation finished
