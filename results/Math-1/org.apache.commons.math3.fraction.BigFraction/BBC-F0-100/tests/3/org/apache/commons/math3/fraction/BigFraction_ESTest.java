/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 20:21:45 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1005.01788903019, (-667));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1437.7247294), 3);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)52;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-2202));
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-634.1838541752115));
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(629, 19180421);
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2829.396601097));
      bigFraction0.abs();
      bigFraction0.divide(2047L);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigDecimal bigDecimal0 = new BigDecimal(1134);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2147475482);
      bigFraction0.getDenominatorAsInt();
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction((-3958705157555305932L));
      bigFraction0.divide(bigFraction1);
      BigFraction bigFraction2 = new BigFraction((-3958705157555305932L));
      BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
      bigFraction3.bigDecimalValue(0, 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2147475492);
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction2 = new BigFraction(2147475492, 2147475492, 2147475492);
      bigFraction1.TWO_THIRDS.hashCode();
      BigFraction bigFraction3 = bigFraction2.multiply(bigFraction1);
      bigFraction3.equals(bigFraction2);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4620.0));
      BigFraction bigFraction1 = bigFraction0.pow((-109L));
      bigFraction1.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = new BigFraction(1.7976931348623157E308);
      bigFraction1.divide(131596288L);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-5.846022223183883));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-1550));
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction1.THREE_QUARTERS.reduce();
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction2.add(120);
      bigFraction0.add((-1));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction0.FOUR_FIFTHS.equals(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.MINUS_ONE.bigDecimalValue((-42));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = new BigFraction(1278.6, 421);
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-104.9331167861), 548);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction1.TWO_QUARTERS.divide(bigInteger0);
      bigInteger0.toString();
      bigFraction0.TWO_QUARTERS.divide((-539L));
      int int0 = 4;
      bigFraction1.bigDecimalValue(957, 4);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = (-466);
      BigFraction bigFraction0 = new BigFraction(4.1318116927868687E-8, (-466));
      bigFraction0.ZERO.toString();
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(72086277849088L);
      BigFraction bigFraction1 = bigFraction0.divide(72086277849088L);
      BigFraction bigFraction2 = bigFraction1.subtract(9218868437227405312L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.THREE_QUARTERS.reduce();
      int int0 = (-1234);
      bigFraction2.ONE_FIFTH.add((-1234));
      bigFraction2.subtract(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.TWO.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.8148148380278144E-5, 20);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.add(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger1);
      bigFraction0.bigDecimalValue();
      bigFraction0.compareTo(bigFraction2);
      BigFraction bigFraction3 = bigFraction2.subtract(bigInteger1);
      bigFraction2.multiply(bigFraction1);
      BigFraction bigFraction4 = bigFraction0.subtract(bigFraction3);
      bigFraction4.ZERO.percentageValue();
      bigFraction2.floatValue();
      bigFraction2.add(bigFraction4);
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue((-1932));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = new BigFraction(0);
      bigFraction1.toString();
      BigFraction bigFraction2 = BigFraction.ONE;
      bigFraction2.multiply(bigFraction1);
      BigFraction bigFraction3 = new BigFraction(178927259615229L, 178927259615229L);
      bigFraction3.add(bigFraction1);
      bigFraction0.getNumerator();
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction4 = new BigFraction((-3818), (-2147483645));
      bigFraction3.equals(bigFraction4);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = new BigFraction(1.0);
      bigFraction0.equals(bigFraction1);
      bigFraction1.ONE_THIRD.getDenominatorAsInt();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction1.abs();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction2.pow(bigInteger1);
      bigFraction1.abs();
      BigFraction.getReducedFraction(2146959487, 2147483584);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.MINUS_ONE.pow((-3499L));
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction1.ONE_QUARTER.equals(bigFraction0);
      BigFraction bigFraction2 = BigFraction.ONE_QUARTER;
      bigFraction1.toString();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)98;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.add(bigInteger0);
      Random.setNextRandom((byte)51);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.TWO.longValue();
      bigFraction0.TWO_QUARTERS.floatValue();
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.reduce();
      BigFraction bigFraction2 = bigFraction0.add((-882L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.multiply(bigInteger0);
      bigFraction3.TWO.getDenominatorAsInt();
      bigFraction2.TWO.add((-882L));
      bigFraction0.getNumerator();
      bigFraction3.THREE_FIFTHS.add(bigInteger0);
      BigFraction bigFraction4 = BigFraction.getReducedFraction(2021161080, 2021161080);
      BigFraction bigFraction5 = bigFraction4.ZERO.add(1712L);
      bigFraction5.ONE_QUARTER.multiply(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction5.TWO.bigDecimalValue(2021161080, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract((-464));
      BigFraction bigFraction2 = new BigFraction(1.1178574689680927E-7, (-1688));
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(2461, mockRandom0);
      BigFraction bigFraction3 = bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.divide((-1688));
      bigFraction4.ONE_QUARTER.getNumeratorAsInt();
      BigDecimal bigDecimal0 = new BigDecimal(1225);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.THREE_QUARTERS.subtract(0);
      BigFraction bigFraction1 = new BigFraction(1711.774455, 1);
      bigFraction1.ONE_QUARTER.toString();
      bigFraction0.multiply(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.bigDecimalValue(1, 1);
      bigFraction1.toString();
      BigFraction bigFraction2 = new BigFraction(1, 0.4849066734313965, 1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = new BigFraction(329.52);
      BigFraction bigFraction2 = bigFraction1.divide(2146959487);
      bigFraction2.toString();
      bigFraction1.subtract(3140);
      bigFraction1.pow(1733);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.subtract(0);
      int int0 = 1;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(1.7976931348623157E308, (-2393));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.MINUS_ONE.longValue();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-14);
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = BigFraction.ONE_QUARTER;
      bigFraction2.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-464), (-464));
      BigFraction bigFraction1 = bigFraction0.subtract((-464));
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)105;
      bigFraction1.TWO_FIFTHS.hashCode();
      byteArray0[2] = (byte)105;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.divide(bigInteger0);
      bigFraction1.reciprocal();
      bigFraction0.pow((long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1282.0786), 100);
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.divide((long) 100);
      BigFraction bigFraction2 = bigFraction1.ZERO.abs();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.ONE_HALF.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.add(100);
      bigFraction4.THREE_QUARTERS.getField();
      BigFraction bigFraction5 = bigFraction3.ONE_THIRD.negate();
      BigFraction bigFraction6 = bigFraction3.ONE_THIRD.divide(100);
      BigFraction bigFraction7 = bigFraction6.THREE_QUARTERS.multiply(100);
      bigFraction6.TWO_QUARTERS.bigDecimalValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction8 = bigFraction4.pow(bigInteger1);
      BigFraction bigFraction9 = bigFraction1.pow(100);
      bigFraction3.subtract(bigFraction0);
      bigFraction1.TWO_FIFTHS.add(bigFraction7);
      bigFraction2.toString();
      bigFraction9.floatValue();
      bigFraction2.getDenominatorAsInt();
      bigFraction9.doubleValue();
      bigFraction8.getDenominatorAsLong();
      BigFraction bigFraction10 = bigFraction0.reduce();
      bigFraction10.add((long) 1);
      BigFraction bigFraction11 = bigFraction3.divide(bigInteger1);
      bigFraction11.TWO_FIFTHS.subtract(1194);
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(485L, 485L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO.abs();
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.subtract(bigFraction0);
      bigFraction2.TWO_QUARTERS.pow(0.002307692307567777);
      int int0 = 1488;
      bigInteger0.isProbablePrime(1488);
      BigFraction bigFraction3 = bigFraction0.MINUS_ONE.reduce();
      bigFraction0.equals(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.MINUS_ONE.multiply(bigInteger0);
      bigFraction0.TWO_QUARTERS.toString();
      bigFraction3.ONE_FIFTH.bigDecimalValue();
      BigFraction bigFraction5 = bigFraction0.pow(bigInteger0);
      bigFraction4.TWO_THIRDS.getField();
      bigFraction0.toString();
      bigFraction5.multiply(bigInteger0);
      bigFraction4.getNumerator();
      bigFraction3.multiply(bigInteger0);
      bigFraction4.abs();
      int int1 = 2147481600;
      int int2 = 0;
      bigFraction4.ONE_HALF.subtract(0);
      // Undeclared exception!
      try { 
        bigFraction4.TWO_THIRDS.bigDecimalValue(426, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.THREE_QUARTERS.subtract(0);
      BigFraction bigFraction1 = new BigFraction(1711.774455, 1);
      bigFraction1.ONE_QUARTER.toString();
      bigFraction0.multiply(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.ONE.subtract(bigInteger0);
      bigFraction1.ZERO.floatValue();
      bigFraction1.divide(1);
      bigFraction2.bigDecimalValue(1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.subtract(43L);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)118;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction1.divide(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.subtract((int) (byte)118);
      bigFraction1.toString();
      bigFraction2.reciprocal();
      bigFraction2.pow((long) (byte)118);
      bigFraction3.pow((long) (byte)118);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((int) (byte)118);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.subtract(0);
      BigFraction bigFraction2 = new BigFraction(1712.135736049289, 1);
      bigFraction2.ONE_QUARTER.toString();
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction2);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.ONE.subtract(bigInteger0);
      bigFraction2.ZERO.floatValue();
      BigFraction bigFraction4 = bigFraction1.THREE_QUARTERS.multiply(bigFraction3);
      bigFraction0.doubleValue();
      BigFraction bigFraction5 = BigFraction.ZERO;
      bigFraction0.floatValue();
      bigFraction4.toString();
      BigFraction bigFraction6 = BigFraction.ONE_QUARTER;
      bigFraction6.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction0.TWO_THIRDS.add(bigFraction1);
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((-2147483645), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      int int0 = (-63);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.divide((-63));
      bigFraction1.THREE_QUARTERS.getNumeratorAsLong();
      bigFraction1.ONE_HALF.hashCode();
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = new BigFraction(0L);
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.subtract(616);
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction4 = bigFraction0.ZERO.negate();
      bigFraction4.ONE_QUARTER.equals(bigFraction0);
      bigFraction0.getDenominatorAsLong();
      bigFraction2.getNumeratorAsLong();
      bigFraction4.abs();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.pow(bigInteger0);
      bigFraction3.abs();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      bigFraction0.add(9223372036854775803L);
      // Undeclared exception!
      try { 
        bigFraction0.pow(2147136439);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract((-464));
      BigFraction bigFraction2 = new BigFraction(1.1178574689680927E-7, (-1688));
      BigFraction bigFraction3 = bigFraction1.subtract((-1688));
      BigFraction bigFraction4 = bigFraction3.multiply(bigFraction1);
      bigFraction1.negate();
      bigFraction0.equals("");
      bigFraction3.getDenominatorAsLong();
      BigFraction bigFraction5 = new BigFraction(5L, 0.14686977863311768, (-2548));
      bigFraction5.add((long) 0);
      BigFraction bigFraction6 = bigFraction4.pow((-464));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction6.THREE_QUARTERS.add(bigInteger0);
      BigFraction bigFraction7 = bigFraction3.reduce();
      bigFraction7.floatValue();
      bigFraction7.intValue();
      bigFraction5.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.TWO_FIFTHS.subtract(9007168116228096L);
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.subtract(43L);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)118;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = BigFraction.THREE_QUARTERS;
      bigFraction2.getField();
      bigFraction0.doubleValue();
      bigFraction1.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract((-464));
      BigFraction bigFraction2 = new BigFraction(1.1178574689680927E-7, (-1688));
      bigFraction0.toString();
      BigFraction bigFraction3 = bigFraction1.multiply(bigFraction0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction1.subtract(bigInteger0);
      bigFraction4.floatValue();
      BigFraction bigFraction5 = new BigFraction((double) (-464));
      bigFraction2.doubleValue();
      bigFraction5.TWO.subtract(bigFraction1);
      BigFraction bigFraction6 = bigFraction0.add(bigInteger0);
      bigFraction1.add((long) 0);
      bigFraction5.pow((-2106));
      bigFraction6.reduce();
      bigFraction2.floatValue();
      bigFraction1.intValue();
      bigFraction2.getNumeratorAsInt();
      bigFraction3.bigDecimalValue();
      bigFraction5.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5101.6022151);
      BigFraction bigFraction1 = bigFraction0.add(735L);
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.negate();
      BigFraction bigFraction3 = bigFraction2.ONE.pow(0);
      bigFraction0.intValue();
      bigFraction1.pow((-562L));
      BigFraction bigFraction4 = bigFraction1.subtract(5101);
      bigFraction4.FOUR_FIFTHS.floatValue();
      bigFraction4.getNumeratorAsLong();
      BigFraction bigFraction5 = bigFraction0.abs();
      bigFraction2.add(bigFraction3);
      bigFraction5.longValue();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract((-464));
      bigFraction1.THREE_QUARTERS.intValue();
      BigFraction bigFraction2 = new BigFraction(1.1178574689680927E-7, (-1688));
      bigFraction2.ONE_QUARTER.bigDecimalValue((-1694), 0);
      bigFraction0.toString();
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction(1.1178574689680927E-7, (-1688), 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0 to fraction after 0 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2049.01846941);
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.subtract(bigInteger0);
      bigFraction1.floatValue();
      BigFraction bigFraction4 = bigFraction3.multiply(bigFraction0);
      bigFraction4.doubleValue();
      BigFraction bigFraction5 = bigFraction0.subtract(bigFraction2);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction6 = bigFraction5.add(bigInteger1);
      bigFraction0.floatValue();
      bigFraction6.toString();
      bigFraction2.getDenominatorAsInt();
      BigInteger bigInteger2 = BigInteger.TEN;
      bigFraction3.divide(bigInteger1);
      bigFraction1.subtract(bigInteger0);
      bigFraction0.multiply(2510L);
      BigFraction bigFraction7 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction8 = new BigFraction(2510L, 2510L);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-63);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.divide((-2146904185));
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      bigFraction4.divide((int) (byte) (-40));
      BigFraction bigFraction5 = bigFraction4.subtract(bigFraction1);
      bigFraction3.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue((-79), (int) (byte) (-40));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      bigFraction2.TWO_QUARTERS.subtract(bigFraction0);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-128);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.FOUR_FIFTHS.divide(bigInteger0);
      bigFraction0.getDenominator();
      BigFraction bigFraction3 = bigFraction0.divide((-1089));
      bigFraction3.floatValue();
      BigFraction bigFraction4 = bigFraction3.divide((long) (byte)52);
      bigFraction4.ONE_QUARTER.pow((int) (byte) (-1));
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction5 = bigFraction3.negate();
      bigFraction2.divide((long) (byte) (-1));
      bigFraction5.subtract((-521));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract((-464));
      BigFraction bigFraction2 = new BigFraction(1.1178574689680927E-7, (-1688));
      bigFraction0.toString();
      BigFraction bigFraction3 = bigFraction1.multiply(bigFraction0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction1.subtract(bigInteger0);
      bigFraction4.floatValue();
      BigFraction bigFraction5 = bigFraction0.multiply(bigFraction2);
      bigFraction2.doubleValue();
      bigFraction5.TWO.subtract(bigFraction1);
      BigFraction bigFraction6 = bigFraction0.add(bigInteger0);
      bigFraction1.floatValue();
      bigFraction5.toString();
      bigFraction6.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction7 = bigFraction3.divide(bigInteger1);
      bigFraction7.TWO_QUARTERS.subtract(bigInteger0);
      bigFraction7.multiply((-2147483648L));
      BigFraction bigFraction8 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction9 = new BigFraction(5, (-2147483648L));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.divide(2);
      bigFraction2.subtract(bigFraction1);
      bigFraction0.floatValue();
      bigFraction1.subtract(1L);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction0.TWO_THIRDS.add(bigFraction1);
      bigFraction0.multiply(2599L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      long long0 = 0L;
      BigFraction bigFraction1 = new BigFraction(3025L);
      int int0 = 23;
      BigFraction bigFraction2 = bigFraction1.subtract(23);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction3.multiply(bigFraction2);
      BigFraction bigFraction4 = bigFraction2.negate();
      bigFraction4.equals(bigFraction2);
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction((double) 23, 2021161080);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 23 to fraction (9,223,372,036,854,775,786/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.subtract(43L);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)118;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = bigFraction1.divide(bigInteger0);
      bigFraction2.subtract((int) (byte)118);
      bigFraction0.toString();
      bigFraction1.reciprocal();
      bigFraction1.getNumerator();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5101.6022151);
      BigFraction bigFraction1 = bigFraction0.add(735L);
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.negate();
      BigFraction bigFraction3 = bigFraction2.ONE.pow(0);
      bigFraction3.THREE_FIFTHS.pow(735L);
      bigFraction0.intValue();
      BigFraction bigFraction4 = bigFraction1.subtract(5101);
      BigFraction bigFraction5 = bigFraction1.add(2139066902);
      BigFraction bigFraction6 = bigFraction4.reduce();
      bigFraction6.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction5.subtract(bigInteger0);
      BigFraction bigFraction7 = BigFraction.TWO;
      BigFraction bigFraction8 = BigFraction.ZERO;
      bigFraction8.getDenominatorAsLong();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.subtract(0);
      BigFraction bigFraction2 = bigFraction0.subtract(160L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)118;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction2.divide(bigInteger0);
      bigFraction1.subtract((int) (byte) (-14));
      bigFraction2.toString();
      bigFraction3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.subtract(4503599627370495L);
      byte byte0 = (byte) (-14);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)118;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.divide(bigInteger0);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((double) 437, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 437 to fraction (9,223,372,036,854,775,372/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = new BigFraction(329.52, 329.52, (-4491));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = new BigFraction(bigInteger0, bigInteger0);
      int int0 = (-1);
      BigFraction.getReducedFraction((-1221), 273);
      bigFraction0.compareTo(bigFraction1);
      bigFraction2.pow((long) (-1221));
      // Undeclared exception!
      try { 
        bigFraction2.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.THREE_QUARTERS.subtract(43L);
      BigFraction bigFraction1 = new BigFraction(1.0);
      bigFraction1.divide((-1446));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.ONE_HALF.bigDecimalValue(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.subtract(bigInteger0);
      bigFraction1.THREE_QUARTERS.equals((Object) null);
      bigFraction0.getField();
      bigFraction0.FOUR_FIFTHS.longValue();
      BigFraction bigFraction2 = bigFraction0.negate();
      bigFraction0.longValue();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(0, 0);
      BigFraction.getReducedFraction(0, 2135);
      bigFraction2.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction2.pow(bigInteger0);
      bigFraction4.ONE_THIRD.reciprocal();
      bigFraction3.add((-186));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction.getReducedFraction((-3304), (-3304));
      bigFraction0.TWO_QUARTERS.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.reduce();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte) (-67);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction1.add(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1378));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction.getReducedFraction(0, 0);
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 2135);
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-464));
      bigFraction0.divide((-464));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte) (-36);
      byteArray0[8] = (byte)80;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction2 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction2.subtract(bigInteger1);
      bigFraction3.percentageValue();
      bigFraction2.multiply((-2011L));
      bigFraction0.intValue();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.divide(2);
      bigFraction0.longValue();
      BigFraction bigFraction1 = new BigFraction(0L);
      BigFraction.getReducedFraction(2, 437);
      BigFraction bigFraction2 = BigFraction.ONE;
      bigFraction2.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = new BigFraction(0L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-63);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.divide((-2146904185));
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      bigFraction4.divide((int) (byte) (-40));
      bigFraction4.subtract(bigFraction1);
      bigFraction3.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-79));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = new BigFraction(1467.7783753019112);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)119;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction1.floatValue();
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.subtract(bigInteger0);
      bigFraction1.percentageValue();
      BigFraction bigFraction4 = bigFraction3.multiply((long) (byte)51);
      bigFraction2.intValue();
      bigFraction2.bigDecimalValue();
      bigFraction2.bigDecimalValue();
      bigFraction4.floatValue();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-974), 133);
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.negate();
      bigFraction0.pow((-759L));
      bigFraction1.subtract((-974));
      bigFraction1.divide(1621L);
      BigFraction.getReducedFraction(133, (-974));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.multiply(bigInteger0);
      bigFraction0.intValue();
      bigFraction0.pow((double) (-7));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction0.floatValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.divide(bigInteger1);
      bigFraction1.subtract(bigInteger1);
      bigFraction2.percentageValue();
      BigFraction bigFraction3 = bigFraction2.multiply(979L);
      bigFraction0.intValue();
      bigFraction3.bigDecimalValue();
      bigFraction3.bigDecimalValue();
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.THREE_QUARTERS.subtract(43L);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-14);
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)118;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction1.subtract(4503599627370495L);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-374));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.subtract(0);
      int int0 = 1;
      BigFraction bigFraction2 = new BigFraction(1711.774455, 1);
      bigFraction2.ONE_QUARTER.toString();
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction2);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.ONE.subtract(bigInteger0);
      bigFraction2.ZERO.floatValue();
      bigFraction1.THREE_QUARTERS.multiply(bigFraction3);
      bigFraction2.TWO_THIRDS.doubleValue();
      try { 
        bigFraction2.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.abs();
      bigFraction1.ZERO.hashCode();
      bigFraction0.hashCode();
      bigFraction1.ONE_HALF.longValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction3 = bigFraction1.add(0L);
      bigFraction3.THREE_FIFTHS.longValue();
      bigFraction3.MINUS_ONE.reciprocal();
      bigFraction3.TWO_QUARTERS.bigDecimalValue(5);
      BigFraction bigFraction4 = bigFraction2.abs();
      bigFraction4.TWO_THIRDS.doubleValue();
      BigFraction bigFraction5 = bigFraction4.TWO_THIRDS.abs();
      BigFraction bigFraction6 = bigFraction4.TWO.divide(bigInteger0);
      bigFraction6.intValue();
      bigFraction4.ONE_THIRD.toString();
      bigFraction0.ONE_HALF.getField();
      BigFraction bigFraction7 = bigFraction1.divide(bigInteger0);
      bigFraction7.ONE.divide(bigFraction2);
      bigFraction7.TWO_QUARTERS.bigDecimalValue(37, 5);
      bigFraction0.doubleValue();
      BigFraction bigFraction8 = bigFraction7.abs();
      bigFraction8.ONE.subtract(37);
      BigFraction bigFraction9 = bigFraction5.reciprocal();
      bigFraction2.percentageValue();
      bigFraction1.pow(bigInteger0);
      bigFraction9.add(bigInteger0);
      bigFraction5.subtract(bigFraction6);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.bitLength();
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.TWO.getNumeratorAsInt();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.pow(bigInteger0);
      bigFraction0.pow(1443.5555);
      bigFraction0.doubleValue();
      bigFraction0.getNumeratorAsLong();
      bigInteger0.shiftLeft(1);
      BigFraction bigFraction3 = bigFraction1.multiply(1);
      bigFraction3.FOUR_FIFTHS.getDenominatorAsInt();
      bigFraction3.reciprocal();
      BigFraction bigFraction4 = bigFraction3.subtract(bigInteger0);
      bigFraction2.equals(bigFraction4);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.divide(bigInteger0);
      bigFraction1.ONE.percentageValue();
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.subtract(2982);
      BigFraction bigFraction3 = bigFraction1.TWO_QUARTERS.add(bigFraction2);
      bigFraction3.ONE_FIFTH.multiply(1);
      bigFraction3.FOUR_FIFTHS.compareTo(bigFraction2);
      BigFraction bigFraction4 = BigFraction.ONE_THIRD;
      BigFraction bigFraction5 = bigFraction0.add(bigFraction4);
      BigFraction bigFraction6 = bigFraction5.MINUS_ONE.add(2982);
      bigFraction6.ONE.percentageValue();
      bigFraction2.ONE.getField();
      bigFraction5.ONE_HALF.compareTo(bigFraction3);
      bigFraction4.hashCode();
      BigFraction.getReducedFraction(1, 2982);
      BigFraction bigFraction7 = bigFraction1.subtract((long) 2982);
      BigFraction bigFraction8 = null;
      // Undeclared exception!
      try { 
        bigFraction7.TWO_FIFTHS.bigDecimalValue(2, 2982);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(816, 851);
      bigFraction0.ONE_HALF.bigDecimalValue();
      BigFraction.getReducedFraction(673, (-436));
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-1446), (-1379));
      bigFraction0.doubleValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.pow(816);
      bigFraction2.getField();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(673, (-211));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.ONE_HALF.bigDecimalValue(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.TWO_THIRDS.subtract(bigInteger0);
      bigFraction0.getField();
      bigFraction0.FOUR_FIFTHS.longValue();
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction0.longValue();
      BigFraction.getReducedFraction(0, 0);
      BigFraction.getReducedFraction(0, 2135);
      bigFraction1.bigDecimalValue();
      bigFraction1.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.divide(2);
      BigFraction bigFraction2 = bigFraction0.divide(2);
      bigFraction2.subtract(bigFraction1);
      bigFraction2.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2049.01846941, 2049.01846941, (-2245));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5101.6022151);
      BigFraction bigFraction1 = bigFraction0.add(735L);
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.negate();
      bigFraction2.ONE.pow(0);
      bigFraction0.intValue();
      BigFraction bigFraction3 = bigFraction1.subtract(5101);
      bigFraction3.TWO.multiply((-2593L));
      BigFraction bigFraction4 = bigFraction1.divide(bigFraction3);
      bigFraction4.toString();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction0.TWO_THIRDS.add(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.multiply(2599L);
      bigFraction2.MINUS_ONE.getNumeratorAsLong();
      bigFraction2.abs();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.ZERO.add(4503599627370496L);
      BigFraction bigFraction2 = bigFraction1.ZERO.reduce();
      bigFraction2.FOUR_FIFTHS.abs();
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.subtract((-2912));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction3.THREE_FIFTHS.pow(bigInteger0);
      bigFraction2.TWO_THIRDS.intValue();
      bigFraction1.ZERO.percentageValue();
      BigFraction bigFraction4 = bigFraction0.negate();
      BigFraction bigFraction5 = bigFraction4.TWO_FIFTHS.reduce();
      bigFraction5.ONE_HALF.bigDecimalValue();
      BigFraction bigFraction6 = BigFraction.getReducedFraction((-3886), (-3886));
      BigFraction bigFraction7 = bigFraction6.add(0);
      bigFraction7.MINUS_ONE.getField();
      bigFraction6.compareTo(bigFraction1);
      BigFraction bigFraction8 = bigFraction5.subtract(bigFraction4);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction9 = bigFraction2.ONE.add(1187L);
      bigFraction9.THREE_QUARTERS.getDenominatorAsLong();
      bigFraction0.ZERO.bigDecimalValue((-740), 0);
      bigFraction8.FOUR_FIFTHS.subtract(bigInteger1);
      bigFraction5.getDenominatorAsLong();
      bigFraction2.getDenominatorAsLong();
      bigFraction1.getNumeratorAsLong();
      bigFraction0.floatValue();
      bigFraction7.divide(bigFraction1);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigFraction bigFraction10 = bigFraction1.add(bigInteger2);
      bigFraction1.add((long) (-2912));
      bigFraction5.percentageValue();
      bigFraction10.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-934L), (-934L));
      int int0 = (-530);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = new BigFraction(0L);
      int int0 = 616;
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.subtract(616);
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction4 = bigFraction0.ZERO.negate();
      bigFraction4.ONE_QUARTER.equals(bigFraction0);
      BigFraction.getReducedFraction(938, 938);
      bigFraction4.ONE_HALF.equals(bigFraction2);
      bigFraction0.ONE_FIFTH.percentageValue();
      BigFraction bigFraction5 = bigFraction3.TWO_QUARTERS.add(0L);
      bigFraction5.ZERO.subtract((long) 616);
      BigFraction bigFraction6 = bigFraction3.ZERO.subtract(757L);
      // Undeclared exception!
      try { 
        bigFraction6.ONE_HALF.bigDecimalValue(616, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-974), 133);
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.negate();
      bigFraction1.ONE_THIRD.multiply(bigFraction0);
      bigFraction0.ONE_QUARTER.reduce();
      bigFraction0.pow((-759L));
      bigFraction1.subtract((-974));
      bigFraction1.divide(1621L);
      BigFraction.getReducedFraction(133, (-974));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.subtract(43L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)118;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.multiply((-2644281811660520851L));
      bigFraction2.add(2);
      bigFraction0.divide(2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2128, 2128);
      bigFraction0.TWO_FIFTHS.getNumeratorAsInt();
      bigFraction0.THREE_QUARTERS.hashCode();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2128);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      try { 
        bigFraction0.THREE_FIFTHS.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = 750.082320397834;
      BigFraction bigFraction0 = new BigFraction(750.082320397834);
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      bigFraction0.MINUS_ONE.equals(bigFraction1);
      bigFraction1.ONE_HALF.getDenominatorAsInt();
      bigFraction1.MINUS_ONE.equals(bigFraction0);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      long long0 = 287L;
      bigFraction1.ONE_QUARTER.intValue();
      bigFraction1.multiply(287L);
      bigFraction2.TWO_QUARTERS.multiply((long) 2);
      // Undeclared exception!
      try { 
        bigFraction2.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4577762542105553359L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.MINUS_ONE.pow(bigInteger0);
      bigFraction0.ONE.pow((double) 4577762542105553359L);
      bigFraction0.TWO_QUARTERS.intValue();
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.add(bigInteger1);
      bigFraction1.toString();
      bigFraction2.bigDecimalValue(1, 0);
      bigFraction0.abs();
      BigFraction bigFraction3 = BigFraction.getReducedFraction(0, 0);
      bigFraction3.ONE.getNumeratorAsLong();
      bigFraction1.divide(bigInteger1);
      bigFraction2.ONE_FIFTH.reciprocal();
      bigFraction0.multiply(1);
      bigFraction2.add(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 1;
      BigFraction bigFraction0 = new BigFraction(1, 1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      long long0 = (-3705L);
      // Undeclared exception!
      try { 
        bigFraction1.ZERO.pow((-3705L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = (-2609);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, (-2609));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.TWO.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.multiply(bigInteger0);
      bigFraction0.getNumeratorAsLong();
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(899, 899);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.THREE_QUARTERS.multiply(bigInteger0);
      bigFraction2.ONE.doubleValue();
      BigFraction bigFraction3 = bigFraction0.THREE_QUARTERS.add(9218868437227405312L);
      bigFraction3.ONE_QUARTER.intValue();
      bigFraction0.MINUS_ONE.percentageValue();
      BigFraction bigFraction4 = bigFraction1.ONE.subtract((long) 899);
      BigFraction.getReducedFraction(1437, 1437);
      bigFraction4.TWO.pow(899);
      bigFraction0.floatValue();
      bigFraction2.getNumerator();
      bigFraction1.getNumeratorAsInt();
      bigFraction1.getField();
      bigFraction0.subtract(37);
      BigFraction.getReducedFraction((-1), (-1));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2007));
      bigFraction0.THREE_QUARTERS.pow((double) (-2007));
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction1.ZERO.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      BigFraction bigFraction3 = bigFraction0.subtract((-2007));
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.multiply((-2007));
      bigFraction4.ONE.intValue();
      BigFraction bigFraction5 = bigFraction3.divide(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction6 = bigFraction5.TWO_THIRDS.subtract(bigInteger0);
      BigFraction bigFraction7 = bigFraction3.MINUS_ONE.subtract((-659));
      bigFraction6.THREE_FIFTHS.multiply(437);
      BigFraction bigFraction8 = bigFraction7.ONE_FIFTH.add(847L);
      bigFraction0.getField();
      Object object0 = new Object();
      bigFraction2.equals(object0);
      bigFraction6.multiply(bigInteger0);
      bigFraction8.reduce();
      bigFraction6.intValue();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.THREE_QUARTERS.intValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.subtract(bigInteger0);
      bigFraction0.ZERO.equals(bigFraction1);
      bigFraction1.ONE_FIFTH.subtract(bigFraction0);
      int int0 = (-79);
      bigFraction0.MINUS_ONE.bigDecimalValue();
      BigFraction bigFraction2 = bigFraction0.pow((-79));
      BigFraction bigFraction3 = bigFraction1.ZERO.subtract(0);
      bigFraction0.subtract(3188L);
      BigFraction bigFraction4 = bigFraction0.abs();
      bigFraction2.TWO.bigDecimalValue();
      BigFraction bigFraction5 = bigFraction2.ONE_HALF.divide(bigFraction4);
      bigFraction0.percentageValue();
      BigFraction bigFraction6 = bigFraction2.reduce();
      bigFraction6.ONE_HALF.pow(1);
      bigFraction6.TWO_QUARTERS.pow(bigInteger2);
      BigFraction bigFraction7 = bigFraction0.multiply((-79));
      bigFraction7.ONE.abs();
      bigFraction1.abs();
      // Undeclared exception!
      try { 
        bigFraction5.divide(bigFraction3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-486L));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.ONE_HALF.longValue();
      bigFraction0.THREE_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.add(0L);
      int int0 = (-2106);
      BigFraction bigFraction2 = bigFraction1.TWO.pow((-2106));
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.reduce();
      bigFraction3.THREE_FIFTHS.floatValue();
      bigFraction0.intValue();
      // Undeclared exception!
      try { 
        bigFraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 696;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-1.0), 696);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1 to fraction (-9,223,372,036,854,775,806/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.pow((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.TWO_FIFTHS.hashCode();
      int int0 = (-4156);
      bigFraction0.ZERO.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-4156), (-4156));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.ONE.bigDecimalValue(1134, 1134);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigInteger bigInteger0 = null;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-2010.69), (-254.14188457), 437);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,010.69 to fraction (-368,495,226,549,154/183,268,045,571)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }
}
