/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 28 12:40:29 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-107);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction0.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147077466, 2147077466, (-1540));
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.MINUS_ONE.add(bigInteger0);
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(8920647073792000L);
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.reduce();
      bigFraction1.TWO_QUARTERS.abs();
      bigFraction1.ONE_HALF.floatValue();
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction1);
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      bigFraction1.TWO_FIFTHS.abs();
      Random.setNextRandom(685);
      BigFraction bigFraction4 = bigFraction1.multiply(bigInteger0);
      BigFraction bigFraction5 = bigFraction4.ONE_THIRD.add(bigFraction1);
      bigFraction2.TWO_QUARTERS.intValue();
      BigFraction bigFraction6 = bigFraction1.subtract((-9223372036854775808L));
      BigFraction bigFraction7 = bigFraction6.TWO_THIRDS.add(685);
      BigFraction bigFraction8 = bigFraction6.TWO_FIFTHS.subtract((-1139));
      bigFraction7.MINUS_ONE.divide(bigInteger0);
      bigFraction3.getField();
      BigFraction bigFraction9 = bigFraction6.pow(bigInteger0);
      bigFraction5.subtract(bigFraction2);
      BigFraction bigFraction10 = bigFraction7.add(bigFraction9);
      bigFraction3.subtract((long) 0);
      bigFraction10.getField();
      BigFraction bigFraction11 = bigFraction0.multiply((long) (-1139));
      bigFraction11.TWO_FIFTHS.percentageValue();
      bigFraction9.MINUS_ONE.toString();
      BigFraction bigFraction12 = bigFraction1.negate();
      bigFraction12.ONE_HALF.add(568);
      bigFraction9.subtract((long) 0);
      bigFraction8.negate();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.pow(426);
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      bigFraction2.percentageValue();
      BigFraction bigFraction3 = bigFraction1.subtract(bigFraction0);
      bigFraction3.add(bigFraction1);
      bigFraction2.multiply(549651829248L);
      BigFraction bigFraction4 = BigFraction.ONE_HALF;
      BigFraction bigFraction5 = new BigFraction((double) 426);
      bigFraction2.floatValue();
      Random.setNextRandom(426);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.subtract(1075);
      BigFraction bigFraction3 = bigFraction1.MINUS_ONE.add(2);
      BigFraction bigFraction4 = bigFraction0.TWO_THIRDS.multiply(bigFraction1);
      bigFraction4.ONE_FIFTH.hashCode();
      bigFraction0.multiply(1589L);
      BigFraction bigFraction5 = bigFraction4.ZERO.divide(2);
      bigFraction5.TWO.bigDecimalValue(1075, 5);
      bigFraction0.bigDecimalValue(2, 2);
      BigFraction bigFraction6 = bigFraction0.negate();
      bigFraction6.FOUR_FIFTHS.reduce();
      BigFraction bigFraction7 = bigFraction4.pow(2);
      BigFraction bigFraction8 = bigFraction7.ONE.multiply(1075);
      BigFraction bigFraction9 = bigFraction2.add(bigFraction4);
      bigFraction9.TWO_QUARTERS.subtract(bigFraction7);
      BigFraction bigFraction10 = bigFraction4.multiply(1075);
      BigFraction bigFraction11 = bigFraction10.pow(1589L);
      bigFraction9.getField();
      BigFraction bigFraction12 = bigFraction2.reduce();
      BigInteger bigInteger0 = bigFraction2.getDenominator();
      bigFraction10.getDenominatorAsInt();
      bigFraction4.bigDecimalValue(1075, 2);
      BigFraction bigFraction13 = bigFraction12.divide((-1369));
      BigFraction bigFraction14 = bigFraction8.divide(bigInteger0);
      bigFraction14.ONE_QUARTER.getNumeratorAsInt();
      BigFraction.getReducedFraction(1075, (-1369));
      bigFraction5.add((-386));
      bigFraction3.subtract(bigFraction11);
      bigFraction0.getNumerator();
      bigFraction13.subtract(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(521L, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.negate();
      bigFraction0.MINUS_ONE.bigDecimalValue(5);
      bigFraction1.add(5);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.TWO_THIRDS.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(0L);
      bigFraction0.divide(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(32768L);
      BigFraction bigFraction1 = bigFraction0.add(1973);
      bigFraction1.MINUS_ONE.percentageValue();
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.reduce();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger1 = bigFraction0.getNumerator();
      bigFraction0.TWO.floatValue();
      BigFraction bigFraction4 = bigFraction0.divide(32L);
      Random.setNextRandom(1973);
      BigFraction bigFraction5 = bigFraction0.pow(bigInteger1);
      bigFraction2.floatValue();
      bigFraction1.add(2147483558);
      BigFraction bigFraction6 = bigFraction2.multiply(bigFraction5);
      bigFraction0.THREE_FIFTHS.negate();
      bigFraction6.ONE_FIFTH.getNumeratorAsInt();
      bigFraction5.divide((long) 2147483558);
      BigFraction bigFraction7 = bigFraction1.pow(1973);
      bigFraction7.ONE_FIFTH.divide(1154);
      BigFraction bigFraction8 = bigFraction3.subtract(2147483616);
      bigFraction8.TWO_QUARTERS.add(bigFraction4);
      Random.setNextRandom(2147483616);
      // Undeclared exception!
      try { 
        bigFraction7.bigDecimalValue(2139127680, (-962));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.getDenominatorAsInt();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.divide(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5.999027052894235E-9, 5.999027052894235E-9, 767);
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction1.longValue();
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      BigFraction bigFraction3 = bigFraction0.multiply(2032);
      bigFraction1.TWO.add(bigFraction2);
      BigFraction bigFraction4 = bigFraction3.subtract(1222L);
      bigFraction4.THREE_FIFTHS.hashCode();
      bigFraction4.TWO_QUARTERS.subtract(2032);
      BigFraction bigFraction5 = bigFraction0.multiply(2032);
      bigFraction3.getField();
      bigFraction5.subtract(bigInteger0);
      bigFraction3.getDenominator();
      bigFraction4.TWO_FIFTHS.add(5038L);
      BigFraction bigFraction6 = BigFraction.getReducedFraction(2032, 2632);
      bigFraction6.ONE_FIFTH.getDenominatorAsLong();
      bigFraction4.getDenominatorAsInt();
      bigFraction6.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.pow(1L);
      BigDecimal bigDecimal0 = new BigDecimal((long) 832);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-35));
      bigFraction0.pow((double) (-35));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3490.3744));
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.divide((-2430));
      bigFraction3.getDenominator();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2678, 9007199254740990L, 2678);
      bigFraction0.divide((long) 2678);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.multiply(0L);
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      bigFraction3.toString();
      bigFraction1.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.negate();
      bigFraction4.TWO.multiply(bigFraction2);
      int int0 = (-2317);
      BigFraction.getReducedFraction((-2317), (-2317));
      bigFraction2.getNumeratorAsInt();
      bigFraction2.multiply((-1431655765));
      int int1 = 188;
      BigFraction bigFraction5 = bigFraction3.divide(188);
      Object object0 = new Object();
      bigFraction5.THREE_QUARTERS.percentageValue();
      bigFraction0.equals(bigInteger0);
      bigFraction4.multiply((-1431655765));
      BigInteger bigInteger1 = null;
      // Undeclared exception!
      try { 
        bigFraction5.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.doubleValue();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.byteValueExact();
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      bigInteger0.longValueExact();
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigInteger bigInteger3 = BigInteger.TEN;
      bigFraction0.ONE_QUARTER.add(bigInteger3);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(100);
      bigFraction1.ONE_HALF.pow(bigInteger2);
      BigFraction bigFraction2 = bigFraction0.add(1L);
      BigFraction bigFraction3 = bigFraction2.multiply(1346L);
      BigFraction bigFraction4 = bigFraction3.subtract(100);
      bigFraction4.subtract(bigInteger3);
      bigFraction0.subtract(1740L);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow(bigInteger0);
      bigFraction1.ONE_HALF.longValue();
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.pow(419L);
      BigFraction bigFraction3 = BigFraction.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigFraction2.TWO_QUARTERS.divide(bigFraction3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = 0.0;
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.doubleValue();
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.pow(192);
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction2 = BigFraction.getReducedFraction((-1), 1075);
      bigFraction0.ZERO.hashCode();
      bigFraction0.floatValue();
      bigFraction1.ONE_THIRD.getDenominatorAsInt();
      bigFraction0.getDenominatorAsLong();
      bigFraction1.TWO_FIFTHS.getDenominatorAsInt();
      bigFraction0.THREE_QUARTERS.reciprocal();
      bigFraction0.FOUR_FIFTHS.equals("org.apache.commons.math3.fraction.BigFraction");
      BigFraction bigFraction3 = bigFraction1.subtract(192);
      BigInteger bigInteger0 = bigFraction3.getNumerator();
      BigFraction bigFraction4 = bigFraction1.divide((-3958705157555305932L));
      bigFraction4.ZERO.add((long) 1075);
      bigFraction4.TWO.getNumeratorAsLong();
      BigFraction bigFraction5 = bigFraction0.ONE_FIFTH.add(835);
      BigFraction bigFraction6 = bigFraction2.pow((long) (-1));
      BigFraction bigFraction7 = bigFraction0.pow((long) 192);
      BigFraction bigFraction8 = bigFraction6.TWO_QUARTERS.subtract(bigInteger0);
      BigFraction bigFraction9 = BigFraction.getReducedFraction(835, 835);
      bigFraction6.divide(3);
      bigFraction0.add(bigInteger0);
      bigFraction5.TWO_THIRDS.getNumeratorAsInt();
      bigFraction1.bigDecimalValue();
      bigFraction6.pow((long) 1075);
      bigFraction5.divide(bigFraction7);
      bigFraction9.multiply((-813));
      bigFraction1.bigDecimalValue(5);
      bigFraction7.getDenominatorAsLong();
      bigFraction8.multiply(629);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.pow((-573L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(bigInteger0);
      int int0 = 3;
      bigFraction0.ONE_HALF.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.divide(3);
      int int1 = (-2147483647);
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.add((-2147483647));
      bigFraction3.THREE_FIFTHS.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.ONE_FIFTH.multiply(bigInteger0);
      bigFraction0.floatValue();
      bigFraction1.ONE_QUARTER.subtract(bigInteger0);
      bigFraction1.bigDecimalValue();
      bigFraction2.FOUR_FIFTHS.multiply(3);
      BigFraction bigFraction5 = bigFraction4.add(3);
      BigFraction bigFraction6 = bigFraction0.THREE_QUARTERS.multiply(bigFraction2);
      bigFraction1.getDenominator();
      bigFraction5.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction6.bigDecimalValue((-2147483647), 3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 52;
      BigFraction bigFraction0 = new BigFraction(52, 52);
      BigFraction bigFraction1 = bigFraction0.divide((long) 52);
      BigFraction bigFraction2 = BigFraction.TWO;
      bigFraction2.TWO_FIFTHS.hashCode();
      BigFraction bigFraction3 = bigFraction0.subtract(52);
      bigFraction3.TWO.percentageValue();
      BigFraction bigFraction4 = bigFraction1.ZERO.subtract(bigFraction0);
      bigFraction4.subtract((long) 52);
      bigFraction4.ZERO.getNumeratorAsInt();
      double double0 = (-751.7);
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = new BigFraction(729.8906355293952, 1252, 1074);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.percentageValue();
      bigFraction1.TWO_THIRDS.subtract(bigFraction0);
      bigFraction1.longValue();
      bigFraction2.pow(1L);
      // Undeclared exception!
      try { 
        bigFraction2.pow(2147462973);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.abs();
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = new BigFraction(729.8906355293952, 1252, 1074);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction2.ONE_HALF.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.abs();
      bigFraction1.equals(bigFraction2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = new Object();
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-257), (-257));
      BigFraction bigFraction1 = bigFraction0.divide(113236205062349959L);
      bigFraction1.getDenominator();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 45;
      BigFraction bigFraction0 = new BigFraction((-704.5881573714606), 2144669121);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((-27), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) 9007199254740990L, 1623);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 9,007,199,254,740,990 to fraction (9,007,199,254,740,990/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        bigFraction0.pow((-587L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.multiply(0L);
      float float0 = bigFraction0.floatValue();
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertEquals(0.0F, float0, 0.01F);
      
      bigFraction1.equals(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = new BigFraction(0.4974554181098938, 0);
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      bigFraction1.bigDecimalValue();
      int int1 = 1075;
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(1075, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(83.528856, 352);
      BigFraction bigFraction1 = bigFraction0.multiply(352);
      BigFraction bigFraction2 = new BigFraction(83.528856, 352);
      bigFraction0.add(bigFraction2);
      BigFraction bigFraction3 = bigFraction1.multiply((long) 352);
      bigFraction3.abs();
      bigFraction1.MINUS_ONE.getNumeratorAsLong();
      bigFraction2.floatValue();
      bigFraction1.subtract(bigFraction3);
      bigFraction0.add(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3, (-1616));
      Object object0 = new Object();
      boolean boolean0 = bigFraction0.equals(object0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(83.528856, 352);
      bigFraction0.ZERO.getField();
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.multiply(0L);
      bigFraction1.ONE_FIFTH.toString();
      bigFraction0.getNumeratorAsLong();
      bigFraction1.toString();
      bigFraction1.pow((double) 8687L);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2519), (-2519));
      BigFraction bigFraction1 = new BigFraction((double) (-2519));
      bigFraction0.TWO_FIFTHS.multiply((-2519));
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction0.percentageValue();
      BigFraction bigFraction3 = bigFraction2.multiply((-308L));
      bigFraction2.abs();
      bigFraction0.floatValue();
      bigFraction1.subtract(bigFraction0);
      bigFraction3.getField();
      bigFraction1.getDenominatorAsInt();
      bigFraction2.negate();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = (-957);
      BigFraction bigFraction0 = new BigFraction(5.557647058793691E-4);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction0.TWO_FIFTHS.compareTo(bigFraction1);
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      bigFraction1.multiply((long) (-1));
      bigFraction0.getField();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-32);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = bigFraction0.add(bigInteger0);
      bigFraction1.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction2.subtract((long) (byte) (-32));
      bigFraction4.equals(bigFraction1);
      bigFraction3.multiply(1087);
      bigFraction3.getNumerator();
      bigFraction1.multiply((-5237L));
      BigFraction bigFraction5 = bigFraction0.pow(1345L);
      bigFraction2.getDenominatorAsLong();
      bigFraction5.subtract(bigFraction4);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.multiply(1524);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.percentageValue();
      bigFraction0.subtract(bigFraction1);
      bigFraction1.getNumeratorAsLong();
      BigFraction bigFraction3 = new BigFraction(1524);
      bigFraction1.toString();
      BigFraction bigFraction4 = BigFraction.getReducedFraction(1091, 1524);
      bigFraction3.multiply(bigFraction4);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2662.2820989963, 762);
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.divide((long) 762);
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.add(bigFraction1);
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction5 = bigFraction3.TWO_QUARTERS.pow(762);
      bigFraction5.THREE_FIFTHS.getDenominatorAsInt();
      bigFraction5.ZERO.bigDecimalValue(0);
      bigFraction1.ONE_FIFTH.getDenominatorAsLong();
      BigFraction bigFraction6 = bigFraction3.ONE_HALF.add(bigFraction4);
      BigFraction bigFraction7 = bigFraction1.THREE_FIFTHS.reduce();
      bigFraction1.pow((long) 762);
      BigFraction bigFraction8 = bigFraction7.ZERO.add(bigFraction3);
      bigFraction1.getField();
      byte[] byteArray0 = new byte[2];
      bigFraction8.ONE_FIFTH.doubleValue();
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)72;
      BigFraction bigFraction9 = bigFraction3.THREE_FIFTHS.add((int) (byte)92);
      bigFraction9.THREE_FIFTHS.multiply((long) 0);
      bigFraction0.MINUS_ONE.getField();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction10 = bigFraction7.add(bigInteger0);
      bigFraction10.ONE_QUARTER.bigDecimalValue();
      bigFraction10.THREE_FIFTHS.subtract((long) (byte)72);
      bigFraction6.ONE_QUARTER.equals(bigFraction5);
      BigFraction bigFraction11 = bigFraction3.multiply(668);
      bigFraction6.getNumerator();
      bigFraction11.ONE_HALF.multiply(9007199254740990L);
      bigFraction11.pow((long) (byte)72);
      bigFraction11.getDenominatorAsLong();
      bigFraction2.subtract(bigFraction8);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2519), (-2519));
      BigFraction bigFraction1 = new BigFraction((double) (-2519));
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.multiply((-2519));
      bigFraction1.divide((-2519));
      bigFraction1.multiply(17);
      bigFraction2.negate();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-3010), (-3010));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.FOUR_FIFTHS.percentageValue();
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.multiply(bigFraction1);
      bigFraction2.TWO_THIRDS.doubleValue();
      bigFraction0.ZERO.subtract(9007199172198400L);
      bigFraction0.TWO_THIRDS.getNumeratorAsLong();
      int int0 = (-2141382841);
      int int1 = (-410);
      BigFraction bigFraction3 = BigFraction.getReducedFraction((-2141382841), (-410));
      bigFraction2.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction3.multiply((-1));
      BigFraction bigFraction5 = BigFraction.ONE_HALF;
      bigFraction5.divide((-410));
      Object object0 = new Object();
      bigFraction5.equals("org.apache.commons.math3.fraction.BigFraction");
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction4.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = new BigFraction(0.4974554181098938, 0);
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction1.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigFraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      int int1 = 3;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.divide((long) 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2519), (-2519));
      BigFraction bigFraction1 = new BigFraction((double) (-2519));
      bigFraction0.TWO_FIFTHS.multiply((-2519));
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.THREE_QUARTERS.getNumeratorAsLong();
      bigFraction0.percentageValue();
      bigFraction0.longValue();
      bigFraction1.compareTo(bigFraction2);
      bigFraction2.multiply(bigFraction1);
      bigFraction1.intValue();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2519), (-2519));
      BigFraction bigFraction1 = new BigFraction((double) (-2519));
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.multiply((-2519));
      bigFraction2.getField();
      bigFraction1.doubleValue();
      BigFraction bigFraction3 = bigFraction0.add(1075);
      bigFraction3.multiply((long) (-2519));
      bigFraction3.getField();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)72;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction4 = bigFraction2.add(bigInteger0);
      BigFraction bigFraction5 = new BigFraction(bigInteger0);
      bigFraction5.bigDecimalValue();
      bigFraction5.subtract(398L);
      bigFraction2.multiply(528);
      bigFraction2.getNumerator();
      bigFraction4.pow((long) (byte)72);
      bigFraction4.getDenominatorAsLong();
      BigFraction bigFraction6 = BigFraction.THREE_QUARTERS;
      bigFraction0.subtract(bigFraction6);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.TWO_THIRDS.add(bigInteger0);
      bigFraction0.MINUS_ONE.subtract(bigInteger0);
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction0.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2662.2820989963, 762);
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.divide((long) 762);
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.add(bigFraction1);
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction5 = bigFraction3.TWO_QUARTERS.pow(762);
      bigFraction5.THREE_FIFTHS.getDenominatorAsInt();
      bigFraction5.ZERO.bigDecimalValue(0);
      bigFraction1.ONE_FIFTH.getDenominatorAsLong();
      BigFraction bigFraction6 = bigFraction3.ONE_HALF.add(bigFraction4);
      BigFraction bigFraction7 = bigFraction1.THREE_FIFTHS.reduce();
      bigFraction1.pow((long) 762);
      BigFraction bigFraction8 = bigFraction7.ZERO.add(bigFraction3);
      bigFraction1.getField();
      byte[] byteArray0 = new byte[2];
      bigFraction8.ONE_FIFTH.doubleValue();
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)72;
      BigFraction bigFraction9 = bigFraction3.THREE_FIFTHS.add((int) (byte)92);
      bigFraction9.ONE_QUARTER.add((-2307L));
      BigFraction bigFraction10 = new BigFraction(2662.2820989963, 762);
      bigFraction0.MINUS_ONE.getField();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction11 = bigFraction7.add(bigInteger0);
      bigFraction11.ONE_QUARTER.bigDecimalValue();
      bigFraction11.THREE_FIFTHS.subtract((long) (byte)72);
      bigFraction3.multiply(668);
      bigFraction6.getNumerator();
      bigFraction1.pow(1416L);
      bigFraction6.getDenominatorAsLong();
      BigFraction bigFraction12 = BigFraction.THREE_QUARTERS;
      bigFraction6.subtract(bigFraction12);
      bigFraction3.multiply(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2662.2820989963, 762);
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.divide((long) 762);
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.add(bigFraction1);
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction5 = bigFraction3.TWO_QUARTERS.pow(762);
      bigFraction5.THREE_FIFTHS.getDenominatorAsInt();
      bigFraction5.ZERO.bigDecimalValue(0);
      bigFraction1.ONE_FIFTH.getDenominatorAsLong();
      BigFraction bigFraction6 = bigFraction3.ONE_HALF.add(bigFraction4);
      BigFraction bigFraction7 = bigFraction1.THREE_FIFTHS.reduce();
      bigFraction1.pow((long) 762);
      BigFraction bigFraction8 = bigFraction7.ZERO.add(bigFraction3);
      bigFraction1.getField();
      byte[] byteArray0 = new byte[2];
      bigFraction8.ONE_FIFTH.doubleValue();
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)72;
      BigFraction bigFraction9 = bigFraction3.THREE_FIFTHS.add((int) (byte)92);
      bigFraction9.THREE_FIFTHS.multiply((long) 0);
      bigFraction0.MINUS_ONE.getField();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction10 = bigFraction7.add(bigInteger0);
      bigFraction10.ONE_QUARTER.bigDecimalValue();
      bigFraction10.THREE_FIFTHS.subtract((long) (byte)72);
      BigFraction bigFraction11 = bigFraction3.multiply(668);
      bigFraction6.getNumerator();
      BigFraction bigFraction12 = bigFraction8.pow((long) (byte)92);
      bigFraction5.getDenominatorAsLong();
      bigFraction11.subtract(bigFraction12);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(83.528856, 352);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction1.compareTo(bigFraction0);
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction2.divide(bigFraction1);
      bigFraction1.doubleValue();
      bigFraction1.percentageValue();
      BigFraction bigFraction4 = bigFraction3.add(1);
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue(1, 352);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.multiply(0L);
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = BigFraction.FOUR_FIFTHS;
      bigFraction3.toString();
      bigFraction1.add(bigInteger0);
      bigFraction2.negate();
      int int0 = (-2317);
      BigFraction.getReducedFraction((-2317), (-2317));
      bigFraction2.getNumeratorAsInt();
      bigFraction2.multiply((-1431655765));
      int int1 = 188;
      BigFraction bigFraction4 = bigFraction3.divide(188);
      Object object0 = new Object();
      bigFraction0.equals(bigInteger0);
      BigInteger bigInteger1 = null;
      // Undeclared exception!
      try { 
        bigFraction4.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9007199254740990L, 40L);
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.pow(40L);
      BigFraction bigFraction3 = bigFraction1.TWO_FIFTHS.reciprocal();
      bigFraction0.subtract(bigFraction1);
      bigFraction3.getNumeratorAsLong();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)1;
      BigFraction bigFraction4 = bigFraction2.multiply((long) (byte) (-1));
      bigFraction4.floatValue();
      bigFraction0.getDenominator();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2519), (-2519));
      BigFraction bigFraction1 = new BigFraction((-4228.0524497502975));
      bigFraction0.multiply((-3678L));
      bigFraction0.floatValue();
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.multiply(1524);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.percentageValue();
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction((-144.342711), (-1745.715929886277), (-5173));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -144.343 to fraction after -5,173 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1), (-1));
      bigFraction0.pow((double) (-1));
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction1.THREE_QUARTERS.getField();
      BigFraction bigFraction2 = bigFraction0.multiply((-1));
      bigFraction0.ONE.divide(bigFraction2);
      bigFraction2.TWO.bigDecimalValue(5);
      bigFraction2.getDenominatorAsInt();
      bigFraction1.reduce();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.MINUS_ONE.add(bigInteger0);
      bigFraction0.ONE_FIFTH.floatValue();
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow((-2939L));
      bigFraction0.bigDecimalValue();
      bigFraction1.ONE_FIFTH.add(1);
      bigFraction1.ONE_HALF.subtract((long) 1);
      bigFraction0.TWO_FIFTHS.multiply(2704L);
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.FOUR_FIFTHS.percentageValue();
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.multiply(bigFraction1);
      bigFraction2.TWO_THIRDS.doubleValue();
      bigFraction0.TWO_THIRDS.getNumeratorAsLong();
      bigFraction0.FOUR_FIFTHS.percentageValue();
      bigFraction0.getDenominator();
      BigFraction bigFraction3 = bigFraction0.divide(1417L);
      bigFraction3.abs();
      bigFraction3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = (-1);
      BigFraction bigFraction0 = new BigFraction(2186.697089951, (-1));
      bigFraction0.TWO_THIRDS.doubleValue();
      bigFraction0.getField();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.divide(bigInteger0);
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction0.TWO_QUARTERS.divide((-1));
      bigFraction0.add(bigFraction2);
      BigFraction.getReducedFraction((-1), (-1151));
      bigFraction0.TWO.getNumeratorAsLong();
      Object object0 = null;
      BigFraction bigFraction3 = bigFraction1.TWO_QUARTERS.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.reduce();
      bigFraction4.ZERO.getDenominatorAsInt();
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = new BigFraction(0.4974554181098938, 0);
      bigFraction0.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.FOUR_FIFTHS.intValue();
      BigFraction bigFraction1 = bigFraction0.TWO.negate();
      bigFraction0.longValue();
      BigFraction bigFraction2 = bigFraction0.divide(4095L);
      bigFraction2.TWO_FIFTHS.floatValue();
      bigFraction1.percentageValue();
      BigFraction.getReducedFraction(0, 0);
      BigFraction bigFraction3 = bigFraction0.pow(0);
      BigFraction bigFraction4 = bigFraction3.multiply(bigFraction0);
      bigFraction3.multiply(270);
      BigFraction.getReducedFraction(0, 270);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction4.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.MINUS_ONE.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.divide((-2668L));
      bigFraction1.TWO_FIFTHS.equals(bigInteger0);
      bigFraction0.add(9218868437227405312L);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9007199254740990L, 34L);
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.pow(34L);
      BigFraction bigFraction3 = bigFraction1.TWO_FIFTHS.reciprocal();
      BigFraction bigFraction4 = bigFraction0.subtract(bigFraction1);
      bigFraction3.getNumeratorAsLong();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte) (-32);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction2.ZERO.multiply(bigInteger0);
      bigFraction2.subtract(bigFraction4);
      bigFraction2.multiply((-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2207L);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.divide(3253L);
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.multiply((-354L));
      bigFraction0.FOUR_FIFTHS.floatValue();
      BigFraction bigFraction3 = bigFraction0.TWO_QUARTERS.divide(2207L);
      bigFraction2.ZERO.subtract(bigFraction1);
      bigFraction0.getNumeratorAsLong();
      bigFraction0.THREE_FIFTHS.multiply(1L);
      bigFraction3.compareTo(bigFraction0);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      bigFraction0.MINUS_ONE.multiply((-1));
      bigFraction2.divide((-718L));
      bigFraction0.compareTo(bigFraction2);
      bigFraction2.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.reciprocal();
      BigFraction bigFraction5 = BigFraction.ONE;
      bigFraction5.TWO_QUARTERS.getDenominatorAsLong();
      bigFraction5.THREE_FIFTHS.percentageValue();
      bigFraction4.ONE.compareTo(bigFraction5);
      bigFraction1.reciprocal();
      BigFraction bigFraction6 = bigFraction4.TWO_THIRDS.subtract((long) 1);
      bigFraction6.THREE_FIFTHS.subtract(0);
      bigFraction4.intValue();
      bigFraction4.getNumeratorAsInt();
      BigFraction bigFraction7 = bigFraction1.reciprocal();
      bigFraction7.TWO_FIFTHS.getField();
      bigFraction3.add(bigInteger0);
      bigFraction6.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction0.ZERO.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.MINUS_ONE.add(bigInteger0);
      BigFraction bigFraction3 = BigFraction.ONE_THIRD;
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.multiply(0L);
      bigFraction4.ZERO.multiply(bigFraction1);
      bigFraction0.MINUS_ONE.pow(37);
      bigFraction0.divide(bigFraction3);
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction((double) 37, 5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 37 to fraction (9,223,372,036,854,775,772/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1380));
      BigFraction bigFraction1 = bigFraction0.ONE.add(9218868437227405312L);
      bigFraction1.ONE.reduce();
      BigFraction bigFraction2 = bigFraction0.reduce();
      bigFraction2.THREE_QUARTERS.pow((double) (-1380));
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue((-727), (-727));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.percentageValue();
      bigFraction0.MINUS_ONE.divide(827L);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3302L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.pow(bigInteger0);
      bigFraction2.FOUR_FIFTHS.hashCode();
      BigFraction bigFraction3 = bigFraction0.MINUS_ONE.pow(bigInteger0);
      bigFraction3.THREE_FIFTHS.getNumeratorAsInt();
      BigInteger bigInteger1 = bigFraction1.getNumerator();
      bigFraction1.compareTo(bigFraction0);
      bigFraction1.ZERO.doubleValue();
      bigFraction2.ONE_QUARTER.subtract(3);
      bigFraction2.ONE_THIRD.add((-3302L));
      BigFraction bigFraction4 = bigFraction2.add(0);
      BigFraction bigFraction5 = bigFraction2.subtract(bigFraction4);
      bigFraction5.TWO_QUARTERS.doubleValue();
      bigFraction5.ONE_QUARTER.subtract(bigInteger0);
      BigFraction bigFraction6 = bigFraction1.multiply(4503599627370496L);
      bigFraction6.hashCode();
      bigFraction4.pow(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2519), (-2519));
      BigFraction bigFraction1 = new BigFraction((double) (-2519));
      bigFraction0.TWO_FIFTHS.multiply((-2519));
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction0.percentageValue();
      bigFraction0.longValue();
      bigFraction1.compareTo(bigFraction2);
      bigFraction2.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.ONE_FIFTH.equals((Object) null);
      BigFraction bigFraction1 = new BigFraction((-3603.198694579782), 1082.2, (-1));
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.pow((-1));
      bigFraction1.TWO_QUARTERS.longValue();
      BigFraction bigFraction3 = bigFraction1.TWO.add(1);
      bigFraction3.ONE_HALF.subtract(bigFraction2);
      MockRandom mockRandom0 = new MockRandom(1L);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(1, 1, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.hashCode();
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.ONE.subtract(bigFraction1);
      bigFraction1.THREE_FIFTHS.multiply((long) 0);
      BigFraction bigFraction2 = bigFraction0.subtract(0);
      bigFraction0.ONE_FIFTH.toString();
      BigFraction bigFraction3 = bigFraction1.negate();
      bigFraction3.TWO.percentageValue();
      byte[] byteArray0 = new byte[9];
      BigFraction bigFraction4 = bigFraction2.ONE_FIFTH.subtract(0);
      bigFraction4.THREE_QUARTERS.multiply(0);
      // Undeclared exception!
      try { 
        bigFraction4.ZERO.bigDecimalValue(0, (-423));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = new BigFraction(1, 1);
      bigFraction1.ONE_HALF.getField();
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.multiply(bigFraction1);
      bigFraction1.FOUR_FIFTHS.percentageValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.ONE_HALF.doubleValue();
      bigFraction2.TWO_FIFTHS.getNumeratorAsInt();
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.negate();
      BigFraction bigFraction5 = bigFraction4.TWO_THIRDS.add(bigFraction0);
      bigFraction1.ZERO.percentageValue();
      BigFraction bigFraction6 = bigFraction2.ONE_QUARTER.subtract(bigFraction3);
      BigFraction bigFraction7 = bigFraction6.MINUS_ONE.divide(1);
      bigFraction1.ONE_THIRD.getField();
      bigFraction7.add(1);
      bigFraction6.ONE_FIFTH.multiply(bigFraction2);
      bigFraction0.getDenominatorAsInt();
      bigFraction2.floatValue();
      bigFraction1.bigDecimalValue();
      BigFraction bigFraction8 = bigFraction3.pow(bigInteger0);
      bigFraction5.THREE_FIFTHS.add(bigInteger0);
      bigFraction3.floatValue();
      bigFraction0.THREE_QUARTERS.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction8.bigDecimalValue(2, (-1412));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      bigFraction0.TWO_FIFTHS.compareTo(bigFraction1);
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      bigFraction2.ONE_FIFTH.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction0.TWO_QUARTERS.divide(bigFraction2);
      bigFraction3.ONE.doubleValue();
      bigFraction0.percentageValue();
      bigFraction0.add(1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.abs();
      bigInteger1.isProbablePrime((byte)59);
      bigInteger0.gcd(bigInteger1);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.MINUS_ONE.negate();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      int int0 = (-316);
      BigFraction bigFraction1 = bigFraction0.add((-316));
      bigFraction1.THREE_QUARTERS.equals(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction1.TWO_FIFTHS.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5, 5);
      bigFraction0.ONE_QUARTER.percentageValue();
      bigFraction0.floatValue();
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.negate();
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.subtract(2649L);
      bigFraction0.FOUR_FIFTHS.getDenominatorAsInt();
      bigFraction0.hashCode();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.pow(bigInteger0);
      bigFraction3.TWO_FIFTHS.multiply((long) 5);
      bigFraction3.ZERO.pow(bigInteger0);
      bigFraction3.THREE_QUARTERS.getNumeratorAsInt();
      bigFraction3.ONE_HALF.reciprocal();
      BigFraction bigFraction4 = bigFraction0.pow(bigInteger0);
      bigFraction4.ONE.multiply(bigInteger0);
      bigFraction2.getField();
      bigFraction1.abs();
      BigFraction bigFraction5 = bigFraction0.add(2649L);
      bigFraction5.TWO_FIFTHS.abs();
      BigFraction bigFraction6 = bigFraction2.THREE_QUARTERS.abs();
      bigFraction6.ONE.negate();
      bigFraction2.longValue();
      bigFraction0.getField();
      bigFraction2.bigDecimalValue(1375, 5);
      BigFraction bigFraction7 = null;
      try {
        bigFraction7 = new BigFraction(25.0, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 25 to fraction (9,223,372,036,854,775,784/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-957));
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = new BigFraction(2, 2, 2);
      BigFraction bigFraction2 = bigFraction1.TWO.reciprocal();
      bigFraction2.MINUS_ONE.bigDecimalValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction.getReducedFraction(401, 401);
      BigFraction bigFraction3 = bigFraction1.THREE_QUARTERS.multiply(bigFraction0);
      bigFraction3.THREE_QUARTERS.add((long) 401);
      BigFraction bigFraction4 = bigFraction1.THREE_FIFTHS.divide(bigInteger0);
      BigFraction bigFraction5 = bigFraction0.TWO_THIRDS.divide(1300L);
      BigFraction bigFraction6 = bigFraction0.add(bigFraction1);
      bigFraction0.getNumeratorAsInt();
      bigFraction5.getField();
      bigFraction5.pow((-244.90477));
      BigFraction bigFraction7 = bigFraction0.multiply(2);
      bigFraction7.divide(bigInteger0);
      bigFraction5.getField();
      bigFraction4.getNumeratorAsInt();
      bigFraction6.pow((double) 2);
      bigFraction5.divide(1300L);
      bigFraction6.intValue();
      bigFraction6.add(bigInteger0);
      bigFraction1.multiply(0L);
      // Undeclared exception!
      try { 
        bigFraction6.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.reduce();
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 52;
      BigFraction bigFraction0 = new BigFraction(52, 52);
      BigFraction bigFraction1 = bigFraction0.divide((long) 52);
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.divide(bigFraction1);
      byte[] byteArray0 = new byte[0];
      bigFraction2.TWO_FIFTHS.hashCode();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = null;
      try { 
        bigFraction0.ONE_FIFTH.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = (-1866);
      BigFraction bigFraction0 = new BigFraction((-2868.029137776766), (-1866));
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.THREE_FIFTHS.equals((Object) null);
      bigFraction0.longValue();
      BigFraction bigFraction1 = bigFraction0.abs();
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      BigFraction bigFraction2 = bigFraction1.add(0L);
      bigFraction2.TWO_FIFTHS.percentageValue();
      BigFraction bigFraction3 = bigFraction1.pow((-1231));
      bigFraction2.ONE_FIFTH.subtract(362L);
      bigFraction3.FOUR_FIFTHS.getField();
      bigFraction3.doubleValue();
      bigFraction2.bigDecimalValue(1);
      bigFraction2.doubleValue();
      BigFraction bigFraction4 = bigFraction0.divide(bigFraction2);
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction5 = bigFraction4.pow(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction6 = bigFraction5.TWO_THIRDS.add(bigInteger1);
      bigFraction6.TWO_QUARTERS.pow((double) 1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction4.multiply(bigInteger2);
      BigFraction bigFraction7 = bigFraction1.add((-1103L));
      bigFraction7.ONE_FIFTH.floatValue();
      BigFraction bigFraction8 = bigFraction7.divide((-1231));
      bigFraction8.TWO_FIFTHS.getDenominatorAsLong();
      bigFraction7.longValue();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2662.2820989963, 762);
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.divide((long) 762);
      BigFraction bigFraction3 = bigFraction2.ONE_QUARTER.add(bigFraction1);
      BigFraction bigFraction4 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction5 = bigFraction3.TWO_QUARTERS.pow(762);
      bigFraction5.THREE_FIFTHS.getDenominatorAsInt();
      bigFraction5.ZERO.bigDecimalValue(0);
      bigFraction1.ONE_FIFTH.getDenominatorAsLong();
      BigFraction bigFraction6 = bigFraction3.ONE_HALF.add(bigFraction4);
      BigFraction bigFraction7 = bigFraction1.THREE_FIFTHS.reduce();
      bigFraction1.pow((long) 762);
      BigFraction bigFraction8 = bigFraction7.ZERO.add(bigFraction3);
      bigFraction1.getField();
      byte[] byteArray0 = new byte[2];
      bigFraction8.ONE_FIFTH.doubleValue();
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)72;
      BigFraction bigFraction9 = bigFraction3.THREE_FIFTHS.add((int) (byte)92);
      bigFraction9.THREE_FIFTHS.multiply((long) 0);
      bigFraction0.MINUS_ONE.getField();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction10 = bigFraction7.add(bigInteger0);
      bigFraction10.ONE_QUARTER.bigDecimalValue();
      assertEquals((short)2662, bigFraction1.shortValue());
      
      bigFraction10.THREE_FIFTHS.subtract((long) (byte)72);
      BigFraction bigFraction11 = bigFraction3.multiply(668);
      bigFraction6.getNumerator();
      bigFraction11.pow((long) (byte)72);
      bigFraction11.getDenominatorAsLong();
      BigFraction bigFraction12 = bigFraction2.subtract(bigFraction8);
      assertTrue(bigFraction8.equals((Object)bigFraction3));
      assertEquals((byte) (-102), bigFraction12.byteValue());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.add(bigFraction1);
      bigFraction0.THREE_FIFTHS.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1115);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      int int0 = 1075;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1075, 1075);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 352;
      BigFraction bigFraction0 = new BigFraction(83.528856, 352);
      bigFraction0.ZERO.getField();
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.multiply(0L);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.multiply(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.ONE_FIFTH.toString();
      bigFraction2.ZERO.add(bigInteger0);
      bigFraction2.ONE_THIRD.negate();
      BigFraction.getReducedFraction(352, (-2317));
      bigFraction1.ONE_FIFTH.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction0.multiply(352);
      BigFraction bigFraction4 = bigFraction3.ONE_HALF.divide((-753));
      Object object0 = new Object();
      bigFraction4.ZERO.equals(object0);
      BigInteger bigInteger1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1308, (-1));
      bigFraction0.longValue();
      BigFraction bigFraction1 = bigFraction0.multiply((long) (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.ONE.multiply(bigInteger0);
      bigFraction0.hashCode();
      bigFraction2.abs();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(412);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.pow(bigInteger0);
      bigFraction2.intValue();
      bigFraction1.floatValue();
      int int0 = 1;
      bigFraction1.ONE_QUARTER.multiply(bigFraction0);
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1041.6914213);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.divide((-79L));
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      bigFraction0.getNumerator();
      BigFraction.getReducedFraction((-1), (-3018));
      bigFraction1.negate();
      // Undeclared exception!
      try { 
        bigFraction2.ONE_THIRD.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, 0.0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }
}
