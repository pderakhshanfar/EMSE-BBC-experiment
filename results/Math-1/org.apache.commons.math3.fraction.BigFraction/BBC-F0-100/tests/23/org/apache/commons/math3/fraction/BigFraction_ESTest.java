/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 20:22:21 GMT 2021
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-3209), (-1900));
      BigFraction bigFraction1 = bigFraction0.subtract(37);
      bigFraction1.pow(5.575759739697068E-8);
      BigFraction bigFraction2 = bigFraction0.divide(9223372036854775807L);
      bigFraction1.divide(bigFraction0);
      bigFraction1.FOUR_FIFTHS.divide(bigFraction2);
      Object object0 = new Object();
      bigFraction0.equals(object0);
      BigFraction bigFraction3 = new BigFraction(Double.NaN, 629);
      BigFraction bigFraction4 = new BigFraction((double) 629);
      bigFraction4.ZERO.reduce();
      bigFraction1.add((long) 37);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, Integer.MAX_VALUE, 2147418110);
      bigFraction0.TWO_FIFTHS.pow((-2011L));
      BigFraction bigFraction1 = new BigFraction((double) 2147418110);
      BigFraction bigFraction2 = BigFraction.ONE;
      bigFraction2.MINUS_ONE.percentageValue();
      bigFraction0.ONE_QUARTER.subtract((-2136));
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.divide(bigFraction1);
      BigFraction bigFraction4 = new BigFraction((double) 2147418110);
      bigFraction3.getDenominator();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(828L);
      BigFraction bigFraction2 = new BigFraction(0.04030988747399533);
      BigFraction bigFraction3 = BigFraction.ONE;
      bigFraction1.percentageValue();
      bigFraction0.subtract(86);
      BigFraction bigFraction4 = new BigFraction(86, 828L);
      Object object0 = new Object();
      bigFraction1.equals("length of regressor array = {0} does not match the number of variables = {1} in the model");
      BigFraction bigFraction5 = null;
      try {
        bigFraction5 = new BigFraction((-1767.0), 86);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1,767 to fraction (-9,223,372,036,854,774,040/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1877.5417809);
      bigFraction0.ZERO.bigDecimalValue(2720, 1);
      bigFraction0.subtract(2047L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)67;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigFraction0.multiply((long) (byte)31);
      bigFraction1.ONE_QUARTER.doubleValue();
      bigFraction0.pow((int) (byte)31);
      bigFraction0.toString();
      bigFraction1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(37, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.abs();
      int int0 = 7;
      // Undeclared exception!
      try { 
        bigFraction1.TWO_QUARTERS.bigDecimalValue(2145346848, 7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, Integer.MAX_VALUE, 2147418110);
      BigFraction bigFraction1 = new BigFraction((double) 2147418110);
      BigFraction bigFraction2 = BigFraction.ONE;
      bigFraction2.MINUS_ONE.percentageValue();
      bigFraction2.THREE_QUARTERS.divide(bigFraction1);
      bigFraction0.doubleValue();
      bigFraction0.bigDecimalValue(1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-749.94803018), 4);
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.negate();
      bigFraction1.TWO.doubleValue();
      bigFraction1.TWO.add((-9223372036854775808L));
      BigFraction bigFraction2 = BigFraction.getReducedFraction(4, (-1346));
      bigFraction0.subtract((-1));
      BigFraction.getReducedFraction((-1346), (-1));
      bigFraction0.getDenominator();
      BigFraction bigFraction3 = bigFraction2.pow((long) 4);
      bigFraction1.doubleValue();
      bigFraction3.getDenominatorAsInt();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      try { 
        bigFraction0.ONE_FIFTH.add((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot convert infinite value
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-869L));
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.compareTo((BigFraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7976931348623157E308);
      bigFraction0.divide(2147134520);
      bigFraction0.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      bigFraction0.percentageValue();
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 2147418110;
      int int1 = 120;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(8.403887374207366E221, 1.7976931348623157E308, 120);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 840,388,737,420,736,600,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(20.808200386144062, 20.808200386144062, (-2147483635));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.divide(bigInteger0);
      bigFraction0.TWO_FIFTHS.bigDecimalValue();
      bigFraction0.percentageValue();
      bigFraction1.multiply(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-31);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.TWO_THIRDS.pow(bigInteger0);
      bigFraction0.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.equals(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.percentageValue();
      bigFraction0.getDenominatorAsLong();
      bigFraction0.pow(13);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      long long0 = (-1L);
      BigFraction bigFraction1 = bigFraction0.divide((-1L));
      bigFraction0.MINUS_ONE.reciprocal();
      bigFraction1.TWO.getDenominatorAsLong();
      bigFraction1.getNumeratorAsInt();
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue((-2), (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-242.3554272332792));
      // Undeclared exception!
      try { 
        bigFraction0.ONE.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction((-1347.16404343));
      bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      BigFraction bigFraction2 = new BigFraction(0.49093999999990956);
      BigFraction bigFraction3 = BigFraction.getReducedFraction((-3873), (-4032));
      BigFraction bigFraction4 = bigFraction3.pow(97);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction4.floatValue();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.ONE_THIRD.abs();
      bigFraction0.multiply((-1218));
      BigFraction bigFraction3 = bigFraction0.divide(212992595591168L);
      bigFraction2.add(bigFraction0);
      bigFraction1.doubleValue();
      bigFraction0.bigDecimalValue();
      bigFraction3.multiply((-3488L));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2251.51609);
      bigFraction0.THREE_QUARTERS.percentageValue();
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.multiply((-3111L));
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.multiply(68719476704L);
      bigFraction0.ZERO.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.TWO_QUARTERS.reciprocal();
      bigFraction3.ONE_HALF.divide(bigFraction2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.ONE_QUARTER.longValue();
      BigFraction bigFraction4 = bigFraction0.MINUS_ONE.add(bigInteger0);
      bigFraction0.floatValue();
      BigFraction bigFraction5 = bigFraction4.divide(1257);
      bigFraction0.getDenominator();
      BigInteger bigInteger1 = bigFraction5.getNumerator();
      BigFraction bigFraction6 = bigFraction5.multiply((-3979457797L));
      BigFraction bigFraction7 = new BigFraction(6947, 6947);
      bigFraction6.ZERO.floatValue();
      BigFraction bigFraction8 = bigFraction6.multiply(bigFraction7);
      bigFraction4.ONE.multiply(bigFraction1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction6.TWO_THIRDS.subtract(bigInteger2);
      bigFraction4.ONE_QUARTER.getNumeratorAsInt();
      bigFraction8.multiply(1483);
      BigFraction bigFraction9 = bigFraction0.pow(37);
      bigFraction1.equals(bigInteger0);
      bigFraction6.add(bigInteger0);
      bigFraction4.reciprocal();
      bigFraction9.add(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction((-1347.16404343));
      bigFraction1.ONE_THIRD.toString();
      bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      BigFraction bigFraction2 = new BigFraction(0.49093999999990956);
      BigFraction bigFraction3 = bigFraction2.pow((-3873));
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction0.floatValue();
      bigFraction1.getNumeratorAsInt();
      bigFraction3.divide((long) (-3873));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction1.pow((-171));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1133.06012800972));
      int int0 = 2144613565;
      bigFraction0.FOUR_FIFTHS.add(2144613565);
      bigFraction0.TWO_THIRDS.getNumeratorAsInt();
      BigFraction bigFraction1 = bigFraction0.divide(4128758039469618L);
      bigFraction1.ONE_FIFTH.add(bigFraction0);
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      bigFraction2.percentageValue();
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction1.TWO.pow((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction((-818.2573488644123), 3);
      BigFraction bigFraction2 = new BigFraction((long) 3);
      BigFraction bigFraction3 = new BigFraction((-818.2573488644123), 7.77328837578952E-9, 52);
      bigFraction2.getField();
      bigFraction0.reduce();
      BigFraction bigFraction4 = BigFraction.THREE_FIFTHS;
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.add(929L);
      BigFraction bigFraction3 = bigFraction1.TWO.multiply(bigFraction0);
      bigFraction3.THREE_FIFTHS.getNumeratorAsLong();
      bigFraction0.bigDecimalValue(0, 0);
      BigFraction bigFraction4 = bigFraction1.pow(0);
      BigFraction bigFraction5 = bigFraction0.THREE_QUARTERS.add(bigFraction2);
      bigFraction5.TWO.floatValue();
      BigFraction bigFraction6 = bigFraction4.ONE_FIFTH.subtract((-1260L));
      BigFraction bigFraction7 = bigFraction3.subtract(bigFraction2);
      bigFraction3.getDenominatorAsInt();
      bigFraction4.bigDecimalValue();
      bigFraction7.multiply(3L);
      BigFraction bigFraction8 = bigFraction7.add(0);
      bigFraction8.FOUR_FIFTHS.negate();
      BigFraction bigFraction9 = bigFraction6.negate();
      bigFraction9.reciprocal();
      bigFraction6.bigDecimalValue(0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.toString();
      bigFraction1.longValue();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction((-460.84006006));
      bigFraction0.longValue();
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction((-1347.16404343));
      BigFraction bigFraction1 = new BigFraction(bigInteger1);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction3 = new BigFraction(0.49093999999990956);
      bigFraction2.toString();
      bigFraction0.pow((-3873));
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction1.subtract(bigInteger1);
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.ONE_HALF.getNumeratorAsLong();
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction0.doubleValue();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction2 = new BigFraction(0.03333333333333144, 3);
      BigFraction bigFraction3 = bigFraction2.pow(bigInteger0);
      BigFraction bigFraction4 = new BigFraction((-2232));
      bigFraction4.longValue();
      bigFraction2.getField();
      bigFraction3.percentageValue();
      bigFraction3.longValue();
      bigFraction4.getDenominatorAsInt();
      BigFraction bigFraction5 = bigFraction3.divide(2541L);
      BigFraction bigFraction6 = new BigFraction(0.0);
      bigFraction6.intValue();
      BigFraction bigFraction7 = new BigFraction((-2232L));
      bigFraction7.subtract((long) 1075);
      BigDecimal bigDecimal0 = new BigDecimal(3.9108272176235914E-11);
      bigFraction5.longValue();
      bigFraction7.getNumeratorAsInt();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1139, 1139);
      BigFraction bigFraction1 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.MINUS_ONE.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction((-1347.16404343));
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      BigFraction bigFraction3 = new BigFraction(0.49093999999990956);
      BigFraction bigFraction4 = BigFraction.THREE_QUARTERS;
      bigFraction4.longValue();
      bigFraction3.getField();
      bigFraction0.percentageValue();
      BigFraction bigFraction5 = bigFraction4.pow(bigInteger0);
      bigFraction2.longValue();
      bigFraction5.getDenominatorAsInt();
      BigFraction bigFraction6 = BigFraction.THREE_FIFTHS;
      bigFraction5.divide((-1077L));
      bigFraction0.TWO.add(bigInteger0);
      BigFraction bigFraction7 = new BigFraction(1016.6941);
      int int0 = (-2945);
      bigFraction6.divide((-2945));
      // Undeclared exception!
      try { 
        bigFraction5.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.pow((long) (-948));
      BigFraction.getReducedFraction((-948), (-948));
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction(938, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction((-1347.16404343));
      bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      BigFraction bigFraction2 = new BigFraction(0.49093999999990956);
      bigFraction0.toString();
      BigFraction bigFraction3 = bigFraction2.pow((-3873));
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction2.subtract(bigInteger1);
      bigFraction3.floatValue();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = new BigFraction((-1347.16404343));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short) (-1347), bigFraction1.shortValue());
      assertEquals((byte) (-67), bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.multiply(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short) (-1347), bigFraction1.shortValue());
      assertEquals((byte) (-67), bigFraction1.byteValue());
      assertEquals((short) (-1077), bigFraction2.shortValue());
      assertEquals((byte) (-53), bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = new BigFraction(0.49093999999990956);
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      
      String string0 = bigFraction0.toString();
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(string0);
      assertEquals("1 / 3", string0);
      
      BigFraction bigFraction4 = bigFraction3.pow((-3873));
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction3.subtract(bigInteger1);
      bigFraction2.multiply(1413);
      bigFraction1.equals(bigFraction2);
      BigFraction.getReducedFraction((-3873), (-3873));
      bigFraction4.add(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.abs();
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = bigFraction1.multiply(4859);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      
      boolean boolean0 = bigFraction0.equals(bigFraction3);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertTrue(boolean0);
      
      BigFraction bigFraction4 = bigFraction2.subtract((-1073741824L));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertNotNull(bigFraction4);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1026.50906, 1364);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      double double0 = bigFraction0.TWO_QUARTERS.pow(0.0);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals(1.0, double0, 0.01);
      
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.pow(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = bigFraction0.reduce();
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals((byte)2, bigFraction3.byteValue());
      assertEquals((short)1026, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-918), 1364);
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertNotNull(bigFraction4);
      
      double double1 = bigFraction0.percentageValue();
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals(102650.90595340812, double1, 0.01);
      
      BigFraction bigFraction5 = bigFraction1.subtract(bigFraction3);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction3.byteValue());
      assertEquals((short)1026, bigFraction3.shortValue());
      assertEquals((byte) (-2), bigFraction5.byteValue());
      assertEquals((short) (-1026), bigFraction5.shortValue());
      assertNotNull(bigFraction5);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals(1L, long0);
      
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      
      int int0 = bigFraction1.getNumeratorAsInt();
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals(4, int0);
      
      float float0 = bigFraction0.floatValue();
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals(1.0F, float0, 0.01F);
      
      BigInteger bigInteger1 = bigFraction0.getDenominator();
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      BigFraction bigFraction3 = bigFraction1.multiply(bigFraction2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((short)1, bigFraction3.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertNotNull(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483647L);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      boolean boolean0 = bigFraction0.ZERO.equals((Object) null);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = null;
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.ONE_HALF.getNumeratorAsLong();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals(1L, long0);
      
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(1L);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.reduce();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      long long1 = bigFraction1.ZERO.longValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(long1 == long0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals(0L, long1);
      
      long long2 = bigFraction1.ZERO.longValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals(0L, long2);
      
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals(3, int0);
      
      float float0 = bigFraction3.floatValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals(0.8666667F, float0, 0.01F);
      
      BigFractionField bigFractionField0 = bigFraction3.getField();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotNull(bigFractionField0);
      
      int int1 = bigFraction0.getNumeratorAsInt();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(int1 == int0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals(2, int1);
      
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short) (-1), bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction4 = bigFraction3.negate();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotNull(bigFraction4);
      
      BigFraction bigFraction5 = bigFraction4.ONE_THIRD.divide(bigInteger0);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short) (-1), bigInteger0.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertNotNull(bigFraction5);
      
      BigFraction bigFraction6 = bigFraction5.TWO_FIFTHS.reduce();
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction6);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short) (-1), bigInteger0.shortValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertNotNull(bigFraction6);
      
      BigFraction bigFraction7 = bigFraction1.negate();
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction5);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction7.byteValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertNotNull(bigFraction7);
      
      BigFraction bigFraction8 = bigFraction2.multiply(bigInteger0);
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction7));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction8);
      assertEquals((byte)0, bigFraction8.byteValue());
      assertEquals((short)0, bigFraction8.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short) (-1), bigInteger0.shortValue());
      assertNotNull(bigFraction8);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.ONE_HALF.getNumeratorAsLong();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals(1L, long0);
      
      BigFraction bigFraction1 = new BigFraction((-2.1083014672301448E-8), 1051.3365, 282);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      BigFractionField bigFractionField0 = bigFraction1.getField();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertNotNull(bigFractionField0);
      
      BigFraction bigFraction2 = bigFraction1.reduce();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((short) (-1), bigFraction2.shortValue());
      assertEquals((byte) (-1), bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = bigFraction2.reciprocal();
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((short) (-1), bigFraction2.shortValue());
      assertEquals((byte) (-1), bigFraction2.byteValue());
      assertEquals((short) (-1), bigFraction3.shortValue());
      assertEquals((byte) (-1), bigFraction3.byteValue());
      assertNotNull(bigFraction3);
      
      BigFraction bigFraction4 = bigFraction1.add((-46));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((short) (-47), bigFraction4.shortValue());
      assertEquals((byte) (-47), bigFraction4.byteValue());
      assertNotNull(bigFraction4);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      double double0 = bigFraction1.pow(0.0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals(1.0, double0, 0.01);
      
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      long long0 = bigFraction0.longValue();
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals(1L, long0);
      
      BigInteger bigInteger2 = bigFraction0.getNumerator();
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      
      BigFractionField bigFractionField0 = bigFraction1.getField();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFractionField0);
      
      BigFraction bigFraction3 = bigFraction1.reciprocal();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)4, bigFraction3.byteValue());
      assertEquals((short)4, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      
      int int0 = bigFraction1.compareTo(bigFraction2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction3);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((-1), int0);
      
      BigFraction bigFraction4 = bigFraction2.add(2147483647L);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotNull(bigFraction4);
      
      int int1 = bigFraction0.intValue();
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(int1 == int0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals(1, int1);
      
      BigFraction bigFraction5 = bigFraction0.subtract((long) (-1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)2, bigFraction5.shortValue());
      assertEquals((byte)2, bigFraction5.byteValue());
      assertNotNull(bigFraction5);
      
      BigDecimal bigDecimal0 = bigFraction4.bigDecimalValue(3);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      long long1 = bigFraction0.longValue();
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(long1 == long0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-1076), 978);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals(489L, long0);
      
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-23), bigInteger0.byteValue());
      assertEquals((short)489, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction2 = BigFraction.ZERO;
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      double double0 = bigFraction2.percentageValue();
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals(0.0, double0, 0.01);
      
      BigFraction bigFraction3 = bigFraction1.subtract(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertNotNull(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = new BigFraction((double) (-2812));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)4, bigFraction1.byteValue());
      assertEquals((short) (-2812), bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      String string0 = bigFraction0.toString();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(string0);
      assertEquals("1 / 3", string0);
      
      BigFraction bigFraction2 = bigFraction1.pow((-2986));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((byte)4, bigFraction1.byteValue());
      assertEquals((short) (-2812), bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertSame(bigInteger1, bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      BigFraction bigFraction3 = bigFraction2.subtract(bigInteger1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertEquals((byte)4, bigFraction1.byteValue());
      assertEquals((short) (-2812), bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-948), (-948));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      long long0 = bigFraction0.getDenominatorAsLong();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals(3L, long0);
      
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      BigInteger bigInteger0 = bigFraction2.getDenominator();
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      double double0 = bigFraction0.percentageValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals(66.66666666666667, double0, 0.01);
      
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction2.byteValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = bigFraction2.multiply((long) Integer.MAX_VALUE);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction2.byteValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertEquals((short)13104, bigFraction3.shortValue());
      assertEquals((byte)48, bigFraction3.byteValue());
      assertNotNull(bigFraction3);
      
      int int0 = bigFraction1.getNumeratorAsInt();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals(4, int0);
      
      float float0 = bigFraction1.floatValue();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals(0.8F, float0, 0.01F);
      
      BigFraction bigFraction4 = BigFraction.ZERO;
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertNotNull(bigFraction4);
      
      BigFraction bigFraction5 = bigFraction0.add(bigFraction4);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction1);
      assertSame(bigFraction5, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertNotNull(bigFraction5);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483513, 1209);
      assertEquals((byte)119, bigFraction0.byteValue());
      assertEquals((short)6775, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.negate();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)119, bigFraction0.byteValue());
      assertEquals((short)6775, bigFraction0.shortValue());
      assertEquals((short) (-6775), bigFraction1.shortValue());
      assertEquals((byte) (-119), bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      double double0 = bigFraction1.TWO_QUARTERS.pow((double) 2147483513);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)119, bigFraction0.byteValue());
      assertEquals((short)6775, bigFraction0.shortValue());
      assertEquals((short) (-6775), bigFraction1.shortValue());
      assertEquals((byte) (-119), bigFraction1.byteValue());
      assertEquals(0.0, double0, 0.01);
      
      BigFraction bigFraction2 = bigFraction1.TWO.negate();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((byte)119, bigFraction0.byteValue());
      assertEquals((short)6775, bigFraction0.shortValue());
      assertEquals((short) (-6775), bigFraction1.shortValue());
      assertEquals((byte) (-119), bigFraction1.byteValue());
      assertEquals((short) (-2), bigFraction2.shortValue());
      assertEquals((byte) (-2), bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      long long0 = bigFraction1.getDenominatorAsLong();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals((byte)119, bigFraction0.byteValue());
      assertEquals((short)6775, bigFraction0.shortValue());
      assertEquals((short) (-6775), bigFraction1.shortValue());
      assertEquals((byte) (-119), bigFraction1.byteValue());
      assertEquals(1209L, long0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = new BigFraction(Integer.MAX_VALUE, Integer.MAX_VALUE, (-2812));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      BigFractionField bigFractionField0 = bigFraction1.getField();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertNotNull(bigFractionField0);
      
      long long0 = bigFraction0.TWO_THIRDS.longValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals(0L, long0);
      
      BigFraction bigFraction2 = bigFraction1.reduce();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((byte) (-1), bigFraction1.byteValue());
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((short) (-1), bigFraction2.shortValue());
      assertEquals((byte) (-1), bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = bigFraction0.add(1432);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte) (-104), bigFraction3.byteValue());
      assertEquals((short)1432, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.ONE_HALF.getNumeratorAsLong();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals(1L, long0);
      
      long long1 = 752L;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals(3L, long0);
      
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = bigFraction2.multiply(3L);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)3, bigFraction3.shortValue());
      assertEquals((byte)3, bigFraction3.byteValue());
      assertNotNull(bigFraction3);
      
      int int0 = bigFraction0.getNumeratorAsInt();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals(3, int0);
      
      float float0 = bigFraction2.floatValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals(1.0666667F, float0, 0.01F);
      
      BigFraction bigFraction4 = bigFraction3.add(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)3, bigFraction3.shortValue());
      assertEquals((byte)3, bigFraction3.byteValue());
      assertEquals((short)4, bigFraction4.shortValue());
      assertEquals((byte)4, bigFraction4.byteValue());
      assertNotNull(bigFraction4);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)2, bigInteger0.byteValue());
      assertEquals((short)2, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.multiply(1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      bigFraction0.hashCode();
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction2 = new BigFraction(1);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = bigFraction2.divide(bigFraction0);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((byte)2, bigFraction3.byteValue());
      assertEquals((short)2, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      
      int int0 = bigFraction0.intValue();
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals(0, int0);
      
      BigFraction bigFraction4 = new BigFraction(0, 1, 1);
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotNull(bigFraction4);
      
      BigFraction bigFraction5 = bigFraction4.subtract(0);
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertTrue(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction4);
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertNotNull(bigFraction5);
      
      BigFraction bigFraction6 = bigFraction1.negate();
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction3);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertNotNull(bigFraction6);
      
      BigFraction bigFraction7 = bigFraction6.multiply((long) 0);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertTrue(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertTrue(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction7);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertEquals((byte)0, bigFraction7.byteValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertNotNull(bigFraction7);
      
      BigFraction bigFraction8 = BigFraction.THREE_QUARTERS;
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction6);
      assertEquals((short)0, bigFraction8.shortValue());
      assertEquals((byte)0, bigFraction8.byteValue());
      assertNotNull(bigFraction8);
      
      String string0 = bigFraction8.toString();
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction6);
      assertEquals((short)0, bigFraction8.shortValue());
      assertEquals((byte)0, bigFraction8.byteValue());
      assertNotNull(string0);
      assertEquals("3 / 4", string0);
      
      BigFraction bigFraction9 = BigFraction.ONE;
      assertFalse(bigFraction9.equals((Object)bigFraction5));
      assertFalse(bigFraction9.equals((Object)bigFraction0));
      assertFalse(bigFraction9.equals((Object)bigFraction4));
      assertTrue(bigFraction9.equals((Object)bigFraction2));
      assertFalse(bigFraction9.equals((Object)bigFraction7));
      assertFalse(bigFraction9.equals((Object)bigFraction8));
      assertFalse(bigFraction9.equals((Object)bigFraction6));
      assertFalse(bigFraction9.equals((Object)bigFraction1));
      assertFalse(bigFraction9.equals((Object)bigFraction3));
      assertNotSame(bigFraction9, bigFraction5);
      assertNotSame(bigFraction9, bigFraction0);
      assertNotSame(bigFraction9, bigFraction4);
      assertNotSame(bigFraction9, bigFraction7);
      assertNotSame(bigFraction9, bigFraction8);
      assertNotSame(bigFraction9, bigFraction6);
      assertNotSame(bigFraction9, bigFraction1);
      assertNotSame(bigFraction9, bigFraction2);
      assertNotSame(bigFraction9, bigFraction3);
      assertEquals((byte)1, bigFraction9.byteValue());
      assertEquals((short)1, bigFraction9.shortValue());
      assertNotNull(bigFraction9);
      
      BigFraction bigFraction10 = bigFraction7.TWO.pow(0);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction9));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction8));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction7));
      assertFalse(bigFraction7.equals((Object)bigFraction9));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertTrue(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertTrue(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction8));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertTrue(bigFraction10.equals((Object)bigFraction9));
      assertTrue(bigFraction10.equals((Object)bigFraction2));
      assertFalse(bigFraction10.equals((Object)bigFraction7));
      assertFalse(bigFraction10.equals((Object)bigFraction4));
      assertFalse(bigFraction10.equals((Object)bigFraction5));
      assertFalse(bigFraction10.equals((Object)bigFraction1));
      assertFalse(bigFraction10.equals((Object)bigFraction3));
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      assertFalse(bigFraction10.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction10);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction9);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction8);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction10);
      assertNotSame(bigFraction6, bigFraction7);
      assertNotSame(bigFraction7, bigFraction9);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction10);
      assertNotSame(bigFraction10, bigFraction7);
      assertNotSame(bigFraction10, bigFraction4);
      assertNotSame(bigFraction10, bigFraction5);
      assertNotSame(bigFraction10, bigFraction1);
      assertNotSame(bigFraction10, bigFraction3);
      assertNotSame(bigFraction10, bigFraction9);
      assertNotSame(bigFraction10, bigFraction8);
      assertNotSame(bigFraction10, bigFraction6);
      assertNotSame(bigFraction10, bigFraction0);
      assertNotSame(bigFraction10, bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertEquals((byte)0, bigFraction7.byteValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertEquals((byte)1, bigFraction10.byteValue());
      assertEquals((short)1, bigFraction10.shortValue());
      assertNotNull(bigFraction10);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = bigFraction7.equals(object0);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction10));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction10));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction9));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction9));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction8));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction10));
      assertFalse(bigFraction6.equals((Object)bigFraction7));
      assertFalse(bigFraction7.equals((Object)bigFraction9));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertTrue(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertTrue(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction8));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction10));
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction10);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction9);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction8);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction10);
      assertNotSame(bigFraction6, bigFraction7);
      assertNotSame(bigFraction7, bigFraction9);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction10);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertEquals((byte)0, bigFraction7.byteValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = BigFraction.THREE_QUARTERS;
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = bigFraction1.reduce();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      
      BigFraction bigFraction4 = bigFraction0.subtract(858);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short) (-857), bigFraction4.shortValue());
      assertEquals((byte) (-89), bigFraction4.byteValue());
      assertNotNull(bigFraction4);
      
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      
      int int0 = bigFraction0.intValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals(1, int0);
      
      BigFraction bigFraction3 = bigFraction2.subtract(1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertNotNull(bigFraction3);
      
      BigFraction bigFraction4 = bigFraction0.negate();
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction4.shortValue());
      assertEquals((byte) (-1), bigFraction4.byteValue());
      assertNotNull(bigFraction4);
      
      BigFraction bigFraction5 = bigFraction4.multiply((long) 1);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertTrue(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction4);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction4.shortValue());
      assertEquals((byte) (-1), bigFraction4.byteValue());
      assertEquals((byte) (-1), bigFraction5.byteValue());
      assertEquals((short) (-1), bigFraction5.shortValue());
      assertNotNull(bigFraction5);
      
      double double0 = bigFraction2.THREE_FIFTHS.doubleValue();
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals(0.6, double0, 0.01);
      
      String string0 = bigFraction2.toString();
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertNotNull(string0);
      assertEquals("5 / 4", string0);
      
      BigFraction bigFraction6 = BigFraction.ONE;
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertTrue(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction4);
      assertEquals((byte)1, bigFraction6.byteValue());
      assertEquals((short)1, bigFraction6.shortValue());
      assertNotNull(bigFraction6);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = bigFraction2.equals(object0);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertFalse(boolean0);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      BigFraction bigFraction7 = bigFraction6.subtract(bigInteger1);
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertTrue(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction7);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction2);
      assertEquals((byte)1, bigFraction6.byteValue());
      assertEquals((short)1, bigFraction6.shortValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((byte)0, bigFraction7.byteValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertNotNull(bigFraction7);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.ONE_HALF.getNumeratorAsLong();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals(1L, long0);
      
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(752L);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)17, bigFraction1.byteValue());
      assertEquals((short) (-751), bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.reduce();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      long long1 = bigFraction1.ZERO.longValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(long1 == long0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)17, bigFraction1.byteValue());
      assertEquals((short) (-751), bigFraction1.shortValue());
      assertEquals(0L, long1);
      
      long long2 = bigFraction1.ZERO.longValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)17, bigFraction1.byteValue());
      assertEquals((short) (-751), bigFraction1.shortValue());
      assertEquals(0L, long2);
      
      double double0 = bigFraction1.ONE_QUARTER.pow((-46.658));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)17, bigFraction1.byteValue());
      assertEquals((short) (-751), bigFraction1.shortValue());
      assertEquals(1.2328637278834914E28, double0, 0.01);
      
      BigFraction bigFraction3 = bigFraction0.add(4095L);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction3.byteValue());
      assertEquals((short)4095, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      
      BigFraction bigFraction4 = bigFraction1.ZERO.add((-2232));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)17, bigFraction1.byteValue());
      assertEquals((short) (-751), bigFraction1.shortValue());
      assertEquals((short) (-2232), bigFraction4.shortValue());
      assertEquals((byte)72, bigFraction4.byteValue());
      assertNotNull(bigFraction4);
      
      double double1 = bigFraction2.THREE_FIFTHS.doubleValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction4);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals(0.6, double1, 0.01);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1, byteArray0.length);
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction5 = bigFraction2.ONE.pow(bigInteger0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction5.byteValue());
      assertEquals((short)1, bigFraction5.shortValue());
      assertEquals(1, byteArray0.length);
      assertNotNull(bigFraction5);
      
      long long3 = bigFraction5.ONE_FIFTH.longValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertTrue(long3 == long2);
      assertTrue(long3 == long1);
      assertFalse(long3 == long0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction4);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction5.byteValue());
      assertEquals((short)1, bigFraction5.shortValue());
      assertEquals(1, byteArray0.length);
      assertEquals(0L, long3);
      
      BigFractionField bigFractionField0 = bigFraction3.TWO_THIRDS.getField();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction5);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction3.byteValue());
      assertEquals((short)4095, bigFraction3.shortValue());
      assertNotNull(bigFractionField0);
      
      double double2 = bigFraction3.percentageValue();
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction5);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction3.byteValue());
      assertEquals((short)4095, bigFraction3.shortValue());
      assertEquals(409566.6666666667, double2, 0.01);
      
      long long4 = bigFraction1.longValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)17, bigFraction1.byteValue());
      assertEquals((short) (-751), bigFraction1.shortValue());
      assertEquals((-751L), long4);
      
      int int0 = bigFraction1.getDenominatorAsInt();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)17, bigFraction1.byteValue());
      assertEquals((short) (-751), bigFraction1.shortValue());
      assertEquals(5, int0);
      
      int int1 = bigFraction1.hashCode();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(int1 == int0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)17, bigFraction1.byteValue());
      assertEquals((short) (-751), bigFraction1.shortValue());
      
      BigFraction bigFraction6 = bigFraction2.divide(2308L);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction5);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertNotNull(bigFraction6);
      
      double double3 = bigFraction6.ONE_HALF.doubleValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction5);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertEquals(0.5, double3, 0.01);
      
      BigFraction bigFraction7 = bigFraction1.divide(1915);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction5);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)17, bigFraction1.byteValue());
      assertEquals((short) (-751), bigFraction1.shortValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertEquals((byte)0, bigFraction7.byteValue());
      assertNotNull(bigFraction7);
      
      BigFraction bigFraction8 = bigFraction6.divide(bigFraction7);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction7));
      assertFalse(bigFraction6.equals((Object)bigFraction7));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction8);
      assertNotSame(bigFraction6, bigFraction8);
      assertNotSame(bigFraction6, bigFraction7);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction8);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction4);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)17, bigFraction1.byteValue());
      assertEquals((short) (-751), bigFraction1.shortValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertEquals((byte)0, bigFraction7.byteValue());
      assertEquals((byte)0, bigFraction8.byteValue());
      assertEquals((short)0, bigFraction8.shortValue());
      assertNotNull(bigFraction8);
      
      BigFraction bigFraction9 = bigFraction1.FOUR_FIFTHS.add(0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction8));
      assertFalse(bigFraction1.equals((Object)bigFraction7));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction9.equals((Object)bigFraction1));
      assertFalse(bigFraction9.equals((Object)bigFraction6));
      assertTrue(bigFraction9.equals((Object)bigFraction2));
      assertFalse(bigFraction9.equals((Object)bigFraction5));
      assertFalse(bigFraction9.equals((Object)bigFraction3));
      assertFalse(bigFraction9.equals((Object)bigFraction0));
      assertFalse(bigFraction9.equals((Object)bigFraction8));
      assertFalse(bigFraction9.equals((Object)bigFraction4));
      assertFalse(bigFraction9.equals((Object)bigFraction7));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction9);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction8);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction9, bigFraction1);
      assertNotSame(bigFraction9, bigFraction6);
      assertNotSame(bigFraction9, bigFraction2);
      assertNotSame(bigFraction9, bigFraction5);
      assertNotSame(bigFraction9, bigFraction3);
      assertNotSame(bigFraction9, bigFraction0);
      assertNotSame(bigFraction9, bigFraction8);
      assertNotSame(bigFraction9, bigFraction4);
      assertNotSame(bigFraction9, bigFraction7);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)17, bigFraction1.byteValue());
      assertEquals((short) (-751), bigFraction1.shortValue());
      assertEquals((short)0, bigFraction9.shortValue());
      assertEquals((byte)0, bigFraction9.byteValue());
      assertNotNull(bigFraction9);
      
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1026.50906, 1307);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      double double0 = bigFraction0.TWO_QUARTERS.pow(0.0);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals(1.0, double0, 0.01);
      
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.pow(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      long long0 = bigFraction0.longValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals(1026L, long0);
      
      BigInteger bigInteger1 = bigFraction1.getNumerator();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      BigFractionField bigFractionField0 = bigFraction1.getField();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFractionField0);
      
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)2, bigFraction2.byteValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      
      int int0 = bigFraction2.TWO.compareTo(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)2, bigFraction2.byteValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertEquals(1, int0);
      
      BigFraction bigFraction3 = bigFraction0.add(2147483647L);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction3.byteValue());
      assertEquals((short)1025, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      
      int int1 = bigFraction1.intValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(int1 == int0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals(0, int1);
      
      BigFraction bigFraction4 = bigFraction0.subtract((-2365));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals((short)3391, bigFraction4.shortValue());
      assertEquals((byte)63, bigFraction4.byteValue());
      assertNotNull(bigFraction4);
      
      int int2 = bigFraction4.ONE_HALF.compareTo(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)3391, bigFraction4.shortValue());
      assertEquals((byte)63, bigFraction4.byteValue());
      assertEquals(0, int2);
      
      BigFraction bigFraction5 = bigFraction2.negate();
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction2);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)2, bigFraction2.byteValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertEquals((byte) (-2), bigFraction5.byteValue());
      assertEquals((short) (-2), bigFraction5.shortValue());
      assertNotNull(bigFraction5);
      
      BigFraction bigFraction6 = bigFraction0.multiply((long) (-2365));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction3);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals((short) (-2861), bigFraction6.shortValue());
      assertEquals((byte) (-45), bigFraction6.byteValue());
      assertNotNull(bigFraction6);
      
      String string0 = bigFraction1.toString();
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(string0);
      assertEquals("1 / 2", string0);
      
      BigFraction bigFraction7 = BigFraction.ONE;
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction6);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction2);
      assertEquals((byte)1, bigFraction7.byteValue());
      assertEquals((short)1, bigFraction7.shortValue());
      assertNotNull(bigFraction7);
      
      boolean boolean0 = bigFraction0.equals("1 / 2");
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction2);
      assertEquals((byte)2, bigFraction0.byteValue());
      assertEquals((short)1026, bigFraction0.shortValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals(1L, long0);
      
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = bigFraction1.multiply(1L);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertNotNull(bigFraction3);
      
      int int0 = bigFraction1.getNumeratorAsInt();
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals(4, int0);
      
      float float0 = bigFraction1.floatValue();
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals(0.8F, float0, 0.01F);
      
      BigFraction bigFraction4 = bigFraction2.add(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)2, bigFraction4.byteValue());
      assertEquals((short)2, bigFraction4.shortValue());
      assertNotNull(bigFraction4);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1877.5417809);
      assertEquals((short)1877, bigFraction0.shortValue());
      assertEquals((byte)85, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.pow(2.2650056052953005E-8);
      assertEquals((short)1877, bigFraction0.shortValue());
      assertEquals((byte)85, bigFraction0.byteValue());
      assertEquals(1.0000001707297643, double0, 0.01);
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals((short)1877, bigFraction0.shortValue());
      assertEquals((byte)85, bigFraction0.byteValue());
      assertEquals(0, int0);
      
      BigFraction bigFraction1 = bigFraction0.multiply(0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)1877, bigFraction0.shortValue());
      assertEquals((byte)85, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.pow(37);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((short)1877, bigFraction0.shortValue());
      assertEquals((byte)85, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = new BigFraction(0, 2708L);
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertNotNull(bigFraction3);
      
      BigFraction bigFraction4 = bigFraction3.abs();
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertTrue(bigFraction4.equals((Object)bigFraction2));
      assertTrue(bigFraction4.equals((Object)bigFraction1));
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction2);
      assertSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction0);
      assertSame(bigFraction4, bigFraction3);
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((byte)0, bigFraction4.byteValue());
      assertNotNull(bigFraction4);
      
      BigFraction bigFraction5 = BigFraction.FOUR_FIFTHS;
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction1);
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertNotNull(bigFraction5);
      
      long long0 = bigFraction5.getNumeratorAsLong();
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction1);
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals(4L, long0);
      
      long long1 = bigFraction2.getDenominatorAsLong();
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertTrue(bigFraction2.equals((Object)bigFraction4));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(long1 == long0);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((short)1877, bigFraction0.shortValue());
      assertEquals((byte)85, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals(1L, long1);
      
      BigFraction bigFraction6 = bigFraction5.divide((-1873));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction6);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction1);
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertEquals((byte)0, bigFraction6.byteValue());
      assertNotNull(bigFraction6);
      
      long long2 = bigFraction0.getDenominatorAsLong();
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertEquals((short)1877, bigFraction0.shortValue());
      assertEquals((byte)85, bigFraction0.byteValue());
      assertEquals(1099511627776L, long2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.ONE_HALF.getNumeratorAsLong();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals(1L, long0);
      
      BigFraction bigFraction1 = new BigFraction((-3095.979562));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte) (-23), bigFraction1.byteValue());
      assertEquals((short) (-3095), bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      long long1 = bigFraction0.longValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(long1 == long0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = 978;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.pow((-2146985159));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.ONE_HALF.getNumeratorAsLong();
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals(1L, long0);
      
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(752L);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)17, bigFraction1.byteValue());
      assertEquals((short) (-751), bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = new BigFraction((double) 1L);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      long long1 = bigFraction2.longValue();
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(long1 == long0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.ONE_FIFTH.pow(0.0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals(1.0, double0, 0.01);
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals(1, int0);
      
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.multiply(1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.reduce();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = bigFraction2.subtract(145);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((byte)112, bigFraction3.byteValue());
      assertEquals((short) (-144), bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      
      int int1 = bigFraction3.ZERO.hashCode();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(int1 == int0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((byte)112, bigFraction3.byteValue());
      assertEquals((short) (-144), bigFraction3.shortValue());
      
      BigDecimal bigDecimal0 = bigFraction2.bigDecimalValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      double double0 = bigFraction0.pow(0.0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals(1.0, double0, 0.01);
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals(1, int0);
      
      BigFraction bigFraction2 = bigFraction1.multiply(1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = bigFraction0.pow(1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction3.byteValue());
      assertEquals((short) (-1), bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      
      BigFraction bigFraction4 = BigFraction.getReducedFraction(764, (-877));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertNotNull(bigFraction4);
      
      BigFraction bigFraction5 = bigFraction4.abs();
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction0);
      assertNotSame(bigFraction5, bigFraction1);
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      assertNotNull(bigFraction5);
      
      long long0 = bigFraction2.getNumeratorAsLong();
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction4);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)1, bigFraction1.byteValue());
      assertEquals((short)1, bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction2.byteValue());
      assertEquals((short)1, bigFraction2.shortValue());
      assertEquals(1L, long0);
      
      long long1 = bigFraction4.getDenominatorAsLong();
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(long1 == long0);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction5);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertEquals((byte)0, bigFraction4.byteValue());
      assertEquals((short)0, bigFraction4.shortValue());
      assertEquals(877L, long1);
      
      BigFraction bigFraction6 = bigFraction3.divide(816);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertTrue(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertTrue(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction3);
      assertEquals((byte) (-1), bigFraction0.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte) (-1), bigFraction3.byteValue());
      assertEquals((short) (-1), bigFraction3.shortValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertEquals((byte)0, bigFraction6.byteValue());
      assertNotNull(bigFraction6);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1877.5417809);
      assertEquals((short)1877, bigFraction0.shortValue());
      assertEquals((byte)85, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction0.ZERO.bigDecimalValue(2720, 1);
      assertEquals((short)1877, bigFraction0.shortValue());
      assertEquals((byte)85, bigFraction0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigFraction bigFraction1 = bigFraction0.subtract(2047L);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)1877, bigFraction0.shortValue());
      assertEquals((byte)85, bigFraction0.byteValue());
      assertEquals((short) (-169), bigFraction1.shortValue());
      assertEquals((byte)87, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((short)1877, bigFraction0.shortValue());
      assertEquals((byte)85, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = bigFraction2.ONE_FIFTH.pow(2047L);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertEquals((short)1877, bigFraction0.shortValue());
      assertEquals((byte)85, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertEquals((short)1877, bigFraction0.shortValue());
      assertEquals((byte)85, bigFraction0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      double double0 = bigFraction0.percentageValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertEquals((short)1877, bigFraction0.shortValue());
      assertEquals((byte)85, bigFraction0.byteValue());
      assertEquals(187754.17809, double0, 0.01);
      
      BigFraction bigFraction4 = bigFraction0.subtract(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertEquals((short)1877, bigFraction0.shortValue());
      assertEquals((byte)85, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((byte)85, bigFraction4.byteValue());
      assertEquals((short)1877, bigFraction4.shortValue());
      assertNotNull(bigFraction4);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.percentageValue();
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals(100.0, double0, 0.01);
      
      BigFraction bigFraction1 = BigFraction.TWO;
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      double double1 = bigFraction1.ONE_HALF.percentageValue();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals(50.0, double1, 0.01);
      
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.add(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short)1, bigFraction0.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)2, bigFraction2.shortValue());
      assertEquals((byte)2, bigFraction2.byteValue());
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = bigFraction1.pow((-2086L));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertNotNull(bigFraction3);
      
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-1), (-1));
      assertTrue(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertNotSame(bigFraction4, bigFraction1);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction3);
      assertEquals((byte)1, bigFraction4.byteValue());
      assertEquals((short)1, bigFraction4.shortValue());
      assertNotNull(bigFraction4);
      
      double double2 = bigFraction3.percentageValue();
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction0);
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.TWO.subtract(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertNotNull(bigFraction1);
      
      BigInteger bigInteger1 = bigFraction0.getDenominator();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)3, bigInteger1.shortValue());
      assertEquals((byte)3, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      BigFraction bigFraction2 = bigFraction0.multiply(1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotNull(bigFraction2);
      
      bigFraction2.ONE_FIFTH.hashCode();
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      
      BigFraction bigFraction3 = bigFraction2.THREE_FIFTHS.divide(bigFraction1);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotNull(bigFraction3);
      
      BigFraction bigFraction4 = new BigFraction(1);
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertEquals((short)1, bigFraction4.shortValue());
      assertEquals((byte)1, bigFraction4.byteValue());
      assertNotNull(bigFraction4);
      
      int int0 = bigFraction4.getNumeratorAsInt();
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertNotSame(bigFraction4, bigFraction0);
      assertNotSame(bigFraction4, bigFraction2);
      assertNotSame(bigFraction4, bigFraction3);
      assertNotSame(bigFraction4, bigFraction1);
      assertEquals((short)1, bigFraction4.shortValue());
      assertEquals((byte)1, bigFraction4.byteValue());
      assertEquals(1, int0);
      
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-666), (-666));
      assertTrue(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      assertFalse(bigFraction5.equals((Object)bigFraction0));
      assertNotSame(bigFraction5, bigFraction4);
      assertNotSame(bigFraction5, bigFraction2);
      assertNotSame(bigFraction5, bigFraction3);
      assertNotSame(bigFraction5, bigFraction1);
      assertNotSame(bigFraction5, bigFraction0);
      assertEquals((byte)1, bigFraction5.byteValue());
      assertEquals((short)1, bigFraction5.shortValue());
      assertNotNull(bigFraction5);
      
      BigInteger bigInteger2 = bigFraction2.getNumerator();
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      
      BigDecimal bigDecimal0 = bigFraction1.MINUS_ONE.bigDecimalValue();
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigFraction bigFraction6 = new BigFraction((-3185L), 4503599627370495L);
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertNotNull(bigFraction6);
      
      BigDecimal bigDecimal1 = bigFraction6.bigDecimalValue(1);
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      BigFraction bigFraction7 = bigFraction3.negate();
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction6));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(bigFraction1.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction6));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertFalse(bigFraction7.equals((Object)bigFraction2));
      assertFalse(bigFraction7.equals((Object)bigFraction3));
      assertFalse(bigFraction7.equals((Object)bigFraction1));
      assertFalse(bigFraction7.equals((Object)bigFraction5));
      assertFalse(bigFraction7.equals((Object)bigFraction0));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction7.equals((Object)bigFraction6));
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction7);
      assertNotSame(bigFraction1, bigFraction6);
      assertNotSame(bigFraction1, bigFraction4);
      assertNotSame(bigFraction1, bigFraction5);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction6);
      assertNotSame(bigFraction2, bigFraction5);
      assertNotSame(bigFraction2, bigFraction4);
      assertNotSame(bigFraction2, bigFraction7);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction3, bigFraction4);
      assertNotSame(bigFraction3, bigFraction5);
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction3, bigFraction6);
      assertNotSame(bigFraction3, bigFraction7);
      assertNotSame(bigFraction7, bigFraction2);
      assertNotSame(bigFraction7, bigFraction3);
      assertNotSame(bigFraction7, bigFraction1);
      assertNotSame(bigFraction7, bigFraction5);
      assertNotSame(bigFraction7, bigFraction0);
      assertNotSame(bigFraction7, bigFraction4);
      assertNotSame(bigFraction7, bigFraction6);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)2, bigFraction1.shortValue());
      assertEquals((byte)2, bigFraction1.byteValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)0, bigFraction2.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
      assertEquals((short)0, bigFraction3.shortValue());
      assertEquals((byte)0, bigFraction7.byteValue());
      assertEquals((short)0, bigFraction7.shortValue());
      assertNotNull(bigFraction7);
      
      BigFraction bigFraction8 = new BigFraction((long) (-555));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertEquals((byte) (-43), bigFraction8.byteValue());
      assertEquals((short) (-555), bigFraction8.shortValue());
      assertNotNull(bigFraction8);
      
      BigFraction bigFraction9 = bigFraction8.negate();
      assertFalse(bigFraction9.equals((Object)bigFraction1));
      assertFalse(bigFraction9.equals((Object)bigFraction5));
      assertFalse(bigFraction9.equals((Object)bigFraction6));
      assertFalse(bigFraction9.equals((Object)bigFraction0));
      assertFalse(bigFraction9.equals((Object)bigFraction2));
      assertFalse(bigFraction9.equals((Object)bigFraction4));
      assertFalse(bigFraction9.equals((Object)bigFraction8));
      assertFalse(bigFraction9.equals((Object)bigFraction3));
      assertFalse(bigFraction9.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction2));
      assertFalse(bigFraction8.equals((Object)bigFraction6));
      assertFalse(bigFraction8.equals((Object)bigFraction4));
      assertFalse(bigFraction8.equals((Object)bigFraction1));
      assertFalse(bigFraction8.equals((Object)bigFraction0));
      assertFalse(bigFraction8.equals((Object)bigFraction7));
      assertFalse(bigFraction8.equals((Object)bigFraction5));
      assertFalse(bigFraction8.equals((Object)bigFraction3));
      assertNotSame(bigFraction9, bigFraction1);
      assertNotSame(bigFraction9, bigFraction5);
      assertNotSame(bigFraction9, bigFraction6);
      assertNotSame(bigFraction9, bigFraction0);
      assertNotSame(bigFraction9, bigFraction2);
      assertNotSame(bigFraction9, bigFraction4);
      assertNotSame(bigFraction9, bigFraction8);
      assertNotSame(bigFraction9, bigFraction3);
      assertNotSame(bigFraction9, bigFraction7);
      assertNotSame(bigFraction8, bigFraction2);
      assertNotSame(bigFraction8, bigFraction6);
      assertNotSame(bigFraction8, bigFraction4);
      assertNotSame(bigFraction8, bigFraction1);
      assertNotSame(bigFraction8, bigFraction0);
      assertNotSame(bigFraction8, bigFraction7);
      assertNotSame(bigFraction8, bigFraction5);
      assertNotSame(bigFraction8, bigFraction3);
      assertNotSame(bigFraction8, bigFraction9);
      assertEquals((byte)43, bigFraction9.byteValue());
      assertEquals((short)555, bigFraction9.shortValue());
      assertEquals((byte) (-43), bigFraction8.byteValue());
      assertEquals((short) (-555), bigFraction8.shortValue());
      assertNotNull(bigFraction9);
      
      BigFraction bigFraction10 = bigFraction6.multiply(bigInteger1);
      assertFalse(bigFraction0.equals((Object)bigFraction7));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction8));
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction9));
      assertFalse(bigFraction10.equals((Object)bigFraction1));
      assertFalse(bigFraction10.equals((Object)bigFraction6));
      assertFalse(bigFraction10.equals((Object)bigFraction8));
      assertFalse(bigFraction10.equals((Object)bigFraction7));
      assertFalse(bigFraction10.equals((Object)bigFraction4));
      assertFalse(bigFraction10.equals((Object)bigFraction5));
      assertFalse(bigFraction10.equals((Object)bigFraction3));
      assertFalse(bigFraction10.equals((Object)bigFraction9));
      assertFalse(bigFraction10.equals((Object)bigFraction2));
      assertFalse(bigFraction10.equals((Object)bigFraction0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction8));
      assertFalse(bigFraction6.equals((Object)bigFraction3));
      assertFalse(bigFraction6.equals((Object)bigFraction9));
      assertFalse(bigFraction6.equals((Object)bigFraction5));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
      assertFalse(bigFraction6.equals((Object)bigFraction2));
      assertFalse(bigFraction6.equals((Object)bigFraction1));
      assertFalse(bigFraction6.equals((Object)bigFraction7));
      assertNotSame(bigFraction0, bigFraction7);
      assertNotSame(bigFraction0, bigFraction8);
      assertNotSame(bigFraction0, bigFraction4);
      assertNotSame(bigFraction0, bigFraction6);
      assertNotSame(bigFraction0, bigFraction10);
      assertNotSame(bigFraction0, bigFraction5);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction9);
      assertNotSame(bigFraction10, bigFraction1);
      assertNotSame(bigFraction10, bigFraction6);
      assertNotSame(bigFraction10, bigFraction8);
      assertNotSame(bigFraction10, bigFraction7);
      assertNotSame(bigFraction10, bigFraction4);
      assertNotSame(bigFraction10, bigFraction5);
      assertNotSame(bigFraction10, bigFraction3);
      assertNotSame(bigFraction10, bigFraction9);
      assertNotSame(bigFraction10, bigFraction2);
      assertNotSame(bigFraction10, bigFraction0);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigFraction6, bigFraction4);
      assertNotSame(bigFraction6, bigFraction8);
      assertNotSame(bigFraction6, bigFraction3);
      assertNotSame(bigFraction6, bigFraction9);
      assertNotSame(bigFraction6, bigFraction5);
      assertNotSame(bigFraction6, bigFraction0);
      assertNotSame(bigFraction6, bigFraction2);
      assertNotSame(bigFraction6, bigFraction1);
      assertNotSame(bigFraction6, bigFraction7);
      assertNotSame(bigFraction6, bigFraction10);
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction10.shortValue());
      assertEquals((byte)0, bigFraction10.byteValue());
      assertEquals((short)3, bigInteger1.shortValue());
      assertEquals((byte)3, bigInteger1.byteValue());
      assertEquals((byte)0, bigFraction6.byteValue());
      assertEquals((short)0, bigFraction6.shortValue());
      assertNotNull(bigFraction10);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 1342;
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFractionField bigFractionField0 = bigFraction0.TWO_QUARTERS.getField();
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertNotNull(bigFractionField0);
      
      long long0 = (-372L);
      BigFraction bigFraction1 = bigFraction0.add((-372L));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((short)0, bigFraction0.shortValue());
      assertEquals((byte) (-115), bigFraction1.byteValue());
      assertEquals((short) (-371), bigFraction1.shortValue());
      assertNotNull(bigFraction1);
      
      long long1 = 0L;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1877.5417809);
      bigFraction0.percentageValue();
      long long0 = bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.divide(1009L);
      bigFraction1.toString();
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      BigInteger.valueOf(475L);
      BigInteger bigInteger0 = BigInteger.valueOf(475L);
      BigFraction bigFraction3 = bigFraction1.multiply(bigInteger0);
      bigFraction2.getNumeratorAsInt();
      bigFraction2.floatValue();
      bigFraction3.toString();
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-1), (-2144643060));
      bigFraction0.hashCode();
      bigFraction2.getDenominatorAsInt();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigFraction0.pow(bigInteger1);
      bigFraction4.pow(0L);
      BigFraction bigFraction5 = bigFraction4.multiply(bigInteger1);
      bigFraction5.add(bigInteger1);
      BigFraction bigFraction6 = BigFraction.ONE_HALF;
      long long1 = bigFraction6.getDenominatorAsLong();
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.ONE_HALF.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(752L);
      bigFraction0.FOUR_FIFTHS.reduce();
      bigFraction1.ZERO.longValue();
      bigFraction1.ZERO.longValue();
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      bigFraction0.getDenominatorAsInt();
      bigFraction2.floatValue();
      bigFraction2.getField();
      bigFraction0.getNumeratorAsInt();
      bigFraction1.getNumerator();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-423));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      bigFraction0.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction1.add((-1013L));
      bigFraction2.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction0.divide(4095L);
      bigFraction2.longValue();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)6;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.multiply(bigInteger0);
      bigFraction3.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue(445);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.ONE_HALF.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(752L);
      BigFraction bigFraction2 = bigFraction1.reduce();
      bigFraction2.longValue();
      bigFraction2.pow((-46.658));
      long long0 = 4095L;
      bigFraction2.add(1L);
      bigFraction0.add((-2232));
      bigFraction0.doubleValue();
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.THREE_QUARTERS.getDenominatorAsLong();
      bigFraction0.ZERO.getDenominatorAsLong();
      bigFraction0.getDenominatorAsInt();
      double double0 = bigFraction0.percentageValue();
      assertEquals((-100.0), double0, 0.01);
      
      BigFraction bigFraction1 = BigFraction.getReducedFraction(608, 2147483587);
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO.subtract(bigInteger0);
      bigFraction0.getDenominator();
      BigFraction bigFraction2 = bigFraction0.multiply(1);
      bigFraction2.ONE_FIFTH.hashCode();
      bigFraction2.THREE_FIFTHS.divide(bigFraction1);
      bigFraction1.getNumeratorAsLong();
      bigFraction1.divide((long) 1);
      BigFraction bigFraction3 = new BigFraction((-2568L));
      bigFraction3.longValue();
      BigFraction bigFraction4 = BigFraction.THREE_FIFTHS;
      bigFraction4.multiply(bigInteger0);
      BigFraction bigFraction5 = BigFraction.TWO_FIFTHS;
      bigFraction5.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue(1731);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.multiply((-2138789381));
      bigFraction1.hashCode();
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      bigFraction2.intValue();
      BigFraction bigFraction3 = bigFraction1.subtract((-2138789381));
      bigFraction3.negate();
      BigFraction bigFraction4 = bigFraction0.multiply((long) (-2138789381));
      BigFraction bigFraction5 = new BigFraction((long) (-2138789381), (long) (-2138789381));
      bigFraction5.toString();
      BigFraction bigFraction6 = BigFraction.ONE;
      BigFraction bigFraction7 = BigFraction.getReducedFraction((-2138789381), (-2138789381));
      bigFraction4.equals(bigFraction7);
      MockRandom mockRandom0 = new MockRandom(3418L);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((-2138789381), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numBits must be non-negative
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.TWO;
      double double0 = bigFraction1.ONE_HALF.percentageValue();
      assertEquals(50.0, double0, 0.01);
      
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.divide(bigFraction1);
      bigFraction0.intValue();
      BigFraction bigFraction4 = bigFraction3.subtract((-2457));
      assertEquals((short)2458, bigFraction4.shortValue());
      
      bigFraction1.negate();
      BigFraction bigFraction5 = bigFraction2.multiply((long) (-2457));
      String string0 = bigFraction3.toString();
      assertEquals("5 / 4", string0);
      
      BigFraction bigFraction6 = BigFraction.TWO_THIRDS;
      bigFraction6.TWO_THIRDS.multiply(bigInteger0);
      BigFraction bigFraction7 = new BigFraction(2.0289855910959886E-6);
      bigFraction7.equals(bigFraction2);
      assertEquals((byte)0, bigFraction7.byteValue());
      
      bigFraction5.getDenominator();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals((short)2, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.30000000000001137, 0.30000000000001137, (-1269));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.3 to fraction after -1,269 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.THREE_QUARTERS.getDenominatorAsLong();
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction0.subtract(1);
      assertEquals((short) (-2), bigFraction2.shortValue());
      
      BigFraction bigFraction3 = bigFraction1.negate();
      bigFraction3.negate();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction3.multiply(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1877.5417809);
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction2.bigDecimalValue(2720, 1);
      bigFraction0.pow(6.3372065441089185E-9);
      bigFraction1.doubleValue();
      bigFraction0.pow((-2171));
      bigFraction2.divide(5);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1877.5417809);
      bigFraction0.ZERO.bigDecimalValue(2720, 1);
      bigFraction0.subtract(2047L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)67;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.pow(bigInteger0);
      bigFraction0.multiply((long) (byte)31);
      bigFraction0.pow((int) (byte)31);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.multiply(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.pow(161);
      BigFraction bigFraction3 = bigFraction2.ONE.subtract(bigInteger0);
      bigFraction3.TWO_THIRDS.getField();
      BigFraction bigFraction4 = bigFraction2.TWO_THIRDS.add(bigFraction0);
      bigFraction3.FOUR_FIFTHS.hashCode();
      BigFraction bigFraction5 = bigFraction2.THREE_QUARTERS.add((-246L));
      BigFraction bigFraction6 = bigFraction0.MINUS_ONE.multiply((-196L));
      assertEquals((byte) (-60), bigFraction6.byteValue());
      
      bigFraction5.TWO.bigDecimalValue();
      bigFraction2.TWO_FIFTHS.getNumeratorAsInt();
      BigFraction bigFraction7 = bigFraction0.abs();
      BigFraction bigFraction8 = bigFraction7.ONE_FIFTH.add(bigFraction2);
      bigFraction1.TWO_QUARTERS.intValue();
      bigFraction3.pow(1L);
      BigFraction bigFraction9 = bigFraction4.pow(161);
      assertEquals((short) (-8645), bigFraction9.shortValue());
      
      BigDecimal bigDecimal0 = bigFraction3.bigDecimalValue(161, 2);
      assertEquals((short) (-9), bigDecimal0.shortValue());
      
      bigFraction5.doubleValue();
      bigFraction0.FOUR_FIFTHS.pow((-246L));
      BigFraction bigFraction10 = bigFraction4.add(bigInteger0);
      bigFraction10.ZERO.bigDecimalValue(1983, 2);
      double double0 = bigFraction5.doubleValue();
      assertEquals((-245.25), double0, 0.01);
      
      BigFraction bigFraction11 = bigFraction8.multiply(bigFraction4);
      assertEquals((byte) (-84), bigFraction11.byteValue());
      
      float float0 = bigFraction1.TWO_QUARTERS.floatValue();
      assertEquals(0.5F, float0, 0.01F);
      
      bigFraction1.pow(bigInteger0);
      BigFraction bigFraction12 = bigFraction1.multiply(1);
      assertTrue(bigFraction12.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.ONE_FIFTH.pow(0.0);
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.multiply(1);
      BigFraction bigFraction2 = bigFraction0.pow(764);
      bigFraction2.TWO.abs();
      bigFraction2.getNumeratorAsLong();
      bigFraction1.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction2.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9007199254740990L, 9007199254740990L);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction0.THREE_FIFTHS.subtract(bigFraction1);
      bigFraction0.THREE_FIFTHS.getDenominatorAsInt();
      bigFraction0.ZERO.floatValue();
      bigFraction0.MINUS_ONE.getField();
      bigFraction0.getNumeratorAsInt();
      bigFraction0.getNumerator();
      // Undeclared exception!
      try { 
        bigFraction1.MINUS_ONE.bigDecimalValue((-555));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1050.0);
      long long0 = bigFraction0.longValue();
      assertEquals(1050L, long0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.FOUR_FIFTHS.reciprocal();
      BigFraction bigFraction1 = bigFraction0.ONE.abs();
      bigFraction0.TWO.hashCode();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.TWO_FIFTHS.hashCode();
      BigFraction bigFraction2 = bigFraction1.ONE.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction1.THREE_FIFTHS.pow(47L);
      bigFraction4.THREE_QUARTERS.percentageValue();
      BigFraction bigFraction5 = bigFraction1.TWO_THIRDS.multiply(bigInteger0);
      bigFraction5.subtract(bigInteger0);
      bigFraction0.THREE_QUARTERS.intValue();
      bigFraction1.getField();
      BigFraction bigFraction6 = BigFraction.ONE_HALF;
      bigFraction6.TWO_THIRDS.percentageValue();
      bigFraction6.THREE_QUARTERS.getDenominatorAsInt();
      bigFraction6.ONE_FIFTH.getField();
      bigFraction3.ONE_HALF.intValue();
      bigFraction0.compareTo(bigFraction6);
      bigFraction0.hashCode();
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue(910);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.hashCode();
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      double double0 = bigFraction2.pow((-2682.425119034));
      assertEquals(Double.NaN, double0, 0.01);
      
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      BigFraction bigFraction3 = bigFraction1.subtract(bigInteger0);
      bigFraction2.THREE_QUARTERS.equals(bigFraction1);
      bigFraction3.TWO.toString();
      double double1 = bigFraction3.doubleValue();
      assertEquals((-1.3333333333333333), double1, 0.01);
      
      boolean boolean0 = bigFraction2.equals(bigFraction3);
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertEquals((byte)0, bigFraction2.byteValue());
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = (-1);
      BigFraction bigFraction0 = new BigFraction((-1), (-1));
      bigFraction0.TWO_THIRDS.negate();
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(845);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.reduce();
      BigFraction bigFraction3 = bigFraction0.subtract(0L);
      int int0 = bigFraction2.ZERO.compareTo(bigFraction1);
      assertEquals((-1), int0);
      
      BigFraction bigFraction4 = bigFraction3.reduce();
      BigFraction bigFraction5 = bigFraction4.add(694);
      bigFraction5.ONE.multiply(bigInteger0);
      bigFraction2.intValue();
      bigFraction5.bigDecimalValue();
      BigFraction bigFraction6 = bigFraction0.add(1);
      BigFraction bigFraction7 = BigFraction.ONE_HALF;
      BigFraction bigFraction8 = bigFraction0.add(bigFraction7);
      bigFraction8.reciprocal();
      BigFraction bigFraction9 = bigFraction6.MINUS_ONE.multiply(694);
      assertEquals((byte)74, bigFraction9.byteValue());
      
      double double0 = bigFraction2.pow((double) 845);
      assertTrue(bigFraction2.equals((Object)bigFraction8));
      assertEquals(4.26239470782443E-255, double0, 0.01);
      
      bigFraction6.pow((-653L));
      assertFalse(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(1877L);
      bigFraction1.ONE_QUARTER.percentageValue();
      bigFraction1.FOUR_FIFTHS.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.divide(1877L);
      bigFraction1.ONE_HALF.toString();
      BigFraction bigFraction3 = bigFraction0.THREE_FIFTHS.add(bigFraction1);
      BigInteger bigInteger0 = BigInteger.valueOf(4L);
      BigFraction bigFraction4 = bigFraction3.ONE_FIFTH.multiply(bigInteger0);
      bigFraction4.ONE_THIRD.getNumeratorAsInt();
      bigFraction1.floatValue();
      bigFraction1.THREE_QUARTERS.toString();
      BigFraction bigFraction5 = BigFraction.getReducedFraction((-1), (-1));
      bigFraction5.THREE_FIFTHS.hashCode();
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction6 = bigFraction2.pow(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction6.ZERO.pow((-773L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ONE.toString();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1075, 2845);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.divide(bigFraction1);
      assertEquals((byte) (-2), bigFraction2.byteValue());
      
      BigFraction bigFraction3 = bigFraction0.subtract(0L);
      BigFraction bigFraction4 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction5 = bigFraction4.MINUS_ONE.subtract(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction4.FOUR_FIFTHS.multiply(bigInteger0);
      BigFraction bigFraction6 = bigFraction5.ONE.subtract((-1600));
      assertEquals((byte)65, bigFraction6.byteValue());
      
      bigFraction3.ZERO.getNumeratorAsLong();
      BigFraction bigFraction7 = bigFraction3.TWO.add(bigFraction4);
      BigFraction bigFraction8 = bigFraction3.ONE_THIRD.pow(4532);
      BigFraction.getReducedFraction(4532, 4532);
      BigInteger bigInteger1 = bigFraction0.getNumerator();
      bigFraction0.hashCode();
      bigFraction8.getNumerator();
      bigFraction8.divide(548L);
      double double0 = bigFraction4.percentageValue();
      assertEquals(25.0, double0, 0.01);
      
      BigFraction bigFraction9 = bigFraction7.add(bigInteger1);
      assertTrue(bigFraction9.equals((Object)bigFraction7));
      assertEquals((byte)2, bigFraction7.byteValue());
      
      bigFraction5.negate();
      BigFraction bigFraction10 = bigFraction0.subtract(bigFraction8);
      assertFalse(bigFraction3.equals((Object)bigFraction6));
      assertEquals((byte)0, bigFraction10.byteValue());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.reduce();
      BigFraction bigFraction1 = bigFraction0.add((-1));
      assertEquals((byte) (-1), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.ONE_HALF.bigDecimalValue();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.pow(1L);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = BigFraction.getReducedFraction(37, (-1));
      assertEquals((short) (-37), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.TWO.divide((-2447));
      int int1 = (-2934);
      BigFraction bigFraction3 = bigFraction2.THREE_QUARTERS.pow((-2934));
      bigFraction3.FOUR_FIFTHS.bigDecimalValue();
      bigFraction0.ONE_QUARTER.abs();
      // Undeclared exception!
      try { 
        bigFraction0.MINUS_ONE.divide((long) 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction1.TWO.add((-1712));
      assertEquals((byte)82, bigFraction2.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.FOUR_FIFTHS.subtract(bigInteger0);
      bigFraction0.ONE.getNumeratorAsInt();
      boolean boolean0 = bigFraction3.THREE_FIFTHS.equals("cannot format a {0} instance as a complex number");
      assertFalse(boolean0);
      
      BigFraction bigFraction4 = bigFraction0.divide(1L);
      bigFraction4.TWO_QUARTERS.getDenominatorAsLong();
      assertTrue(bigFraction4.equals((Object)bigFraction1));
      
      BigFraction bigFraction5 = bigFraction3.divide(100);
      double double0 = bigFraction5.pow((-2655.472095717586));
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((short)0, bigFraction5.shortValue());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)61;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      long long0 = bigFraction0.longValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.divide((-3321));
      bigFraction1.FOUR_FIFTHS.add((-3321));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.ONE_QUARTER.add(bigInteger0);
      bigFraction1.ONE_QUARTER.multiply(2160L);
      bigFraction1.compareTo(bigFraction0);
      bigFraction0.pow((double) (-3321));
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.TWO_THIRDS.getField();
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.multiply((-1));
      BigFraction bigFraction2 = bigFraction0.ONE.multiply((-1215L));
      double double0 = bigFraction2.TWO.pow(0.0);
      assertEquals(1.0, double0, 0.01);
      
      bigFraction0.percentageValue();
      bigFraction0.getNumeratorAsLong();
      double double1 = bigFraction0.percentageValue();
      assertEquals(20.0, double1, 0.01);
      
      bigFraction1.longValue();
      BigFraction bigFraction3 = bigFraction1.multiply(962L);
      assertEquals((byte)16, bigFraction3.byteValue());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.getDenominator();
      bigFraction0.ONE.bigDecimalValue();
      int int0 = (-1637);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1637));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 1307;
      BigFraction bigFraction0 = new BigFraction(1026.50906, 1307);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.TWO_QUARTERS.pow(0.0);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.pow(bigInteger0);
      bigFraction0.longValue();
      bigFraction1.getNumerator();
      bigFraction1.getField();
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      BigFraction bigFraction3 = bigFraction2.reciprocal();
      bigFraction3.TWO.compareTo(bigFraction1);
      BigFraction bigFraction4 = bigFraction2.add(2147483647L);
      bigFraction4.ONE_FIFTH.getNumeratorAsLong();
      bigFraction4.ZERO.divide(2147483647L);
      bigFraction4.ONE.longValue();
      bigFraction0.ONE_FIFTH.multiply(bigInteger0);
      bigFraction4.TWO_FIFTHS.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1731);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.TWO.subtract(bigInteger0);
      bigFraction0.getDenominator();
      BigFraction bigFraction2 = bigFraction0.multiply(1);
      bigFraction2.ONE_FIFTH.hashCode();
      BigFraction bigFraction3 = bigFraction2.THREE_FIFTHS.divide(bigFraction1);
      assertEquals((short)0, bigFraction3.shortValue());
      
      bigFraction0.intValue();
      BigFraction bigFraction4 = bigFraction1.subtract(1);
      BigFraction bigFraction5 = bigFraction0.negate();
      BigFraction bigFraction6 = bigFraction0.multiply((long) 1);
      String string0 = bigFraction6.toString();
      assertTrue(bigFraction6.equals((Object)bigFraction2));
      assertEquals("1 / 3", string0);
      
      BigFraction bigFraction7 = BigFraction.ONE;
      boolean boolean0 = bigFraction1.equals(bigFraction7);
      assertTrue(bigFraction7.equals((Object)bigFraction4));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(bigFraction1.equals((Object)bigFraction4));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-1.0088898215431471E52), (-1.0088898215431471E52), Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -10,088,898,215,431,471,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/-1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(547, (-2723));
      BigFraction bigFraction2 = bigFraction0.ZERO.multiply(bigFraction1);
      bigFraction0.getField();
      BigDecimal bigDecimal0 = bigFraction2.bigDecimalValue();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotSame(bigFraction2, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.abs();
      bigFraction1.TWO.intValue();
      int int0 = (-983);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-983));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction0.ONE_HALF.subtract(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.pow(bigInteger0);
      int int0 = 0;
      bigFraction0.bigDecimalValue(0);
      bigFraction0.THREE_QUARTERS.getNumeratorAsInt();
      long long0 = 4503599627370496L;
      // Undeclared exception!
      try { 
        bigFraction1.ONE.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.ONE_HALF.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(752L);
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.reduce();
      bigFraction1.ZERO.longValue();
      bigFraction1.ZERO.longValue();
      bigFraction1.ONE_QUARTER.pow((-46.658));
      BigFraction bigFraction3 = bigFraction0.add(4095L);
      bigFraction1.ZERO.add((-2232));
      bigFraction2.THREE_FIFTHS.doubleValue();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction4 = bigFraction2.ONE.pow(bigInteger0);
      bigFraction4.ONE_FIFTH.longValue();
      bigFraction3.TWO_THIRDS.getField();
      bigFraction3.percentageValue();
      bigFraction1.longValue();
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction5 = bigFraction2.divide(2308L);
      bigFraction5.ONE_HALF.doubleValue();
      BigFraction bigFraction6 = bigFraction1.divide(1915);
      bigFraction5.divide(bigFraction6);
      // Undeclared exception!
      try { 
        bigFraction1.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.THREE_QUARTERS.getDenominatorAsLong();
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction0.subtract(1);
      assertEquals((byte) (-2), bigFraction2.byteValue());
      
      bigFraction1.bigDecimalValue();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      double double0 = bigFraction0.ONE_THIRD.percentageValue();
      assertEquals(33.333333333333336, double0, 0.01);
      
      int int0 = bigFraction0.FOUR_FIFTHS.intValue();
      bigFraction0.toString();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.TWO.divide(bigInteger0);
      String string0 = bigFraction0.toString();
      assertEquals("1", string0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger1);
      int int1 = bigFraction2.hashCode();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1684.22454957);
      bigFraction0.ONE_HALF.floatValue();
      bigFraction0.TWO_FIFTHS.pow(936L);
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(bigInteger0);
      bigFraction1.THREE_QUARTERS.getField();
      int int0 = bigFraction0.TWO.compareTo(bigFraction1);
      assertEquals((-1), int0);
      
      BigFraction bigFraction2 = bigFraction0.divide(577L);
      double double0 = bigFraction2.TWO_QUARTERS.doubleValue();
      assertEquals(0.5, double0, 0.01);
      
      BigFraction bigFraction3 = bigFraction2.pow((long) (byte) (-19));
      assertEquals((byte) (-3), bigFraction3.byteValue());
      
      BigFraction bigFraction4 = bigFraction1.divide(1860);
      assertEquals((short) (-27195), bigFraction4.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(0.0, (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      int int0 = 3890;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.add(3890);
      // Undeclared exception!
      try { 
        bigFraction1.ONE.divide(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
      bigFraction1.THREE_FIFTHS.getNumeratorAsInt();
      bigFraction1.TWO_QUARTERS.floatValue();
      bigFraction0.ONE_HALF.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.subtract((-288L));
      int int0 = (-3013);
      bigFraction2.THREE_QUARTERS.pow((-3013));
      BigFraction bigFraction3 = bigFraction2.divide((-9223372036854775808L));
      bigFraction3.ONE.pow((double) (-9223372036854775808L));
      int int1 = 1;
      bigFraction3.THREE_FIFTHS.multiply(1);
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(978, 2312);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction1.TWO_FIFTHS.reciprocal();
      BigInteger bigInteger0 = bigFraction1.getDenominator();
      assertEquals((byte) (-124), bigInteger0.byteValue());
      
      double double0 = bigFraction1.percentageValue();
      assertEquals(42.30103806228374, double0, 0.01);
      
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction1);
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertEquals((short)2, bigFraction3.shortValue());
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertNotSame(bigFraction3, bigFraction2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 1344;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-199.7), (-199.7), 1344);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -199.7 to fraction (-1,755,208,519,878,884/8,789,226,439,053)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(7910884519577875640L, 1483L);
      bigFraction0.ONE_HALF.subtract(7910884519577875640L);
      bigFraction0.ZERO.toString();
      int int0 = (-3667);
      // Undeclared exception!
      try { 
        bigFraction0.TWO.bigDecimalValue((-3667), (-3667));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      bigFraction0.bigDecimalValue();
      int int0 = (-485);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-485), (-485));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.ZERO;
      int int0 = (-2248);
      bigFraction1.TWO_THIRDS.pow((double) (-2248));
      bigFraction0.add((-2248));
      // Undeclared exception!
      try { 
        bigFraction1.ZERO.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction1.ONE_HALF.percentageValue();
      bigFraction0.TWO_QUARTERS.add(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.bigDecimalValue(1139, 1139);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
