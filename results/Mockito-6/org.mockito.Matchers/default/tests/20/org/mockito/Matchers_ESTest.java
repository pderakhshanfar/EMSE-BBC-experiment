/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 15:14:51 GMT 2021
 */

package org.mockito;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.hamcrest.Matcher;
import org.hamcrest.collection.IsIn;
import org.hamcrest.core.AnyOf;
import org.hamcrest.core.CombinableMatcher;
import org.hamcrest.core.IsAnything;
import org.hamcrest.core.IsNull;
import org.junit.runner.RunWith;
import org.mockito.Matchers;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Matchers_ESTest extends Matchers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = Matchers.same((Object) "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = Matchers.eq("Could not invoke ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = Matchers.anyObject();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = Matchers.eq(true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Matchers matchers0 = new Matchers();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = Matchers.isNull(class0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List list0 = Matchers.anyList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      List<Boolean> list0 = Matchers.anyListOf(class0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Set set0 = Matchers.anySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Short short0 = Matchers.isNotNull(class0);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = Matchers.eq((long) (short) (-1));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = Matchers.anyDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float float0 = Matchers.anyFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = Matchers.anyBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      short short0 = Matchers.anyShort();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = Matchers.eq(1433.4892524642569);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = Matchers.anyLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float float0 = Matchers.eq((float) (byte) (-102));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = Matchers.matches((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte byte0 = Matchers.anyByte();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char char0 = Matchers.charThat((Matcher<Character>) null);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = Matchers.isA(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = Matchers.anyInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte byte0 = Matchers.eq((byte)40);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = Matchers.any();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AnyOf<Short> anyOf0 = AnyOf.anyOf((Matcher<Short>) null, (Matcher<? super Short>) null, (Matcher<? super Short>) null, (Matcher<? super Short>) null, (Matcher<? super Short>) null, (Matcher<? super Short>) null);
      short short0 = Matchers.shortThat(anyOf0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = Matchers.anyVararg();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = Matchers.refEq((Object) "", (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      short short0 = Matchers.eq((short) (-3186));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = Matchers.anyString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = Matchers.startsWith("v(-i^2EQ]j?X!'Qw> ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Map map0 = Matchers.anyMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Collection collection0 = Matchers.anyCollection();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = Matchers.contains(" (");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Collection<Character> collection0 = Matchers.anyCollectionOf(class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = Matchers.endsWith("\"}#H7~U}1#<I");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = Matchers.any(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char char0 = Matchers.anyChar();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = Matchers.isNull();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      Map<Locale.Category, Locale.Category> map0 = Matchers.anyMapOf(class0, class0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IsAnything<Long> isAnything0 = new IsAnything<Long>();
      long long0 = Matchers.longThat(isAnything0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IsNull<Byte> isNull0 = new IsNull<Byte>();
      byte byte0 = Matchers.byteThat(isNull0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = Matchers.eq((-2052));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Short short0 = Matchers.notNull(class0);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = Matchers.doubleThat((Matcher<Double>) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Matcher<Object> matcher0 = IsNull.notNullValue(class0);
      CombinableMatcher<Boolean> combinableMatcher0 = new CombinableMatcher<Boolean>(matcher0);
      boolean boolean0 = Matchers.booleanThat(combinableMatcher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char char0 = Matchers.eq('f');
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object object0 = Matchers.isNotNull();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Set<Integer> set0 = Matchers.anySetOf(class0);
      IsIn<Integer> isIn0 = new IsIn<Integer>(set0);
      int int0 = Matchers.intThat(isIn0);
      assertFalse(set0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object object0 = Matchers.notNull();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Matchers.argThat((Matcher<Locale.FilteringMode>) null);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      float float0 = Matchers.floatThat((Matcher<Float>) null);
      assertEquals(0.0F, float0, 0.01F);
  }
}
