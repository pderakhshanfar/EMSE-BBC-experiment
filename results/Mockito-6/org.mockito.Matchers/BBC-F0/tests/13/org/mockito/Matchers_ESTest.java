/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 12:14:25 GMT 2020
 */

package org.mockito;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.hamcrest.Matcher;
import org.hamcrest.beans.HasProperty;
import org.hamcrest.beans.SamePropertyValuesAs;
import org.hamcrest.collection.IsIn;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.AnyOf;
import org.hamcrest.core.CombinableMatcher;
import org.hamcrest.core.DescribedAs;
import org.hamcrest.core.IsEqual;
import org.hamcrest.core.IsNot;
import org.hamcrest.core.IsNull;
import org.hamcrest.object.HasToString;
import org.junit.runner.RunWith;
import org.mockito.Matchers;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Matchers_ESTest extends Matchers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = Matchers.same((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = Matchers.isA(class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = Matchers.notNull(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = Matchers.anyObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = Matchers.notNull();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Matchers.eq(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Matchers matchers0 = new Matchers();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Double double0 = Matchers.isNull(class0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List list0 = Matchers.anyList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Set set0 = Matchers.anySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = Matchers.eq((long) (short)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = Matchers.anyDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float float0 = Matchers.anyFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = Matchers.anyBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      short short0 = Matchers.anyShort();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = Matchers.eq((-387.3319652));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = Matchers.anyLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Long long0 = Matchers.eq((Long) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float float0 = Matchers.eq(1.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = Matchers.matches((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte byte0 = Matchers.anyByte();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Character character0 = Character.valueOf('g');
      Matcher<Character> matcher0 = IsNot.not(character0);
      Object[] objectArray0 = new Object[4];
      DescribedAs<Character> describedAs0 = new DescribedAs<Character>("org.mockito.Matchers", matcher0, objectArray0);
      AnyOf<Character> anyOf0 = AnyOf.anyOf((Matcher<Character>) describedAs0, (Matcher<? super Character>) describedAs0, (Matcher<? super Character>) matcher0, (Matcher<? super Character>) matcher0);
      char char0 = Matchers.charThat(anyOf0);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = Matchers.anyInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte byte0 = Matchers.eq((byte)77);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Character character0 = Matchers.any();
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IsNull<Object> isNull0 = new IsNull<Object>();
      Matcher<Short> matcher0 = AllOf.allOf((Matcher<? super Short>) isNull0, (Matcher<? super Short>) isNull0);
      short short0 = Matchers.shortThat(matcher0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Double double0 = Matchers.anyVararg();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double double1 = Matchers.refEq(double0, (String[]) null);
      assertNull(double1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      short short0 = Matchers.eq((short)6);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = Matchers.anyString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = Matchers.startsWith("s");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Map map0 = Matchers.anyMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Collection collection0 = Matchers.anyCollection();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = Matchers.contains("_P*p");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Collection<Long> collection0 = Matchers.anyCollectionOf(class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = Matchers.endsWith((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = Matchers.any(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char char0 = Matchers.anyChar();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = Matchers.isNull();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Short> class1 = Short.class;
      Map<Integer, Short> map0 = Matchers.anyMapOf(class0, class1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = Matchers.isA(class0);
      SamePropertyValuesAs<Object> samePropertyValuesAs0 = new SamePropertyValuesAs<Object>(boolean0);
      Matcher<Long> matcher0 = AllOf.allOf((Matcher<? super Long>) samePropertyValuesAs0, (Matcher<? super Long>) samePropertyValuesAs0, (Matcher<? super Long>) samePropertyValuesAs0, (Matcher<? super Long>) samePropertyValuesAs0, (Matcher<? super Long>) samePropertyValuesAs0);
      long long0 = Matchers.longThat(matcher0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      List<Byte> list0 = Matchers.anyListOf(class0);
      Matcher<Byte> matcher0 = IsIn.isIn((Collection<Byte>) list0);
      byte byte0 = Matchers.byteThat(matcher0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(0);
      IsEqual<Integer> isEqual0 = new IsEqual<Integer>(integer0);
      int int0 = Matchers.intThat(isEqual0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = Matchers.eq((-790));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Character character0 = Matchers.isNotNull(class0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Matcher<Double> matcher0 = HasToString.hasToString((String) null);
      IsNot<Double> isNot0 = new IsNot<Double>(matcher0);
      double double0 = Matchers.doubleThat(isNot0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HasProperty<Boolean> hasProperty0 = new HasProperty<Boolean>("?,WZU 0]=dvybeJ'%0");
      boolean boolean0 = Matchers.booleanThat(hasProperty0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char char0 = Matchers.eq('Z');
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Set<Double> set0 = Matchers.anySetOf(class0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object object0 = Matchers.isNotNull();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = Matchers.isA(class0);
      Matcher<Boolean> matcher0 = SamePropertyValuesAs.samePropertyValuesAs(boolean0);
      Boolean boolean1 = Matchers.argThat(matcher0);
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Matcher<Object> matcher0 = IsIn.isIn(objectArray0);
      CombinableMatcher<Float> combinableMatcher0 = new CombinableMatcher<Float>(matcher0);
      float float0 = Matchers.floatThat(combinableMatcher0);
      assertEquals(0.0F, float0, 0.01F);
  }
}
