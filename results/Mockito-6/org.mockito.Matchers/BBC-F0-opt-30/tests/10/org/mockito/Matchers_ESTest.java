/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:31:53 GMT 2021
 */

package org.mockito;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.hamcrest.Matcher;
import org.hamcrest.SelfDescribing;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.AnyOf;
import org.hamcrest.core.Is;
import org.hamcrest.core.IsAnything;
import org.hamcrest.core.IsNull;
import org.hamcrest.number.OrderingComparison;
import org.hamcrest.object.HasToString;
import org.junit.runner.RunWith;
import org.mockito.Matchers;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Matchers_ESTest extends Matchers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = Matchers.eq((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Double double0 = Matchers.notNull(class0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = Matchers.anyObject();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = Matchers.notNull();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = Matchers.eq(true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Matchers matchers0 = new Matchers();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = Matchers.isNull(class0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List list0 = Matchers.anyList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = Matchers.anyListOf(class0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Set set0 = Matchers.anySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = Matchers.eq(2086L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = Matchers.anyDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float float0 = Matchers.anyFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = Matchers.anyBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      short short0 = Matchers.anyShort();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = Matchers.eq((-1.0));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = Matchers.anyLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float float0 = Matchers.eq((float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = Matchers.matches("org.mockito.Matchers");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Matchers.same(locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte byte0 = Matchers.anyByte();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char char0 = Matchers.charThat((Matcher<Character>) null);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = Matchers.isA(class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = Matchers.anyInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte byte0 = Matchers.eq((byte) (-5));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Double double0 = Matchers.any();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      short short0 = Matchers.shortThat((Matcher<Short>) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = Matchers.anyVararg();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      String[] stringArray0 = new String[9];
      Boolean boolean1 = Matchers.refEq(boolean0, stringArray0);
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      short short0 = Matchers.eq((short) (-726));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = Matchers.anyString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = Matchers.startsWith("Invalid XPath : ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Map map0 = Matchers.anyMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Collection collection0 = Matchers.anyCollection();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = Matchers.contains("org.mockito.Matchers");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Collection<Float> collection0 = Matchers.anyCollectionOf(class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = Matchers.endsWith("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = Matchers.any(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char char0 = Matchers.anyChar();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = Matchers.isNull();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<Double> class1 = Double.class;
      Map<Float, Double> map0 = Matchers.anyMapOf(class0, class1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Long long0 = new Long(1L);
      Matcher<Long> matcher0 = OrderingComparison.greaterThanOrEqualTo(long0);
      long long1 = Matchers.longThat(matcher0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-65));
      Matcher<Byte> matcher0 = OrderingComparison.lessThanOrEqualTo(byte0);
      byte byte1 = Matchers.byteThat(matcher0);
      assertEquals((byte)0, byte1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Matcher<Integer> matcher0 = IsNull.nullValue(class0);
      int int0 = Matchers.intThat(matcher0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = Matchers.eq(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Integer integer0 = Matchers.isNotNull(class0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 2);
      Matcher<Double> matcher0 = AllOf.allOf((Matcher<? super Double>[]) matcherArray0);
      double double0 = Matchers.doubleThat(matcher0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IsAnything<Object> isAnything0 = new IsAnything<Object>();
      Is<Object> is0 = new Is<Object>(isAnything0);
      Matcher<Boolean> matcher0 = HasToString.hasToString((Matcher<? super String>) is0);
      boolean boolean0 = Matchers.booleanThat(matcher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char char0 = Matchers.eq('(');
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Set<Short> set0 = Matchers.anySetOf(class0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Object object0 = Matchers.isNotNull();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<SelfDescribing> class0 = SelfDescribing.class;
      Matcher<SelfDescribing> matcher0 = IsNull.nullValue(class0);
      AnyOf<SelfDescribing> anyOf0 = AnyOf.anyOf(matcher0, (Matcher<? super SelfDescribing>) matcher0, (Matcher<? super SelfDescribing>) matcher0);
      SelfDescribing selfDescribing0 = Matchers.argThat((Matcher<SelfDescribing>) anyOf0);
      assertNull(selfDescribing0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      float float0 = Matchers.floatThat((Matcher<Float>) null);
      assertEquals(0.0F, float0, 0.01F);
  }
}
