* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.joda.time.field.UnsupportedDurationField
* Starting Client-0
* Connecting to master process on port 4212
* Analyzing classpath: 
  - subjects/buggy-versions/Time-2/target/classes
  - defects4j/framework/projects/Time/lib/org/joda/joda-convert/1.2/joda-convert-1.2.jar
* Finished analyzing classpath
* Generating tests for class org.joda.time.field.UnsupportedDurationField
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 246
* Using seed 450405782
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 136 / 246
[MASTER] 15:31:39.225 [logback-2] ERROR TestCluster - Failed to check cache for java.time.temporal.TemporalQuery<R> : Type points to itself
[MASTER] 15:34:19.014 [logback-2] ERROR TestCluster - Failed to check cache for java.util.List<E> : Type points to itself
[MASTER] 15:35:03.640 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.equals(Ljava/lang/Object;)Z: I13 Branch 4 IFEQ L240 - false: 456
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.readResolve()Ljava/lang/Object;: Line 272: 571019
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.equals(Ljava/lang/Object;)Z: I23 Branch 5 IFNONNULL L242 - true: 456
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.equals(Ljava/lang/Object;)Z: I23 Branch 5 IFNONNULL L242 - false: 302746
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.getValueAsLong(JJ)J: Line 137: 220
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.getType()Lorg/joda/time/DurationFieldType;: root-Branch: 36
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L238 - false: 196
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.getValue(J)I: root-Branch: 121
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.isPrecise()Z: Line 101: 36
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.getValueAsLong(JJ)J: root-Branch: 220
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.getValue(J)I: Line 110: 121
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.isPrecise()Z: root-Branch: 36
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.getValue(JJ)I: Line 128: 121
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.equals(Ljava/lang/Object;)Z: I28 Branch 6 IFNONNULL L243 - false: 302290
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.getValue(JJ)I: root-Branch: 121
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.getType()Lorg/joda/time/DurationFieldType;: Line 79: 36
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.readResolve()Ljava/lang/Object;: root-Branch: 571019
Number of times BBC is called for org.joda.time.field.UnsupportedDurationField.equals(Ljava/lang/Object;)Z: I28 Branch 6 IFNONNULL L243 - true: 302290
Number of times BBC is called in total: 2051540
* Search finished after 601s and 5957 generations, 1646157 statements, best individual has fitness: 111.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 41
* Number of covered goals: 39
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 34
* Number of covered goals: 30
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 36
* Number of covered goals: 36
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 29
* Number of covered goals: 26
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 20%
* Total number of goals: 64
* Number of covered goals: 13
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 45%
* Total number of goals: 22
* Number of covered goals: 10
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 34
* Number of covered goals: 30
* Generated 48 tests with total length 169
* Resulting test suite's coverage: 72% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 62%
* Compiling and checking tests
[MASTER] 15:40:21.627 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_25_1627659621584/org/joda/time/field/UnsupportedDurationField_25_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_25_1627659621584/org/joda/time/field/UnsupportedDurationField_25_tmp__ESTest_scaffolding.java]]
[MASTER] 15:40:21.627 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Time-2/target/classes:defects4j/framework/projects/Time/lib/org/joda/joda-convert/1.2/joda-convert-1.2.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Time-2/target/classes:/experiment/defects4j/framework/projects/Time/lib/org/joda/joda-convert/1.2/joda-convert-1.2.jar
[MASTER] 15:40:21.627 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Time-2/target/classes:/experiment/defects4j/framework/projects/Time/lib/org/joda/joda-convert/1.2/joda-convert-1.2.jar
[MASTER] 15:40:21.632 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: org.joda.time.field.PreciseDurationField cannot be converted to org.joda.time.field.UnsupportedDurationField: 31
[MASTER] 15:40:21.634 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_25_1627659621584/org/joda/time/field/UnsupportedDurationField_25_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Jul 30 15:40:21 GMT 2021
4:  */
5: 
6: package org.joda.time.field;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.joda.time.DurationField;
14: import org.joda.time.DurationFieldType;
15: import org.joda.time.chrono.JulianChronology;
16: import org.joda.time.field.PreciseDurationField;
17: import org.joda.time.field.UnsupportedDurationField;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class UnsupportedDurationField_25_tmp__ESTest extends UnsupportedDurationField_25_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
26:       JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
27:       PreciseDurationField preciseDurationField0 = (PreciseDurationField)durationFieldType0.getField(julianChronology0);
28:       UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
29:       // Undeclared exception!
30:       try { 
31:         ((UnsupportedDurationField) preciseDurationField0).compareTo((DurationField) unsupportedDurationField0);
32:         fail("Expecting exception: IllegalArgumentException");
33:       
34:       } catch(IllegalArgumentException e) {
35:       }
36:   }
37: }
RegularFileObject[/tmp/EvoSuite_25_1627659621584/org/joda/time/field/UnsupportedDurationField_25_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Jul 30 15:40:21 GMT 2021
5:  */
6: 
7: package org.joda.time.field;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class UnsupportedDurationField_25_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.joda.time.field.UnsupportedDurationField"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
76:     java.lang.System.setProperty("user.dir", "/experiment"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:   }
79: 
80:   private static void initializeClasses() {
81:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(UnsupportedDurationField_25_tmp__ESTest_scaffolding.class.getClassLoader() ,
82:       "org.joda.time.DateTimeZone",
83:       "org.joda.time.tz.DateTimeZoneBuilder$Recurrence",
84:       "org.joda.time.DateTimeUtils$MillisProvider",
85:       "org.joda.time.chrono.GJYearOfEraDateTimeField",
86:       "org.joda.time.Seconds",
87:       "org.joda.time.field.RemainderDateTimeField",
88:       "org.joda.time.JodaTimePermission",
89:       "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField",
90:       "org.joda.time.DateTimeFieldType",
91:       "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType",
92:       "org.joda.time.ReadableInterval",
93:       "org.joda.time.chrono.BasicChronology$HalfdayField",
94:       "org.joda.time.chrono.BasicChronology$YearInfo",
95:       "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone",
96:       "org.joda.time.field.UnsupportedDurationField",
97:       "org.joda.time.format.PeriodFormatterBuilder",
98:       "org.joda.time.chrono.ISOChronology",
99:       "org.joda.time.field.DelegatedDateTimeField",
100:       "org.joda.time.base.BaseLocal",
101:       "org.joda.time.chrono.BasicChronology",
102:       "org.joda.time.chrono.BasicYearDateTimeField",
103:       "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter",
104:       "org.joda.time.field.DividedDateTimeField",
105:       "org.joda.time.chrono.ZonedChronology",
106:       "org.joda.time.field.BaseDateTimeField",
107:       "org.joda.time.field.ZeroIsMaxDateTimeField",
108:       "org.joda.time.tz.CachedDateTimeZone$Info",
109:       "org.joda.time.Duration",
110:       "org.joda.time.format.PeriodFormatter",
111:       "org.joda.time.PeriodType",
112:       "org.joda.time.field.MillisDurationField",
113:       "org.joda.time.tz.DateTimeZoneBuilder",
114:       "org.joda.time.field.UnsupportedDateTimeField",
115:       "org.joda.time.field.ScaledDurationField",
116:       "org.joda.time.chrono.ISOYearOfEraDateTimeField",
117:       "org.joda.time.ReadWritablePeriod",
118:       "org.joda.time.field.PreciseDurationDateTimeField",
119:       "org.joda.time.MutablePeriod",
120:       "org.joda.time.LocalDateTime",
121:       "org.joda.time.tz.FixedDateTimeZone",
122:       "org.joda.time.format.PeriodPrinter",
123:       "org.joda.time.field.PreciseDateTimeField",
124:       "org.joda.time.tz.CachedDateTimeZone",
125:       "org.joda.time.format.PeriodFormatterBuilder$Literal",
126:       "org.joda.time.format.PeriodParser",
127:       "org.joda.time.base.BaseDuration",
128:       "org.joda.time.field.DecoratedDateTimeField",
129:       "org.joda.time.field.OffsetDateTimeField",
130:       "org.joda.time.Years",
131:       "org.joda.time.chrono.GJMonthOfYearDateTimeField",
132:       "org.joda.time.chrono.BasicWeekyearDateTimeField",
133:       "org.joda.time.Days",
134:       "org.joda.time.DateTimeField",
135:       "org.joda.time.field.SkipDateTimeField",
136:       "org.joda.time.base.AbstractPeriod",
137:       "org.joda.time.ReadableInstant",
138:       "org.joda.time.base.BaseSingleFieldPeriod",
139:       "org.joda.time.chrono.GJDayOfWeekDateTimeField",
140:       "org.joda.time.DateTimeUtils$SystemMillisProvider",
141:       "org.joda.time.IllegalFieldValueException",
142:       "org.joda.time.IllegalInstantException",
143:       "org.joda.time.tz.DefaultNameProvider",
144:       "org.joda.time.tz.Provider",
145:       "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField",
146:       "org.joda.time.ReadablePeriod",
147:       "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField",
148:       "org.joda.time.chrono.AssembledChronology$Fields",
149:       "org.joda.time.chrono.GregorianChronology",
150:       "org.joda.time.DurationFieldType",
151:       "org.joda.time.tz.NameProvider",
152:       "org.joda.time.Minutes",
153:       "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
154:       "org.joda.time.base.AbstractPartial",
155:       "org.joda.time.base.AbstractDuration",
156:       "org.joda.time.DateTimeUtils",
157:       "org.joda.time.Hours",
158:       "org.joda.time.base.BasePeriod",
159:       "org.joda.time.field.DecoratedDurationField",
160:       "org.joda.time.tz.DateTimeZoneBuilder$DSTZone",
161:       "org.joda.time.chrono.AssembledChronology",
162:       "org.joda.time.format.ISOPeriodFormat",
163:       "org.joda.time.chrono.GJEraDateTimeField",
164:       "org.joda.time.tz.ZoneInfoProvider",
165:       "org.joda.time.DateTimeZone$1",
166:       "org.joda.time.chrono.BaseChronology",
167:       "org.joda.time.chrono.JulianChronology",
168:       "org.joda.time.field.ImpreciseDateTimeField",
169:       "org.joda.time.field.PreciseDurationField",
170:       "org.joda.time.Period",
171:       "org.joda.time.tz.DateTimeZoneBuilder$OfYear",
172:       "org.joda.time.ReadableDuration",
173:       "org.joda.time.chrono.BasicGJChronology",
174:       "org.joda.time.DurationField",
175:       "org.joda.time.format.DateTimeFormatter",
176:       "org.joda.time.Weeks",
177:       "org.joda.time.Chronology",
178:       "org.joda.time.format.PeriodFormatterBuilder$Composite",
179:       "org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix",
180:       "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix",
181:       "org.joda.time.chrono.BasicDayOfMonthDateTimeField",
182:       "org.joda.time.chrono.ZonedChronology$ZonedDurationField",
183:       "org.joda.time.format.PeriodFormatterBuilder$Separator",
184:       "org.joda.time.ReadablePartial",
185:       "org.joda.time.DurationFieldType$StandardDurationFieldType",
186:       "org.joda.time.chrono.BasicDayOfYearDateTimeField",
187:       "org.joda.time.field.BaseDurationField"
188:     );
189:   } 
190: 
191:   private static void resetClasses() {
192:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(UnsupportedDurationField_25_tmp__ESTest_scaffolding.class.getClassLoader()); 
193: 
194:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
195:       "org.joda.time.DurationField",
196:       "org.joda.time.field.UnsupportedDurationField",
197:       "org.joda.time.DurationFieldType$StandardDurationFieldType",
198:       "org.joda.time.DurationFieldType",
199:       "org.joda.time.Chronology",
200:       "org.joda.time.chrono.BaseChronology",
201:       "org.joda.time.chrono.AssembledChronology",
202:       "org.joda.time.field.MillisDurationField",
203:       "org.joda.time.field.BaseDurationField",
204:       "org.joda.time.field.PreciseDurationField",
205:       "org.joda.time.DateTimeField",
206:       "org.joda.time.field.BaseDateTimeField",
207:       "org.joda.time.field.PreciseDurationDateTimeField",
208:       "org.joda.time.field.PreciseDateTimeField",
209:       "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType",
210:       "org.joda.time.DateTimeFieldType",
211:       "org.joda.time.field.DecoratedDateTimeField",
212:       "org.joda.time.field.ZeroIsMaxDateTimeField",
213:       "org.joda.time.chrono.BasicChronology$HalfdayField",
214:       "org.joda.time.chrono.BasicChronology",
215:       "org.joda.time.chrono.BasicGJChronology",
216:       "org.joda.time.tz.FixedDateTimeZone",
217:       "org.joda.time.tz.ZoneInfoProvider",
218:       "org.joda.time.tz.DefaultNameProvider",
219:       "org.joda.time.DateTimeZone",
220:       "org.joda.time.chrono.AssembledChronology$Fields",
221:       "org.joda.time.field.ImpreciseDateTimeField",
222:       "org.joda.time.chrono.BasicYearDateTimeField",
223:       "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField",
224:       "org.joda.time.chrono.GJYearOfEraDateTimeField",
225:       "org.joda.time.field.OffsetDateTimeField",
226:       "org.joda.time.field.DividedDateTimeField",
227:       "org.joda.time.field.DecoratedDurationField",
228:       "org.joda.time.field.ScaledDurationField",
229:       "org.joda.time.field.RemainderDateTimeField",
230:       "org.joda.time.chrono.GJEraDateTimeField",
231:       "org.joda.time.chrono.GJDayOfWeekDateTimeField",
232:       "org.joda.time.chrono.BasicDayOfMonthDateTimeField",
233:       "org.joda.time.chrono.BasicDayOfYearDateTimeField",
234:       "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
235:       "org.joda.time.chrono.GJMonthOfYearDateTimeField",
236:       "org.joda.time.chrono.BasicWeekyearDateTimeField",
237:       "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField",
238:       "org.joda.time.chrono.GregorianChronology",
239:       "org.joda.time.chrono.ISOYearOfEraDateTimeField",
240:       "org.joda.time.chrono.ISOChronology",
241:       "org.joda.time.DateTimeUtils$SystemMillisProvider",
242:       "org.joda.time.tz.DateTimeZoneBuilder",
243:       "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone",
244:       "org.joda.time.tz.DateTimeZoneBuilder$DSTZone",
245:       "org.joda.time.tz.DateTimeZoneBuilder$Recurrence",
246:       "org.joda.time.tz.DateTimeZoneBuilder$OfYear",
247:       "org.joda.time.tz.CachedDateTimeZone",
248:       "org.joda.time.DateTimeUtils",
249:       "org.joda.time.PeriodType",
250:       "org.joda.time.base.AbstractInstant",
251:       "org.joda.time.base.AbstractDateTime",
252:       "org.joda.time.base.BaseDateTime",
253:       "org.joda.time.DateTime",
254:       "org.joda.time.base.BaseSingleFieldPeriod",
255:       "org.joda.time.format.ISOPeriodFormat",
256:       "org.joda.time.format.PeriodFormatterBuilder",
257:       "org.joda.time.format.PeriodFormatterBuilder$Literal",
258:       "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter",
259:       "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix",
260:       "org.joda.time.format.PeriodFormatterBuilder$Composite",
261:       "org.joda.time.format.PeriodFormatterBuilder$Separator",
262:       "org.joda.time.format.PeriodFormatter",
263:       "org.joda.time.Years",
264:       "org.joda.time.base.AbstractInterval",
265:       "org.joda.time.base.BaseInterval",
266:       "org.joda.time.MutableInterval",
267:       "org.joda.time.chrono.ZonedChronology",
268:       "org.joda.time.chrono.ZonedChronology$ZonedDurationField",
269:       "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField",
270:       "org.joda.time.Days",
271:       "org.joda.time.field.FieldUtils",
272:       "org.joda.time.Seconds",
273:       "org.joda.time.base.AbstractPeriod",
274:       "org.joda.time.base.BasePeriod$1",
275:       "org.joda.time.base.BasePeriod",
276:       "org.joda.time.Period",
277:       "org.joda.time.base.AbstractDuration",
278:       "org.joda.time.base.BaseDuration",
279:       "org.joda.time.Duration",
280:       "org.joda.time.convert.ConverterManager",
281:       "org.joda.time.convert.ConverterSet",
282:       "org.joda.time.convert.AbstractConverter",
283:       "org.joda.time.convert.ReadableInstantConverter",
284:       "org.joda.time.convert.StringConverter",
285:       "org.joda.time.convert.CalendarConverter",
286:       "org.joda.time.convert.DateConverter",
287:       "org.joda.time.convert.LongConverter",
288:       "org.joda.time.convert.NullConverter",
289:       "org.joda.time.convert.ReadablePartialConverter",
290:       "org.joda.time.convert.ReadableDurationConverter",
291:       "org.joda.time.convert.ReadableIntervalConverter",
292:       "org.joda.time.convert.ReadablePeriodConverter",
293:       "org.joda.time.convert.ConverterSet$Entry",
294:       "org.joda.time.MutablePeriod",
295:       "org.joda.time.format.FormatUtils",
296:       "org.joda.time.chrono.BasicFixedMonthChronology",
297:       "org.joda.time.chrono.BasicSingleEraDateTimeField",
298:       "org.joda.time.field.DelegatedDateTimeField",
299:       "org.joda.time.field.SkipDateTimeField",
300:       "org.joda.time.chrono.BasicChronology$YearInfo",
301:       "org.joda.time.chrono.LimitChronology",
302:       "org.joda.time.chrono.LimitChronology$LimitDurationField",
303:       "org.joda.time.chrono.LimitChronology$LimitDateTimeField",
304:       "org.joda.time.chrono.EthiopicChronology",
305:       "org.joda.time.Instant",
306:       "org.joda.time.chrono.GJChronology",
307:       "org.joda.time.chrono.JulianChronology",
308:       "org.joda.time.chrono.GJChronology$CutoverField",
309:       "org.joda.time.chrono.GJChronology$ImpreciseCutoverField",
310:       "org.joda.time.chrono.GJChronology$LinkedDurationField",
311:       "org.joda.time.field.SkipUndoDateTimeField",
312:       "org.joda.time.chrono.BuddhistChronology",
313:       "org.joda.time.base.AbstractPartial",
314:       "org.joda.time.base.BaseLocal",
315:       "org.joda.time.LocalDate",
316:       "org.joda.time.chrono.IslamicChronology$LeapYearPatternType",
317:       "org.joda.time.chrono.IslamicChronology",
318:       "org.joda.time.format.DateTimeFormatter",
319:       "org.joda.time.Weeks",
320:       "org.joda.time.Months",
321:       "org.joda.time.Minutes",
322:       "org.joda.time.LocalTime",
323:       "org.joda.time.Hours",
324:       "org.joda.time.IllegalFieldValueException",
325:       "org.joda.time.field.DelegatedDurationField",
326:       "org.joda.time.LocalDateTime",
327:       "org.joda.time.field.UnsupportedDateTimeField",
328:       "org.joda.time.tz.UTCProvider",
329:       "org.joda.time.chrono.CopticChronology",
330:       "org.joda.time.chrono.StrictChronology",
331:       "org.joda.time.field.StrictDateTimeField",
332:       "org.joda.time.MutableDateTime",
333:       "org.joda.time.format.ISODateTimeFormat",
334:       "org.joda.time.format.DateTimeFormatterBuilder",
335:       "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter",
336:       "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber",
337:       "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral",
338:       "org.joda.time.format.DateTimeFormatterBuilder$Composite",
339:       "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral",
340:       "org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber",
341:       "org.joda.time.format.DateTimeFormatterBuilder$Fraction",
342:       "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset",
343:       "org.joda.time.format.DateTimeFormatterBuilder$FixedNumber",
344:       "org.joda.time.format.DateTimeFormatterBuilder$MatchingParser",
345:       "org.joda.time.format.ISODateTimeFormat$Constants",
346:       "org.joda.time.format.DateTimeParserBucket",
347:       "org.joda.time.format.DateTimeParserBucket$SavedState",
348:       "org.joda.time.base.BasePartial",
349:       "org.joda.time.format.DateTimeFormat$1",
350:       "org.joda.time.format.DateTimeFormat",
351:       "org.joda.time.MonthDay",
352:       "org.joda.time.chrono.LenientChronology",
353:       "org.joda.time.YearMonth",
354:       "org.joda.time.Interval",
355:       "org.joda.time.field.LenientDateTimeField",
356:       "org.joda.time.JodaTimePermission",
357:       "org.joda.time.Partial",
358:       "org.joda.time.format.DateTimeParserBucket$SavedField",
359:       "org.joda.time.field.AbstractReadableInstantFieldProperty",
360:       "org.joda.time.DateTime$Property",
361:       "org.joda.time.DateTimeZone$1",
362:       "org.joda.time.tz.CachedDateTimeZone$Info",
363:       "org.joda.time.field.AbstractPartialFieldProperty",
364:       "org.joda.time.MonthDay$Property",
365:       "org.joda.time.chrono.LimitChronology$LimitException",
366:       "org.joda.time.LocalDate$Property",
367:       "org.joda.time.YearMonth$Property",
368:       "org.joda.time.LocalDateTime$Property",
369:       "org.joda.time.MutableDateTime$Property",
370:       "org.joda.time.LocalTime$Property"
371:     );
372:   }
373: }

[MASTER] 15:40:21.634 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
PreciseDurationField preciseDurationField0 = (PreciseDurationField)durationFieldType0.getField(julianChronology0);
UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
((UnsupportedDurationField) preciseDurationField0).compareTo((DurationField) unsupportedDurationField0);

[MASTER] 15:40:31.690 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:31.691 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.weeks();
JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
DurationField durationField0 = durationFieldType0.getField(julianChronology0);
durationField0.add((-3004L), 1097);

[MASTER] 15:40:32.265 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:32.266 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.minutes();
JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
DurationField durationField0 = durationFieldType0.getField(julianChronology0);
durationField0.add(0L, 0L);

[MASTER] 15:40:32.619 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField cannot be cast to org.joda.time.field.UnsupportedDurationField
[MASTER] 15:40:32.619 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
DurationField durationField0 = durationFieldType0.getField(julianChronology0);
((UnsupportedDurationField) durationField0).equals(unsupportedDurationField0);

[MASTER] 15:40:32.911 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:32.912 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.days();
JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
DurationField durationField0 = durationFieldType0.getField(julianChronology0);
durationField0.getDifference((-621L), (-2249L));

[MASTER] 15:40:33.218 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:33.218 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.millis();
JulianChronology julianChronology0 = JulianChronology.getInstance();
DurationField durationField0 = durationFieldType0.getField(julianChronology0);
durationField0.getDifferenceAsLong(1L, 0L);

[MASTER] 15:40:33.544 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:33.545 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.seconds();
JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
DurationField durationField0 = durationFieldType0.getField(julianChronology0);
durationField0.getMillis(1);

[MASTER] 15:40:33.859 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:33.860 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.weeks();
JulianChronology julianChronology0 = JulianChronology.getInstance();
DurationField durationField0 = durationFieldType0.getField(julianChronology0);
durationField0.getMillis(1, 0L);

[MASTER] 15:40:34.226 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:34.227 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Seconds seconds0 = Seconds.seconds(1187);
Minutes minutes0 = seconds0.toStandardMinutes();
DurationFieldType durationFieldType0 = minutes0.getFieldType();
DurationField durationField0 = durationFieldType0.getField((Chronology) null);
durationField0.getMillis((-472L));

[MASTER] 15:40:34.528 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:34.528 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.minutes();
JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
DurationField durationField0 = durationFieldType0.getField(julianChronology0);
durationField0.getMillis(0L, (-1L));

[MASTER] 15:40:34.797 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:34.797 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.minutes();
DurationField durationField0 = durationFieldType0.getField((Chronology) null);
durationField0.getName();

[MASTER] 15:40:35.074 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:35.074 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.hours();
JulianChronology julianChronology0 = JulianChronology.getInstance();
DurationField durationField0 = durationFieldType0.getField(julianChronology0);
durationField0.getType();

[MASTER] 15:40:35.344 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:35.345 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.centuries();
ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
DurationField durationField0 = durationFieldType0.getField(iSOChronology0);
durationField0.getUnitMillis();

[MASTER] 15:40:35.624 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:35.624 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.hours();
JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
DurationField durationField0 = durationFieldType0.getField(julianChronology0);
durationField0.getValue((-1109L));

[MASTER] 15:40:35.903 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:35.903 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.seconds();
JulianChronology julianChronology0 = JulianChronology.getInstance();
DurationField durationField0 = durationFieldType0.getField(julianChronology0);
durationField0.getValue((-59L), (-59L));

[MASTER] 15:40:36.214 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:36.214 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.seconds();
JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
DurationField durationField0 = durationFieldType0.getField(julianChronology0);
durationField0.getValueAsLong(21859200000L);

[MASTER] 15:40:36.498 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:36.498 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.millis();
JulianChronology julianChronology0 = JulianChronology.getInstance();
DurationField durationField0 = durationFieldType0.getField(julianChronology0);
durationField0.getValueAsLong(0L, 0L);

[MASTER] 15:40:37.147 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:37.147 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.minutes();
DurationField durationField0 = durationFieldType0.getField((Chronology) null);
durationField0.isPrecise();

[MASTER] 15:40:37.470 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:37.480 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.months();
JulianChronology julianChronology0 = JulianChronology.getInstance();
DurationField durationField0 = durationFieldType0.getField(julianChronology0);
durationField0.isSupported();

[MASTER] 15:40:37.808 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 15:40:37.809 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.centuries();
ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
DurationField durationField0 = durationFieldType0.getField(iSOChronology0);
durationField0.toString();

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'UnsupportedDurationField_ESTest' to results/Time-2/org.joda.time.field.UnsupportedDurationField/BBC-F0-50/tests/9
* Done!

* Computation finished
