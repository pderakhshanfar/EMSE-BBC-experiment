/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 10:17:14 GMT 2020
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line1.intersection(line0);
      assertNull(vector3D1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = new Line(vector3D0, vector3D0);
      double double0 = line0.distance(line1);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-4024.26771595268), (-1527.94), (-4024.26771595268));
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = Vector3D.POSITIVE_INFINITY;
      Vector1D vector1D0 = line0.toSubSpace(vector3D2);
      assertEquals(Double.POSITIVE_INFINITY, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D1);
      assertEquals(0.0, vector1D0.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(0.0, vector3D2.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3256.7432, 3256.7432);
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Vector3D vector3D2 = vector3D0.add(3256.7432, (Vector<Euclidean3D>) vector3D1);
      Line line0 = new Line(vector3D2, vector3D1);
      Vector1D vector1D0 = line0.toSubSpace(vector3D1);
      Vector3D vector3D3 = line0.toSpace(vector1D0);
      assertEquals((-0.9999999608063405), vector1D0.getX(), 0.01);
      assertEquals((-1.2319173849496234E-20), vector3D3.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D((-306.272), vector3D0, 1259.7858298594088, vector3D0, (-306.272), vector3D0, (-306.272), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = new Vector1D(1386.32);
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(1386.3199999999997, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(42.5, 42.5);
      Vector3D vector3D1 = new Vector3D((-1964.9385821), vector3D0, 1222.44, vector3D0, 1222.44, vector3D0, 42.5, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D((-3025.59488503), vector3D0, (-3025.59488503), vector3D0, (-3025.59488503), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt(5546.63093304426);
      assertEquals(5546.630933044259, vector3D2.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt(0.0);
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-4.503599627370496E15), (-4.503599627370496E15));
      Vector3D vector3D1 = new Vector3D(2071.09398728911, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt((-0.999999999999872));
      assertEquals(1.5344243928243895, vector3D2.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-3025.59488503), (-3025.59488503));
      Vector3D vector3D1 = new Vector3D((-3025.59488503), vector3D0, (-3025.59488503), vector3D0, (-3025.59488503), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt(5546.63093304426);
      assertEquals(1324.6954995217864, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D((-306.272), vector3D0, 1259.7858298594088, vector3D0, (-306.272), vector3D0, (-306.272), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals((-8.919485654787304E-15), vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D(868.46280373, vector3D0, (-6310.48830048215), vector3D0, (-6310.48830048215), vector3D0, 868.46280373, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(1.323632921799859E-34, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(4032.2288, vector3D0, 4032.2288, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(9.980675779337219E-13, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-4024.26771595268), (-1527.94), (-4024.26771595268));
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertEquals((-0.6925959462203137), vector3D2.getDelta(), 0.01);
      assertNotNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(1126.46, vector3D0);
      Vector3D vector3D2 = new Vector3D(1126.46, 1126.46, 1.994622662341635E-17);
      Line line0 = new Line(vector3D1, vector3D2);
      Vector3D vector3D3 = line0.getOrigin();
      assertTrue(vector3D3.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-4.503599627370496E15), (-4.503599627370496E15));
      Vector3D vector3D1 = new Vector3D(2071.09398728911, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals((-1.2268110517672777E-13), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(0.0, vector3D2.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-4.503599627370496E15), (-4.503599627370496E15));
      Vector3D vector3D1 = new Vector3D(2071.09398728911, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(0.9487383047237739, vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D((-3025.59488503), vector3D0, (-3025.59488503), vector3D0, (-3025.59488503), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals((-1.0), vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(4032.2288, vector3D0, 4032.2288, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals((-1.0), vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D(868.46280373, vector3D0, (-6310.48830048215), vector3D0, 1.0E-10, vector3D0, 868.46280373, vector3D0);
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D1, vector3D0);
      Line line0 = new Line(vector3D2, vector3D1);
      Line line1 = line0.revert();
      Vector3D vector3D3 = line1.getDirection();
      assertEquals(0.0, vector3D3.getY(), 0.01);
      assertEquals((-1.0), vector3D3.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(4032.2288, vector3D0, 4032.2288, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(1.0, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-3025.59488503), (-3025.59488503));
      Vector3D vector3D1 = new Vector3D((-3025.59488503), vector3D0, (-3025.59488503), vector3D0, (-3025.59488503), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(0.9429607793391069, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.getAbscissa(vector3D1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-4.503599627370496E15), (-4.503599627370496E15));
      Vector3D vector3D1 = new Vector3D(2071.09398728911, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals((-0.999999999999872), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-4.503599627370496E15), (-4.503599627370496E15));
      Vector3D vector3D1 = new Vector3D(2071.09398728911, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.distance(vector3D1);
      assertEquals(2.1689290120936853E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-4.503599627370496E15), (-4.503599627370496E15));
      Vector3D vector3D1 = new Vector3D(2071.09398728911, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(vector3D0, vector3D1);
      double double0 = line1.distance(line0);
      assertEquals(4.0228941327328515E-14, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(2651.613378, vector3D0, 959.01724293, vector3D0, 1.997844754509471E-9, vector3D0, 1.997844754509471E-9, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(9.933297022153476E-17, vector3D2.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-4024.26771595268), (-1527.94), (-4024.26771595268));
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      double double0 = line0.distance(vector3D2);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-0.32048345582412846), vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(2651.613378, vector3D0, 959.01724293, vector3D0, 1.997844754509471E-9, vector3D0, 1.997844754509471E-9, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
      try { 
        line0.toSubSpace((Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(4032.2288, vector3D0, 4032.2288, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
      try { 
        line0.toSpace((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.reset((Vector3D) null, vector3D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-207.02), vector3D0, 8.0E298, vector3D0, (-1.0), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
      try { 
        line0.isSimilarTo(line0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.isSimilarTo((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.intersection((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.getAbscissa((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.distance((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D((-3025.59488503), vector3D0, (-3025.59488503), vector3D0, (-3025.59488503), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
      try { 
        line0.distance((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.contains((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.closestPoint((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Line line0 = null;
      try {
        line0 = new Line(vector3D0, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-4.503599627370496E15), (-4.503599627370496E15));
      Vector3D vector3D1 = new Vector3D(2071.09398728911, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(1.8497232299894867E-13, vector3D2.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(4032.2288, vector3D0, 4032.2288, vector3D0);
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
      Line line0 = new Line(vector3D2, vector3D1);
      Vector3D vector3D3 = line0.closestPoint(line0);
      assertEquals(0.0, vector3D3.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-4.503599627370496E15), (-4.503599627370496E15));
      Vector3D vector3D1 = new Vector3D(2071.09398728911, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.contains(vector3D1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-4.503599627370496E15), (-4.503599627370496E15));
      Vector3D vector3D1 = new Vector3D(2071.09398728911, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      try { 
        line0.reset(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.pointAt((-1696.0));
      assertFalse(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D(868.46280373, vector3D0, (-6310.48830048215), vector3D0, 1.0E-10, vector3D0, 868.46280373, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.distance(line0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D(868.46280373, vector3D0, (-6310.48830048215), vector3D0, 1.0E-10, vector3D0, 868.46280373, vector3D0);
      Vector3D vector3D2 = new Vector3D(1.0E-10, 1.0E-10, 1.0E-10);
      Line line0 = new Line(vector3D2, vector3D1);
      Line line1 = new Line(line0);
      line1.reset(vector3D1, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D(1.0E-10, 1.0E-10, 1.0E-10);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(line0);
      line1.reset(vector3D0, vector3D1);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D2 = vector3D0.subtract((Vector<Euclidean3D>) vector3D1);
      Line line0 = new Line(vector3D0, vector3D2);
      boolean boolean0 = line0.isSimilarTo(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D(868.46280373, vector3D0, (-6310.48830048215), vector3D0, 1.0E-10, vector3D0, 868.46280373, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      boolean boolean0 = line0.isSimilarTo(line0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3256.7432, 3256.7432);
      Line line0 = null;
      try {
        line0 = new Line(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      assertEquals(Double.NaN, vector1D0.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getDirection();
      assertTrue(vector3D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D1, vector3D0);
      SubLine subLine0 = line0.wholeLine();
      assertNotNull(subLine0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertTrue(vector3D2.isNaN());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(Double.NaN, vector3D2.getZ(), 0.01);
  }
}
