/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:51:48 GMT 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(line0);
      Vector3D vector3D2 = line1.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals((-0.5), vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(line0);
      double double0 = line1.distance(line0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2870.9456483391), 4.0, 4.0);
      Vector3D vector3D1 = new Vector3D((-2870.9456483391), vector3D0, 2601.65997636, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals((-0.7853981633974483), vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      Vector3D vector3D1 = line0.toSpace(vector1D0);
      assertNotSame(vector3D0, vector3D1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(391.0, (-719.927010040567), (-3255.736588000324));
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D1);
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D(1279.0, vector3D0, 1319.3, vector3D0, 0.06897873700233659, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = Vector1D.ONE;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals((-1.0), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.pointAt((-3418.8480266017705));
      assertEquals(Double.NaN, vector3D1.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Vector3D vector3D2 = vector3D1.crossProduct((Vector<Euclidean3D>) vector3D0);
      Vector3D vector3D3 = new Vector3D((-1943.914), vector3D0, (-1943.914), vector3D0, 821.574, vector3D2, 2.220446049250313E-16, vector3D2);
      Line line0 = new Line(vector3D3, vector3D1);
      Vector3D vector3D4 = line0.pointAt(Double.NEGATIVE_INFINITY);
      line0.toSubSpace(vector3D4);
      assertEquals(Double.POSITIVE_INFINITY, vector3D4.getZ(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D4.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.pointAt(0.0);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(391.0, (-719.927010040567), (-3255.736588000324));
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt((-3255.736588000324));
      assertEquals(698.162579920677, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Vector3D vector3D2 = new Vector3D((-1.0), vector3D0, (-989.668286), vector3D0, (-1.0), vector3D1);
      Line line0 = new Line(vector3D0, vector3D2);
      Vector3D vector3D3 = line0.pointAt((-989.668286));
      assertEquals((-0.0010073824443986167), vector3D3.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(6746325.611705298, 0.3936265707015991, 0.0);
      Vector3D vector3D1 = new Vector3D((-2132.0), vector3D0, 0.3936265707015991, vector3D0, 4119.7602403387, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt((-623.0392879));
      assertEquals(623.0392896559259, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.PLUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertEquals((-0.5), vector3D2.getY(), 0.01);
      assertNotNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(391.0, (-719.927010040567), (-3255.736588000324));
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-70.0599), 1285.1911);
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals((-0.42813708192398964), vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.036, (-1.0), 0.036);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-170.8), vector3D0, (-973.301759), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(1.1042962645959318E-13, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getOrigin();
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals((-0.5), vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getDirection();
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4.116164446561962E-8;
      Vector3D vector3D0 = new Vector3D(doubleArray0);
      Vector3D vector3D1 = vector3D0.scalarMultiply(4.116164446561962E-8);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals((-1.0), vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D(8.187837196013875E33, vector3D0, 8.187837196013875E33, vector3D0, 391.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(1.0, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(391.0, (-719.927010040567), (-3255.736588000324));
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(0.11646504462480928, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Vector3D vector3D2 = vector3D0.crossProduct((Vector<Euclidean3D>) vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.getAbscissa(vector3D2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.ZERO;
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4.116164446561962E-8;
      doubleArray0[1] = 4.440892098500626E-16;
      Vector3D vector3D0 = new Vector3D(doubleArray0);
      Vector3D vector3D1 = vector3D0.scalarMultiply(4.116164446561962E-8);
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.distance(vector3D0);
      assertEquals(6.6174449004242214E-24, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = new Vector3D(1.4277675278410923E7, (-989.668286));
      Line line1 = new Line(vector3D0, vector3D2);
      double double0 = line0.distance(line1);
      assertEquals(4.796132534098475E-18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-989.668286), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(4.74374297735957E-14, vector3D2.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-989.668286), vector3D0);
      Vector3D vector3D2 = new Vector3D(22.2915707968, 2242.789337040828);
      Line line0 = new Line(vector3D2, vector3D1);
      Vector3D vector3D3 = line0.closestPoint(line0);
      assertEquals(0.9100536865185905, vector3D3.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(391.0, (-719.927010040567), (-3255.180267504149));
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals((-0.9541222262213227), vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.toSubSpace((Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.toSpace((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(1.0, vector3D0, 1.0, vector3D0, 2693.7, vector3D0, (-1.7976931348623157E308), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
      try { 
        line0.revert();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.reset((Vector3D) null, vector3D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(1.0, vector3D0, 1.0, vector3D0, 2693.7, vector3D0, (-1.7976931348623157E308), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
      try { 
        line0.isSimilarTo(line0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.0), 60.2);
      Vector3D vector3D1 = Vector3D.PLUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
      try { 
        line0.isSimilarTo((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.intersection((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.getAbscissa((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0, 1.0E-10);
      Vector3D vector3D1 = new Vector3D(1.0E-10, 1.0E-10, (-52.7));
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
      try { 
        line0.distance((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.distance((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.contains((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.closestPoint((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      line0.reset(vector3D0, vector3D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D1, vector3D0);
      try { 
        line0.reset(vector3D1, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.distance(vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-989.668286), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals(1.0000000000000475, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.intersection(line0);
      assertNull(vector3D1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(6746325.611705298, 0.3936265707015991, 0.0);
      Vector3D vector3D1 = new Vector3D((-2132.0), vector3D0, 0.3936265707015991, vector3D0, 4119.7602403387, vector3D0);
      Vector3D vector3D2 = new Vector3D(0.3936265707015991, vector3D0, 6746325.611705298, vector3D1);
      Line line0 = new Line(vector3D2, vector3D0);
      Line line1 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = line0.revert();
      boolean boolean0 = line1.isSimilarTo(line0);
      assertTrue(boolean0);
      assertNotSame(line1, line0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Vector3D vector3D2 = vector3D1.crossProduct((Vector<Euclidean3D>) vector3D0);
      Line line0 = new Line(vector3D0, vector3D2);
      Line line1 = new Line(vector3D0, vector3D1);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Line line0 = null;
      try {
        line0 = new Line(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(3.141592653589793, vector3D2.getAlpha(), 0.01);
      assertEquals((-1.0), vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      SubLine subLine0 = line0.wholeLine();
      assertNotNull(subLine0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(2.356194490192345, vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
  }
}
