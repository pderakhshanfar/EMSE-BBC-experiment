/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:50:56 GMT 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-2622.1750392081), vector3D0, 178.852, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(line0);
      Vector3D vector3D2 = line0.intersection(line1);
      assertEquals(1.7097343279316287E-17, vector3D2.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(line0);
      Vector3D vector3D2 = line0.closestPoint(line1);
      assertEquals((-0.5), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(178.852, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(line0);
      double double0 = line0.distance(line1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Vector3D vector3D2 = vector3D0.subtract(245.841, (Vector<Euclidean3D>) vector3D1);
      Vector3D vector3D3 = Vector3D.PLUS_K;
      Vector3D vector3D4 = new Vector3D(5.865827662008209E-8, vector3D3);
      Vector3D vector3D5 = new Vector3D(245.841, 245.841);
      Line line0 = new Line(vector3D4, vector3D5);
      Vector1D vector1D0 = line0.toSubSpace(vector3D2);
      assertEquals(Double.NEGATIVE_INFINITY, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(176.127904, vector3D0, 3450.7184, vector3D0, (-1645.14357727155), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = line0.revert();
      Vector3D vector3D2 = Vector3D.MINUS_I;
      Vector1D vector1D0 = line1.toSubSpace(vector3D2);
      assertEquals(0.0, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(5.183830200464863E-16, 3.145894820876798E-6, 554.132156);
      Vector3D vector3D1 = new Vector3D(5.183830200464863E-16, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals((-2.356194490192345), vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(176.127904, vector3D0, 3450.7184, vector3D0, (-1645.14357727155), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = Vector3D.MINUS_I;
      line0.reset(vector3D1, vector3D2);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      Vector3D vector3D3 = line0.toSpace(vector1D0);
      assertEquals((-0.9999998726811624), vector1D0.getX(), 0.01);
      assertEquals(1.9999994907243979, vector3D3.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(2.2250738585072014E-308, vector3D0, 2.2250738585072014E-308, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D1);
      Vector1D vector1D1 = new Vector1D(3194.237321541, vector1D0, 749.0768788009, vector1D0, (-136.874415769), vector1D0);
      Vector3D vector3D2 = line0.toSpace(vector1D1);
      assertEquals((-2691.5593838497584), vector1D1.getX(), 0.01);
      assertEquals((-0.7856608760721757), vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2126.471798951306), (-2126.471798951306));
      Vector3D vector3D1 = new Vector3D((-2126.471798951306), vector3D0, (-2126.471798951306), vector3D0, 0.0, vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt(Double.POSITIVE_INFINITY);
      assertEquals(0.7853981633974483, vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(176.127904, vector3D0, 3450.7184, vector3D0, (-1645.14357727155), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = Vector3D.MINUS_I;
      line0.reset(vector3D1, vector3D2);
      Vector3D vector3D3 = line0.pointAt(6881047.286324609);
      assertEquals((-6881046.409732562), vector3D3.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt(0.0);
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D((-2196.369997057335), vector3D0, (-2196.369997057335), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.pointAt((-2196.369997057335));
      assertEquals((-2196.369997057335), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(4.0, 4836.43539960125);
      Vector3D vector3D1 = new Vector3D(31631.333904000003, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals((-7.781696307083662E-17), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(2.2250738585072014E-308, vector3D0, 2.2250738585072014E-308, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertEquals(0.0, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D((-2197.544078278595), vector3D0, (-2197.544078278595), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertEquals(1.3479238050894156E-16, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getOrigin();
      assertNotSame(vector3D0, vector3D1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(5.183830200464863E-16, 3.145894820876798E-6, 554.132156);
      Vector3D vector3D1 = new Vector3D(5.183830200464863E-16, vector3D0);
      Vector3D vector3D2 = new Vector3D(5.183830200464863E-16, vector3D1, 5.183830200464863E-16, vector3D1);
      Line line0 = new Line(vector3D2, vector3D1);
      Vector3D vector3D3 = line0.getOrigin();
      assertEquals(2.698797605186715E-44, vector3D3.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(178.852, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(1.816227478142792E-28, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(3.127012349095067, 8.0E298, 8.0E298);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(0.0, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-2622.1750392081), vector3D0, 178.852, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(1.0, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-794.5028143), (-794.5028143));
      Vector3D vector3D1 = new Vector3D(57.2957763671875, vector3D0, (-794.5028143), vector3D0, (-1194.8729523339077), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(0.9009719874056781, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getDirection();
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-794.5028143), (-794.5028143));
      Vector3D vector3D1 = new Vector3D(6881047.286324777, vector3D0, (-794.5028143), vector3D0, 4836.43539960125, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals((-0.29869962389655047), vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(176.127904, vector3D0, 3450.7184, vector3D0, (-1645.14357727155), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = line0.revert();
      Vector3D vector3D2 = Vector3D.MINUS_I;
      double double0 = line1.getAbscissa(vector3D2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D((-2197.544078278595), vector3D0, (-2197.544078278595), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.getAbscissa(vector3D1);
      assertEquals(4395.08815655719, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals((-0.7071067811865475), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(178.852, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.distance(vector3D1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.distance(vector3D0);
      assertEquals(1.2537167179050217E-16, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(9.86960440046104, 9.86960440046104);
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = line0.revert();
      Line line2 = line1.revert();
      double double0 = line2.distance(line1);
      assertEquals(1.729730400870064E-17, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertFalse(vector3D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(178.852, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(1.3476748414001027E-14, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(176.127904, vector3D0, 3450.7184, vector3D0, (-1645.14357727155), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
      try { 
        line0.toSubSpace((Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D((-2126.471798951306), vector3D0, (-2126.471798951306), vector3D0, 0.0, vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
      try { 
        line0.toSpace((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(0.0, 8.0E298, 8.0E298);
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
      try { 
        line0.revert();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.reset(vector3D0, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(0.0, 8.0E298, 8.0E298);
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
      try { 
        line0.isSimilarTo(line0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.isSimilarTo((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = vector3D0.crossProduct((Vector<Euclidean3D>) vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
      try { 
        line0.intersection((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.getAbscissa((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.distance((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.distance((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.contains((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.closestPoint((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(178.852, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.contains(vector3D1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Line line0 = new Line(vector3D1, vector3D0);
      try { 
        line0.reset(vector3D1, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-794.5028143), (-794.5028143));
      Vector3D vector3D1 = new Vector3D(6881047.286324777, vector3D0, (-794.5028143), vector3D0, 4836.43539960125, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      
      Vector3D vector3D3 = vector3D1.subtract((Vector<Euclidean3D>) vector3D0);
      Line line1 = new Line(vector3D3, vector3D2);
      boolean boolean0 = line1.isSimilarTo(line0);
      assertFalse(boolean0);
      assertEquals((-2.9061202127552983), vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D((-2196.369997057335), vector3D0, (-2196.369997057335), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2126.471798951306), (-2126.471798951306));
      Line line0 = null;
      try {
        line0 = new Line(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      Vector3D vector3D1 = line0.toSpace(vector1D0);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      SubLine subLine0 = line0.wholeLine();
      assertNotNull(subLine0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.pointAt(245.841);
      assertTrue(vector3D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.intersection(line0);
      assertNull(vector3D1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
  }
}
