/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 02:07:25 GMT 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1822.127146), (-2167.0516761214));
      Vector3D vector3D1 = new Vector3D((-1822.127146), vector3D0, (-2167.0516761214), vector3D0, (-266.606218566231), vector3D0);
      Vector3D vector3D2 = new Vector3D((-1822.127146), vector3D1, (-1822.127146), vector3D0);
      Line line0 = new Line(vector3D2, vector3D1);
      Line line1 = new Line(line0);
      Vector3D vector3D3 = line1.intersection(line0);
      assertNotNull(vector3D3);
      assertEquals(4.2368859340411983E-10, vector3D3.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-2630.3777608), (-2630.3777608), 38330.625293269935);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(line0);
      double double0 = line0.distance(line1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      Vector3D vector3D2 = new Vector3D(0.0, vector3D1, 4.930380657631324E-32, vector3D1);
      Vector3D vector3D3 = new Vector3D(4.930380657631324E-32, vector3D0, 0.0, vector3D0, 1592.77484816157, vector3D2, 1.0E-10, vector3D1);
      Line line0 = new Line(vector3D0, vector3D3);
      Line line1 = new Line(vector3D2, vector3D0);
      boolean boolean0 = line1.isSimilarTo(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      Vector3D vector3D2 = new Vector3D(0.0, vector3D1, 4.930380657631324E-32, vector3D1);
      Vector3D vector3D3 = new Vector3D(4.930380657631324E-32, vector3D0, 0.0, vector3D0, 1592.77484816157, vector3D2, 1.0E-10, vector3D1);
      Line line0 = new Line(vector3D3, vector3D0);
      Line line1 = new Line(vector3D2, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      assertEquals(Double.NaN, vector1D0.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3.413935669075388E14, 3.413935669075388E14, 3.413935669075388E14);
      Vector3D vector3D1 = new Vector3D(3.413935669075388E14, vector3D0, 2.907289185132623E14, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = Vector3D.POSITIVE_INFINITY;
      Vector1D vector1D0 = line0.toSubSpace(vector3D2);
      assertEquals(Double.NEGATIVE_INFINITY, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      Vector3D vector3D2 = new Vector3D(194.9818, vector3D1, 1.0, vector3D1, 1.0, vector3D1, (-6.032174644509064E-23), vector3D0);
      Line line0 = new Line(vector3D2, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D1);
      assertEquals(0.0, vector1D0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-514.25689), (-514.25689), 3.141592653489793);
      Vector3D vector3D1 = Vector3D.PLUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = line0.revert();
      Vector1D vector1D0 = Vector1D.ONE;
      Vector3D vector3D2 = line1.toSpace(vector1D0);
      assertEquals(1.999991328789343, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(2357.6222076325757, vector3D0, 2357.6222076325757, vector3D0, 0.0, vector3D0, 2357.6222076325757, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = Vector3D.MINUS_I;
      Vector1D vector1D0 = line0.toSubSpace(vector3D2);
      Vector3D vector3D3 = line0.toSpace(vector1D0);
      assertEquals(7.650020372842545E-13, vector1D0.getNorm(), 0.01);
      assertEquals(0.0, vector3D3.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(2357.6222076325757, vector3D0, 2357.6222076325757, vector3D0, 0.0, vector3D0, 2357.6222076325757, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      Line line1 = new Line(vector3D2, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      Vector3D vector3D3 = line1.toSpace(vector1D0);
      assertEquals((-0.999999999999235), vector3D3.getZ(), 0.01);
      assertEquals((-1.0), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-1.0), vector3D0, (-1.0), vector3D0, (-191.782086242), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(1.0, vector3D2.getX(), 0.01);
      assertEquals(0.9999999999999845, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1822.127146), (-2167.0516761214));
      Vector3D vector3D1 = new Vector3D((-1822.127146), vector3D0, (-2167.0516761214), vector3D0, (-266.606218566231), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-1.0), vector3D0, (-1.0), vector3D0, (-191.782086242), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt((-1.0));
      assertEquals((-0.9999999999999845), vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(2348.406337790613, vector3D0, 2348.406337790613, vector3D0, 0.0, vector3D0, 2348.406337790613, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt(0.0);
      assertEquals((-1.3783347665508107E-12), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, 0.0, vector3D0, 0.0, vector3D0, (-191.06473678366396), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt(7.686451557831937E-15);
      assertEquals(0.0, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-514.25689), (-514.25689), 3.141592653489793);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 2787.722944291, vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt(0.0);
      assertEquals((-6.036506642766546E-11), vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-1.0), vector3D0, (-1.0), vector3D0, (-191.782086242), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertEquals(1.5574938575578966E-14, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getOrigin();
      assertFalse(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1822.127146), (-2167.0516761214));
      Vector3D vector3D1 = new Vector3D((-1822.127146), vector3D0, (-2167.0516761214), vector3D0, (-266.606218566231), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(1.2730997488113177E-17, vector3D2.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-1.0), vector3D0, (-1.0), vector3D0, (-191.782086242), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(1.5574938575578966E-14, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1822.127146), (-2167.0516761214));
      Vector3D vector3D1 = new Vector3D((-1822.127146), vector3D0, (-2167.0516761214), vector3D0, (-266.606218566231), vector3D0);
      Vector3D vector3D2 = new Vector3D((-1822.127146), vector3D1, (-1822.127146), vector3D0);
      Line line0 = new Line(vector3D2, vector3D1);
      Vector3D vector3D3 = line0.getOrigin();
      assertEquals(4.2368859340411983E-10, vector3D3.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getDirection();
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-1.0), vector3D0, (-1.0), vector3D0, (-191.782086242), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = new Vector3D((-8.0E298), vector3D1, (-8.0E298), vector3D0, 773.410380598, vector3D1);
      line0.reset(vector3D0, vector3D2);
      Vector3D vector3D3 = line0.getDirection();
      assertEquals(0.0, vector3D3.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      Vector3D vector3D2 = new Vector3D(194.9818, vector3D1, 1.0, vector3D1, 1.0, vector3D1, (-6.032174644509064E-23), vector3D0);
      Line line0 = new Line(vector3D2, vector3D0);
      Vector3D vector3D3 = line0.getDirection();
      assertEquals(1.0, vector3D3.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-514.25689), (-514.25689), 3.141592653489793);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 2787.722944291, vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = line0.revert();
      Vector3D vector3D2 = line1.getDirection();
      assertEquals((-0.7071001840049299), vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1822.127146), (-2167.0516761214));
      Vector3D vector3D1 = new Vector3D((-1822.127146), vector3D0, (-2167.0516761214), vector3D0, (-266.606218566231), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      
      line0.getAbscissa(vector3D2);
      assertEquals((-1.0715078411142435E-17), vector3D2.getX(), 0.01);
      assertEquals(0.871049883460255, vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, 0.0, vector3D0, 0.0, vector3D0, (-191.06473678366396), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals(1.0000000000000078, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1822.127146), (-2167.0516761214));
      Vector3D vector3D1 = new Vector3D((-1822.127146), vector3D0, (-1822.127146), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.distance(vector3D1);
      assertEquals(1.0005629868087365E-12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertNotSame(vector3D1, vector3D0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, 0.0, vector3D0, 0.0, vector3D0, (-191.782086242), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(1.4533154268720547E-14, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      Vector3D vector3D2 = new Vector3D(194.9818, vector3D1, 1.0, vector3D1, 1.0, vector3D1, (-6.032174644509064E-23), vector3D0);
      Line line0 = new Line(vector3D2, vector3D0);
      Vector3D vector3D3 = line0.closestPoint(line0);
      assertEquals(0.0, vector3D3.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1822.127146), (-2167.0516761214));
      Vector3D vector3D1 = new Vector3D((-1822.127146), vector3D0, (-2167.0516761214), vector3D0, (-266.606218566231), vector3D0);
      Vector3D vector3D2 = new Vector3D((-1822.127146), vector3D1, (-1822.127146), vector3D0);
      Line line0 = new Line(vector3D2, vector3D1);
      Vector3D vector3D3 = line0.closestPoint(line0);
      assertEquals(4.1021724860392076E-10, vector3D3.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.toSubSpace((Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.toSpace((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.reset(vector3D0, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-1.0), vector3D0, (-1.0), vector3D0, (-191.782086242), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = new Vector3D((-8.0E298), vector3D0, (-8.0E298), vector3D1, 773.410380598, vector3D0);
      line0.reset(vector3D0, vector3D2);
      // Undeclared exception!
      try { 
        line0.isSimilarTo(line0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.isSimilarTo((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-1.0), (-1.0));
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
      try { 
        line0.intersection((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.getAbscissa((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.distance((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.distance((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.contains((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.closestPoint((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-514.25689), (-514.25689), 3.141592653489793);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 2787.722944291, vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(0.0021626906966512585, vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1822.127146), (-2167.0516761214));
      Vector3D vector3D1 = new Vector3D((-1822.127146), vector3D0, (-2167.0516761214), vector3D0, (-266.606218566231), vector3D0);
      Vector3D vector3D2 = new Vector3D((-1822.127146), vector3D1, (-1822.127146), vector3D0);
      Line line0 = new Line(vector3D2, vector3D1);
      boolean boolean0 = line0.contains(vector3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-1.0), vector3D0, (-1.0), vector3D0, (-191.782086242), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-514.25689), (-514.25689), 3.141592653489793);
      Vector3D vector3D1 = Vector3D.PLUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      try { 
        line0.reset(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, 0.0, vector3D0, 0.0, vector3D0, (-191.06473678366396), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt(Double.NaN);
      assertFalse(vector3D2.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1822.127146), (-2167.0516761214));
      Vector3D vector3D1 = new Vector3D((-1822.127146), vector3D0, (-2167.0516761214), vector3D0, (-266.606218566231), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.distance(vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1822.127146), (-2167.0516761214));
      Vector3D vector3D1 = new Vector3D((-1822.127146), vector3D0, (-2167.0516761214), vector3D0, (-266.606218566231), vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      Vector3D vector3D2 = new Vector3D(0.0, vector3D1, 4.930380657631324E-32, vector3D1);
      Vector3D vector3D3 = new Vector3D(4.930380657631324E-32, vector3D0, 0.0, vector3D0, 1592.77484816157, vector3D2, 1.0E-10, vector3D1);
      Line line0 = new Line(vector3D3, vector3D0);
      Line line1 = new Line(vector3D2, vector3D0);
      Vector3D vector3D4 = line1.intersection(line0);
      assertNull(vector3D4);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 4.930380657631324E-32, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1822.127146), (-2167.0516761214));
      Vector3D vector3D1 = new Vector3D((-1822.127146), vector3D0, (-2167.0516761214), vector3D0, (-266.606218566231), vector3D0);
      Vector3D vector3D2 = new Vector3D((-1822.127146), vector3D1, (-1822.127146), vector3D0);
      Line line0 = new Line(vector3D2, vector3D1);
      Line line1 = new Line(line0);
      line1.reset(vector3D0, vector3D1);
      double double0 = line0.distance(line1);
      assertEquals(2.0090856667212135E-12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3.413935669075388E14, 3.413935669075388E14, 3.413935669075388E14);
      Vector3D vector3D1 = new Vector3D(3.413935669075388E14, vector3D0, 2.907289185132623E14, vector3D0);
      Vector3D vector3D2 = Vector3D.PLUS_K;
      Line line0 = new Line(vector3D1, vector3D2);
      Line line1 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line1.isSimilarTo(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(vector3D0, vector3D1);
      boolean boolean0 = line1.isSimilarTo(line0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Line line0 = null;
      try {
        line0 = new Line(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(4.930380657631324E-32, vector3D0, 0.0, vector3D0, 1592.77484816157, vector3D0, 1.0E-10, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      SubLine subLine0 = line0.wholeLine();
      assertNotNull(subLine0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = Vector1D.NaN;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertFalse(vector3D2.isInfinite());
  }
}
