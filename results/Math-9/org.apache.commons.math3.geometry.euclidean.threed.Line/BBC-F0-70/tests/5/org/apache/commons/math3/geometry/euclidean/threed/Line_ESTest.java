/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 00:02:06 GMT 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-4.92966773542776), (-2166.096342083606), (-4.92966773542776));
      Vector3D vector3D1 = new Vector3D(1.0000000000000004, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(line0);
      double double0 = line0.distance(line1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-6.032174644509064E-23), (-6.032174644509064E-23), (-6.032174644509064E-23));
      Vector3D vector3D1 = new Vector3D((-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0, (-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = Vector3D.NEGATIVE_INFINITY;
      Vector1D vector1D0 = line0.toSubSpace(vector3D2);
      assertEquals(Double.POSITIVE_INFINITY, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-4.92966773542776), (-2166.096342083606), (-4.92966773542776));
      Vector3D vector3D1 = new Vector3D(1.0000000000000004, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D1);
      assertEquals((-2166.107335570229), vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      Vector3D vector3D1 = line0.toSpace(vector1D0);
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = line0.revert();
      Vector1D vector1D0 = new Vector1D((-1.0));
      Vector3D vector3D2 = line1.toSpace(vector1D0);
      assertEquals((-1.2071067811865475), vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0, (-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0);
      Vector3D vector3D2 = vector3D1.orthogonal();
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D2);
      Vector3D vector3D3 = line0.toSpace(vector1D0);
      assertEquals(2.361836860432602E-24, vector1D0.getX(), 0.01);
      assertEquals(0.0, vector3D3.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = line0.revert();
      Vector1D vector1D0 = new Vector1D(21.99297119702121);
      Vector3D vector3D2 = line1.toSpace(vector1D0);
      assertEquals((-0.8175385811758474), vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.pointAt((-328.52525988));
      assertTrue(vector3D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 4672.8344366);
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.pointAt(Double.POSITIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.ZERO;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.pointAt(0.0);
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0, (-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt((-6.032174644509064E-23));
      assertEquals(6.268358330552324E-23, vector3D2.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.pointAt((-0.7071067811865475));
      assertEquals((-0.9999999999999999), vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-2327.3929180629), vector3D0, 3637.6041858034378, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(2.5939887209553027E-33, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.ZERO;
      Vector3D vector3D2 = vector3D0.add((Vector<Euclidean3D>) vector3D1);
      Line line0 = new Line(vector3D2, vector3D1);
      Vector3D vector3D3 = new Vector3D(113.352115, vector3D2, 13.07, vector3D0, 1.0E-10, vector3D1);
      Line line1 = new Line(vector3D2, vector3D3);
      Vector3D vector3D4 = line0.intersection(line1);
      assertEquals(1.1102230246251565E-16, vector3D4.getX(), 0.01);
      assertNotNull(vector3D4);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertEquals(0.5, vector3D2.getNormInf(), 0.01);
      assertNotNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-2327.3929180629), vector3D0, 3637.026797518456, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(1.6317553977334018E-17, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(0.375, 161.381114);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(0.4583793216951941, vector3D2.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getOrigin();
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-4.92966773542776), (-2166.096342083606), (-4.92966773542776));
      Vector3D vector3D1 = new Vector3D(1.0000000000000004, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(3.137686423457597, vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(0.0, vector3D2.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals((-2.356194490192345), vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getDirection();
      assertNotSame(vector3D0, vector3D1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-1489.06781464), vector3D0, (-1489.06781464), vector3D0, (-1489.06781464), vector3D0, 1.7976931348623157E308, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(-0.0, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(0.7071067811865475, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0, (-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(1.0, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = Vector3D.MINUS_K;
      double double0 = line0.getAbscissa(vector3D2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = vector3D0.scalarMultiply(1.304E19);
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.distance(vector3D1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(0.375, 161.381114);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = vector3D0.scalarMultiply(1.304E19);
      Line line1 = new Line(vector3D0, vector3D2);
      double double0 = line0.distance(line1);
      assertEquals(7.615641094507693E-19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.ZERO;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(0.375, 161.381114);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = vector3D0.scalarMultiply(1.304E19);
      Line line1 = new Line(vector3D0, vector3D2);
      Vector3D vector3D3 = line1.closestPoint(line0);
      assertEquals(0.9999999999999996, vector3D3.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0, (-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D2);
      Vector3D vector3D3 = line0.toSpace(vector1D0);
      assertEquals((-2.361836860432602E-24), vector3D3.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.toSubSpace((Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0, (-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
      try { 
        line0.toSpace((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.reset((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-2327.3929180629), vector3D0, 3637.026797518456, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
      try { 
        line0.isSimilarTo((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
      try { 
        line0.intersection((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.getAbscissa((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.distance((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.distance((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.contains((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.closestPoint((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(0.375, 161.381114);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = vector3D0.scalarMultiply(1.304E19);
      boolean boolean0 = line0.contains(vector3D2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      boolean boolean0 = line0.contains(vector3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      try { 
        line0.reset(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals((-0.7071067811865475), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0, (-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0);
      Vector3D vector3D2 = vector3D1.orthogonal();
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D3 = vector3D0.add((Vector<Euclidean3D>) vector3D2);
      Line line1 = line0.revert();
      line0.reset(vector3D3, vector3D2);
      Vector3D vector3D4 = line1.intersection(line0);
      assertNull(vector3D4);
      assertNotSame(line0, line1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 4672.8344366);
      Vector3D vector3D1 = new Vector3D(959.1063761942631, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(7.089167774689814E-11, vector3D2.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0, (-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0);
      Vector3D vector3D2 = vector3D1.orthogonal();
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D3 = vector3D0.add((Vector<Euclidean3D>) vector3D2);
      Line line1 = new Line(line0);
      line0.reset(vector3D3, vector3D2);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(0.375, 161.381114);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = vector3D0.scalarMultiply(1.304E19);
      Line line1 = new Line(vector3D0, vector3D2);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-6.032174644509064E-23), (-6.032174644509064E-23), (-6.032174644509064E-23));
      Vector3D vector3D1 = new Vector3D((-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0, (-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Line line0 = null;
      try {
        line0 = new Line(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-6.032174644509064E-23), (-6.032174644509064E-23), (-6.032174644509064E-23));
      Vector3D vector3D1 = new Vector3D((-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0, (-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals((-0.5773502691896257), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 4672.8344366);
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-6.032174644509064E-23), (-6.032174644509064E-23), (-6.032174644509064E-23));
      Vector3D vector3D1 = new Vector3D((-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0, (-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      SubLine subLine0 = line0.wholeLine();
      assertNotNull(subLine0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-6.032174644509064E-23), (-6.032174644509064E-23), (-6.032174644509064E-23));
      Vector3D vector3D1 = new Vector3D((-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0, (-6.032174644509064E-23), vector3D0, 1.9987994582857286E-8, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.distance(vector3D1);
      assertEquals(6.89718414111967E-46, double0, 0.01);
  }
}
