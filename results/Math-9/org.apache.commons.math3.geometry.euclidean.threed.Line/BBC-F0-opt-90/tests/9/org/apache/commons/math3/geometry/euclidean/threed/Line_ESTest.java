/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 23:53:41 GMT 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D1, vector3D0);
      double double0 = line1.distance(line0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = Vector3D.PLUS_J;
      Vector3D vector3D3 = new Vector3D(2373.7616047, vector3D0, 0.0, vector3D0, 1.0E-10, vector3D2);
      boolean boolean0 = line0.contains(vector3D3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1193.897275), (-1193.897275), 0.0);
      Vector3D vector3D1 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      assertEquals(Double.NaN, vector1D0.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1815.09755306731, 1815.09755306731, 1815.09755306731);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = Vector3D.POSITIVE_INFINITY;
      Vector1D vector1D0 = line0.toSubSpace(vector3D2);
      assertEquals(Double.POSITIVE_INFINITY, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      assertEquals((-1.0), vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = new Vector3D((-1580.27398934), (-1580.27398934), (-1.0));
      Vector3D vector3D2 = Vector3D.PLUS_K;
      line0.reset(vector3D1, vector3D2);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector3D vector3D3 = line0.toSpace(vector1D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D3.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Vector3D vector3D2 = Vector3D.PLUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = line0.toSubSpace(vector3D2);
      line0.toSpace(vector1D0);
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertEquals(0.0, vector1D0.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-75.9118), vector3D0, 1743.39560816, vector3D0, 2022.8, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = new Vector1D((-75.9118));
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(5762.601379239961, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = line0.toSubSpace(vector3D1);
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(0.7071067811865475, vector1D0.getX(), 0.01);
      assertEquals((-8.865115929175827E-17), vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.pointAt(Double.NaN);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.pointAt(0.0);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.7827257129423813E-8, vector3D0, 1.7827257129423813E-8, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.pointAt(1.7827257129423813E-8);
      assertEquals(1.7827257129423813E-8, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.pointAt(0.5);
      assertEquals((-0.5), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-673.770441568847), 986.5307, 1733.8991);
      Vector3D vector3D2 = new Vector3D(1015.85791, vector3D0, 2.220446049250313E-16, vector3D1, (-1.0), vector3D0, 2.220446049250313E-16, vector3D0);
      Line line0 = new Line(vector3D2, vector3D0);
      Line line1 = new Line(vector3D1, vector3D2);
      Vector3D vector3D3 = line0.intersection(line1);
      assertEquals((-1.4960709150831855E-13), vector3D3.getX(), 0.01);
      assertNotNull(vector3D3);
      assertEquals(1029936.5774895687, vector3D3.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertEquals(0.5, vector3D2.getY(), 0.01);
      assertNotNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertEquals((-0.7853981633974483), vector3D2.getAlpha(), 0.01);
      assertNotNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2154.839281266522), 4262.988402975845);
      Vector3D vector3D1 = new Vector3D((-44.10681232381), vector3D0, (-1632.3212), vector3D0, (-2303.800394439787), vector3D0, 2.356194490192345, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(2.3828273193573024E-13, vector3D2.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.7827257129423813E-8, vector3D0, 1.7827257129423813E-8, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(6.200874984075213E-26, vector3D2.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2484.0, 1377.672, (-85.7092802876264));
      Vector3D vector3D1 = new Vector3D((-85.7092802876264), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(1.2955653179444036E-11, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(0.0, vector3D2.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2380.939209, 2380.939209, 2380.939209);
      Vector3D vector3D1 = new Vector3D(1663.81, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = Vector3D.NEGATIVE_INFINITY;
      line0.reset(vector3D2, vector3D1);
      Vector3D vector3D3 = line0.getOrigin();
      assertFalse(vector3D3.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getDirection();
      assertNotSame(vector3D0, vector3D1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 110.539777957617;
      Vector3D vector3D0 = new Vector3D(doubleArray0);
      Vector3D vector3D1 = new Vector3D(110.539777957617, vector3D0, 110.539777957617, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals((-1.0), vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 8.0E298, vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(-0.0, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.0), (-869.7170881689183));
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, (-869.7170881689183), vector3D0, (-869.7170881689183), vector3D0);
      Vector3D vector3D2 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D2, vector3D1);
      Vector3D vector3D3 = line0.getDirection();
      assertEquals(0.47296857545442766, vector3D3.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.getAbscissa(vector3D1);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2380.939209, 2380.939209, 2380.939209);
      Vector3D vector3D1 = new Vector3D(1663.81, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = Vector3D.NEGATIVE_INFINITY;
      double double0 = line0.getAbscissa(vector3D2);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.distance(vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2380.939209, 2380.939209, 2380.939209);
      Vector3D vector3D1 = new Vector3D(1663.81, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.distance(vector3D1);
      assertEquals(1.6156762004007034E-9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(3.8693527387646845E-16, vector3D0, 3.8693527387646845E-16, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals((-9.772551220456177E-33), vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.7827257129423813E-8, vector3D0, 1.7827257129423813E-8, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(6.200874984075213E-26, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2484.0, 1377.672, (-85.7092802876264));
      Vector3D vector3D1 = new Vector3D((-85.7092802876264), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(1.6784894930603836E-22, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2380.939209, 2380.939209, 2380.939209);
      Vector3D vector3D1 = new Vector3D(1663.81, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = Vector3D.NEGATIVE_INFINITY;
      line0.reset(vector3D2, vector3D1);
      Vector3D vector3D3 = line0.closestPoint(line0);
      assertEquals(Double.NaN, vector3D3.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(4567.304032738657, 3.858589535188887, (-1.0));
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(7.620066238118003E-7, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.toSubSpace((Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.toSpace((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 8.0E298, vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
      try { 
        line0.revert();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1193.897275), (-1193.897275), 0.0);
      Vector3D vector3D1 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
      try { 
        line0.reset((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 8.0E298, vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
      try { 
        line0.isSimilarTo(line0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.isSimilarTo((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.intersection((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
      try { 
        line0.getAbscissa((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.distance((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.distance((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.contains((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.closestPoint((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(0.0, vector3D2.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-75.9118), vector3D0, 1743.39560816, vector3D0, 2022.8, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = new Vector3D((-3690.2838081600003), 2022.8);
      boolean boolean0 = line0.contains(vector3D2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      try { 
        line0.reset(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2380.939209, 2380.939209, 2380.939209);
      Vector3D vector3D1 = new Vector3D(1663.81, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.pointAt(Double.NEGATIVE_INFINITY);
      assertEquals((-2.356194490192345), vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2380.939209, 2380.939209, 2380.939209);
      Vector3D vector3D1 = new Vector3D(1663.81, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = Vector3D.NEGATIVE_INFINITY;
      line0.reset(vector3D2, vector3D1);
      Vector3D vector3D3 = line0.intersection(line0);
      assertNull(vector3D3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Vector3D vector3D2 = new Vector3D((-673.770441568847), 986.5307, 1733.8991);
      Line line0 = new Line(vector3D2, vector3D1);
      Line line1 = new Line(vector3D2, vector3D0);
      double double0 = line1.distance(line0);
      assertEquals(8.726000882020337E-14, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2751.342, (-4.440892098500626E-16));
      Vector3D vector3D1 = new Vector3D((-3804.2676), vector3D0, (-3804.2676), vector3D0);
      Vector3D vector3D2 = new Vector3D((-4.440892098500626E-16), vector3D1, (-1519.5331996714258), vector3D1, 2758.4992, vector3D1);
      Line line0 = new Line(vector3D2, vector3D0);
      Line line1 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2380.939209, 2380.939209, 2380.939209);
      Vector3D vector3D1 = new Vector3D(1663.81, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = Vector3D.NEGATIVE_INFINITY;
      line0.reset(vector3D2, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      boolean boolean0 = line0.isSimilarTo(line0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Line line0 = null;
      try {
        line0 = new Line(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals((-1.0), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      SubLine subLine0 = line0.wholeLine();
      assertNotNull(subLine0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.add(3.8693527387646845E-16, (Vector<Euclidean3D>) vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(line0);
      assertFalse(line1.equals((Object)line0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      boolean boolean0 = line0.contains(vector3D1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = line0.revert();
      boolean boolean0 = line1.isSimilarTo(line0);
      assertTrue(boolean0);
      assertNotSame(line1, line0);
  }
}
