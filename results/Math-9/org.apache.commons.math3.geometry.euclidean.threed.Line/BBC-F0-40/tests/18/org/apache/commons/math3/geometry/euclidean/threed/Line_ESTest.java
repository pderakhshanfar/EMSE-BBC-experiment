/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 01:32:41 GMT 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, 0.0, vector3D0, 1.0E-10, vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = Vector3D.NaN;
      line0.reset(vector3D0, vector3D2);
      double double0 = line0.distance(line0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, 0.0, vector3D0, 1.0E-10, vector3D0, 0.0, vector3D0);
      Vector3D vector3D2 = vector3D0.normalize();
      Vector3D vector3D3 = new Vector3D(0.0, 1.0E-10);
      Line line0 = new Line(vector3D1, vector3D3);
      boolean boolean0 = line0.contains(vector3D2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, 0.0, vector3D0, 1.0E-10, vector3D0, 0.0, vector3D0);
      Vector3D vector3D2 = new Vector3D(0.0, 1.0E-10);
      Vector3D vector3D3 = vector3D0.negate();
      Line line0 = new Line(vector3D1, vector3D2);
      Line line1 = new Line(vector3D1, vector3D3);
      boolean boolean0 = line1.isSimilarTo(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, 0.0, vector3D0, 1.0E-10, vector3D0, 0.0, vector3D0);
      Vector3D vector3D2 = new Vector3D(0.0, 1.0E-10);
      Line line0 = new Line(vector3D1, vector3D2);
      Vector3D vector3D3 = line0.intersection(line0);
      Line line1 = new Line(vector3D3, vector3D0);
      boolean boolean0 = line1.isSimilarTo(line0);
      assertFalse(boolean0);
      assertEquals(4.5869939402730785E-27, vector3D3.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D((-1.7976931348623157E308), vector3D0, 1748.203024, vector3D0, (-1.7976931348623157E308), vector3D0, 3099.3, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D1);
      assertEquals(Double.NaN, vector1D0.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-721.842), (-721.842), (-721.842));
      Vector3D vector3D1 = new Vector3D((-1727.346), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = Vector3D.NEGATIVE_INFINITY;
      Vector1D vector1D0 = line0.toSubSpace(vector3D2);
      assertEquals(Double.POSITIVE_INFINITY, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, 0.0, vector3D0, 1.0E-10, vector3D0, 0.0, vector3D0);
      Vector3D vector3D2 = vector3D0.normalize();
      Line line0 = new Line(vector3D1, vector3D2);
      Vector3D vector3D3 = line0.intersection(line0);
      line0.toSubSpace(vector3D3);
      assertEquals(2.1040513408101945E-53, vector3D3.getNormSq(), 0.01);
      assertEquals(4.5869939402730785E-27, vector3D3.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3.141592653489793, 459.846527091, 459.846527091);
      Vector3D vector3D1 = new Vector3D(3.141592653489793, vector3D0, 459.846527091, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 2664.31442, vector3D0, 1857.8318314847297, vector3D0);
      Vector3D vector3D2 = vector3D0.scalarMultiply(3.680266491040243E7);
      Line line0 = new Line(vector3D2, vector3D1);
      Vector3D vector3D3 = Vector3D.crossProduct(vector3D0, vector3D2);
      Vector1D vector1D0 = line0.toSubSpace(vector3D3);
      Vector3D vector3D4 = line0.toSpace(vector1D0);
      assertEquals(2.663824992075739E-9, vector1D0.getX(), 0.01);
      assertEquals(0.0, vector3D4.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-4017.67000013405);
      Vector3D vector3D0 = new Vector3D(doubleArray0);
      Vector3D vector3D1 = new Vector3D(3.7695593180841415E-20, (-1546.0));
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = new Vector1D((-1546.0));
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertEquals(1546.7839957012898, vector3D2.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, 0.0, vector3D0, 1.0E-10, vector3D0, 0.0, vector3D0);
      Vector3D vector3D2 = vector3D0.normalize();
      Line line0 = new Line(vector3D1, vector3D2);
      Vector1D vector1D0 = line0.toSubSpace(vector3D1);
      Vector3D vector3D3 = line0.toSpace(vector1D0);
      assertEquals(0.0, vector3D3.getAlpha(), 0.01);
      assertEquals(2.0E-10, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-172.28747666836), vector3D0, 1125.5992, vector3D0, 1125.5992, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = Vector1D.NaN;
      Vector3D vector3D2 = line0.toSpace(vector1D0);
      assertTrue(vector3D2.isNaN());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.pointAt(506.64418844627284);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, 0.0, vector3D0, 1.0E-10, vector3D0, 0.0, vector3D0);
      Vector3D vector3D2 = new Vector3D(0.0, 1.0E-10);
      Line line0 = new Line(vector3D1, vector3D2);
      Vector3D vector3D3 = line0.pointAt((-1198.438578));
      assertEquals((-1.198438578239888E-7), vector3D3.getZ(), 0.01);
      assertEquals((-1198.438578), vector3D3.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.pointAt(0.0);
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, 0.0, vector3D0, 1.0E-10, vector3D0, 0.0, vector3D0);
      Vector3D vector3D2 = Vector3D.PLUS_J;
      Line line0 = new Line(vector3D1, vector3D2);
      Vector3D vector3D3 = line0.pointAt((-2.5857668567479893E-8));
      assertEquals(2.605766857261143E-8, vector3D3.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0, 0.0, vector3D0, 0.0, vector3D0);
      Vector3D vector3D2 = vector3D0.normalize();
      Line line0 = new Line(vector3D1, vector3D2);
      Vector3D vector3D3 = line0.intersection(line0);
      assertEquals(Double.NaN, vector3D3.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, 1.0E-10, vector3D0, 1.0E-10, vector3D0, 1.0E-10, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(3.331881250116021E-26, vector3D2.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, 0.0, vector3D0, 1.0E-10, vector3D0, 0.0, vector3D0);
      Vector3D vector3D2 = new Vector3D(0.0, 1.0E-10);
      Line line0 = new Line(vector3D1, vector3D2);
      Vector3D vector3D3 = line0.getOrigin();
      assertEquals(2.0000000004000002E-20, vector3D3.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getOrigin();
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Vector3D vector3D2 = new Vector3D(2173.901987622, vector3D1, 0.9999999998, vector3D0, 411.43702, vector3D0, 3.68147999504024E7, vector3D1);
      Line line0 = new Line(vector3D2, vector3D1);
      Vector3D vector3D3 = line0.getOrigin();
      assertEquals(3.895566293104414E-9, vector3D3.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.getDirection();
      assertTrue(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Vector3D vector3D2 = new Vector3D((-1.7976931348623157E308), vector3D0, 1748.203024, vector3D1, (-1.7976931348623157E308), vector3D1, 3099.3, vector3D1);
      Line line0 = new Line(vector3D2, vector3D1);
      Vector3D vector3D3 = line0.getDirection();
      assertEquals(-0.0, vector3D3.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-172.28747666836), vector3D0, 1125.5992, vector3D0, 1125.5992, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals(1.0, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2050.1372), 0.0);
      Vector3D vector3D1 = new Vector3D((-2050.1372), vector3D0);
      Vector3D vector3D2 = new Vector3D((-2180.864577665242), vector3D0, (-2799.68), vector3D1);
      Vector3D vector3D3 = new Vector3D((-2050.1372), vector3D2, (-1.0), vector3D0, 2159.929147000822, vector3D0);
      Line line0 = new Line(vector3D3, vector3D1);
      Vector3D vector3D4 = line0.getDirection();
      assertEquals((-0.969406878964561), vector3D4.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.getAbscissa(vector3D1);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Vector3D vector3D2 = new Vector3D(2173.901987622, vector3D1, 0.9999999998, vector3D0, 411.43702, vector3D0, 3.68147999504024E7, vector3D1);
      Line line0 = new Line(vector3D2, vector3D1);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals((-3.895566293104414E-9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(3284.21091, 3284.21091);
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.distance(vector3D0);
      assertEquals(9.734318268080919E-17, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(3033.76, 1.0E-10, 1.0E-10);
      Vector3D vector3D2 = vector3D0.normalize();
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(vector3D2, vector3D1);
      double double0 = line0.distance(line1);
      assertEquals(6.265783150176302E-30, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = line0.revert();
      Vector3D vector3D2 = line1.closestPoint(line0);
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0E-10, 3033.76, 1.0E-10);
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals((-2.46469793056794), vector3D2.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.NaN;
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
      try { 
        line0.toSubSpace((Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.toSpace((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(3284.21091, 3284.21091);
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
      try { 
        line0.reset((Vector3D) null, vector3D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Vector3D vector3D2 = new Vector3D((-1.7976931348623157E308), vector3D0, 1748.203024, vector3D1, (-1.7976931348623157E308), vector3D1, 3099.3, vector3D1);
      Line line0 = new Line(vector3D2, vector3D1);
      // Undeclared exception!
      try { 
        line0.isSimilarTo(line0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Vector3D vector3D2 = new Vector3D(2173.901987622, vector3D1, 0.9999999998, vector3D0, 411.43702, vector3D0, 3.68147999504024E7, vector3D1);
      Line line0 = new Line(vector3D2, vector3D1);
      // Undeclared exception!
      try { 
        line0.isSimilarTo((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
      try { 
        line0.intersection((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.getAbscissa((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.distance((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-2701.6), vector3D0, 682.18526, vector3D0, (-2701.6), vector3D0, (-2701.6), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
      try { 
        line0.distance((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, 0.0, vector3D0, 1.0E-10, vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      // Undeclared exception!
      try { 
        line0.contains((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D1);
      // Undeclared exception!
      try { 
        line0.closestPoint((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Line line0 = null;
      try {
        line0 = new Line((Vector3D) null, vector3D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D((-1852.033579157), vector3D0, 898.218388288698, vector3D0, 2736.0391, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(1.1267566865212087E-13, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D((-1.7976931348623157E308), vector3D0, 1748.203024, vector3D0, (-1.7976931348623157E308), vector3D0, 3099.3, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.closestPoint(line0);
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-2701.6), vector3D0, 682.18526, vector3D0, (-2701.6), vector3D0, (-2701.6), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.contains(vector3D1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D1);
      try { 
        line0.reset(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, 3033.76, vector3D0, 1.0E-10, vector3D0, 3033.76, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.distance(vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(0.0, 1.0E-10);
      Line line0 = new Line(vector3D0, vector3D1);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, 0.0, vector3D0, 0.0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = Vector3D.NaN;
      Line line1 = new Line(vector3D2, vector3D0);
      Vector3D vector3D3 = line0.intersection(line1);
      assertNull(vector3D3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(0.5, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, 3033.76, 1.0E-10);
      Line line0 = new Line(vector3D1, vector3D0);
      double double0 = line0.distance(line0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(3033.76, 1.0E-10, 1.0E-10);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      
      Line line1 = new Line(vector3D0, vector3D2);
      double double0 = line1.distance(line0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.8764723935969863E-27, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3.141592653489793, 459.846527091, 459.846527091);
      Vector3D vector3D1 = new Vector3D(9197633.217600001, vector3D0);
      Vector3D vector3D2 = new Vector3D(3.141592653489793, vector3D1, 459.846527091, vector3D0);
      Line line0 = new Line(vector3D2, vector3D0);
      Line line1 = new Line(vector3D2, vector3D1);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, 3033.76, 1.0E-10);
      Vector3D vector3D2 = vector3D0.normalize();
      Line line0 = new Line(vector3D1, vector3D2);
      Line line1 = new Line(vector3D2, vector3D1);
      boolean boolean0 = line1.isSimilarTo(line0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Line line0 = null;
      try {
        line0 = new Line(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, vector3D0, 3033.76, vector3D0, 1.0E-10, vector3D0, 3033.76, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      assertEquals((-1.0000000000006555), vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Vector3D vector3D0 = new Vector3D(doubleArray0);
      Vector3D vector3D1 = new Vector3D(3.7695593180841415E-20, (-1546.0));
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getDirection();
      assertEquals((-0.33010464644049503), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Vector3D vector3D0 = new Vector3D(doubleArray0);
      Vector3D vector3D1 = new Vector3D(3.7695593180841415E-20, (-1546.0));
      Line line0 = new Line(vector3D0, vector3D1);
      SubLine subLine0 = line0.wholeLine();
      assertNotNull(subLine0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, 3033.76, 1.0E-10);
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(line0);
      assertFalse(line1.equals((Object)line0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(1.0E-10, 3033.76, 1.0E-10);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotNull(vector3D2);
      assertEquals(0.9999998913480534, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Vector3D vector3D0 = new Vector3D(doubleArray0);
      Vector3D vector3D1 = new Vector3D(3.7695593180841415E-20, (-1546.0));
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.getOrigin();
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
  }
}
