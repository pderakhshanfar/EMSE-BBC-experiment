/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 06:42:20 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Locale;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.TDF.toString();
      cSVFormat0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat0.withIgnoreHeaderCase(true);
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.withCommentMarker('0');
      Character character0 = new Character('0');
      Object[] objectArray0 = new Object[19];
      objectArray0[0] = (Object) charBuffer0;
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('>');
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("TDF");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat1.DEFAULT.withIgnoreSurroundingSpaces(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat1.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withFirstRecordAsHeader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("No quotes mode set but no escape character is set");
      cSVFormat1.equals(cSVFormat0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('R');
      cSVFormat1.getEscapeCharacter();
      cSVFormat0.withTrailingDelimiter(true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('Z');
      cSVFormat2.toString();
      cSVFormat2.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat3.MYSQL.withTrailingDelimiter(false);
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = ']';
      charArray0[4] = 'Z';
      charArray0[5] = '1';
      charArray0[6] = '1';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charBuffer0;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat4.INFORMIX_UNLOAD.withTrim();
      cSVFormat4.withCommentMarker('Z');
      Character.valueOf('o');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat1.withHeader(resultSet0);
      cSVFormat5.withIgnoreSurroundingSpaces(true);
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedWriter0;
      try { 
        cSVFormat0.RFC4180.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("+");
      cSVFormat1.EXCEL.withIgnoreEmptyLines(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('R');
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter('L');
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat6.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "+{;:f =6BO7TGK}Hjzl";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+{;:f =6BO7TGK}Hjzl");
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('2');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat1.RFC4180.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      cSVFormat2.RFC4180.withAllowMissingColumnNames();
      cSVFormat3.getEscapeCharacter();
      cSVFormat2.hashCode();
      cSVFormat1.withIgnoreEmptyLines(true);
      try { 
        MockURI.URI("+{;:f =6BO7TGK}Hjzl", ",lLAj849&beY(vL", "+{;:f =6BO7TGK}Hjzl", 4363, "\n", "\n", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: +{;:f =6BO7TGK}Hjzl://,lLAj849&beY(vL@[+{;:f =6BO7TGK}Hjzl]:4363%0A?%0A
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char char0 = 'F';
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.EXCEL.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("NsXG`$VJY E6TL", "NsXG`$VJY E6TL");
      mockFile0.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      cSVFormat1.print((Object) null, (Appendable) mockPrintWriter0, true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      Integer integer0 = new Integer((-348));
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("&Zk\n_!i]`&");
      cSVFormat0.equals(cSVFormat2);
      Object object0 = new Object();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.equals(quoteMode0);
      Character character0 = new Character('b');
      CSVFormat cSVFormat3 = cSVFormat0.withQuote(character0);
      cSVFormat3.getHeader();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      Character character0 = new Character('\'');
      // Undeclared exception!
      try { 
        cSVFormat5.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (''')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      cSVFormat1.equals(cSVFormat0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.equals(cSVFormat2);
      cSVFormat1.getHeader();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('<');
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      Integer integer0 = new Integer(70);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat0.equals(cSVFormat4);
      cSVFormat3.getHeader();
      cSVFormat2.withTrim(false);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat1.toString();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat5.format(objectArray0);
      cSVFormat4.getHeader();
      cSVFormat1.getDelimiter();
      File file0 = MockFile.createTempFile("Delimiter=<>> IgnoreHeaderCase:ignored SkipHeaderRecord:false", "Delimiter=<>> IgnoreHeaderCase:ignored SkipHeaderRecord:false");
      MockFile mockFile0 = new MockFile(file0, "\r\n");
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat2.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('<');
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      Integer integer0 = new Integer(70);
      cSVFormat2.equals(cSVFormat1);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat1.equals(cSVFormat4);
      Long long0 = new Long(0L);
      cSVFormat4.equals(long0);
      cSVFormat3.getHeader();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      MockFile mockFile0 = new MockFile("NsXG`$VJY E6TL", "NsXG`$VJY E6TL");
      MockFile mockFile1 = new MockFile("+{;:f =6BO7TGK}Hjzl");
      Path path0 = mockFile1.toPath();
      CSVFormat.newFormat('E');
      Character character0 = Character.valueOf('q');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) path0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      cSVFormat0.TDF.print((Appendable) mockPrintStream0);
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat0.withRecordSeparator("java.lang.Object@0000000008\tjava.lang.Character@0000000009\torg.evosuite.runtime.mock.java.io.MockFile@0000000010\torg.evosuite.runtime.mock.java.io.MockFile@0000000010\torg.apache.commons.csv.CSVFormat@0000000005\tsun.nio.fs.UnixPath@0000000011");
      cSVFormat3.withIgnoreEmptyLines(true);
      cSVFormat4.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat2.withCommentMarker('J');
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat0.withDelimiter('S');
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      try { 
        cSVFormat4.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('<');
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      CharBuffer.wrap(charArray0);
      Byte byte0 = new Byte((byte)24);
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('<');
      Character.valueOf('w');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
      cSVFormat4.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat6 = cSVFormat4.withHeader(class0);
      cSVFormat3.withCommentMarker('h');
      Character character0 = Character.valueOf('h');
      cSVFormat2.toString();
      cSVFormat1.RFC4180.withCommentMarker('h');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      objectArray0[3] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = objectArray0[1];
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase();
      cSVFormat7.format(objectArray0);
      cSVFormat6.getHeader();
      cSVFormat5.getDelimiter();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat5.print((Object) cSVFormat6, (Appendable) pipedWriter0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "+{;:f =6BO7TGK}Hjzl";
      stringArray0[1] = "\r\n";
      stringArray0[2] = ":h-X;l(}u^+<t`5:A:p";
      CSVFormat cSVFormat5 = cSVFormat2.withHeader(stringArray0);
      PipedReader pipedReader0 = new PipedReader(32);
      CSVParser cSVParser0 = cSVFormat4.parse(pipedReader0);
      CSVFormat.newFormat('+');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat6 = cSVFormat_Predefined0.getFormat();
      cSVFormat6.equals(cSVParser0);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat0.withTrim();
      cSVFormat6.format(stringArray0);
      cSVFormat5.getTrim();
      cSVFormat3.getTrim();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat6 = cSVFormat4.withHeader(class0);
      cSVFormat3.withCommentMarker('h');
      Character character0 = Character.valueOf('h');
      cSVFormat2.toString();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      objectArray0[3] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = objectArray0[1];
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase();
      cSVFormat7.format(objectArray0);
      cSVFormat6.getHeader();
      cSVFormat5.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      char char0 = 'A';
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('A');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      Character character0 = Character.valueOf('A');
      // Undeclared exception!
      try { 
        cSVFormat4.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('A')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "FQ1");
      mockFile0.toPath();
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('>');
      cSVFormat1.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      cSVFormat0.print((Object) null, (Appendable) mockPrintWriter0, true);
      cSVFormat0.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "FQ1");
      Path path0 = mockFile0.toPath();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Byte byte0 = new Byte((byte)39);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("Pj/");
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('>');
      Character.valueOf('>');
      cSVFormat4.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "FQ1";
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) path0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) cSVFormat4;
      objectArray0[7] = (Object) cSVFormat4;
      objectArray0[8] = (Object) "Pj/";
      cSVFormat3.format(objectArray0);
      cSVFormat1.format(objectArray0);
      cSVFormat2.getHeader();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      MockFileWriter mockFileWriter0 = new MockFileWriter("{,Ss]Me@03P");
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "{,Ss]Me@03P";
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) "{,Ss]Me@03P";
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) "";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) cSVFormat3;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat4 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat5.toString();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat6 = cSVFormat_Predefined0.getFormat();
      cSVFormat6.format(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat0.hashCode();
      cSVFormat3.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((Class<? extends Enum<?>>) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.getRecordSeparator();
      Character character0 = new Character('@');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat3.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat3.toString();
      cSVFormat2.format(objectArray0);
      cSVFormat4.getHeader();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withTrim(false);
      MockFile mockFile0 = new MockFile("MySQL", "The escape character and the delimiter cannot be the same ('");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.MYSQL.print(path0, charset0);
      CSVFormat.valueOf("MySQL");
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('k');
      Character character0 = Character.valueOf('k');
      cSVFormat1.RFC4180.withCommentMarker(character0);
      cSVFormat0.withDelimiter('\'');
      cSVFormat1.withCommentMarker('i');
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.getRecordSeparator();
      Character character0 = new Character('@');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat3.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat4.toString();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat5.format(objectArray0);
      cSVFormat0.getHeader();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.withNullString("{y[t?zY2u8tL");
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.toString();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "org.apache.commons.csv.QuoteMode";
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) "(Q3E/fF?I";
      objectArray0[6] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[7] = (Object) cSVFormat2;
      cSVFormat2.format(objectArray0);
      cSVFormat1.getHeader();
      cSVFormat0.getSkipHeaderRecord();
      cSVFormat0.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("()-'}mGFM]C");
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "b#";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CommentStart=<");
      stringArray0[1] = "";
      stringArray0[2] = "()-'}mGFM]C";
      CSVFormat cSVFormat6 = cSVFormat5.withHeaderComments(stringArray0);
      cSVFormat1.withAllowMissingColumnNames();
      cSVFormat4.withSkipHeaderRecord(true);
      cSVFormat2.getNullString();
      cSVFormat6.withRecordSeparator("NFd'\"GL4");
      Character character0 = new Character('w');
      CSVFormat cSVFormat7 = cSVFormat6.withEscape(character0);
      cSVFormat7.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat0.withFirstRecordAsHeader();
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "The quoteChar cannot be a line break";
      stringArray0[1] = "EOF whilst processing escape sequence";
      stringArray0[2] = "K_9X15X^.DqIfcM~wS/";
      stringArray0[3] = "!\"k";
      stringArray0[4] = "CommentStart=<";
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      cSVFormat3.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat3.isCommentMarkerSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "me(RE(z;NA");
      Object object0 = new Object();
      Object object1 = new Object();
      CSVFormat cSVFormat4 = cSVFormat1.withHeaderComments(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat3.withAllowMissingColumnNames();
      cSVFormat2.withHeaderComments(stringArray0);
      cSVFormat5.format(stringArray0);
      CSVFormat cSVFormat6 = cSVFormat4.withTrailingDelimiter(false);
      cSVFormat6.getTrim();
      cSVFormat4.getTrim();
      cSVFormat6.withRecordSeparator("");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('4');
      cSVFormat1.DEFAULT.withAllowMissingColumnNames(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat1.getRecordSeparator();
      // Undeclared exception!
      try { 
        MockURI.create("\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0: 
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      Character.valueOf('1');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      Character character0 = new Character('1');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      cSVFormat2.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter('1');
      cSVFormat5.isCommentMarkerSet();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat6;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat4;
      objectArray0[8] = (Object) cSVFormat6;
      cSVFormat3.withHeaderComments(objectArray0);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) cSVFormat1;
      cSVFormat3.withHeaderComments(objectArray1);
      CSVFormat cSVFormat7 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat8 = cSVFormat7.withDelimiter('V');
      cSVFormat8.withHeaderComments(objectArray1);
      cSVFormat0.format(objectArray1);
      cSVFormat6.getTrim();
      cSVFormat4.getTrim();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.getRecordSeparator();
      Character character0 = new Character('i');
      CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker(character0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) "\n";
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) rowSetMetaDataImpl0;
      // Undeclared exception!
      try { 
        cSVFormat4.RFC4180.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.getRecordSeparator();
      Character character0 = new Character('i');
      CSVFormat cSVFormat5 = cSVFormat0.withCommentMarker(character0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) "\n";
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) rowSetMetaDataImpl0;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = (Object) cSVFormat5;
      objectArray0[8] = (Object) cSVFormat2;
      CSVFormat cSVFormat6 = cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat4.withAllowMissingColumnNames();
      cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat6.toString();
      cSVFormat2.format(objectArray0);
      cSVFormat3.getHeader();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.withQuoteMode(quoteMode0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.getRecordSeparator();
      Character character0 = new Character('$');
      cSVFormat0.withCommentMarker(character0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[2] = object0;
      CSVFormat cSVFormat5 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat5.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat0.toString();
      cSVFormat2.MYSQL.withRecordSeparator("\r\n");
      CSVFormat cSVFormat7 = cSVFormat3.withTrailingDelimiter();
      cSVFormat7.format(objectArray0);
      cSVFormat1.getHeader();
      cSVFormat7.withHeader(class0);
      cSVFormat6.withTrim(false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat4.isCommentMarkerSet();
      Byte byte0 = new Byte((byte)60);
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat0.withEscape('i');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat5;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[6] = object1;
      cSVFormat0.format(objectArray0);
      cSVFormat3.getTrim();
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      MockFileWriter mockFileWriter0 = new MockFileWriter("Header:");
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker('G');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat5 = cSVFormat_Predefined0.getFormat();
      cSVFormat5.isEscapeCharacterSet();
      cSVFormat3.withSkipHeaderRecord(true);
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.TDF;
      Integer integer0 = new Integer(34);
      cSVFormat5.equals(mockFileWriter0);
      cSVFormat4.withQuote('f');
      Object object0 = new Object();
      cSVFormat3.equals("Header:");
      cSVFormat2.withDelimiter('2');
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Character character0 = new Character('|');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("\u2029");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.withEscape(character0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("()-'}mGFM]C");
      cSVFormat3.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockFileWriter0;
      objectArray0[4] = (Object) "";
      objectArray0[6] = (Object) quoteMode0;
      objectArray0[7] = (Object) cSVFormat1;
      cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat5 = cSVFormat4.withHeaderComments((Object[]) null);
      cSVFormat4.withAllowMissingColumnNames();
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat.newFormat('L');
      cSVFormat2.toString();
      cSVFormat5.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat4.withTrim();
      cSVFormat6.getHeader();
      QuoteMode quoteMode1 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.getRecordSeparator();
      Character character0 = new Character('@');
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker(character0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat5 = cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat5.withHeader((String[]) null);
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      // Undeclared exception!
      try { 
        cSVFormat3.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      MockFileWriter mockFileWriter0 = new MockFileWriter(".wX8");
      CSVFormat cSVFormat4 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('G');
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      Integer integer0 = new Integer((-2099));
      cSVFormat3.equals(cSVFormat5);
      cSVFormat6.withQuote('J');
      Object object0 = new Object();
      Byte byte0 = new Byte((byte) (-76));
      cSVFormat3.equals(byte0);
      cSVFormat5.withDelimiter('M');
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      cSVFormat3.getRecordSeparator();
      Character character0 = new Character('0');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat5 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat5.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("EOF");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      cSVFormat0.print((Appendable) bufferedWriter0);
      Object object0 = new Object();
      CSVFormat cSVFormat6 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase();
      cSVFormat0.equals(cSVFormat7);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      CSVFormat cSVFormat5 = CSVFormat.newFormat('o');
      cSVFormat0.equals(cSVFormat1);
      Byte byte0 = new Byte((byte)12);
      MockFile mockFile0 = new MockFile("CommentStart=<");
      MockFile mockFile1 = new MockFile(mockFile0, "CommentStart=<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockFile1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) "f9>2%s";
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat5;
      mockPrintWriter0.printf("f9>2%s", objectArray0);
      cSVFormat1.println(mockPrintWriter0);
      cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat0.toString();
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat4.withTrailingDelimiter();
      cSVFormat6.getHeader();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('@');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD.withEscape('@');
      cSVFormat1.isNullStringSet();
      cSVFormat2.withHeader((ResultSet) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.getRecordSeparator();
      Character character0 = new Character('@');
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker(character0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat5 = cSVFormat4.withHeaderComments(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames();
      cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat3.toString();
      cSVFormat6.format(objectArray0);
      cSVFormat1.getHeader();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      Class<Token.Type> class0 = Token.Type.class;
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat0.withHeader(class1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.getRecordSeparator();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) cSVFormat5;
      objectArray0[3] = (Object) class1;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) cSVFormat4;
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat5.withAllowMissingColumnNames();
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) class0;
      CSVFormat cSVFormat6 = cSVFormat3.withHeaderComments(objectArray1);
      cSVFormat2.toString();
      cSVFormat0.format(objectArray0);
      cSVFormat6.getHeader();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[22];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "zPJN";
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat2;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat4.EXCEL.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      cSVFormat3.getRecordSeparator();
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(class1);
      PipedReader pipedReader0 = new PipedReader(124);
      cSVFormat0.parse(pipedReader0);
      cSVFormat3.withAllowMissingColumnNames(true);
      cSVFormat4.parse(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      CSVFormat cSVFormat5 = CSVFormat.newFormat('o');
      cSVFormat0.equals(cSVFormat1);
      Byte byte0 = new Byte((byte)12);
      MockFile mockFile0 = new MockFile("CommentStart=<");
      MockFile mockFile1 = new MockFile(mockFile0, "CommentStart=<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockFile1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) "f9>2%s";
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat5;
      objectArray0[8] = (Object) cSVFormat4;
      mockPrintWriter0.printf("f9>2%s", objectArray0);
      cSVFormat1.println(mockPrintWriter0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("f9>2%s");
      Object object0 = new Object();
      cSVFormat3.withRecordSeparator('>');
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("()-'}mGFM]C");
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "b#";
      stringArray0[1] = "";
      stringArray0[2] = "()-'}mGFM]C";
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat5.withIgnoreHeaderCase(false);
      cSVFormat4.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "";
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat3.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat1.TDF.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.getRecordSeparator();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat2;
      cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) cSVFormat2;
      objectArray1[1] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = (Object) cSVFormat0;
      objectArray1[4] = (Object) cSVFormat2;
      CSVFormat cSVFormat5 = cSVFormat3.withHeaderComments(objectArray1);
      cSVFormat3.toString();
      cSVFormat0.format(objectArray1);
      Object[] objectArray2 = new Object[6];
      objectArray2[0] = (Object) cSVFormat0;
      objectArray2[1] = (Object) "Delimiter=<[> IgnoreHeaderCase:ignored SkipHeaderRecord:false Header:[INVALID, TOKEN, EOF, EORECORD, COMMENT]";
      objectArray2[2] = (Object) cSVFormat1;
      objectArray2[3] = (Object) "org.apache.commons.csv.CSVFormat@0000000003[org.apache.commons.csv.CSVFormat@0000000005[java.lang.Object@0000000009[org.apache.commons.csv.CSVFormat@0000000001[org.apache.commons.csv.CSVFormat@0000000003";
      objectArray2[4] = (Object) class0;
      Object object1 = new Object();
      objectArray2[5] = object1;
      cSVFormat5.format(objectArray2);
      cSVFormat3.getTrim();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('R');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(true);
      cSVFormat5.hashCode();
      cSVFormat0.withQuote('R');
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Q');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('_');
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      MockFile mockFile0 = new MockFile("Z'x(Dh");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      cSVFormat5.INFORMIX_UNLOAD.println(mockPrintStream0);
      cSVFormat5.hashCode();
      cSVFormat3.withTrailingDelimiter(true);
      cSVFormat1.getRecordSeparator();
      cSVFormat0.getHeader();
      Character character0 = Character.valueOf('u');
      cSVFormat5.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("\r\n");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[2];
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat0.TDF.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat4;
      cSVFormat3.EXCEL.withIgnoreEmptyLines();
      cSVFormat1.RFC4180.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat6 = cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat5.INFORMIX_UNLOAD.withRecordSeparator('?');
      cSVFormat6.TDF.withTrailingDelimiter(false);
      cSVFormat4.withTrailingDelimiter(false);
      cSVFormat2.hashCode();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat7 = cSVFormat3.withHeader(resultSet0);
      cSVFormat0.DEFAULT.withTrim(false);
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat7.RFC4180.print((Object) rowSetMetaDataImpl0, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "FQ1");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('>');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('E');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat4.print(path0, charset0);
      cSVFormat3.getQuoteMode();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      cSVFormat2.print((Object) null, (Appendable) mockPrintWriter0, false);
      cSVFormat4.toString();
      cSVFormat1.getNullString();
      cSVFormat2.withRecordSeparator("org.apache.commons.csv.CSVFormat");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("()-'}mGFM]C");
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "b#";
      stringArray0[1] = "";
      stringArray0[2] = "()-'}mGFM]C";
      CSVFormat cSVFormat5 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat3.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "";
      cSVFormat6.MYSQL.print((Object) "()-'}mGFM]C", (Appendable) mockFileWriter0, false);
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat7.toString();
      CSVFormat cSVFormat8 = cSVFormat6.withTrim();
      cSVFormat8.format(stringArray0);
      CSVFormat cSVFormat9 = cSVFormat5.withDelimiter('');
      CSVFormat cSVFormat10 = cSVFormat9.withIgnoreSurroundingSpaces();
      cSVFormat10.getHeader();
      cSVFormat3.withEscape('#');
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      cSVFormat2.toString();
      cSVFormat1.toString();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat3.isEscapeCharacterSet();
      cSVFormat0.isCommentMarkerSet();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = 's';
      charArray0[3] = '1';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Byte byte0 = new Byte((byte)10);
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat6 = cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat7 = cSVFormat4.withEscape('i');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) '1';
      cSVFormat7.format(objectArray0);
      cSVFormat7.getTrim();
      cSVFormat3.withAllowMissingColumnNames();
      cSVFormat6.withRecordSeparator('1');
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat3.toString();
      cSVFormat3.toString();
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat2.isCommentMarkerSet();
      cSVFormat2.withIgnoreHeaderCase(false);
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = '1';
      charArray0[2] = 's';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Byte byte0 = new Byte((byte)24);
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat2.withIgnoreEmptyLines();
      cSVFormat0.withEscape('\"');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      // Undeclared exception!
      try { 
        cSVFormat1.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.TDF.toString();
      cSVFormat0.toString();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat0.getHeaderComments();
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD;
      String[] stringArray0 = new String[0];
      cSVFormat3.DEFAULT.withHeader(stringArray0);
      MockFile mockFile0 = new MockFile("CommentStart=<", "CommentStart=<");
      File file0 = MockFile.createTempFile("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("CommentStart=<", (Object[]) null);
      cSVFormat2.println(mockPrintWriter0);
      QuoteMode quoteMode1 = QuoteMode.ALL;
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      cSVFormat2.print((Appendable) printWriter0);
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator("CommentStart=<");
      cSVFormat5.equals(cSVFormat3);
      cSVFormat5.getRecordSeparator();
      cSVFormat4.withRecordSeparator('9');
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      Character.valueOf('s');
      Character character0 = Character.valueOf('s');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      cSVFormat4.toString();
      cSVFormat3.isEscapeCharacterSet();
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('^');
      cSVFormat5.isCommentMarkerSet();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) "Delimiter=<\t> Escape=<> QuoteChar=<s> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[3] = (Object) cSVFormat5;
      objectArray0[4] = (Object) character0;
      CSVFormat cSVFormat6 = cSVFormat3.withHeaderComments(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat2.withRecordSeparator("");
      CSVFormat cSVFormat8 = cSVFormat7.withRecordSeparator('s');
      cSVFormat8.withAllowMissingColumnNames();
      CSVFormat cSVFormat9 = cSVFormat8.withSkipHeaderRecord();
      cSVFormat9.withHeaderComments(objectArray0);
      cSVFormat5.toString();
      cSVFormat6.format(objectArray0);
      cSVFormat8.getHeader();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('i');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      cSVFormat0.toString();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat0.isCommentMarkerSet();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('i');
      Character character1 = Character.valueOf('I');
      cSVFormat0.EXCEL.withEscape(character1);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat2.equals(cSVFormat4);
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.TDF.toString();
      cSVFormat0.toString();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      StringWriter stringWriter0 = new StringWriter(2030);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('2');
      Character character0 = Character.valueOf('.');
      CSVFormat cSVFormat5 = cSVFormat1.withQuote(character0);
      Character.valueOf(',');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      CSVFormat cSVFormat6 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat6.toString();
      cSVFormat4.format(objectArray0);
      cSVFormat5.withEscape('.');
      cSVFormat2.getHeader();
      cSVFormat4.hashCode();
      cSVFormat5.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('s');
      Character character1 = Character.valueOf('s');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character1);
      cSVFormat4.toString();
      cSVFormat3.isEscapeCharacterSet();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) "Delimiter=<\t> Escape=<> QuoteChar=<s> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) character0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('^');
      cSVFormat5.isCommentMarkerSet();
      cSVFormat5.DEFAULT.withSkipHeaderRecord();
      cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat1.withEscape(' ');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat2.equals(cSVFormat0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.TDF.toString();
      cSVFormat0.toString();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat2.equals(cSVFormat1);
      CSVFormat cSVFormat4 = cSVFormat1.withQuote('+');
      CSVFormat cSVFormat5 = cSVFormat1.withHeader((String[]) null);
      Character character0 = Character.valueOf('');
      cSVFormat3.withQuote(character0);
      cSVFormat4.withCommentMarker(character0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      stringArray0[1] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      CSVFormat cSVFormat6 = cSVFormat4.withHeader(stringArray0);
      cSVFormat5.withCommentMarker('J');
      cSVFormat6.format(stringArray0);
      cSVFormat2.getHeader();
      cSVFormat5.getRecordSeparator();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\r\n", "path");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('e');
      cSVFormat2.withFirstRecordAsHeader();
      cSVFormat0.withCommentMarker(' ');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat4 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat4.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames();
      cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat6.format(objectArray0);
      cSVFormat4.getHeader();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      CSVFormat cSVFormat7 = cSVFormat3.withHeader(resultSet1);
      cSVFormat7.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.withAllowMissingColumnNames();
      char char0 = 'P';
      Character.valueOf('P');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "url");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('~');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.RFC4180.withAllowMissingColumnNames();
      cSVFormat0.withEscape(character0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.TDF.toString();
      cSVFormat0.toString();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      StringWriter stringWriter0 = new StringWriter(2030);
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Byte byte0 = new Byte((byte)24);
      cSVFormat0.withQuote((Character) '1');
      Character.valueOf('1');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) charBuffer0;
      CSVFormat cSVFormat4 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat3.toString();
      cSVFormat3.format(objectArray0);
      cSVFormat0.withEscape('D');
      cSVFormat4.getHeader();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.isEscapeCharacterSet();
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat0.withEscape('2');
      cSVFormat2.equals(cSVFormat3);
      CSVFormat cSVFormat5 = cSVFormat4.withQuote('2');
      CSVFormat cSVFormat6 = cSVFormat3.withHeader((String[]) null);
      Character character0 = Character.valueOf('n');
      cSVFormat4.withQuote(character0);
      CSVFormat cSVFormat7 = cSVFormat6.withTrim(false);
      cSVFormat7.withCommentMarker(character0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[]";
      stringArray0[1] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[]";
      cSVFormat2.withCommentMarker('e');
      CSVFormat cSVFormat8 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat5.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("()-'}mGFM]C");
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "9#";
      stringArray0[1] = "";
      Object object0 = new Object();
      cSVFormat4.equals(object0);
      cSVFormat3.withQuote('3');
      Object object1 = new Object();
      Float float0 = new Float((-989.12));
      CSVFormat cSVFormat6 = cSVFormat5.withRecordSeparator("9#");
      cSVFormat2.equals(cSVFormat6);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.TDF.toString();
      cSVFormat0.toString();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat3.withQuote('L');
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(":iqw{]B[", "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r
         // > EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.isNullStringSet();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character.valueOf(')');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('2');
      cSVFormat1.isEscapeCharacterSet();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('n');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      Double double0 = new Double(4103.654985734003);
      cSVFormat1.equals(double0);
      CSVFormat cSVFormat5 = cSVFormat2.withQuote('t');
      CSVFormat cSVFormat6 = cSVFormat2.withHeader((String[]) null);
      Character.valueOf(')');
      Character character0 = new Character('n');
      cSVFormat2.withQuote(character0);
      Character character1 = new Character('2');
      cSVFormat6.withCommentMarker(character1);
      cSVFormat0.withHeader((String[]) null);
      cSVFormat5.withCommentMarker('5');
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat1.getQuoteCharacter();
      cSVFormat4.withDelimiter('D');
      cSVFormat6.withDelimiter('z');
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.isNullStringSet();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      cSVFormat1.toString();
      char char0 = 'e';
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('Q');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat3.equals(cSVFormat2);
      cSVFormat2.withQuote('5');
      String[] stringArray0 = null;
      cSVFormat0.withHeader((String[]) null);
      Character.valueOf(')');
      CSVFormat cSVFormat4 = cSVFormat0.withQuote(character0);
      File file0 = MockFile.createTempFile("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      MockFile mockFile0 = new MockFile(file0, " SkipHeaderRecord:");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat4.print(path0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = new Character(')');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      cSVFormat1.toString();
      cSVFormat0.isEscapeCharacterSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat0.withQuote('I');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat3.equals(cSVFormat2);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat2;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "sN8tx=a,KBq!7};+R");
      cSVFormat2.printRecord(mockFileWriter0, objectArray0);
      cSVFormat3.print((Appendable) mockFileWriter0);
      cSVFormat3.equals(quoteMode0);
      cSVFormat0.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      Character.valueOf('s');
      Character character0 = Character.valueOf('s');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      cSVFormat4.toString();
      cSVFormat3.isEscapeCharacterSet();
      cSVFormat2.toString();
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('e');
      CSVFormat cSVFormat6 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat6.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat7 = cSVFormat5.withSkipHeaderRecord(true);
      cSVFormat7.withEscape('I');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      Integer integer0 = new Integer((-2848));
      cSVFormat2.equals(integer0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("InformixUnloadCsv");
      cSVFormat0.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) cSVFormat7;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) character0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) cSVFormat4;
      cSVFormat1.printRecord(mockFileWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.TDF.toString();
      cSVFormat0.toString();
      cSVFormat1.isEscapeCharacterSet();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote((Character) null);
      cSVFormat2.toString();
      cSVFormat4.withCommentMarker('k');
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat0.isCommentMarkerSet();
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(false);
      CSVFormat cSVFormat6 = cSVFormat5.withEscape('D');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      cSVFormat3.equals(charBuffer0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat7 = cSVFormat5.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat7;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      objectArray0[4] = (Object) cSVFormat4;
      // Undeclared exception!
      try { 
        cSVFormat6.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.TDF.toString();
      cSVFormat0.toString();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      StringWriter stringWriter0 = new StringWriter(2030);
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      CharBuffer.wrap(charArray0);
      Byte byte0 = new Byte((byte)24);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) '1';
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat4.format(objectArray0);
      cSVFormat3.getHeader();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('@');
      cSVFormat0.hashCode();
      cSVFormat0.getSkipHeaderRecord();
      MockFile mockFile0 = new MockFile("Vz+X");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      cSVFormat0.getHeaderComments();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.printf("", (Object[]) null);
      cSVFormat1.println(mockPrintWriter0);
      QuoteMode quoteMode1 = QuoteMode.NONE;
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("Vz+X");
      cSVFormat2.print((Object) "", (Appendable) mockPrintWriter0, false);
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat0.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.isNullStringSet();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('e');
      cSVFormat3.isEscapeCharacterSet();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat2.equals(cSVFormat1);
      CSVFormat cSVFormat4 = cSVFormat0.withQuote('e');
      Character.valueOf('V');
      CSVFormat cSVFormat5 = cSVFormat0.withQuote(character0);
      Character.valueOf('1');
      Object[] objectArray0 = new Object[0];
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat5.INFORMIX_UNLOAD.withTrailingDelimiter(true);
      cSVFormat3.toString();
      cSVFormat5.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat4.withEscape('x');
      cSVFormat0.getHeader();
      cSVFormat6.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.isQuoteCharacterSet();
      MockFile mockFile0 = new MockFile("v-NCY:mjea>lF^.e:Mb", "v-NCY:mjea>lF^.e:Mb");
      MockFile mockFile1 = new MockFile("8'qU~{u'HM", "8'qU~{u'HM");
      Charset charset0 = Charset.defaultCharset();
      Path path0 = mockFile0.toPath();
      cSVFormat0.print(path0, charset0);
      cSVFormat0.getQuoteMode();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("0$((Or?:;_LNlt");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) charset0;
      objectArray0[1] = (Object) path0;
      objectArray0[2] = (Object) mockFile1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "8'qU~{u'HM";
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat4.toString();
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = object0;
      cSVFormat3.MYSQL.withDelimiter('n');
      CSVFormat cSVFormat5 = cSVFormat3.withTrailingDelimiter(false);
      CSVFormat cSVFormat6 = cSVFormat5.withFirstRecordAsHeader();
      CSVFormat cSVFormat7 = cSVFormat6.withTrailingDelimiter();
      cSVFormat7.format(objectArray0);
      cSVFormat1.getHeader();
      cSVFormat5.toString();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('@');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.toString();
      cSVFormat2.toString();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat2.isCommentMarkerSet();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      StringWriter stringWriter0 = new StringWriter(2030);
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = '@';
      charArray0[2] = '1';
      charArray0[3] = '@';
      charArray0[4] = '@';
      charArray0[5] = '@';
      CharBuffer.wrap(charArray0);
      Byte byte0 = new Byte((byte)24);
      cSVFormat2.print((Object) cSVFormat3, (Appendable) stringWriter0, true);
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat3.withEscape('T');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Delimiter=<@> SkipHeaderRecord:false";
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) byte0;
      cSVFormat5.format(objectArray0);
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      Character.valueOf('s');
      Character character0 = Character.valueOf('s');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      cSVFormat4.toString();
      cSVFormat2.isEscapeCharacterSet();
      CSVFormat cSVFormat5 = cSVFormat3.withSkipHeaderRecord(true);
      CSVFormat cSVFormat6 = cSVFormat0.withEscape('u');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat5.equals(cSVFormat_Predefined0);
      cSVFormat4.withQuote('u');
      cSVFormat6.withHeader((String[]) null);
      Character.valueOf('H');
      CSVFormat cSVFormat7 = cSVFormat5.withQuote(character0);
      Character character1 = Character.valueOf('\'');
      cSVFormat0.withCommentMarker(character1);
      CSVFormat cSVFormat8 = cSVFormat4.withHeader((String[]) null);
      CSVFormat cSVFormat9 = cSVFormat1.withTrim(true);
      cSVFormat9.withCommentMarker('2');
      CSVFormat cSVFormat10 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat7.getQuoteCharacter();
      cSVFormat3.withQuote('{');
      Character character2 = Character.valueOf('T');
      cSVFormat8.withCommentMarker(character2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.toString();
      cSVFormat0.toString();
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      StringWriter stringWriter0 = new StringWriter(1542);
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = '1';
      CharBuffer.wrap(charArray0);
      Byte byte0 = new Byte((byte)24);
      cSVFormat0.print((Object) stringWriter0, (Appendable) stringWriter0, true);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.withEscape('1');
      cSVFormat1.toString();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) quoteMode0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) '1';
      objectArray0[7] = (Object) '1';
      cSVFormat4.format(objectArray0);
      cSVFormat1.getHeader();
      cSVFormat2.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      Character.valueOf('s');
      Character character0 = Character.valueOf('s');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      cSVFormat4.toString();
      cSVFormat3.isEscapeCharacterSet();
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('^');
      cSVFormat5.isCommentMarkerSet();
      cSVFormat3.withSkipHeaderRecord(true);
      CSVFormat cSVFormat6 = cSVFormat1.withEscape(' ');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat2.equals(cSVFormat0);
      cSVFormat5.withQuote('$');
      cSVFormat1.TDF.withHeader((ResultSetMetaData) null);
      Character character1 = Character.valueOf('.');
      cSVFormat6.withQuote(character1);
      Character.valueOf(' ');
      Object[] objectArray0 = new Object[4];
      File file0 = MockFile.createTempFile("Delimiter=<\t> Escape=<> QuoteChar=<s> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false", "HeaderComments:");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.printf("Delimiter=<\t> Escape=<> QuoteChar=<s> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false", objectArray0);
      cSVFormat6.println(mockPrintWriter0);
      QuoteMode quoteMode1 = QuoteMode.NONE;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<\t> Escape=<> QuoteChar=<s> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) charBuffer0, (-198), 2035);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getCommentMarker());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("zPJN");
      assertNotNull(mockFileWriter0);
      
      CSVFormat cSVFormat4 = cSVFormat0.withFirstRecordAsHeader();
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertEquals('|', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(A;G@*^b3CG";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.csv.QuoteMode";
      stringArray0[3] = "zPJN";
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertEquals('|', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals('\\', (char)cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertEquals('|', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getCommentMarker());
      assertTrue(cSVFormat5.getSkipHeaderRecord());
      assertNotNull(cSVFormat5);
      assertEquals(4, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      
      CSVFormat cSVFormat6 = cSVFormat2.withCommentMarker(' ');
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertNull(cSVFormat6.getQuoteMode());
      assertTrue(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertEquals(' ', (char)cSVFormat6.getCommentMarker());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat6.isCommentMarkerSet());
      assertEquals('|', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      
      CSVFormat cSVFormat7 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getCommentMarker());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNull(cSVFormat7.getNullString());
      assertEquals("\n", cSVFormat7.getRecordSeparator());
      assertEquals('|', cSVFormat7.getDelimiter());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertNull(cSVFormat7.getCommentMarker());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertNull(cSVFormat7.getQuoteMode());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.isNullStringSet());
      assertTrue(cSVFormat7.getTrailingDelimiter());
      assertEquals('\\', (char)cSVFormat7.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertTrue(cSVFormat7.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      
      CSVFormat cSVFormat8 = cSVFormat6.withHeaderComments(stringArray0);
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertNull(cSVFormat6.getQuoteMode());
      assertTrue(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertEquals(' ', (char)cSVFormat6.getCommentMarker());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat6.isCommentMarkerSet());
      assertEquals('|', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat8.getRecordSeparator());
      assertEquals('|', cSVFormat8.getDelimiter());
      assertNull(cSVFormat8.getNullString());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertTrue(cSVFormat8.isEscapeCharacterSet());
      assertTrue(cSVFormat8.isCommentMarkerSet());
      assertEquals(' ', (char)cSVFormat8.getCommentMarker());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertNull(cSVFormat8.getQuoteMode());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.getTrim());
      assertFalse(cSVFormat8.isNullStringSet());
      assertTrue(cSVFormat8.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertNotNull(cSVFormat8);
      assertEquals(4, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat6, cSVFormat8);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat7));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertTrue(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat9 = cSVFormat2.withIgnoreHeaderCase(false);
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat9.getIgnoreEmptyLines());
      assertNull(cSVFormat9.getQuoteMode());
      assertNull(cSVFormat9.getCommentMarker());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat9.getTrailingDelimiter());
      assertFalse(cSVFormat9.getTrim());
      assertFalse(cSVFormat9.isNullStringSet());
      assertEquals('\\', (char)cSVFormat9.getEscapeCharacter());
      assertNull(cSVFormat9.getNullString());
      assertEquals('\"', (char)cSVFormat9.getQuoteCharacter());
      assertEquals("\n", cSVFormat9.getRecordSeparator());
      assertEquals('|', cSVFormat9.getDelimiter());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertTrue(cSVFormat9.isEscapeCharacterSet());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertNotNull(cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertTrue(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertTrue(cSVFormat9.equals((Object)cSVFormat2));
      assertTrue(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertTrue(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      
      CSVFormat cSVFormat10 = cSVFormat9.withAllowMissingColumnNames();
      assertTrue(cSVFormat10.getTrailingDelimiter());
      assertFalse(cSVFormat10.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat10.getEscapeCharacter());
      assertNull(cSVFormat10.getQuoteMode());
      assertTrue(cSVFormat10.getIgnoreEmptyLines());
      assertNull(cSVFormat10.getCommentMarker());
      assertFalse(cSVFormat10.isCommentMarkerSet());
      assertTrue(cSVFormat10.getAllowMissingColumnNames());
      assertFalse(cSVFormat10.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat10.getTrim());
      assertNull(cSVFormat10.getNullString());
      assertFalse(cSVFormat10.isNullStringSet());
      assertEquals('\"', (char)cSVFormat10.getQuoteCharacter());
      assertTrue(cSVFormat10.isEscapeCharacterSet());
      assertEquals('|', cSVFormat10.getDelimiter());
      assertEquals("\n", cSVFormat10.getRecordSeparator());
      assertFalse(cSVFormat10.getSkipHeaderRecord());
      assertTrue(cSVFormat10.isQuoteCharacterSet());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat9.getIgnoreEmptyLines());
      assertNull(cSVFormat9.getQuoteMode());
      assertNull(cSVFormat9.getCommentMarker());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat9.getTrailingDelimiter());
      assertFalse(cSVFormat9.getTrim());
      assertFalse(cSVFormat9.isNullStringSet());
      assertEquals('\\', (char)cSVFormat9.getEscapeCharacter());
      assertNull(cSVFormat9.getNullString());
      assertEquals('\"', (char)cSVFormat9.getQuoteCharacter());
      assertEquals("\n", cSVFormat9.getRecordSeparator());
      assertEquals('|', cSVFormat9.getDelimiter());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertTrue(cSVFormat9.isEscapeCharacterSet());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertNotNull(cSVFormat10);
      assertNotSame(cSVFormat10, cSVFormat9);
      assertNotSame(cSVFormat10, cSVFormat2);
      assertNotSame(cSVFormat10, cSVFormat5);
      assertNotSame(cSVFormat10, cSVFormat0);
      assertNotSame(cSVFormat10, cSVFormat6);
      assertNotSame(cSVFormat10, cSVFormat7);
      assertNotSame(cSVFormat10, cSVFormat1);
      assertNotSame(cSVFormat10, cSVFormat4);
      assertNotSame(cSVFormat10, cSVFormat8);
      assertNotSame(cSVFormat10, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat10);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertTrue(cSVFormat10.equals((Object)cSVFormat3));
      assertFalse(cSVFormat10.equals((Object)cSVFormat5));
      assertTrue(cSVFormat10.equals((Object)cSVFormat9));
      assertFalse(cSVFormat10.equals((Object)cSVFormat6));
      assertFalse(cSVFormat10.equals((Object)cSVFormat7));
      assertTrue(cSVFormat10.equals((Object)cSVFormat2));
      assertTrue(cSVFormat10.equals((Object)cSVFormat0));
      assertFalse(cSVFormat10.equals((Object)cSVFormat4));
      assertTrue(cSVFormat10.equals((Object)cSVFormat1));
      assertFalse(cSVFormat10.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat9));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat9));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat9));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertTrue(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertTrue(cSVFormat9.equals((Object)cSVFormat2));
      assertTrue(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertTrue(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      
      CSVFormat cSVFormat11 = cSVFormat9.withHeaderComments(stringArray0);
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat11.isQuoteCharacterSet());
      assertFalse(cSVFormat11.getTrim());
      assertFalse(cSVFormat11.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat11.getTrailingDelimiter());
      assertEquals('\\', (char)cSVFormat11.getEscapeCharacter());
      assertFalse(cSVFormat11.getIgnoreHeaderCase());
      assertFalse(cSVFormat11.isCommentMarkerSet());
      assertNull(cSVFormat11.getCommentMarker());
      assertFalse(cSVFormat11.getSkipHeaderRecord());
      assertEquals('|', cSVFormat11.getDelimiter());
      assertTrue(cSVFormat11.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat11.getRecordSeparator());
      assertTrue(cSVFormat11.isEscapeCharacterSet());
      assertFalse(cSVFormat11.isNullStringSet());
      assertFalse(cSVFormat11.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat11.getQuoteCharacter());
      assertNull(cSVFormat11.getNullString());
      assertNull(cSVFormat11.getQuoteMode());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat9.getIgnoreEmptyLines());
      assertNull(cSVFormat9.getQuoteMode());
      assertNull(cSVFormat9.getCommentMarker());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat9.getTrailingDelimiter());
      assertFalse(cSVFormat9.getTrim());
      assertFalse(cSVFormat9.isNullStringSet());
      assertEquals('\\', (char)cSVFormat9.getEscapeCharacter());
      assertNull(cSVFormat9.getNullString());
      assertEquals('\"', (char)cSVFormat9.getQuoteCharacter());
      assertEquals("\n", cSVFormat9.getRecordSeparator());
      assertEquals('|', cSVFormat9.getDelimiter());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertTrue(cSVFormat9.isEscapeCharacterSet());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertNotNull(cSVFormat11);
      assertEquals(4, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat11, cSVFormat0);
      assertNotSame(cSVFormat11, cSVFormat5);
      assertNotSame(cSVFormat11, cSVFormat9);
      assertNotSame(cSVFormat11, cSVFormat10);
      assertNotSame(cSVFormat11, cSVFormat2);
      assertNotSame(cSVFormat11, cSVFormat6);
      assertNotSame(cSVFormat11, cSVFormat7);
      assertNotSame(cSVFormat11, cSVFormat1);
      assertNotSame(cSVFormat11, cSVFormat8);
      assertNotSame(cSVFormat11, cSVFormat4);
      assertNotSame(cSVFormat11, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat11);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat11);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat10);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat9));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat11.equals((Object)cSVFormat5));
      assertTrue(cSVFormat11.equals((Object)cSVFormat1));
      assertFalse(cSVFormat11.equals((Object)cSVFormat6));
      assertTrue(cSVFormat11.equals((Object)cSVFormat3));
      assertFalse(cSVFormat11.equals((Object)cSVFormat7));
      assertTrue(cSVFormat11.equals((Object)cSVFormat9));
      assertTrue(cSVFormat11.equals((Object)cSVFormat10));
      assertTrue(cSVFormat11.equals((Object)cSVFormat2));
      assertFalse(cSVFormat11.equals((Object)cSVFormat8));
      assertTrue(cSVFormat11.equals((Object)cSVFormat0));
      assertFalse(cSVFormat11.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat10));
      assertTrue(cSVFormat1.equals((Object)cSVFormat9));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat10));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat9));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertTrue(cSVFormat9.equals((Object)cSVFormat0));
      assertTrue(cSVFormat9.equals((Object)cSVFormat10));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertTrue(cSVFormat9.equals((Object)cSVFormat2));
      assertTrue(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertTrue(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      
      String string0 = cSVFormat2.toString();
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      assertNotNull(string0);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat11);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat9));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat0.equals((Object)cSVFormat11));
      assertTrue(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertTrue(cSVFormat1.equals((Object)cSVFormat11));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat10));
      assertTrue(cSVFormat1.equals((Object)cSVFormat9));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat10));
      assertTrue(cSVFormat2.equals((Object)cSVFormat11));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat9));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      
      String string1 = cSVFormat4.format(stringArray0);
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertEquals('|', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("\"(A;G@*^b3CG\"||org.apache.commons.csv.QuoteMode|zPJN", string1);
      assertNotNull(string1);
      assertEquals(4, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat10);
      assertNotSame(cSVFormat4, cSVFormat9);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat11);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat9));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat0.equals((Object)cSVFormat11));
      assertTrue(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(string1.equals((Object)string0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat10));
      assertFalse(cSVFormat4.equals((Object)cSVFormat9));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat11));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat8));
      
      String[] stringArray1 = cSVFormat0.getHeader();
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(stringArray1);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat9));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat0.equals((Object)cSVFormat11));
      assertTrue(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      
      char char0 = cSVFormat8.getDelimiter();
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertNull(cSVFormat6.getQuoteMode());
      assertTrue(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertEquals(' ', (char)cSVFormat6.getCommentMarker());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat6.isCommentMarkerSet());
      assertEquals('|', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat8.getRecordSeparator());
      assertEquals('|', cSVFormat8.getDelimiter());
      assertNull(cSVFormat8.getNullString());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertTrue(cSVFormat8.isEscapeCharacterSet());
      assertTrue(cSVFormat8.isCommentMarkerSet());
      assertEquals(' ', (char)cSVFormat8.getCommentMarker());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertNull(cSVFormat8.getQuoteMode());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.getTrim());
      assertFalse(cSVFormat8.isNullStringSet());
      assertTrue(cSVFormat8.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertEquals('|', char0);
      assertEquals(4, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat11);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat6, cSVFormat11);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat9);
      assertNotSame(cSVFormat6, cSVFormat10);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat6, cSVFormat8);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat10);
      assertNotSame(cSVFormat8, cSVFormat9);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat11);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat9));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat0.equals((Object)cSVFormat11));
      assertTrue(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertTrue(cSVFormat1.equals((Object)cSVFormat11));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat10));
      assertTrue(cSVFormat1.equals((Object)cSVFormat9));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat10));
      assertTrue(cSVFormat2.equals((Object)cSVFormat11));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat9));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat11));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat9));
      assertFalse(cSVFormat6.equals((Object)cSVFormat10));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertTrue(cSVFormat6.equals((Object)cSVFormat8));
      assertFalse(cSVFormat6.equals((Object)cSVFormat7));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertTrue(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat10));
      assertFalse(cSVFormat8.equals((Object)cSVFormat9));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat11));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      
      cSVFormat4.withTrim();
      cSVFormat3.withQuote('*');
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      Object[] objectArray0 = new Object[22];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "zPJN";
      cSVFormat3.withQuote('\'');
      cSVFormat2.withHeader((String[]) null);
      Character.valueOf('5');
      Character character0 = Character.valueOf('\'');
      cSVFormat1.withQuote(character0);
      Character character1 = new Character('A');
      cSVFormat0.withCommentMarker(character1);
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat4 = cSVFormat1.withHeader((String[]) null);
      cSVFormat4.withDelimiter('L');
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat3.getQuoteCharacter();
      cSVFormat0.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(Q3E/fF?I";
      stringArray0[1] = "org.apache.commons.csv.QuoteMode";
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.toString();
      cSVFormat1.format(stringArray0);
      cSVFormat0.getHeader();
      cSVFormat1.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char char0 = '>';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat2.withTrim();
      cSVFormat2.withIgnoreHeaderCase(true);
      char char1 = 'o';
      Character.valueOf('o');
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape('>');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('>')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.RFC4180.println(stringWriter0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      cSVFormat3.withTrailingDelimiter(false);
      cSVFormat3.getTrailingDelimiter();
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat4.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('b');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((String[]) null);
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(false);
      Character character1 = new Character('b');
      cSVFormat5.withCommentMarker(character1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      QuoteMode quoteMode1 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode1);
      cSVFormat0.toString();
      cSVFormat0.toString();
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      StringWriter stringWriter0 = new StringWriter(1542);
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = '1';
      CharBuffer.wrap(charArray0);
      Byte byte0 = new Byte((byte)24);
      cSVFormat0.print((Object) stringWriter0, (Appendable) stringWriter0, true);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.withEscape('1');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) quoteMode0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat2.withIgnoreEmptyLines(true);
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      Charset charset0 = Charset.defaultCharset();
      Path path0 = mockFile0.toPath();
      CSVFormat.newFormat('j');
      try { 
        cSVFormat0.print(path0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.TDF.toString();
      cSVFormat0.toString();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      StringWriter stringWriter0 = new StringWriter(2030);
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "qE<");
      Path path0 = mockFile0.toPath();
      cSVFormat3.print(path0, charset0);
      cSVFormat1.getQuoteMode();
      mockFile0.setLastModified(2030);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      cSVFormat0.println(stringWriter0);
      // Undeclared exception!
      try { 
        cSVFormat3.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat3.withIgnoreEmptyLines(false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      Object object3 = new Object();
      objectArray0[5] = object3;
      objectArray0[6] = (Object) "zPJN";
      objectArray0[7] = (Object) "zPJN";
      objectArray0[8] = (Object) "zPJN";
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat4.toString();
      cSVFormat1.format(objectArray0);
      Locale.getISOCountries();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(Q3E/fF?I";
      stringArray0[1] = "org.apache.commons.csv.QuoteMode";
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker(' ');
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.toString();
      cSVFormat4.format(stringArray0);
      cSVFormat3.getHeader();
      cSVFormat1.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      Character.valueOf('s');
      Character character0 = Character.valueOf('s');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      cSVFormat4.toString();
      cSVFormat3.isEscapeCharacterSet();
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('^');
      cSVFormat5.isCommentMarkerSet();
      CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord(true);
      MockFile mockFile0 = new MockFile("Delimiter=<\t> Escape=<> QuoteChar=<s> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      cSVFormat2.getHeaderComments();
      QuoteMode quoteMode1 = QuoteMode.NONE;
      CSVFormat cSVFormat7 = cSVFormat3.withQuoteMode(quoteMode1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("H2C 'fCq", (Object[]) null);
      cSVFormat5.println(printWriter0);
      QuoteMode quoteMode2 = QuoteMode.NONE;
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      cSVFormat7.print((Object) quoteMode1, (Appendable) mockPrintWriter0, true);
      CSVFormat.newFormat('k');
      cSVFormat6.getIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(Q3E/fF?I";
      stringArray0[1] = "org.apache.commons.csv.QuoteMode";
      cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.MYSQL.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.INFORMIX_UNLOAD_CSV.withCommentMarker(' ');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat3.withAllowMissingColumnNames();
      cSVFormat1.INFORMIX_UNLOAD_CSV.format(stringArray0);
      cSVFormat0.getEscapeCharacter();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("$VALUES");
      cSVFormat3.getNullString();
      cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat0.DEFAULT.withSkipHeaderRecord();
      cSVFormat5.TDF.withEscape((Character) null);
      cSVFormat5.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines(true);
      cSVFormat4.withCommentMarker((Character) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = cSVFormat2.withCommentMarker('o');
      cSVFormat5.withSkipHeaderRecord(true);
      CSVFormat.newFormat('i');
      cSVFormat5.equals(cSVFormat4);
      Byte byte0 = new Byte((byte)110);
      String string0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('e');
      cSVFormat1.isEscapeCharacterSet();
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat0.withEscape('2');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat2.equals(cSVFormat3);
      CSVFormat cSVFormat5 = cSVFormat4.withQuote('2');
      cSVFormat5.withHeader((String[]) null);
      Character character0 = Character.valueOf('5');
      cSVFormat3.withQuote(character0);
      CSVFormat cSVFormat6 = cSVFormat0.withCommentMarker(character0);
      CSVFormat.Predefined.values();
      cSVFormat3.withHeader((String[]) null);
      cSVFormat2.withCommentMarker('e');
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat7.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[]");
      cSVFormat6.withTrim();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(Q3E/fF?I";
      stringArray0[1] = "org.apache.commons.csv.QuoteMode";
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD_CSV.withCommentMarker(' ');
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      cSVFormat4.withHeaderComments(stringArray0);
      cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.withHeaderComments(stringArray0);
      cSVFormat5.toString();
      cSVFormat0.format(stringArray0);
      cSVFormat2.getHeader();
      cSVFormat4.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("zPJN");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "zPJN";
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat4;
      cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat5.withNullString("zPJN");
      cSVFormat2.withTrim();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("zPJN");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "zPJN";
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) mockFileWriter0;
      objectArray0[7] = (Object) "zPJN";
      MockFile mockFile0 = new MockFile("zPJN");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      cSVFormat0.getHeaderComments();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat3.withQuoteMode(quoteMode0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.printf("", (Object[]) null);
      CSVFormat cSVFormat5 = cSVFormat3.withSkipHeaderRecord();
      cSVFormat5.MYSQL.withTrailingDelimiter();
      CSVFormat cSVFormat6 = cSVFormat4.withFirstRecordAsHeader();
      Character character0 = new Character('l');
      cSVFormat6.withEscape(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat7 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat7.withIgnoreEmptyLines(true);
      cSVFormat3.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      char char0 = 'S';
      Character.valueOf('S');
      Character character0 = Character.valueOf('|');
      // Undeclared exception!
      try { 
        cSVFormat3.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('|')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(']');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)114;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      Character character0 = new Character('?');
      CSVFormat cSVFormat3 = cSVFormat1.TDF.withCommentMarker(character0);
      Character character1 = new Character(']');
      cSVFormat3.TDF.withEscape(character1);
      cSVFormat3.EXCEL.withTrailingDelimiter();
      cSVFormat2.TDF.withSkipHeaderRecord(true);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      cSVFormat2.withIgnoreEmptyLines(false);
      String string0 = "zPJN";
      cSVFormat0.getEscapeCharacter();
      // Undeclared exception!
      try { 
        Charset.forName("zPJN");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // zPJN
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      Object[] objectArray0 = new Object[22];
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat1.TDF.withIgnoreSurroundingSpaces();
      objectArray0[2] = (Object) "zPJN";
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat4 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat3.toString();
      cSVFormat0.format(objectArray0);
      cSVFormat3.getHeader();
      cSVFormat4.withQuote('3');
      cSVFormat3.withHeader((String[]) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.TDF.toString();
      cSVFormat0.toString();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      cSVFormat1.withIgnoreHeaderCase(true);
      StringWriter stringWriter0 = new StringWriter(2030);
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Byte byte0 = new Byte((byte)24);
      cSVFormat1.print((Object) charBuffer0, (Appendable) stringWriter0, false);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat1.withEscape(']');
      cSVFormat3.getHeader();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      Character.valueOf('o');
      CSVFormat cSVFormat4 = cSVFormat2.withEscape('>');
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(true);
      CSVFormat cSVFormat6 = cSVFormat5.withEscape('\'');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat0.equals(cSVFormat1);
      cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('W');
      cSVFormat6.withCommentMarker(character0);
      CSVFormat.Predefined.values();
      cSVFormat6.withQuote('>');
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      MockFileWriter mockFileWriter0 = new MockFileWriter("zPJN");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "zPJN";
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat3.TDF.withTrim(true);
      cSVFormat0.toString();
      cSVFormat2.format(objectArray0);
      cSVFormat1.getHeader();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      MockFileWriter mockFileWriter0 = new MockFileWriter("zPJN");
      Object[] objectArray0 = new Object[8];
      cSVFormat1.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();
      objectArray0[0] = (Object) "zPJN";
      cSVFormat2.printRecord(mockFileWriter0, objectArray0);
      cSVFormat0.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('@');
      cSVFormat0.hashCode();
      cSVFormat0.getSkipHeaderRecord();
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      Integer integer0 = new Integer(70);
      Character character0 = new Character('2');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      cSVFormat1.equals(cSVFormat2);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "t";
      stringArray0[1] = "CommentStart=<";
      String string0 = "Default";
      stringArray0[2] = "Default";
      stringArray0[3] = "3zwg(ql'Yr:ME?";
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat3.withQuote('@');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('@')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf(')');
      cSVFormat0.withQuote(character0);
      cSVFormat0.toString();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      StringWriter stringWriter0 = new StringWriter(2030);
      stringWriter0.append(')');
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = ')';
      CharBuffer.wrap(charArray0);
      Byte byte0 = new Byte((byte)24);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat1.toString();
      cSVFormat1.hashCode();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat4.format(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.DEFAULT;
      cSVFormat4.getHeader();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.isQuoteCharacterSet();
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      MockFile mockFile0 = new MockFile("v-NCY:mjea>lF^.e:Mb");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-63);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile1 = new MockFile("8'qU~{u'HM", "8'qU~{u'HM");
      Charset charset0 = Charset.defaultCharset();
      Path path0 = mockFile0.toPath();
      cSVFormat0.print(path0, charset0);
      cSVFormat0.getQuoteMode();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      cSVFormat2.toString();
      cSVFormat2.hashCode();
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("Delimiter=<");
      Short short0 = new Short((short)505);
      cSVFormat4.print((Object) short0, (Appendable) mockPrintWriter0, true);
      cSVFormat3.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.isQuoteCharacterSet();
      cSVFormat1.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      MockFile mockFile0 = new MockFile(" SurroundingSpaces:ignored");
      MockFile mockFile1 = new MockFile("v-NCY:mjea>lF^.e:Mb", " SurroundingSpaces:ignored");
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile2 = new MockFile("%p9K-mo>78/>kU");
      Path path0 = mockFile2.toPath();
      cSVFormat0.print(path0, charset0);
      cSVFormat0.getQuoteMode();
      mockFile1.setLastModified(0L);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile2);
      cSVFormat1.println(mockPrintWriter0);
      cSVFormat2.print((Appendable) mockPrintWriter0);
      cSVFormat0.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      Character.valueOf('s');
      Character character0 = Character.valueOf('s');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      cSVFormat4.toString();
      cSVFormat3.isEscapeCharacterSet();
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('^');
      cSVFormat5.isCommentMarkerSet();
      cSVFormat3.withSkipHeaderRecord(true);
      CSVFormat cSVFormat6 = cSVFormat1.withEscape(' ');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat2.equals(cSVFormat0);
      CSVFormat cSVFormat7 = cSVFormat5.withQuote('$');
      Character character1 = Character.valueOf('.');
      cSVFormat6.withQuote(character1);
      Character.valueOf(' ');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat7;
      objectArray0[3] = (Object) "Delimiter=<\t> Escape=<> QuoteChar=<s> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      CSVFormat cSVFormat8 = cSVFormat6.withHeaderComments(objectArray0);
      cSVFormat3.toString();
      cSVFormat8.format(objectArray0);
      cSVFormat3.withEscape('K');
      cSVFormat4.getHeader();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('y');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVFormat5.withHeaderComments(objectArray0);
      cSVFormat3.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("zPJN");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "zPJN";
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) mockFileWriter0;
      objectArray0[7] = (Object) "zPJN";
      MockFile mockFile0 = new MockFile("zPJN");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      cSVFormat0.getHeaderComments();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat5 = cSVFormat3.withQuoteMode(quoteMode0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      cSVFormat0.println(mockPrintWriter0);
      QuoteMode quoteMode1 = QuoteMode.NONE;
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      cSVFormat5.print(objectArray0[7], (Appendable) mockPrintWriter0, true);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('s');
      Character.valueOf('');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      cSVFormat1.toString();
      cSVFormat0.withDelimiter('^');
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat4.equals((Object) null);
      cSVFormat1.withQuote('');
      Character character1 = Character.valueOf('.');
      cSVFormat3.withQuote(character0);
      Character.valueOf('.');
      cSVFormat5.withCommentMarker(character1);
      CSVFormat.Predefined.values();
      // Undeclared exception!
      try { 
        Charset.forName("Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat3 = cSVFormat0.withQuote(character0);
      cSVFormat0.toString();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat5 = cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat5.toString();
      cSVFormat3.format(objectArray0);
      cSVFormat6.getHeader();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.isQuoteCharacterSet();
      cSVFormat0.DEFAULT.withFirstRecordAsHeader();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("zPJN");
      // Undeclared exception!
      try { 
        cSVFormat1.printRecord(mockFileWriter0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter(false);
      MockFile mockFile0 = new MockFile("v-NCY:mjea>lF^.e:Mb", "v-NCY:mjea>lF^.e:Mb");
      MockFile mockFile1 = new MockFile("8'qU~{u'HM", "v-NCY:mjea>lF^.e:Mb");
      Charset charset0 = Charset.defaultCharset();
      Path path0 = mockFile0.toPath();
      cSVFormat0.print(path0, charset0);
      cSVFormat0.getQuoteMode();
      mockFile1.setLastModified(0L);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("1&V/,C(V7\"R");
      cSVFormat5.println(mockPrintWriter0);
      cSVFormat4.print((Appendable) mockPrintWriter0);
      cSVFormat3.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray1 = new Object[3];
      cSVFormat0.format(objectArray1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockFile mockFile0 = new MockFile("CommentStart=<", "WS;t\"N+w+A`l6KthyB*");
      Charset.defaultCharset();
      mockFile0.setLastModified(0L);
      MockFile mockFile1 = new MockFile(mockFile0, "CommentStart=<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("CommentStart=<");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      cSVFormat0.print((Appendable) mockPrintWriter0);
      cSVFormat0.getQuoteCharacter();
      cSVFormat0.getTrim();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.isQuoteCharacterSet();
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withFirstRecordAsHeader();
      cSVFormat0.withTrailingDelimiter(true);
      MockFile mockFile0 = new MockFile("v-NCY:mjea>lF^.e:Mb", "v-NCY:mjea>lF^.e:Mb");
      MockFile mockFile1 = new MockFile("8'qU~{u'HM", "8'qU~{u'HM");
      Charset charset0 = Charset.defaultCharset();
      Path path0 = mockFile0.toPath();
      cSVFormat0.print(path0, charset0);
      cSVFormat0.getQuoteMode();
      mockFile0.setLastModified(0L);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) path0;
      objectArray0[1] = (Object) "v-NCY:mjea>lF^.e:Mb";
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[4] = (Object) "v-NCY:mjea>lF^.e:Mb";
      objectArray0[5] = (Object) "8'qU~{u'HM";
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat0.toString();
      cSVFormat2.format(objectArray0);
      cSVFormat2.getHeader();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = Character.valueOf('h');
      cSVFormat4.TDF.withEscape(character0);
      CSVFormat.valueOf("RFC4180");
      CSVFormat cSVFormat5 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat5.RFC4180.withTrim(false);
      CSVFormat.newFormat('!');
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat2.withHeader(class0);
      cSVFormat0.TDF.withEscape('!');
      CSVFormat.valueOf("InformixUnloadCsv");
      MockFile mockFile0 = new MockFile("InformixUnloadCsv");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      cSVFormat5.getHeaderComments();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.withQuoteMode(quoteMode0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("InformixUnloadCsv", (Object[]) null);
      cSVFormat6.println(printWriter0);
      QuoteMode quoteMode1 = QuoteMode.NONE;
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      cSVFormat5.print((Object) cSVFormat2, (Appendable) printWriter0, true);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      Character.valueOf('s');
      Character character0 = Character.valueOf('s');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      cSVFormat4.toString();
      cSVFormat3.isEscapeCharacterSet();
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('^');
      cSVFormat5.isCommentMarkerSet();
      cSVFormat3.withSkipHeaderRecord(false);
      CSVFormat cSVFormat6 = cSVFormat1.withEscape(' ');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat2.equals(cSVFormat0);
      cSVFormat5.withQuote('$');
      Character character1 = Character.valueOf('.');
      cSVFormat6.withQuote(character1);
      Character character2 = Character.valueOf(' ');
      cSVFormat4.withCommentMarker(character2);
      CSVFormat.Predefined.values();
      cSVFormat0.withQuote('s');
      // Undeclared exception!
      try { 
        Charset.forName("Delimiter=<\t> Escape=<> QuoteChar=<s> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Delimiter=<\t> Escape=<> QuoteChar=<s> NullString=<N> RecordSeparator=<
         // > SkipHeaderRecord:false
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Character.valueOf('o');
      StringWriter stringWriter0 = new StringWriter(13);
      StringWriter stringWriter1 = stringWriter0.append('1');
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = '>';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter1.append((CharSequence) charBuffer0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) '>';
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat1.toString();
      cSVFormat1.format(objectArray0);
      cSVFormat0.withEscape('r');
      cSVFormat3.getHeader();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@lRy$";
      cSVFormat0.MYSQL.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("zPJN");
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      Object object0 = new Object();
      cSVFormat2.equals(object0);
      cSVFormat4.withQuote(' ');
      Character character0 = new Character(' ');
      CSVFormat cSVFormat5 = cSVFormat3.withQuote(character0);
      // Undeclared exception!
      try { 
        cSVFormat5.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same (' ')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Character.valueOf('X');
      StringWriter stringWriter0 = new StringWriter(13);
      StringWriter stringWriter1 = stringWriter0.append('S');
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = '*';
      charArray0[3] = 'o';
      charArray0[4] = 'X';
      charArray0[5] = 'X';
      charArray0[6] = 'X';
      charArray0[7] = 'o';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) charBuffer0);
      Byte byte0 = new Byte((byte)24);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat3.print((Object) stringWriter2, (Appendable) stringWriter1, false);
      cSVFormat1.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.isQuoteCharacterSet();
      cSVFormat0.DEFAULT.withFirstRecordAsHeader();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      MockFile mockFile0 = new MockFile("v-NCY:mjea>lF^.e:Mb", "v-NCY:mjea>lF^.e:Mb");
      MockFile mockFile1 = new MockFile("8'qU~{u'HM", "8'qU~{u'HM");
      Charset charset0 = Charset.defaultCharset();
      Path path0 = mockFile0.toPath();
      cSVFormat0.print(path0, charset0);
      Character character0 = Character.valueOf('h');
      cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVFormat.Predefined.values();
      cSVFormat3.withQuote('');
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.isNullStringSet();
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('v');
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray1[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat3.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('H');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat0.equals(objectArray0[0]);
      cSVFormat5.withQuote('P');
      Character character0 = new Character('P');
      cSVFormat2.withCommentMarker(character0);
      CSVFormat.Predefined.values();
      cSVFormat0.withQuote('\"');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "' must not be null!");
      // Undeclared exception!
      try { 
        Charset.forName("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r
         // > SkipHeaderRecord:false
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      cSVFormat0.toString();
      Object[] objectArray0 = new Object[0];
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('s');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat3.withCommentMarker(')');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      QuoteMode quoteMode1 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat6 = cSVFormat5.withQuoteMode(quoteMode1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(33);
      CSVFormat cSVFormat7 = cSVFormat0.withDelimiter(')');
      CSVFormat cSVFormat8 = cSVFormat7.withSkipHeaderRecord(true);
      cSVFormat6.toString();
      cSVFormat8.hashCode();
      cSVFormat1.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat9 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat10 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat10.withHeader(resultSet0);
      cSVFormat3.getQuoteCharacter();
      cSVFormat4.getIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.isNullStringSet();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('e');
      cSVFormat3.isEscapeCharacterSet();
      cSVFormat3.isCommentMarkerSet();
      CSVFormat cSVFormat4 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat5 = cSVFormat2.withEscape('I');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat4.equals(cSVFormat2);
      cSVFormat1.withQuote('5');
      Character.valueOf('e');
      cSVFormat5.withQuote(character0);
      Character.valueOf('4');
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVFormat2;
      CSVFormat cSVFormat6 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat3.toString();
      cSVFormat6.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat3.withEscape('e');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('e')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.isNullStringSet();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('e');
      cSVFormat3.isEscapeCharacterSet();
      cSVFormat3.isCommentMarkerSet();
      CSVFormat cSVFormat4 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat2.withEscape('I');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat4.equals(cSVFormat2);
      cSVFormat1.withQuote('5');
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((String[]) null);
      Character character1 = Character.valueOf('I');
      cSVFormat5.withQuote(character1);
      cSVFormat3.withCommentMarker((Character) null);
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat6 = cSVFormat0.withHeader((String[]) null);
      cSVFormat6.withQuote('E');
      // Undeclared exception!
      try { 
        Charset.forName("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r
         // > SkipHeaderRecord:false
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      Object[] objectArray0 = new Object[22];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "zPJN";
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('/');
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat4.withHeader(class0);
      CSVFormat.newFormat('Q');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat5 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('/');
      cSVFormat2.withCommentMarker(character0);
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat5.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CSVFormat.newFormat('>');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withTrim();
      Character.valueOf('o');
      StringWriter stringWriter0 = new StringWriter(13);
      StringWriter stringWriter1 = stringWriter0.append('1');
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = '>';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter1.append((CharSequence) charBuffer0);
      Byte byte0 = new Byte((byte)24);
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile("]DgAd", "]DgAd");
      // Undeclared exception!
      try { 
        cSVFormat0.RFC4180.print(file0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.OutputStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("zPJN");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "zPJN";
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) mockFileWriter0;
      cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.withHeaderComments((Object[]) null);
      cSVFormat2.toString();
      cSVFormat5.withNullString("Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat6 = cSVFormat4.withHeader(resultSet0);
      cSVFormat2.withSkipHeaderRecord();
      cSVFormat6.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("zPJN");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "zPJN";
      objectArray0[1] = (Object) cSVFormat3;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('/');
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '1';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = '1';
      CharBuffer.wrap(charArray0);
      Byte byte0 = new Byte((byte)80);
      Object object0 = new Object();
      cSVFormat4.print(object0, (Appendable) stringWriter1, true);
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat6 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat1.getCommentMarker();
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat8 = cSVFormat7.withFirstRecordAsHeader();
      cSVFormat8.withAllowMissingColumnNames(false);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Character character0 = Character.valueOf('>');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("QuoteChar=<");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.RFC4180.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat5.getNullString();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.RFC4180.withTrim(true);
      CSVFormat.newFormat('!');
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat6 = cSVFormat2.withHeader(class0);
      cSVFormat0.TDF.withEscape('!');
      CSVFormat cSVFormat7 = CSVFormat.valueOf("InformixUnloadCsv");
      MockFile mockFile0 = new MockFile("InformixUnloadCsv");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[0];
      cSVFormat6.INFORMIX_UNLOAD.printRecord(mockPrintStream0, objectArray0);
      cSVFormat4.getHeaderComments();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.withQuoteMode(quoteMode0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("InformixUnloadCsv", (Object[]) null);
      cSVFormat5.println(printWriter0);
      QuoteMode quoteMode1 = QuoteMode.NONE;
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      cSVFormat4.print((Object) cSVFormat2, (Appendable) printWriter0, true);
      cSVFormat5.withIgnoreEmptyLines();
      cSVFormat7.withDelimiter('v');
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.isNullStringSet();
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('v');
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray1[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray1[2] = (Object) cSVFormat1;
      cSVFormat2.format(objectArray1);
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('v');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withCommentMarker('7');
      cSVFormat4.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('v');
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord(true);
      cSVFormat5.toString();
      cSVFormat6.hashCode();
      CSVFormat cSVFormat7 = cSVFormat1.withNullString("Delimiter=<\t> Escape=<v> QuoteChar=<\"> RecordSeparator=<v> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[]");
      CSVFormat cSVFormat8 = CSVFormat.INFORMIX_UNLOAD_CSV;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat8.withHeader(resultSet0);
      cSVFormat7.getQuoteCharacter();
      cSVFormat7.getIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('s');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      cSVFormat4.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat4.isCommentMarkerSet();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) "Delimiter=<\t> Escape=<> QuoteChar=<s> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[5] = (Object) quoteMode0;
      CSVFormat cSVFormat5 = cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat3.toString();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      cSVFormat_Predefined0.getFormat();
      cSVFormat4.format(objectArray0);
      QuoteMode quoteMode1 = QuoteMode.ALL;
      cSVFormat4.withQuoteMode(quoteMode1);
      cSVFormat4.hashCode();
      cSVFormat5.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("zPJN");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "zPJN";
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) mockFileWriter0;
      objectArray0[7] = (Object) "zPJN";
      cSVFormat4.printRecord(mockFileWriter0, objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('E');
      cSVFormat2.withDelimiter('E');
      cSVFormat3.MYSQL.withSkipHeaderRecord(false);
      cSVFormat5.toString();
      char char0 = 'O';
      cSVFormat1.withEscape('O');
      cSVFormat1.getHeader();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat3.withIgnoreEmptyLines();
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("zPJN", "TOKEN");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // TOKEN
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.isQuoteCharacterSet();
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.toString();
      cSVFormat2.isEscapeCharacterSet();
      cSVFormat2.isCommentMarkerSet();
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('-');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat0.equals(cSVFormat1);
      CSVFormat cSVFormat5 = cSVFormat2.withQuote('-');
      Character character0 = new Character('-');
      cSVFormat4.withQuote(character0);
      CSVFormat cSVFormat6 = cSVFormat3.withAllowMissingColumnNames(true);
      cSVFormat6.withCommentMarker(character0);
      CSVFormat.Predefined.values();
      cSVFormat5.withQuote('x');
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        charset0.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat3 = cSVFormat0.withQuote(character0);
      MockFile mockFile0 = new MockFile("w8K{A", "CK");
      MockFile mockFile1 = new MockFile("S", "CK");
      Charset.defaultCharset();
      Path path0 = mockFile1.toPath();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat4.print(path0, charset0);
      cSVFormat2.getQuoteMode();
      mockFile0.setLastModified(1L);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      cSVFormat4.println(mockPrintWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.EXCEL.println(mockPrintWriter0);
      cSVFormat5.print((Appendable) mockPrintWriter0);
      cSVFormat0.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat2.withIgnoreHeaderCase(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat3.isCommentMarkerSet();
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat4.withEscape('Z');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      Float float0 = new Float(0.0F);
      cSVFormat2.equals(float0);
      CSVFormat cSVFormat5 = cSVFormat0.withQuote('k');
      cSVFormat0.withQuote((Character) null);
      cSVFormat5.withCommentMarker((Character) null);
      CSVFormat.Predefined.values();
      cSVFormat1.withQuote('-');
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        charset0.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      cSVFormat2.MYSQL.withDelimiter(')');
      cSVFormat2.EXCEL.withIgnoreSurroundingSpaces(true);
      cSVFormat0.toString();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      StringWriter stringWriter0 = new StringWriter(2030);
      stringWriter0.append(')');
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = ')';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Byte byte0 = new Byte((byte)24);
      cSVFormat1.print((Object) charBuffer0, (Appendable) stringWriter0, false);
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat4.withIgnoreEmptyLines();
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat1.getCommentMarker();
      cSVFormat3.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat1.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat5.RFC4180.withTrim(false);
      CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase(true);
      StringWriter stringWriter0 = new StringWriter(2030);
      StringWriter stringWriter1 = stringWriter0.append('1');
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      CharBuffer.wrap(charArray0);
      Byte byte0 = new Byte((byte)44);
      cSVFormat6.print((Object) byte0, (Appendable) stringWriter1, true);
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat4.withIgnoreEmptyLines();
      CSVFormat cSVFormat8 = cSVFormat6.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat9 = cSVFormat8.withIgnoreHeaderCase(true);
      cSVFormat9.isEscapeCharacterSet();
      cSVFormat1.getCommentMarker();
      cSVFormat8.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf(')');
      cSVFormat0.withQuote(character0);
      cSVFormat0.toString();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      char char0 = '!';
      CSVFormat cSVFormat2 = CSVFormat.newFormat(')');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('^');
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      cSVFormat4.withIgnoreSurroundingSpaces(false);
      cSVFormat3.withAllowMissingColumnNames();
      // Undeclared exception!
      try { 
        cSVFormat4.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withIgnoreHeaderCase(true);
      Character character0 = new Character('S');
      CSVFormat cSVFormat4 = cSVFormat1.EXCEL.withQuote(character0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("D$/!.Z2.`n66iK+[]");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) "D$/!.Z2.`n66iK+[]";
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "D$/!.Z2.`n66iK+[]";
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat2;
      PrintWriter printWriter0 = mockPrintWriter0.printf("D$/!.Z2.`n66iK+[]", objectArray0);
      cSVFormat4.printRecord(printWriter0, objectArray0);
      cSVFormat2.withEscape('E');
      cSVFormat2.withDelimiter('9');
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat4.toString();
      cSVFormat1.hashCode();
      CSVFormat cSVFormat6 = cSVFormat3.withNullString("$VALUES");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat6.withHeader(resultSet0);
      cSVFormat5.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('5');
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      Character character0 = Character.valueOf('5');
      CSVFormat cSVFormat5 = cSVFormat3.withEscape('@');
      cSVFormat5.withSkipHeaderRecord(false);
      CSVFormat cSVFormat6 = cSVFormat5.withEscape('5');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat1.equals(cSVFormat6);
      CSVFormat cSVFormat7 = cSVFormat2.withQuote('~');
      cSVFormat4.withQuote(character0);
      Character.valueOf('=');
      cSVFormat7.withCommentMarker(character0);
      CSVFormat.Predefined.values();
      cSVFormat4.withQuote('2');
      // Undeclared exception!
      try { 
        Charset.forName("\r\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \r
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withTrim();
      cSVFormat2.MYSQL.withIgnoreHeaderCase(true);
      boolean boolean0 = false;
      Character character0 = Character.valueOf('S');
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("D$/!.Z2.`n66iK+[]");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) "D$/!.Z2.`n66iK+[]";
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "D$/!.Z2.`n66iK+[]";
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat2;
      PrintWriter printWriter0 = mockPrintWriter0.printf("D$/!.Z2.`n66iK+[]", objectArray0);
      cSVFormat3.printRecord(printWriter0, objectArray0);
      cSVFormat2.withEscape('E');
      cSVFormat4.withDelimiter('9');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat2.withQuoteMode(quoteMode0);
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.isQuoteCharacterSet();
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withTrailingDelimiter(true);
      MockFile mockFile0 = new MockFile("v-NCY:mjea>lF^.e:Mb", "v-NCY:mjea>lF^.e:Mb");
      MockFile mockFile1 = new MockFile("8'qU~{u'HM", "ofs  D0 lzGXyVT4h\"");
      Charset charset0 = Charset.defaultCharset();
      Path path0 = mockFile0.toPath();
      cSVFormat0.print(path0, charset0);
      cSVFormat0.getQuoteMode();
      mockFile0.setLastModified(39L);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-2596));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      MockFile mockFile0 = new MockFile("v-NCY:mjea>lF^.e:Mb", "v-NCY:mjea>lF^.e:Mb");
      MockFile mockFile1 = new MockFile("8'qU~{u'HM", "8'qU~{u'HM");
      Charset charset0 = Charset.defaultCharset();
      Path path0 = mockFile0.toPath();
      cSVFormat0.print(path0, charset0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      Character character0 = new Character('O');
      cSVFormat2.withCommentMarker(character0);
      mockFile0.setLastModified(26L);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      cSVFormat2.println(mockPrintWriter1);
      cSVFormat0.print((Appendable) mockPrintWriter0);
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat3.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat2.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('o');
      CSVFormat cSVFormat4 = cSVFormat1.withQuote(character0);
      cSVFormat4.withIgnoreHeaderCase(false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = '>';
      CharBuffer.wrap(charArray0);
      Byte byte0 = new Byte((byte)24);
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat0.getCommentMarker();
      cSVFormat3.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      boolean boolean0 = true;
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[22];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "zPJN";
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat2;
      cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat3.withAllowMissingColumnNames();
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.toString();
      Byte byte0 = new Byte((byte)62);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) byte0, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat2.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('S');
      CSVFormat cSVFormat4 = cSVFormat1.withQuote(character0);
      cSVFormat4.withIgnoreHeaderCase(false);
      StringWriter stringWriter0 = new StringWriter(13);
      stringWriter0.append('1');
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      cSVFormat1.withCommentMarker(character0);
      CSVFormat.Predefined.values();
      cSVFormat3.withQuote('S');
      // Undeclared exception!
      try { 
        Charset.forName("Escape=<");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Escape=<
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.isQuoteCharacterSet();
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      MockFile mockFile0 = new MockFile("v-NCY:mjea>lF^.e:Mb");
      MockFile mockFile1 = new MockFile("8'qU~{u'HM", "8'qU~{u'HM");
      Charset charset0 = Charset.defaultCharset();
      Path path0 = mockFile0.toPath();
      cSVFormat0.print(path0, charset0);
      cSVFormat0.getQuoteMode();
      mockFile0.setLastModified(0L);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      cSVFormat2.toString();
      cSVFormat2.hashCode();
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("Delimiter=<");
      cSVFormat4.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
      boolean boolean1 = false;
      cSVFormat3.isEscapeCharacterSet();
      cSVFormat3.isCommentMarkerSet();
      cSVFormat4.withIgnoreHeaderCase(true);
      StringWriter stringWriter0 = new StringWriter(2030);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat3.INFORMIX_UNLOAD.withFirstRecordAsHeader();
      cSVFormat2.EXCEL.withTrailingDelimiter();
      String string0 = "RFC4180";
      MockFile mockFile0 = new MockFile("RFC4180");
      mockFile0.toPath();
      Charset charset0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "RFC4180";
      stringArray0[1] = "The comment start character and the quoteChar cannot be the same ('";
      stringArray0[2] = "RFC4180";
      stringArray0[3] = "RFC4180";
      stringArray0[4] = "RFC4180";
      stringArray0[5] = "RFC4180";
      stringArray0[6] = "RFC4180";
      // Undeclared exception!
      try { 
        mockFile0.setLastModified((-1700L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative time
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      String[] stringArray0 = new String[2];
      String string0 = "(Q3E/fF?I";
      stringArray0[0] = "(Q3E/fF?I";
      stringArray0[1] = "org.apache.commons.csv.QuoteMode";
      cSVFormat0.format(stringArray0);
      cSVFormat0.withEscape('S');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('7');
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat3.withQuoteMode(quoteMode0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(376);
      int int0 = 1231;
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "org.apache.commons.csv.QuoteMode", 1231, 1231);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.isNullStringSet();
      Object[] objectArray0 = new Object[6];
      char char0 = 'v';
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('v');
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      cSVFormat0.format(objectArray0);
      cSVFormat2.withEscape('v');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withCommentMarker('v');
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat2.withQuoteMode(quoteMode0);
      int int0 = 69;
      int int1 = 44;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(44);
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) ",,,,,", 10, (-46));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.isNullStringSet();
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('v');
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      CSVFormat cSVFormat3 = cSVFormat0.withFirstRecordAsHeader();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.csv.QuoteMode";
      stringArray0[1] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat0.withCommentMarker('v');
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat6 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withDelimiter('t');
      cSVFormat2.format(objectArray0);
      cSVFormat4.getEscapeCharacter();
      CSVFormat cSVFormat7 = cSVFormat0.withRecordSeparator("$VALUES");
      cSVFormat5.getNullString();
      CSVFormat cSVFormat8 = cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat9 = cSVFormat7.withSkipHeaderRecord();
      cSVFormat6.withEscape((Character) null);
      CSVFormat cSVFormat10 = cSVFormat8.withIgnoreEmptyLines(true);
      cSVFormat0.withCommentMarker((Character) null);
      cSVFormat9.withNullString("$VALUES");
      cSVFormat10.getHeader();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      Character character0 = Character.valueOf('>');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      cSVFormat0.toString();
      cSVFormat1.isEscapeCharacterSet();
      CSVFormat cSVFormat6 = cSVFormat5.withNullString("Fn");
      cSVFormat6.isCommentMarkerSet();
      cSVFormat5.withIgnoreHeaderCase(false);
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append('>');
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[1] = '>';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Byte byte0 = new Byte((byte)24);
      // Undeclared exception!
      try { 
        cSVFormat2.print((Object) cSVFormat0, (Appendable) charBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat2.withTrim();
      cSVFormat2.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('o');
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      StringWriter stringWriter0 = new StringWriter(13);
      stringWriter0.append('1');
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      CSVFormat cSVFormat5 = CSVFormat.newFormat('X');
      cSVFormat1.withEscape('S');
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter('S');
      CSVFormat cSVFormat7 = cSVFormat6.withSkipHeaderRecord(true);
      cSVFormat7.toString();
      CSVFormat cSVFormat8 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat8.hashCode();
      cSVFormat7.withNullString("UQ!wJo");
      Character character1 = Character.valueOf('n');
      CSVFormat cSVFormat9 = cSVFormat4.withEscape(character1);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat9.withHeader(resultSet0);
      cSVFormat1.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[22];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "zPJN";
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat2;
      cSVFormat3.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.toString();
      cSVFormat4.format(objectArray0);
      cSVFormat3.hashCode();
      CSVFormat cSVFormat6 = cSVFormat5.withHeaderComments(objectArray0);
      cSVFormat6.withNullString("");
      cSVFormat0.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('S');
      CSVFormat cSVFormat4 = cSVFormat1.EXCEL.withQuote(character0);
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreHeaderCase(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("D$/!.Z2.`n66iK+[]");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) "D$/!.Z2.`n66iK+[]";
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "D$/!.Z2.`n66iK+[]";
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat2;
      PrintWriter printWriter0 = mockPrintWriter0.printf("D$/!.Z2.`n66iK+[]", objectArray0);
      cSVFormat4.printRecord(printWriter0, objectArray0);
      cSVFormat2.withEscape('E');
      cSVFormat5.withDelimiter('9');
      cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat4.toString();
      cSVFormat1.hashCode();
      CSVFormat cSVFormat6 = cSVFormat3.withNullString("$VALUES");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat7 = cSVFormat6.withHeader(resultSet0);
      cSVFormat7.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.isQuoteCharacterSet();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.DEFAULT.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      MockFile mockFile0 = new MockFile("v-NCY:mjea>lF^.e:Mb", "v-NCY:mjea>lF^.e:Mb");
      MockFile mockFile1 = new MockFile("7HB?XnL!CH]", "HEUe3");
      mockFile1.toPath();
      Charset.defaultCharset();
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        cSVFormat2.print(path0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.OutputStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.isQuoteCharacterSet();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter(true);
      MockFile mockFile0 = new MockFile("v-NCY:mjea>lF^.e:Mb", "v-NCY:mjea>lF^.e:Mb");
      MockFile mockFile1 = new MockFile("FQ1", "");
      mockFile1.toPath();
      Charset charset0 = Charset.defaultCharset();
      Path path0 = mockFile1.toPath();
      cSVFormat1.print(path0, charset0);
      cSVFormat2.getQuoteMode();
      cSVFormat0.toString();
      cSVFormat2.hashCode();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FQ1");
      cSVFormat3.withNullString("");
      cSVFormat0.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('|');
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat4.withDelimiter(' ');
      cSVFormat3.format(stringArray0);
      cSVFormat5.getEscapeCharacter();
      cSVFormat4.withRecordSeparator("COMMENT");
      cSVFormat3.getNullString();
      CSVFormat cSVFormat6 = cSVFormat0.withEscape('I');
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase();
      cSVFormat1.withSkipHeaderRecord();
      cSVFormat6.withEscape((Character) null);
      cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('K');
      cSVFormat1.withCommentMarker(character0);
      cSVFormat7.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat2.withTrim();
      cSVFormat2.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('o');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('>');
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('\'');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat0.equals(cSVFormat1);
      cSVFormat5.withQuote(' ');
      cSVFormat1.withQuote(character0);
      Character character1 = Character.valueOf('W');
      cSVFormat5.withCommentMarker(character1);
      CSVFormat.Predefined.values();
      cSVFormat5.withQuote('9');
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf(')');
      cSVFormat0.withQuote(character0);
      cSVFormat0.toString();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      StringWriter stringWriter0 = new StringWriter(2030);
      stringWriter0.append(')');
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = ')';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Byte byte0 = new Byte((byte)24);
      cSVFormat1.print((Object) charBuffer0, (Appendable) stringWriter0, false);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat1.getCommentMarker();
      cSVFormat2.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.isQuoteCharacterSet();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.DEFAULT.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('&');
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat5 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('`');
      CSVFormat cSVFormat7 = cSVFormat0.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[0];
      cSVFormat7.format(objectArray0);
      cSVFormat2.getEscapeCharacter();
      CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator("");
      cSVFormat8.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();
      cSVFormat1.getNullString();
      cSVFormat4.withIgnoreHeaderCase();
      cSVFormat6.withSkipHeaderRecord();
      Character character0 = new Character('E');
      CSVFormat cSVFormat9 = cSVFormat5.withEscape(character0);
      CSVFormat cSVFormat10 = cSVFormat9.withAllowMissingColumnNames(true);
      cSVFormat10.withIgnoreEmptyLines(true);
      cSVFormat1.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat1.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(']');
      cSVFormat1.getCommentMarker();
      try { 
        MockURI.URI("MySQL", "The escape character cannot be a line break", "Z{LAGc=.X6ckVJ@oy", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: MySQL://The escape character cannot be a line breakZ%7BLAGc=.X6ckVJ@oy#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.isNullStringSet();
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('v');
      Character character0 = new Character('v');
      cSVFormat1.EXCEL.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames();
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.getSkipHeaderRecord();
      cSVFormat0.isNullStringSet();
      cSVFormat0.getCommentMarker();
      cSVFormat2.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat0;
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('E');
      CSVFormat cSVFormat6 = cSVFormat2.withDelimiter('E');
      cSVFormat3.MYSQL.withSkipHeaderRecord(false);
      cSVFormat5.toString();
      cSVFormat1.hashCode();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(40);
      charArrayWriter0.append('r');
      cSVFormat6.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      cSVFormat0.toString();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat2.withEscape(')');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat0.equals(cSVFormat4);
      CSVFormat cSVFormat5 = cSVFormat3.withQuote('\"');
      cSVFormat5.TDF.withQuote(character0);
      cSVFormat0.withCommentMarker(character0);
      CSVFormat.Predefined.values();
      cSVFormat0.withQuote('');
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.isNullStringSet();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "charset");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      cSVFormat0.getTrailingDelimiter();
      cSVFormat0.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('S');
      cSVFormat1.EXCEL.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase(false);
      StringWriter stringWriter0 = new StringWriter(13);
      StringWriter stringWriter1 = stringWriter0.append('g');
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      cSVFormat4.MYSQL.print((Object) cSVFormat3, (Appendable) stringWriter2, false);
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat0.isEscapeCharacterSet();
      Character character1 = new Character('S');
      cSVFormat5.withAllowMissingColumnNames(false);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat2.getNullString();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat5.withHeaderComments(objectArray0);
      cSVFormat0.toString();
      cSVFormat2.format(objectArray0);
      char char0 = 't';
      cSVFormat3.withEscape('t');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      char char1 = 'X';
      cSVFormat4.withCommentMarker(':');
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat6.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreEmptyLines();
      cSVFormat7.withQuoteMode(quoteMode0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(376);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('X');
      // Undeclared exception!
      try { 
        charArrayWriter2.append((CharSequence) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", 376, 376);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat2.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('o');
      CSVFormat cSVFormat4 = cSVFormat1.withQuote(character0);
      cSVFormat4.withIgnoreHeaderCase(false);
      StringWriter stringWriter0 = new StringWriter(13);
      StringWriter stringWriter1 = stringWriter0.append('1');
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = '>';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter1.append((CharSequence) charBuffer0);
      Byte byte0 = new Byte((byte)24);
      // Undeclared exception!
      try { 
        cSVFormat3.print((Object) byte0, (Appendable) charBuffer0, true);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals('|', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getNullString());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("zPJN");
      assertNotNull(mockFileWriter0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "zPJN";
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) mockFileWriter0;
      objectArray0[7] = (Object) "zPJN";
      cSVFormat4.printRecord(mockFileWriter0, objectArray0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals('|', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getNullString());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals(8, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('E');
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getNullString());
      assertEquals('E', (char)cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.getTrailingDelimiter());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getQuoteMode());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals('|', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getNullString());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      
      CSVFormat cSVFormat6 = cSVFormat2.withDelimiter('E');
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrim());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat6.getTrailingDelimiter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertNull(cSVFormat6.getCommentMarker());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.isNullStringSet());
      assertEquals('E', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNull(cSVFormat6.getNullString());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat7 = cSVFormat3.MYSQL.withSkipHeaderRecord(false);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertNull(cSVFormat7.getCommentMarker());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat7.getDelimiter());
      assertNull(cSVFormat7.getQuoteMode());
      assertEquals('\\', (char)cSVFormat7.getEscapeCharacter());
      assertEquals("\\N", cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertTrue(cSVFormat7.isNullStringSet());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat7.getRecordSeparator());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      
      String string0 = cSVFormat5.toString();
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getNullString());
      assertEquals('E', (char)cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.getTrailingDelimiter());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getQuoteMode());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals('|', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getNullString());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals("Delimiter=<|> Escape=<E> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
      assertNotNull(string0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      
      cSVFormat1.hashCode();
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      
      CSVFormat cSVFormat8 = cSVFormat3.withNullString("Delimiter=<|> Escape=<E> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNull(cSVFormat8.getCommentMarker());
      assertNull(cSVFormat8.getQuoteMode());
      assertEquals('\\', (char)cSVFormat8.getEscapeCharacter());
      assertTrue(cSVFormat8.getTrailingDelimiter());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertFalse(cSVFormat8.getTrim());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertTrue(cSVFormat8.isEscapeCharacterSet());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat8.getRecordSeparator());
      assertTrue(cSVFormat8.isNullStringSet());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertEquals("Delimiter=<|> Escape=<E> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat8.getNullString());
      assertEquals('|', cSVFormat8.getDelimiter());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertNotNull(cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      
      Character character0 = cSVFormat1.getQuoteCharacter();
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\"', (char)character0);
      assertNotNull(character0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      
      File file0 = MockFile.createTempFile("bW>kvA", "bW>kvA");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.print(file0, charset0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("zPJN");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "zPJN";
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) mockFileWriter0;
      objectArray0[7] = (Object) "zPJN";
      cSVFormat4.printRecord(mockFileWriter0, objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('E');
      cSVFormat2.withDelimiter('E');
      cSVFormat3.MYSQL.withSkipHeaderRecord(false);
      cSVFormat5.toString();
      CSVFormat cSVFormat6 = cSVFormat3.withNullString("Delimiter=<|> Escape=<E> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      cSVFormat1.getQuoteCharacter();
      cSVFormat6.withQuote((Character) null);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(Q3E/fF?I";
      stringArray0[1] = "org.apache.commons.csv.QuoteMode";
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.INFORMIX_UNLOAD_CSV.withCommentMarker(' ');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('r');
      cSVFormat5.INFORMIX_UNLOAD_CSV.format(stringArray0);
      cSVFormat5.getEscapeCharacter();
      CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator("$VALUES");
      cSVFormat3.getNullString();
      cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat7 = cSVFormat0.DEFAULT.withSkipHeaderRecord();
      cSVFormat7.TDF.withEscape((Character) null);
      cSVFormat7.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines(true);
      cSVFormat6.withCommentMarker((Character) null);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withTrim();
      cSVFormat2.MYSQL.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('S');
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withQuote(character0);
      cSVFormat0.withIgnoreHeaderCase(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("D$/!.Z2.`n66iK+[]");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) "D$/!.Z2.`n66iK+[]";
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "D$/!.Z2.`n66iK+[]";
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat2;
      PrintWriter printWriter0 = mockPrintWriter0.printf("D$/!.Z2.`n66iK+[]", objectArray0);
      cSVFormat3.printRecord(printWriter0, objectArray0);
      CSVFormat cSVFormat4 = CSVFormat.newFormat('E');
      // Undeclared exception!
      try { 
        cSVFormat4.withEscape('E');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('E')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('S');
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase(true);
      StringWriter stringWriter0 = new StringWriter(13);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('g');
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat7 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat4.withDelimiter('%');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat7;
      objectArray0[1] = (Object) cSVFormat4;
      cSVFormat3.format(objectArray0);
      cSVFormat3.getEscapeCharacter();
      cSVFormat7.withRecordSeparator("$VALUES");
      cSVFormat6.getNullString();
      cSVFormat4.withIgnoreHeaderCase();
      CSVFormat cSVFormat8 = cSVFormat5.withSkipHeaderRecord();
      cSVFormat8.withEscape((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat9 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat9.withIgnoreEmptyLines(true);
      // Undeclared exception!
      try { 
        cSVFormat3.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('S')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("zPJN");
      StringWriter stringWriter0 = new StringWriter(13);
      stringWriter0.append('D');
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      CharBuffer.wrap(charArray0);
      stringWriter0.append((CharSequence) "zPJN");
      cSVFormat4.print((Object) stringWriter0, (Appendable) mockFileWriter0, true);
      CSVFormat cSVFormat5 = CSVFormat.MYSQL;
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreEmptyLines();
      cSVFormat6.isEscapeCharacterSet();
      CSVFormat cSVFormat7 = CSVFormat.EXCEL;
      cSVFormat7.getCommentMarker();
      cSVFormat4.withAllowMissingColumnNames(true);
      cSVFormat4.println(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      char char0 = '[';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.getRecordSeparator();
      cSVFormat3.getEscapeCharacter();
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.getIgnoreHeaderCase();
      try { 
        MockURI.URI("InformixUnload", "./0!Ns", "The comment start marker character cannot be a line break", (-720), "HJlbvx>H", ">Hj/;#", "./0!Ns");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: InformixUnload://.%2F0!Ns@The comment start marker character cannot be a line break:-720HJlbvx%3EH?%3EHj/;%23#./0!Ns
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withCommentMarker('#');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat2.INFORMIX_UNLOAD.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat4.getIgnoreHeaderCase();
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) cSVFormat1;
      objectArray1[1] = (Object) cSVFormat4;
      cSVFormat1.DEFAULT.withRecordSeparator('&');
      objectArray1[2] = (Object) cSVFormat3;
      cSVFormat1.MYSQL.withTrim();
      cSVFormat0.withHeaderComments(objectArray1);
      cSVFormat1.getIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('\"');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
      cSVFormat5.withRecordSeparator('\"');
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat7 = cSVFormat6.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat2.INFORMIX_UNLOAD.withNullString("");
      cSVFormat6.EXCEL.withRecordSeparator("");
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat8 = cSVFormat_Predefined0.getFormat();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat7;
      cSVFormat8.INFORMIX_UNLOAD.withHeaderComments(objectArray0);
      cSVFormat6.withIgnoreSurroundingSpaces(true);
      PipedReader pipedReader0 = new PipedReader(13);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat1.EXCEL.withAllowMissingColumnNames();
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat1.withRecordSeparator("");
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNotNull(cSVFormat0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotNull(cSVFormat1);
      assertEquals(3, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('C');
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('C', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertNotNull(cSVFormat2);
      assertEquals(3, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('C', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('C', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals("C", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getNullString());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNotNull(cSVFormat3);
      assertEquals(3, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator(")vD,");
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('C', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('C', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals("C", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getNullString());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals('C', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals(")vD,", cSVFormat4.getRecordSeparator());
      assertNotNull(cSVFormat4);
      assertEquals(3, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("");
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('C', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('C', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals("C", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getNullString());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals('C', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals(")vD,", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals('C', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals("", cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isNullStringSet());
      assertEquals(")vD,", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertNotNull(cSVFormat5);
      assertEquals(3, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat6 = cSVFormat5.INFORMIX_UNLOAD.withQuoteMode(quoteMode0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('C', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('C', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals("C", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getNullString());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals('C', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals(")vD,", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals('C', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals("", cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isNullStringSet());
      assertEquals(")vD,", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertEquals('|', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertNull(cSVFormat6.getCommentMarker());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL, cSVFormat6.getQuoteMode());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat6);
      assertEquals(3, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator(")vD,");
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('C', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('C', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals("C", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getNullString());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals('C', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals(")vD,", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals('C', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals("", cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isNullStringSet());
      assertEquals(")vD,", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertEquals(',', cSVFormat7.getDelimiter());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat7.getQuoteMode());
      assertTrue(cSVFormat7.isNullStringSet());
      assertEquals('C', (char)cSVFormat7.getQuoteCharacter());
      assertEquals("", cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertNull(cSVFormat7.getCommentMarker());
      assertEquals(")vD,", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertNotNull(cSVFormat7);
      assertEquals(3, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertTrue(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      
      boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(boolean0);
      assertEquals(3, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreHeaderCase(false);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('C', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('C', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals("C", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getNullString());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals('C', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals(")vD,", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals('C', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals("", cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isNullStringSet());
      assertEquals(")vD,", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertEquals(',', cSVFormat7.getDelimiter());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat7.getQuoteMode());
      assertTrue(cSVFormat7.isNullStringSet());
      assertEquals('C', (char)cSVFormat7.getQuoteCharacter());
      assertEquals("", cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertNull(cSVFormat7.getCommentMarker());
      assertEquals(")vD,", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertTrue(cSVFormat8.isNullStringSet());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertEquals(")vD,", cSVFormat8.getRecordSeparator());
      assertEquals('C', (char)cSVFormat8.getQuoteCharacter());
      assertFalse(cSVFormat8.getTrim());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertEquals("", cSVFormat8.getNullString());
      assertNull(cSVFormat8.getEscapeCharacter());
      assertEquals(',', cSVFormat8.getDelimiter());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertNull(cSVFormat8.getQuoteMode());
      assertNull(cSVFormat8.getCommentMarker());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertFalse(cSVFormat8.isEscapeCharacterSet());
      assertNotNull(cSVFormat8);
      assertEquals(3, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat8);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertTrue(cSVFormat5.equals((Object)cSVFormat7));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertTrue(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertTrue(cSVFormat8.equals((Object)cSVFormat7));
      assertTrue(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      
      // Undeclared exception!
      try { 
        CSVFormat.valueOf(")vD,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.)vD,
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVFormat0);
      
      boolean boolean0 = cSVFormat0.isNullStringSet();
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('v');
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("v", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      objectArray0[0] = (Object) cSVFormat0;
      String string0 = cSVFormat0.toString();
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
      assertNotNull(string0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray1[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray1[2] = (Object) cSVFormat1;
      String string1 = cSVFormat2.format(objectArray1);
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNotNull(string1);
      assertEquals(3, objectArray1.length);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertSame(cSVFormat2, cSVFormat0);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(string1.equals((Object)string0));
      
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('v');
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("v", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("v", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('v', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getNullString());
      assertNotNull(cSVFormat3);
      assertSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("v", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("v", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('v', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertEquals("v", cSVFormat4.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals('v', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNotNull(cSVFormat4);
      assertSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat0.withCommentMarker('7');
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertEquals('7', (char)cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertNull(cSVFormat5.getNullString());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertTrue(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertTrue(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat6 = cSVFormat4.withHeader(class0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertNull(cSVFormat6.getQuoteMode());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertEquals('v', (char)cSVFormat6.getEscapeCharacter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNull(cSVFormat6.getNullString());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertEquals("v", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("v", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("v", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('v', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertEquals("v", cSVFormat4.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals('v', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNotNull(cSVFormat6);
      assertSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat7 = cSVFormat4.withQuoteMode(quoteMode0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat7.getCommentMarker());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat7.getQuoteMode());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.getTrim());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertEquals('v', (char)cSVFormat7.getEscapeCharacter());
      assertTrue(cSVFormat7.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat7.getNullString());
      assertFalse(cSVFormat7.isNullStringSet());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertEquals("v", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("v", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("v", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('v', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertEquals("v", cSVFormat4.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals('v', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNotNull(cSVFormat7);
      assertSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(69);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      int int0 = 1231;
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", 376, 1231);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNotNull(cSVFormat0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(Q3E/fF?I";
      stringArray0[1] = "org.apache.commons.csv.QuoteMode";
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertNotNull(cSVFormat3);
      assertEquals(2, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD_CSV.withCommentMarker(' ');
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertTrue(cSVFormat4.isCommentMarkerSet());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(' ', (char)cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNotNull(cSVFormat4);
      assertEquals(2, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNotNull(cSVFormat5);
      assertEquals(2, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      
      CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames();
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals("\r\n", cSVFormat6.getRecordSeparator());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertNull(cSVFormat6.getNullString());
      assertTrue(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertNull(cSVFormat6.getQuoteMode());
      assertNotNull(cSVFormat6);
      assertEquals(2, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertTrue(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      
      CSVFormat cSVFormat7 = cSVFormat6.withDelimiter('r');
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals("\r\n", cSVFormat6.getRecordSeparator());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertNull(cSVFormat6.getNullString());
      assertTrue(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertEquals('r', cSVFormat7.getDelimiter());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertTrue(cSVFormat7.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat7.getCommentMarker());
      assertEquals("\r\n", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertNull(cSVFormat7.getQuoteMode());
      assertNull(cSVFormat7.getNullString());
      assertTrue(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.isNullStringSet());
      assertNotNull(cSVFormat7);
      assertEquals(2, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertTrue(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertTrue(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      
      String string0 = cSVFormat7.INFORMIX_UNLOAD_CSV.format(stringArray0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals("\r\n", cSVFormat6.getRecordSeparator());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertNull(cSVFormat6.getNullString());
      assertTrue(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertEquals('r', cSVFormat7.getDelimiter());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertTrue(cSVFormat7.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat7.getCommentMarker());
      assertEquals("\r\n", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertNull(cSVFormat7.getQuoteMode());
      assertNull(cSVFormat7.getNullString());
      assertTrue(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.isNullStringSet());
      assertEquals("\"(Q3E/fF?I\",org.apache.commons.csv.QuoteMode", string0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertTrue(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat7));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertTrue(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      
      Character character0 = cSVFormat7.getEscapeCharacter();
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals("\r\n", cSVFormat6.getRecordSeparator());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertNull(cSVFormat6.getNullString());
      assertTrue(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertEquals('r', cSVFormat7.getDelimiter());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertTrue(cSVFormat7.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat7.getCommentMarker());
      assertEquals("\r\n", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertNull(cSVFormat7.getQuoteMode());
      assertNull(cSVFormat7.getNullString());
      assertTrue(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.isNullStringSet());
      assertNull(character0);
      assertEquals(2, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertTrue(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat7));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertTrue(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      
      String string1 = "$VALUES";
      CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator("$VALUES");
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertNull(cSVFormat8.getNullString());
      assertFalse(cSVFormat8.isNullStringSet());
      assertEquals("$VALUES", cSVFormat8.getRecordSeparator());
      assertFalse(cSVFormat8.isEscapeCharacterSet());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertTrue(cSVFormat8.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertNull(cSVFormat8.getQuoteMode());
      assertNull(cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.getTrim());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertNull(cSVFormat8.getCommentMarker());
      assertEquals(',', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertNotNull(cSVFormat8);
      assertEquals(2, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertTrue(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      
      String string2 = cSVFormat5.getNullString();
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(string2);
      assertEquals(2, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat8));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat8));
      assertTrue(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      
      CSVFormat cSVFormat9 = cSVFormat5.withIgnoreHeaderCase();
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertFalse(cSVFormat9.getIgnoreEmptyLines());
      assertNull(cSVFormat9.getEscapeCharacter());
      assertNull(cSVFormat9.getNullString());
      assertFalse(cSVFormat9.getTrim());
      assertEquals("\r\n", cSVFormat9.getRecordSeparator());
      assertNull(cSVFormat9.getCommentMarker());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertTrue(cSVFormat9.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat9.getDelimiter());
      assertFalse(cSVFormat9.isEscapeCharacterSet());
      assertFalse(cSVFormat9.isNullStringSet());
      assertNull(cSVFormat9.getQuoteMode());
      assertEquals('\"', (char)cSVFormat9.getQuoteCharacter());
      assertTrue(cSVFormat9.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNotNull(cSVFormat9);
      assertEquals(2, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat9);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat9);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      assertTrue(cSVFormat9.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat8));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat8));
      assertTrue(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      
      CSVFormat cSVFormat10 = cSVFormat0.DEFAULT.withSkipHeaderRecord();
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat10.getNullString());
      assertFalse(cSVFormat10.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat10.getQuoteCharacter());
      assertFalse(cSVFormat10.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat10.getAllowMissingColumnNames());
      assertFalse(cSVFormat10.getTrailingDelimiter());
      assertFalse(cSVFormat10.getTrim());
      assertFalse(cSVFormat10.isNullStringSet());
      assertNull(cSVFormat10.getEscapeCharacter());
      assertNull(cSVFormat10.getCommentMarker());
      assertEquals("\r\n", cSVFormat10.getRecordSeparator());
      assertEquals(',', cSVFormat10.getDelimiter());
      assertTrue(cSVFormat10.getIgnoreEmptyLines());
      assertNull(cSVFormat10.getQuoteMode());
      assertFalse(cSVFormat10.getIgnoreHeaderCase());
      assertTrue(cSVFormat10.getSkipHeaderRecord());
      assertTrue(cSVFormat10.isQuoteCharacterSet());
      assertFalse(cSVFormat10.isEscapeCharacterSet());
      assertNotNull(cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat10, cSVFormat2);
      assertNotSame(cSVFormat10, cSVFormat7);
      assertNotSame(cSVFormat10, cSVFormat6);
      assertNotSame(cSVFormat10, cSVFormat5);
      assertNotSame(cSVFormat10, cSVFormat1);
      assertNotSame(cSVFormat10, cSVFormat4);
      assertNotSame(cSVFormat10, cSVFormat9);
      assertNotSame(cSVFormat10, cSVFormat8);
      assertNotSame(cSVFormat10, cSVFormat3);
      assertNotSame(cSVFormat10, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat10.equals((Object)cSVFormat2));
      assertFalse(cSVFormat10.equals((Object)cSVFormat7));
      assertFalse(cSVFormat10.equals((Object)cSVFormat6));
      assertFalse(cSVFormat10.equals((Object)cSVFormat5));
      assertFalse(cSVFormat10.equals((Object)cSVFormat1));
      assertFalse(cSVFormat10.equals((Object)cSVFormat4));
      assertFalse(cSVFormat10.equals((Object)cSVFormat9));
      assertFalse(cSVFormat10.equals((Object)cSVFormat8));
      assertFalse(cSVFormat10.equals((Object)cSVFormat3));
      assertFalse(cSVFormat10.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat11 = cSVFormat10.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines(true);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat10.getNullString());
      assertFalse(cSVFormat10.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat10.getQuoteCharacter());
      assertFalse(cSVFormat10.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat10.getAllowMissingColumnNames());
      assertFalse(cSVFormat10.getTrailingDelimiter());
      assertFalse(cSVFormat10.getTrim());
      assertFalse(cSVFormat10.isNullStringSet());
      assertNull(cSVFormat10.getEscapeCharacter());
      assertNull(cSVFormat10.getCommentMarker());
      assertEquals("\r\n", cSVFormat10.getRecordSeparator());
      assertEquals(',', cSVFormat10.getDelimiter());
      assertTrue(cSVFormat10.getIgnoreEmptyLines());
      assertNull(cSVFormat10.getQuoteMode());
      assertFalse(cSVFormat10.getIgnoreHeaderCase());
      assertTrue(cSVFormat10.getSkipHeaderRecord());
      assertTrue(cSVFormat10.isQuoteCharacterSet());
      assertFalse(cSVFormat10.isEscapeCharacterSet());
      assertFalse(cSVFormat11.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat11.isQuoteCharacterSet());
      assertNull(cSVFormat11.getEscapeCharacter());
      assertFalse(cSVFormat11.isCommentMarkerSet());
      assertFalse(cSVFormat11.getIgnoreHeaderCase());
      assertFalse(cSVFormat11.getTrailingDelimiter());
      assertEquals("\n", cSVFormat11.getRecordSeparator());
      assertNull(cSVFormat11.getNullString());
      assertEquals(',', cSVFormat11.getDelimiter());
      assertNull(cSVFormat11.getQuoteMode());
      assertFalse(cSVFormat11.getTrim());
      assertFalse(cSVFormat11.isNullStringSet());
      assertEquals('\"', (char)cSVFormat11.getQuoteCharacter());
      assertFalse(cSVFormat11.getAllowMissingColumnNames());
      assertNull(cSVFormat11.getCommentMarker());
      assertTrue(cSVFormat11.getIgnoreEmptyLines());
      assertFalse(cSVFormat11.getSkipHeaderRecord());
      assertFalse(cSVFormat11.isEscapeCharacterSet());
      assertNotNull(cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat10, cSVFormat2);
      assertNotSame(cSVFormat10, cSVFormat7);
      assertNotSame(cSVFormat10, cSVFormat6);
      assertNotSame(cSVFormat10, cSVFormat5);
      assertNotSame(cSVFormat10, cSVFormat1);
      assertNotSame(cSVFormat10, cSVFormat4);
      assertNotSame(cSVFormat10, cSVFormat11);
      assertNotSame(cSVFormat10, cSVFormat9);
      assertNotSame(cSVFormat10, cSVFormat8);
      assertNotSame(cSVFormat10, cSVFormat3);
      assertNotSame(cSVFormat10, cSVFormat0);
      assertNotSame(cSVFormat11, cSVFormat8);
      assertNotSame(cSVFormat11, cSVFormat10);
      assertNotSame(cSVFormat11, cSVFormat3);
      assertNotSame(cSVFormat11, cSVFormat5);
      assertNotSame(cSVFormat11, cSVFormat2);
      assertNotSame(cSVFormat11, cSVFormat4);
      assertNotSame(cSVFormat11, cSVFormat7);
      assertNotSame(cSVFormat11, cSVFormat6);
      assertNotSame(cSVFormat11, cSVFormat0);
      assertNotSame(cSVFormat11, cSVFormat9);
      assertNotSame(cSVFormat11, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat10.equals((Object)cSVFormat2));
      assertFalse(cSVFormat10.equals((Object)cSVFormat7));
      assertFalse(cSVFormat10.equals((Object)cSVFormat6));
      assertFalse(cSVFormat10.equals((Object)cSVFormat5));
      assertFalse(cSVFormat10.equals((Object)cSVFormat1));
      assertFalse(cSVFormat10.equals((Object)cSVFormat4));
      assertFalse(cSVFormat10.equals((Object)cSVFormat9));
      assertFalse(cSVFormat10.equals((Object)cSVFormat8));
      assertFalse(cSVFormat10.equals((Object)cSVFormat3));
      assertFalse(cSVFormat10.equals((Object)cSVFormat0));
      assertFalse(cSVFormat11.equals((Object)cSVFormat8));
      assertFalse(cSVFormat11.equals((Object)cSVFormat10));
      assertFalse(cSVFormat11.equals((Object)cSVFormat3));
      assertFalse(cSVFormat11.equals((Object)cSVFormat5));
      assertFalse(cSVFormat11.equals((Object)cSVFormat2));
      assertFalse(cSVFormat11.equals((Object)cSVFormat4));
      assertFalse(cSVFormat11.equals((Object)cSVFormat7));
      assertFalse(cSVFormat11.equals((Object)cSVFormat6));
      assertFalse(cSVFormat11.equals((Object)cSVFormat0));
      assertFalse(cSVFormat11.equals((Object)cSVFormat9));
      assertFalse(cSVFormat11.equals((Object)cSVFormat1));
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.QuoteMode", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getNullString());
      assertEquals(QuoteMode.NONE, cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat0.INFORMIX_UNLOAD.withHeader(resultSet0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withHeader((String[]) null);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrim());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      
      PipedReader pipedReader0 = new PipedReader(9);
      assertNotNull(pipedReader0);
      
      CSVParser cSVParser0 = cSVFormat2.EXCEL.parse(pipedReader0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getNullString());
      assertEquals(QuoteMode.NONE, cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertNotNull(cSVParser0);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      
      PipedReader pipedReader1 = new PipedReader(9);
      assertNotNull(pipedReader1);
      assertFalse(pipedReader1.equals((Object)pipedReader0));
      
      CSVParser cSVParser1 = cSVFormat2.parse(pipedReader1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getNullString());
      assertEquals(QuoteMode.NONE, cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(0L, cSVParser1.getRecordNumber());
      assertNotNull(cSVParser1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(pipedReader1, pipedReader0);
      assertNotSame(cSVParser1, cSVParser0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(pipedReader1.equals((Object)pipedReader0));
      assertFalse(cSVParser1.equals((Object)cSVParser0));
      
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getNullString());
      assertEquals(QuoteMode.NONE, cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals(QuoteMode.NONE, cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getNullString());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertEquals('|', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat5.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertTrue(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNotNull(cSVFormat0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      boolean boolean0 = cSVFormat0.getTrailingDelimiter();
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(boolean0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      assertNotNull(cSVFormat_PredefinedArray0);
      assertEquals(7, cSVFormat_PredefinedArray0.length);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('3');
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('3', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('3', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('3', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('3', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('3', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('3', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getQuoteMode());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('3', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('3', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('3', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals('3', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNull(cSVFormat4.getQuoteMode());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CSVParser cSVParser0 = cSVFormat4.TDF.parse(stringReader0);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('3', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('3', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('3', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals('3', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertNotNull(cSVParser0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("");
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('3', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('3', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('3', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals('3', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.isNullStringSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals("", cSVFormat5.getRecordSeparator());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getQuoteMode());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertTrue(cSVFormat5.getSkipHeaderRecord());
      assertEquals('3', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getCommentMarker());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      
      boolean boolean0 = cSVFormat5.equals("");
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('3', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('3', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('3', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals('3', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.isNullStringSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals("", cSVFormat5.getRecordSeparator());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getQuoteMode());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertTrue(cSVFormat5.getSkipHeaderRecord());
      assertEquals('3', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(boolean0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('%');
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('%', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('%', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('%', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CSVParser cSVParser0 = cSVFormat0.DEFAULT.parse(stringReader0);
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertNotNull(cSVParser0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      
      Character character0 = Character.valueOf('=');
      assertEquals('=', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('%', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('%', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertEquals('%', cSVFormat3.getDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals('=', (char)cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      
      MockFile mockFile0 = new MockFile("O0q+#G+G[");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char char0 = '<';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('<', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNotNull(cSVFormat0);
      
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withRecordSeparator("N");
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('<', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals("N", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('<', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('<', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('<', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('<', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals('<', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      
      Character character0 = cSVFormat3.getEscapeCharacter();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('<', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('<', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals('<', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(character0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      assertNotNull(cSVFormat_PredefinedArray0);
      assertEquals(7, cSVFormat_PredefinedArray0.length);
      
      CSVFormat.Predefined[] cSVFormat_PredefinedArray1 = CSVFormat.Predefined.values();
      assertNotNull(cSVFormat_PredefinedArray1);
      assertEquals(7, cSVFormat_PredefinedArray1.length);
      assertNotSame(cSVFormat_PredefinedArray1, cSVFormat_PredefinedArray0);
      assertFalse(cSVFormat_PredefinedArray1.equals((Object)cSVFormat_PredefinedArray0));
      
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('<', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('<', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals('<', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getQuoteCharacter());
      assertEquals('<', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNull(cSVFormat4.getNullString());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('<', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('<', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals('<', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertEquals('<', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertTrue(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertTrue(cSVFormat5.equals((Object)cSVFormat2));
      
      String[] stringArray0 = cSVFormat3.getHeader();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('<', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('<', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals('<', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(stringArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      
      URI uRI0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      
      boolean boolean0 = true;
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals('|', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[4] = object2;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat4;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat5 = cSVFormat0.withHeaderComments(objectArray0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getNullString());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertEquals('|', cSVFormat5.getDelimiter());
      assertEquals('\\', (char)cSVFormat5.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertNotNull(cSVFormat5);
      assertEquals(9, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat5.equals((Object)cSVFormat3));
      assertTrue(cSVFormat5.equals((Object)cSVFormat0));
      assertTrue(cSVFormat5.equals((Object)cSVFormat1));
      assertTrue(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      
      CSVFormat cSVFormat6 = cSVFormat4.withNullString("zPJN");
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertNull(cSVFormat6.getCommentMarker());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertTrue(cSVFormat6.isNullStringSet());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertEquals("zPJN", cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertTrue(cSVFormat6.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertEquals('|', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals('|', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat5));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      
      CSVFormat cSVFormat7 = cSVFormat6.withAllowMissingColumnNames();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertNull(cSVFormat6.getCommentMarker());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertTrue(cSVFormat6.isNullStringSet());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertEquals("zPJN", cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertTrue(cSVFormat6.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertEquals('|', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertNull(cSVFormat7.getQuoteMode());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertTrue(cSVFormat7.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat7.getCommentMarker());
      assertTrue(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.getTrim());
      assertEquals("zPJN", cSVFormat7.getNullString());
      assertEquals('\\', (char)cSVFormat7.getEscapeCharacter());
      assertTrue(cSVFormat7.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat7.getRecordSeparator());
      assertEquals('|', cSVFormat7.getDelimiter());
      assertTrue(cSVFormat7.isNullStringSet());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals('|', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat5));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertTrue(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      
      CSVFormat cSVFormat8 = cSVFormat6.withHeaderComments(objectArray0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertNull(cSVFormat6.getCommentMarker());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertTrue(cSVFormat6.isNullStringSet());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertEquals("zPJN", cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertTrue(cSVFormat6.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertEquals('|', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals('|', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertTrue(cSVFormat8.isEscapeCharacterSet());
      assertEquals('|', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat8.getRecordSeparator());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertTrue(cSVFormat8.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertNull(cSVFormat8.getCommentMarker());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertTrue(cSVFormat8.isNullStringSet());
      assertNull(cSVFormat8.getQuoteMode());
      assertEquals("zPJN", cSVFormat8.getNullString());
      assertEquals('\\', (char)cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.getTrim());
      assertTrue(cSVFormat8.getTrailingDelimiter());
      assertNotNull(cSVFormat8);
      assertEquals(9, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat6, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertTrue(cSVFormat6.equals((Object)cSVFormat7));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertTrue(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertTrue(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      
      String string0 = cSVFormat8.toString();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertNull(cSVFormat6.getCommentMarker());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertTrue(cSVFormat6.isNullStringSet());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertEquals("zPJN", cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertTrue(cSVFormat6.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertEquals('|', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals('|', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertTrue(cSVFormat8.isEscapeCharacterSet());
      assertEquals('|', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat8.getRecordSeparator());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertTrue(cSVFormat8.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertNull(cSVFormat8.getCommentMarker());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertTrue(cSVFormat8.isNullStringSet());
      assertNull(cSVFormat8.getQuoteMode());
      assertEquals("zPJN", cSVFormat8.getNullString());
      assertEquals('\\', (char)cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.getTrim());
      assertTrue(cSVFormat8.getTrailingDelimiter());
      assertNotNull(string0);
      assertEquals(9, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat6, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertTrue(cSVFormat6.equals((Object)cSVFormat8));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertTrue(cSVFormat6.equals((Object)cSVFormat7));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat8));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertTrue(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertTrue(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      
      String string1 = cSVFormat8.format(objectArray0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertNull(cSVFormat6.getCommentMarker());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertTrue(cSVFormat6.isNullStringSet());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertEquals("zPJN", cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertTrue(cSVFormat6.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertEquals('|', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals('|', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertTrue(cSVFormat8.isEscapeCharacterSet());
      assertEquals('|', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat8.getRecordSeparator());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertTrue(cSVFormat8.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertNull(cSVFormat8.getCommentMarker());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertTrue(cSVFormat8.isNullStringSet());
      assertNull(cSVFormat8.getQuoteMode());
      assertEquals("zPJN", cSVFormat8.getNullString());
      assertEquals('\\', (char)cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.getTrim());
      assertTrue(cSVFormat8.getTrailingDelimiter());
      assertNotNull(string1);
      assertEquals(9, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat6, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertTrue(cSVFormat6.equals((Object)cSVFormat8));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertTrue(cSVFormat6.equals((Object)cSVFormat7));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat8));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertTrue(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertTrue(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(string1.equals((Object)string0));
      
      CSVFormat cSVFormat9 = cSVFormat4.withEscape(';');
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals('|', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertTrue(cSVFormat9.isEscapeCharacterSet());
      assertFalse(cSVFormat9.isNullStringSet());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertNull(cSVFormat9.getCommentMarker());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertFalse(cSVFormat9.getTrim());
      assertTrue(cSVFormat9.getTrailingDelimiter());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertNull(cSVFormat9.getNullString());
      assertTrue(cSVFormat9.getIgnoreEmptyLines());
      assertNull(cSVFormat9.getQuoteMode());
      assertEquals(';', (char)cSVFormat9.getEscapeCharacter());
      assertEquals("\n", cSVFormat9.getRecordSeparator());
      assertEquals('|', cSVFormat9.getDelimiter());
      assertEquals('\"', (char)cSVFormat9.getQuoteCharacter());
      assertTrue(cSVFormat9.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat9);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat9);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat8));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      
      try { 
        MockURI.URI("org.apache.commons.csv.CSVFormat@0000000003|java.lang.Object@0000000005|org.apache.commons.csv.CSVFormat@0000000001|java.lang.Object@0000000006|java.lang.Object@0000000007|org.apache.commons.csv.CSVFormat@0000000003|org.apache.commons.csv.CSVFormat@0000000001|org.apache.commons.csv.CSVFormat@0000000004|org.apache.commons.csv.CSVFormat@0000000008|", "org.apache.commons.csv.CSVParser", "org.apache.commons.csv.CSVFormat@0000000003|java.lang.Object@0000000005|org.apache.commons.csv.CSVFormat@0000000001|java.lang.Object@0000000006|java.lang.Object@0000000007|org.apache.commons.csv.CSVFormat@0000000003|org.apache.commons.csv.CSVFormat@0000000001|org.apache.commons.csv.CSVFormat@0000000004|org.apache.commons.csv.CSVFormat@0000000008|", "Delimiter=<|> Escape=<> QuoteChar=<\"> NullString=<zPJN> RecordSeparator=<\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[org.apache.commons.csv.CSVFormat@0000000003, java.lang.Object@0000000005, org.apache.commons.csv.CSVFormat@0000000001, java.lang.Object@0000000006, java.lang.Object@0000000007, org.apache.commons.csv.CSVFormat@0000000003, org.apache.commons.csv.CSVFormat@0000000001, org.apache.commons.csv.CSVFormat@0000000004, org.apache.commons.csv.CSVFormat@0000000008]");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: org.apache.commons.csv.CSVFormat@0000000003|java.lang.Object@0000000005|org.apache.commons.csv.CSVFormat@0000000001|java.lang.Object@0000000006|java.lang.Object@0000000007|org.apache.commons.csv.CSVFormat@0000000003|org.apache.commons.csv.CSVFormat@0000000001|org.apache.commons.csv.CSVFormat@0000000004|org.apache.commons.csv.CSVFormat@0000000008|://org.apache.commons.csv.CSVParserorg.apache.commons.csv.CSVFormat@0000000003%7Cjava.lang.Object@0000000005%7Corg.apache.commons.csv.CSVFormat@0000000001%7Cjava.lang.Object@0000000006%7Cjava.lang.Object@0000000007%7Corg.apache.commons.csv.CSVFormat@0000000003%7Corg.apache.commons.csv.CSVFormat@0000000001%7Corg.apache.commons.csv.CSVFormat@0000000004%7Corg.apache.commons.csv.CSVFormat@0000000008%7C#Delimiter=%3C%7C%3E%20Escape=%3C%3E%20QuoteChar=%3C%22%3E%20NullString=%3CzPJN%3E%20RecordSeparator=%3C%0A%3E%20EmptyLines:ignored%20SurroundingSpaces:ignored%20SkipHeaderRecord:false%20HeaderComments:[org.apache.commons.csv.CSVFormat@0000000003,%20java.lang.Object@0000000005,%20org.apache.commons.csv.CSVFormat@0000000001,%20java.lang.Object@0000000006,%20java.lang.Object@0000000007,%20org.apache.commons.csv.CSVFormat@0000000003,%20org.apache.commons.csv.CSVFormat@0000000001,%20org.apache.commons.csv.CSVFormat@0000000004,%20org.apache.commons.csv.CSVFormat@0000000008]
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNotNull(cSVFormat0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "p@5";
      stringArray0[1] = "h6R<jo2()WU*1C";
      stringArray0[2] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNotNull(cSVFormat1);
      assertEquals(3, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNotNull(cSVFormat2);
      assertEquals(3, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      boolean boolean0 = cSVFormat0.isQuoteCharacterSet();
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(boolean0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('1');
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('1', (char)cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat4 = cSVFormat3.MYSQL.withEscape('1');
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('1', (char)cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('1', (char)cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertEquals("\\N", cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getQuoteMode());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertNull(cSVFormat5.getNullString());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertNotNull(cSVFormat5);
      assertEquals(3, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertTrue(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      
      CSVFormat cSVFormat6 = cSVFormat5.MYSQL.withIgnoreEmptyLines();
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getQuoteMode());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertNull(cSVFormat5.getNullString());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertNull(cSVFormat6.getCommentMarker());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getTrim());
      assertEquals("\\N", cSVFormat6.getNullString());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertTrue(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertNull(cSVFormat6.getQuoteCharacter());
      assertNotNull(cSVFormat6);
      assertEquals(3, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat5));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertTrue(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      
      CSVFormat cSVFormat7 = CSVFormat.newFormat('5');
      assertNull(cSVFormat7.getCommentMarker());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.isNullStringSet());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertNull(cSVFormat7.getQuoteMode());
      assertNull(cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertEquals('5', cSVFormat7.getDelimiter());
      assertNull(cSVFormat7.getRecordSeparator());
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      
      String string0 = cSVFormat7.INFORMIX_UNLOAD_CSV.toString();
      assertNull(cSVFormat7.getCommentMarker());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.isNullStringSet());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertNull(cSVFormat7.getQuoteMode());
      assertNull(cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertEquals('5', cSVFormat7.getDelimiter());
      assertNull(cSVFormat7.getRecordSeparator());
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      assertNotNull(string0);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      
      PipedReader pipedReader0 = new PipedReader(4);
      assertNotNull(pipedReader0);
      
      CSVParser cSVParser0 = cSVFormat7.EXCEL.parse(pipedReader0);
      assertNull(cSVFormat7.getCommentMarker());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.isNullStringSet());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertNull(cSVFormat7.getQuoteMode());
      assertNull(cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertEquals('5', cSVFormat7.getDelimiter());
      assertNull(cSVFormat7.getRecordSeparator());
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertNotNull(cSVParser0);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      
      boolean boolean1 = cSVFormat3.isQuoteCharacterSet();
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('1', (char)cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(boolean1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertTrue(boolean1 == boolean0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      
      String[] stringArray1 = cSVFormat3.getHeaderComments();
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('1', (char)cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(stringArray1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      
      CSVFormat cSVFormat8 = cSVFormat3.withRecordSeparator('b');
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat8.isEscapeCharacterSet());
      assertFalse(cSVFormat8.isNullStringSet());
      assertNull(cSVFormat8.getQuoteMode());
      assertNull(cSVFormat8.getNullString());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertTrue(cSVFormat8.isCommentMarkerSet());
      assertEquals(',', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertNull(cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getTrim());
      assertEquals("b", cSVFormat8.getRecordSeparator());
      assertEquals('1', (char)cSVFormat8.getCommentMarker());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertEquals('1', (char)cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNotNull(cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      
      CSVFormat cSVFormat9 = cSVFormat8.DEFAULT.withDelimiter('1');
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat8.isEscapeCharacterSet());
      assertFalse(cSVFormat8.isNullStringSet());
      assertNull(cSVFormat8.getQuoteMode());
      assertNull(cSVFormat8.getNullString());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertTrue(cSVFormat8.isCommentMarkerSet());
      assertEquals(',', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertNull(cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getTrim());
      assertEquals("b", cSVFormat8.getRecordSeparator());
      assertEquals('1', (char)cSVFormat8.getCommentMarker());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat9.getQuoteCharacter());
      assertNull(cSVFormat9.getNullString());
      assertFalse(cSVFormat9.isNullStringSet());
      assertFalse(cSVFormat9.isEscapeCharacterSet());
      assertTrue(cSVFormat9.getIgnoreEmptyLines());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertEquals('1', cSVFormat9.getDelimiter());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertNull(cSVFormat9.getEscapeCharacter());
      assertNull(cSVFormat9.getCommentMarker());
      assertEquals("\r\n", cSVFormat9.getRecordSeparator());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertFalse(cSVFormat9.getTrim());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat9.getQuoteMode());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertEquals('1', (char)cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNotNull(cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat9);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat9);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat8));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      
      CSVFormat cSVFormat10 = cSVFormat2.withAllowMissingColumnNames(false);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\n", cSVFormat10.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat10.getQuoteCharacter());
      assertFalse(cSVFormat10.getAllowMissingColumnNames());
      assertFalse(cSVFormat10.getTrailingDelimiter());
      assertNull(cSVFormat10.getEscapeCharacter());
      assertNull(cSVFormat10.getNullString());
      assertFalse(cSVFormat10.getTrim());
      assertFalse(cSVFormat10.isNullStringSet());
      assertFalse(cSVFormat10.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat10.getDelimiter());
      assertTrue(cSVFormat10.getIgnoreEmptyLines());
      assertNull(cSVFormat10.getQuoteMode());
      assertNull(cSVFormat10.getCommentMarker());
      assertFalse(cSVFormat10.getSkipHeaderRecord());
      assertFalse(cSVFormat10.getIgnoreHeaderCase());
      assertFalse(cSVFormat10.isCommentMarkerSet());
      assertFalse(cSVFormat10.isEscapeCharacterSet());
      assertTrue(cSVFormat10.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNotNull(cSVFormat10);
      assertEquals(3, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat10, cSVFormat9);
      assertNotSame(cSVFormat10, cSVFormat3);
      assertNotSame(cSVFormat10, cSVFormat1);
      assertNotSame(cSVFormat10, cSVFormat5);
      assertNotSame(cSVFormat10, cSVFormat0);
      assertNotSame(cSVFormat10, cSVFormat6);
      assertNotSame(cSVFormat10, cSVFormat4);
      assertNotSame(cSVFormat10, cSVFormat7);
      assertNotSame(cSVFormat10, cSVFormat2);
      assertNotSame(cSVFormat10, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat10.equals((Object)cSVFormat9));
      assertFalse(cSVFormat10.equals((Object)cSVFormat3));
      assertTrue(cSVFormat10.equals((Object)cSVFormat2));
      assertTrue(cSVFormat10.equals((Object)cSVFormat1));
      assertFalse(cSVFormat10.equals((Object)cSVFormat0));
      assertFalse(cSVFormat10.equals((Object)cSVFormat6));
      assertFalse(cSVFormat10.equals((Object)cSVFormat4));
      assertFalse(cSVFormat10.equals((Object)cSVFormat7));
      assertTrue(cSVFormat10.equals((Object)cSVFormat5));
      assertFalse(cSVFormat10.equals((Object)cSVFormat8));
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat9));
      
      CSVFormat cSVFormat11 = cSVFormat8.INFORMIX_UNLOAD.withCommentMarker('N');
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat8.isEscapeCharacterSet());
      assertFalse(cSVFormat8.isNullStringSet());
      assertNull(cSVFormat8.getQuoteMode());
      assertNull(cSVFormat8.getNullString());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertTrue(cSVFormat8.isCommentMarkerSet());
      assertEquals(',', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertNull(cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getTrim());
      assertEquals("b", cSVFormat8.getRecordSeparator());
      assertEquals('1', (char)cSVFormat8.getCommentMarker());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertEquals('|', cSVFormat11.getDelimiter());
      assertFalse(cSVFormat11.getAllowMissingColumnNames());
      assertEquals('N', (char)cSVFormat11.getCommentMarker());
      assertTrue(cSVFormat11.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat11.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat11.getQuoteCharacter());
      assertFalse(cSVFormat11.getTrailingDelimiter());
      assertFalse(cSVFormat11.getTrim());
      assertFalse(cSVFormat11.isNullStringSet());
      assertNull(cSVFormat11.getNullString());
      assertFalse(cSVFormat11.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat11.isCommentMarkerSet());
      assertTrue(cSVFormat11.getIgnoreEmptyLines());
      assertNull(cSVFormat11.getQuoteMode());
      assertFalse(cSVFormat11.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat11.getEscapeCharacter());
      assertFalse(cSVFormat11.getIgnoreHeaderCase());
      assertTrue(cSVFormat11.isQuoteCharacterSet());
      assertEquals('1', (char)cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNotNull(cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat9);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat10);
      assertNotSame(cSVFormat8, cSVFormat11);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat11, cSVFormat8);
      assertNotSame(cSVFormat11, cSVFormat0);
      assertNotSame(cSVFormat11, cSVFormat9);
      assertNotSame(cSVFormat11, cSVFormat1);
      assertNotSame(cSVFormat11, cSVFormat3);
      assertNotSame(cSVFormat11, cSVFormat5);
      assertNotSame(cSVFormat11, cSVFormat6);
      assertNotSame(cSVFormat11, cSVFormat7);
      assertNotSame(cSVFormat11, cSVFormat4);
      assertNotSame(cSVFormat11, cSVFormat2);
      assertNotSame(cSVFormat11, cSVFormat10);
      assertNotSame(cSVFormat3, cSVFormat9);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat10);
      assertNotSame(cSVFormat3, cSVFormat11);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat9));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat10));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat11.equals((Object)cSVFormat8));
      assertFalse(cSVFormat11.equals((Object)cSVFormat0));
      assertFalse(cSVFormat11.equals((Object)cSVFormat9));
      assertFalse(cSVFormat11.equals((Object)cSVFormat1));
      assertFalse(cSVFormat11.equals((Object)cSVFormat3));
      assertFalse(cSVFormat11.equals((Object)cSVFormat5));
      assertFalse(cSVFormat11.equals((Object)cSVFormat6));
      assertFalse(cSVFormat11.equals((Object)cSVFormat7));
      assertFalse(cSVFormat11.equals((Object)cSVFormat4));
      assertFalse(cSVFormat11.equals((Object)cSVFormat2));
      assertFalse(cSVFormat11.equals((Object)cSVFormat10));
      assertFalse(cSVFormat3.equals((Object)cSVFormat9));
      assertFalse(cSVFormat3.equals((Object)cSVFormat8));
      assertFalse(cSVFormat3.equals((Object)cSVFormat10));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      
      String[] stringArray2 = cSVFormat0.getHeaderComments();
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(stringArray2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat11));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat12 = cSVFormat8.withHeader(stringArray0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat8.isEscapeCharacterSet());
      assertFalse(cSVFormat8.isNullStringSet());
      assertNull(cSVFormat8.getQuoteMode());
      assertNull(cSVFormat8.getNullString());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertTrue(cSVFormat8.isCommentMarkerSet());
      assertEquals(',', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertNull(cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getTrim());
      assertEquals("b", cSVFormat8.getRecordSeparator());
      assertEquals('1', (char)cSVFormat8.getCommentMarker());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertFalse(cSVFormat12.getSkipHeaderRecord());
      assertTrue(cSVFormat12.getIgnoreEmptyLines());
      assertNull(cSVFormat12.getQuoteMode());
      assertEquals(',', cSVFormat12.getDelimiter());
      assertFalse(cSVFormat12.getIgnoreHeaderCase());
      assertTrue(cSVFormat12.isQuoteCharacterSet());
      assertEquals("b", cSVFormat12.getRecordSeparator());
      assertFalse(cSVFormat12.isEscapeCharacterSet());
      assertNull(cSVFormat12.getNullString());
      assertEquals('1', (char)cSVFormat12.getCommentMarker());
      assertEquals('\"', (char)cSVFormat12.getQuoteCharacter());
      assertFalse(cSVFormat12.getTrim());
      assertFalse(cSVFormat12.isNullStringSet());
      assertFalse(cSVFormat12.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat12.getAllowMissingColumnNames());
      assertFalse(cSVFormat12.getTrailingDelimiter());
      assertTrue(cSVFormat12.isCommentMarkerSet());
      assertNull(cSVFormat12.getEscapeCharacter());
      assertEquals('1', (char)cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNotNull(cSVFormat12);
      assertEquals(3, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat12);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat9);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat10);
      assertNotSame(cSVFormat8, cSVFormat11);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat12, cSVFormat3);
      assertNotSame(cSVFormat12, cSVFormat10);
      assertNotSame(cSVFormat12, cSVFormat9);
      assertNotSame(cSVFormat12, cSVFormat1);
      assertNotSame(cSVFormat12, cSVFormat0);
      assertNotSame(cSVFormat12, cSVFormat5);
      assertNotSame(cSVFormat12, cSVFormat11);
      assertNotSame(cSVFormat12, cSVFormat7);
      assertNotSame(cSVFormat12, cSVFormat6);
      assertNotSame(cSVFormat12, cSVFormat4);
      assertNotSame(cSVFormat12, cSVFormat8);
      assertNotSame(cSVFormat12, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat9);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat10);
      assertNotSame(cSVFormat3, cSVFormat11);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat12);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat11));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat9));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat10));
      assertFalse(cSVFormat8.equals((Object)cSVFormat11));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat12.equals((Object)cSVFormat3));
      assertFalse(cSVFormat12.equals((Object)cSVFormat10));
      assertFalse(cSVFormat12.equals((Object)cSVFormat9));
      assertFalse(cSVFormat12.equals((Object)cSVFormat1));
      assertFalse(cSVFormat12.equals((Object)cSVFormat0));
      assertFalse(cSVFormat12.equals((Object)cSVFormat5));
      assertFalse(cSVFormat12.equals((Object)cSVFormat11));
      assertFalse(cSVFormat12.equals((Object)cSVFormat7));
      assertFalse(cSVFormat12.equals((Object)cSVFormat6));
      assertFalse(cSVFormat12.equals((Object)cSVFormat4));
      assertFalse(cSVFormat12.equals((Object)cSVFormat8));
      assertFalse(cSVFormat12.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat9));
      assertFalse(cSVFormat3.equals((Object)cSVFormat8));
      assertFalse(cSVFormat3.equals((Object)cSVFormat10));
      assertFalse(cSVFormat3.equals((Object)cSVFormat11));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("?ZTE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.?ZTE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("QuoteChar=<");
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("QuoteChar=<", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      Character character0 = new Character('3');
      assertEquals('3', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("QuoteChar=<", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertEquals("QuoteChar=<", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('3', (char)cSVFormat3.getEscapeCharacter());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat4 = cSVFormat2.TDF.withNullString(" EmptyLines:ignored");
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("QuoteChar=<", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals(" EmptyLines:ignored", cSVFormat4.getNullString());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat3.withHeader(resultSet0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("QuoteChar=<", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertEquals("QuoteChar=<", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('3', (char)cSVFormat3.getEscapeCharacter());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertEquals('3', (char)cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertEquals("QuoteChar=<", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertTrue(cSVFormat5.equals((Object)cSVFormat3));
      
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces(true);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("QuoteChar=<", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertEquals("QuoteChar=<", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('3', (char)cSVFormat3.getEscapeCharacter());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertEquals('3', (char)cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertEquals("QuoteChar=<", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.isNullStringSet());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertEquals('3', (char)cSVFormat6.getEscapeCharacter());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertEquals("QuoteChar=<", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat6.getCommentMarker());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertNull(cSVFormat6.getQuoteMode());
      assertNull(cSVFormat6.getNullString());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertTrue(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      
      MockFile mockFile0 = new MockFile(" SkipHeaderRecord:");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat6.print((Appendable) mockPrintWriter0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("QuoteChar=<", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertEquals("QuoteChar=<", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('3', (char)cSVFormat3.getEscapeCharacter());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertEquals('3', (char)cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertEquals("QuoteChar=<", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.isNullStringSet());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertEquals('3', (char)cSVFormat6.getEscapeCharacter());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertEquals("QuoteChar=<", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat6.getCommentMarker());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertNull(cSVFormat6.getQuoteMode());
      assertNull(cSVFormat6.getNullString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(" SkipHeaderRecord:", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(" SkipHeaderRecord:", mockFile0.toString());
      assertNotNull(cSVPrinter0);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertTrue(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      
      String string0 = cSVFormat4.toString();
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("QuoteChar=<", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals(" EmptyLines:ignored", cSVFormat4.getNullString());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertEquals("Delimiter=<\t> QuoteChar=<\"> NullString=< EmptyLines:ignored> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
      assertNotNull(string0);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      
      CSVFormat cSVFormat7 = cSVFormat3.withSkipHeaderRecord();
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("QuoteChar=<", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertEquals("QuoteChar=<", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('3', (char)cSVFormat3.getEscapeCharacter());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.isNullStringSet());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertEquals('3', (char)cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertNull(cSVFormat7.getQuoteMode());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getTrim());
      assertEquals("QuoteChar=<", cSVFormat7.getRecordSeparator());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat7.getDelimiter());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertNull(cSVFormat7.getCommentMarker());
      assertTrue(cSVFormat7.getSkipHeaderRecord());
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      
      CSVPrinter cSVPrinter1 = cSVFormat4.print((Appendable) mockPrintWriter0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("QuoteChar=<", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals(" EmptyLines:ignored", cSVFormat4.getNullString());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(" SkipHeaderRecord:", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(" SkipHeaderRecord:", mockFile0.toString());
      assertNotNull(cSVPrinter1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      
      char char0 = cSVFormat4.getDelimiter();
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("QuoteChar=<", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals(" EmptyLines:ignored", cSVFormat4.getNullString());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertEquals('\t', char0);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      
      CSVFormat cSVFormat8 = cSVFormat4.withCommentMarker(character0);
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertNull(cSVFormat8.getQuoteMode());
      assertEquals("\r\n", cSVFormat8.getRecordSeparator());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertTrue(cSVFormat8.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat8.isEscapeCharacterSet());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertEquals('3', (char)cSVFormat8.getCommentMarker());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertTrue(cSVFormat8.isNullStringSet());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertEquals(" EmptyLines:ignored", cSVFormat8.getNullString());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertTrue(cSVFormat8.isCommentMarkerSet());
      assertFalse(cSVFormat8.getTrim());
      assertNull(cSVFormat8.getEscapeCharacter());
      assertEquals('\t', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("QuoteChar=<", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals(" EmptyLines:ignored", cSVFormat4.getNullString());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertNotNull(cSVFormat8);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(character0.equals((Object)char0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat9 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertFalse(cSVFormat9.getTrim());
      assertEquals("QuoteChar=<", cSVFormat9.getRecordSeparator());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertNull(cSVFormat9.getCommentMarker());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      assertEquals(',', cSVFormat9.getDelimiter());
      assertNull(cSVFormat9.getQuoteMode());
      assertNull(cSVFormat9.getNullString());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat9.getEscapeCharacter());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertFalse(cSVFormat9.isNullStringSet());
      assertEquals('\"', (char)cSVFormat9.getQuoteCharacter());
      assertTrue(cSVFormat9.getIgnoreEmptyLines());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertFalse(cSVFormat9.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals("QuoteChar=<", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNotNull(cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      assertNotNull(cSVFormat_PredefinedArray0);
      assertEquals(7, cSVFormat_PredefinedArray0.length);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      char char0 = ';';
      Character character0 = new Character(';');
      assertEquals(';', (char)character0);
      assertNotNull(character0);
      assertTrue(character0.equals((Object)char0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(';', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(character0.equals((Object)char0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withIgnoreEmptyLines(false);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(';', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(character0.equals((Object)char0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      
      CSVFormat cSVFormat4 = cSVFormat3.DEFAULT.withTrailingDelimiter(false);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(';', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(character0.equals((Object)char0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      
      int int0 = (-575);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-575));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -575
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("n^Z");
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("n^Z", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("n^Z", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("n^Z", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      
      Character character0 = cSVFormat2.getQuoteCharacter();
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("n^Z", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("n^Z", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals('\"', (char)character0);
      assertNotNull(character0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isNullStringSet());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat4.isNullStringSet());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertEquals("\\N", cSVFormat4.getNullString());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isQuoteCharacterSet());
      assertNull(cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      
      Object[] objectArray0 = new Object[22];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "zPJN";
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat2;
      CSVFormat cSVFormat5 = cSVFormat3.withHeaderComments(objectArray0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals("\\N", cSVFormat5.getNullString());
      assertEquals('\\', (char)cSVFormat5.getEscapeCharacter());
      assertTrue(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getTrim());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getQuoteMode());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getQuoteCharacter());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertTrue(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertNotNull(cSVFormat5);
      assertEquals(22, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertTrue(cSVFormat5.equals((Object)cSVFormat3));
      assertTrue(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertTrue(cSVFormat5.equals((Object)cSVFormat2));
      
      CSVFormat cSVFormat6 = cSVFormat3.withAllowMissingColumnNames();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertNull(cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentMarker());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat6.getNullString());
      assertTrue(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.isNullStringSet());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertTrue(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat5));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat5));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertTrue(cSVFormat6.equals((Object)cSVFormat3));
      assertTrue(cSVFormat6.equals((Object)cSVFormat2));
      assertTrue(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertTrue(cSVFormat6.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat7 = cSVFormat1.withHeaderComments(objectArray0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat7.getEscapeCharacter());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat7.getNullString());
      assertNull(cSVFormat7.getQuoteMode());
      assertNull(cSVFormat7.getCommentMarker());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertEquals('\t', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertTrue(cSVFormat7.isNullStringSet());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertNotNull(cSVFormat7);
      assertEquals(22, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertTrue(cSVFormat7.equals((Object)cSVFormat6));
      assertTrue(cSVFormat7.equals((Object)cSVFormat2));
      assertTrue(cSVFormat7.equals((Object)cSVFormat5));
      assertTrue(cSVFormat7.equals((Object)cSVFormat3));
      assertTrue(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      
      String string0 = cSVFormat2.toString();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals("Delimiter=<\t> Escape=<\\> NullString=<\\N> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      assertNotNull(string0);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat6));
      assertTrue(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat5));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat6));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      String string1 = cSVFormat6.format(objectArray0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertNull(cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentMarker());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat6.getNullString());
      assertTrue(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.isNullStringSet());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertTrue(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertNotNull(string1);
      assertEquals(22, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertFalse(string1.equals((Object)string0));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat6));
      assertTrue(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat5));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat6));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat5));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertTrue(cSVFormat6.equals((Object)cSVFormat3));
      assertTrue(cSVFormat6.equals((Object)cSVFormat2));
      assertTrue(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertTrue(cSVFormat6.equals((Object)cSVFormat7));
      assertTrue(cSVFormat6.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat8 = cSVFormat7.withEscape('O');
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertNull(cSVFormat8.getQuoteMode());
      assertNull(cSVFormat8.getCommentMarker());
      assertEquals('\t', cSVFormat8.getDelimiter());
      assertEquals("\\N", cSVFormat8.getNullString());
      assertFalse(cSVFormat8.getTrim());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat8.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat8.getRecordSeparator());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertNull(cSVFormat8.getQuoteCharacter());
      assertTrue(cSVFormat8.isNullStringSet());
      assertEquals('O', (char)cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertTrue(cSVFormat8.isEscapeCharacterSet());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat7.getEscapeCharacter());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat7.getNullString());
      assertNull(cSVFormat7.getQuoteMode());
      assertNull(cSVFormat7.getCommentMarker());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertEquals('\t', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertTrue(cSVFormat7.isNullStringSet());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertNotNull(cSVFormat8);
      assertEquals(22, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat8);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertTrue(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertTrue(cSVFormat7.equals((Object)cSVFormat6));
      assertTrue(cSVFormat7.equals((Object)cSVFormat2));
      assertTrue(cSVFormat7.equals((Object)cSVFormat5));
      assertTrue(cSVFormat7.equals((Object)cSVFormat3));
      assertTrue(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      
      String[] stringArray0 = cSVFormat8.getHeader();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertNull(cSVFormat8.getQuoteMode());
      assertNull(cSVFormat8.getCommentMarker());
      assertEquals('\t', cSVFormat8.getDelimiter());
      assertEquals("\\N", cSVFormat8.getNullString());
      assertFalse(cSVFormat8.getTrim());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat8.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat8.getRecordSeparator());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertNull(cSVFormat8.getQuoteCharacter());
      assertTrue(cSVFormat8.isNullStringSet());
      assertEquals('O', (char)cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertTrue(cSVFormat8.isEscapeCharacterSet());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat7.getEscapeCharacter());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat7.getNullString());
      assertNull(cSVFormat7.getQuoteMode());
      assertNull(cSVFormat7.getCommentMarker());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertEquals('\t', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertTrue(cSVFormat7.isNullStringSet());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertNull(stringArray0);
      assertEquals(22, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat8);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertTrue(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat8));
      assertTrue(cSVFormat7.equals((Object)cSVFormat6));
      assertTrue(cSVFormat7.equals((Object)cSVFormat2));
      assertTrue(cSVFormat7.equals((Object)cSVFormat5));
      assertTrue(cSVFormat7.equals((Object)cSVFormat3));
      assertTrue(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withTrailingDelimiter(true);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertTrue(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getQuoteCharacter());
      assertEquals("\\N", cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      
      CSVFormat cSVFormat5 = cSVFormat2.withAllowMissingColumnNames();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat5.isNullStringSet());
      assertTrue(cSVFormat5.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertNull(cSVFormat5.getNullString());
      assertTrue(cSVFormat5.getAllowMissingColumnNames());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      
      CSVFormat cSVFormat6 = cSVFormat5.RFC4180.withTrim(false);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat5.isNullStringSet());
      assertTrue(cSVFormat5.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertNull(cSVFormat5.getNullString());
      assertTrue(cSVFormat5.getAllowMissingColumnNames());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals("\r\n", cSVFormat6.getRecordSeparator());
      assertNull(cSVFormat6.getQuoteMode());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      
      char char0 = '!';
      CSVFormat cSVFormat7 = CSVFormat.newFormat('!');
      assertNull(cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertNull(cSVFormat7.getCommentMarker());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertNull(cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat7.getQuoteMode());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertEquals('!', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.isNullStringSet());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      
      CSVFormat cSVFormat8 = cSVFormat3.withCommentMarker('!');
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertTrue(cSVFormat8.isEscapeCharacterSet());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertNull(cSVFormat8.getQuoteCharacter());
      assertTrue(cSVFormat8.isNullStringSet());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertFalse(cSVFormat8.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat8.getRecordSeparator());
      assertEquals("\\N", cSVFormat8.getNullString());
      assertFalse(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.getTrim());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat8.getTrailingDelimiter());
      assertEquals('\\', (char)cSVFormat8.getEscapeCharacter());
      assertEquals('!', (char)cSVFormat8.getCommentMarker());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertNull(cSVFormat8.getQuoteMode());
      assertTrue(cSVFormat8.isCommentMarkerSet());
      assertEquals('\t', cSVFormat8.getDelimiter());
      assertNotNull(cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertTrue(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      
      CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true);
      assertNull(cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertNull(cSVFormat7.getCommentMarker());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertNull(cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat7.getQuoteMode());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertEquals('!', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.isNullStringSet());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertNull(cSVFormat9.getRecordSeparator());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertNull(cSVFormat9.getCommentMarker());
      assertTrue(cSVFormat9.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat9.getIgnoreEmptyLines());
      assertNull(cSVFormat9.getEscapeCharacter());
      assertFalse(cSVFormat9.getTrim());
      assertNull(cSVFormat9.getQuoteMode());
      assertFalse(cSVFormat9.isEscapeCharacterSet());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertFalse(cSVFormat9.isQuoteCharacterSet());
      assertNull(cSVFormat9.getQuoteCharacter());
      assertEquals('!', cSVFormat9.getDelimiter());
      assertNull(cSVFormat9.getNullString());
      assertFalse(cSVFormat9.isNullStringSet());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertNotNull(cSVFormat9);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat8);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat9);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat8));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat10 = cSVFormat0.withAllowMissingColumnNames();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat10.getTrailingDelimiter());
      assertEquals("\n", cSVFormat10.getRecordSeparator());
      assertTrue(cSVFormat10.isQuoteCharacterSet());
      assertNull(cSVFormat10.getNullString());
      assertTrue(cSVFormat10.getAllowMissingColumnNames());
      assertFalse(cSVFormat10.getTrim());
      assertFalse(cSVFormat10.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat10.getEscapeCharacter());
      assertEquals(',', cSVFormat10.getDelimiter());
      assertFalse(cSVFormat10.getIgnoreHeaderCase());
      assertFalse(cSVFormat10.isCommentMarkerSet());
      assertNull(cSVFormat10.getCommentMarker());
      assertFalse(cSVFormat10.getSkipHeaderRecord());
      assertFalse(cSVFormat10.isNullStringSet());
      assertFalse(cSVFormat10.isEscapeCharacterSet());
      assertTrue(cSVFormat10.getIgnoreEmptyLines());
      assertNull(cSVFormat10.getQuoteMode());
      assertEquals('\"', (char)cSVFormat10.getQuoteCharacter());
      assertNotNull(cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat10, cSVFormat2);
      assertNotSame(cSVFormat10, cSVFormat4);
      assertNotSame(cSVFormat10, cSVFormat1);
      assertNotSame(cSVFormat10, cSVFormat9);
      assertNotSame(cSVFormat10, cSVFormat5);
      assertNotSame(cSVFormat10, cSVFormat7);
      assertNotSame(cSVFormat10, cSVFormat3);
      assertNotSame(cSVFormat10, cSVFormat6);
      assertNotSame(cSVFormat10, cSVFormat0);
      assertNotSame(cSVFormat10, cSVFormat8);
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat10.equals((Object)cSVFormat2));
      assertFalse(cSVFormat10.equals((Object)cSVFormat4));
      assertTrue(cSVFormat10.equals((Object)cSVFormat0));
      assertTrue(cSVFormat10.equals((Object)cSVFormat1));
      assertFalse(cSVFormat10.equals((Object)cSVFormat9));
      assertFalse(cSVFormat10.equals((Object)cSVFormat5));
      assertFalse(cSVFormat10.equals((Object)cSVFormat7));
      assertFalse(cSVFormat10.equals((Object)cSVFormat3));
      assertFalse(cSVFormat10.equals((Object)cSVFormat6));
      assertFalse(cSVFormat10.equals((Object)cSVFormat8));
      
      // Undeclared exception!
      try { 
        cSVFormat10.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames(true);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withTrim();
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getTrim());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withIgnoreHeaderCase(true);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getTrim());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      
      Character character0 = Character.valueOf('S');
      assertEquals('S', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat4 = cSVFormat1.EXCEL.withQuote(character0);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals('S', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreHeaderCase(false);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertTrue(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      
      StringWriter stringWriter0 = new StringWriter(13);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('g');
      assertEquals("g", stringWriter0.toString());
      assertEquals("g", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals("gSSggg", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.capacity());
      assertArrayEquals(new char[] {'g', 'S', 'S', 'g', 'g', 'g'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(6, charArray0.length);
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      assertEquals("gSSggg", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.capacity());
      assertEquals("ggSSggg", stringWriter2.toString());
      assertEquals("ggSSggg", stringWriter0.toString());
      assertEquals("ggSSggg", stringWriter1.toString());
      assertArrayEquals(new char[] {'g', 'S', 'S', 'g', 'g', 'g'}, charArray0);
      assertNotNull(stringWriter2);
      assertEquals(6, charArray0.length);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      
      cSVFormat5.MYSQL.print((Object) cSVFormat3, (Appendable) stringWriter2, false);
      assertEquals("gSSggg", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.capacity());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getTrim());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertArrayEquals(new char[] {'g', 'S', 'S', 'g', 'g', 'g'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertTrue(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      
      CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines();
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertTrue(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.isQuoteCharacterSet());
      assertNull(cSVFormat6.getQuoteCharacter());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.getTrim());
      assertEquals("\\N", cSVFormat6.getNullString());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertNull(cSVFormat6.getCommentMarker());
      assertTrue(cSVFormat6.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      
      boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(boolean0);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      
      Character character1 = cSVFormat1.getCommentMarker();
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(character1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      
      CSVFormat cSVFormat7 = cSVFormat6.withAllowMissingColumnNames(false);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertTrue(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.isQuoteCharacterSet());
      assertNull(cSVFormat6.getQuoteCharacter());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.getTrim());
      assertEquals("\\N", cSVFormat6.getNullString());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertNull(cSVFormat6.getCommentMarker());
      assertTrue(cSVFormat6.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertTrue(cSVFormat7.isNullStringSet());
      assertEquals("\n", cSVFormat7.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat7.getEscapeCharacter());
      assertNull(cSVFormat7.getQuoteMode());
      assertFalse(cSVFormat7.getTrim());
      assertEquals('\t', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertNull(cSVFormat7.getCommentMarker());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat7.getNullString());
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertTrue(cSVFormat7.equals((Object)cSVFormat6));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD.withTrailingDelimiter(true);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withCommentMarker((Character) null);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat4 = cSVFormat1.withQuoteMode(quoteMode0);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals(QuoteMode.MINIMAL, cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat4;
      objectArray0[7] = (Object) cSVFormat3;
      CSVFormat cSVFormat5 = cSVFormat4.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals(QuoteMode.MINIMAL, cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNotNull(cSVFormat5);
      assertEquals(8, objectArray0.length);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat6 = cSVFormat4.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals("\r\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertNull(cSVFormat6.getNullString());
      assertTrue(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals(QuoteMode.MINIMAL, cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      
      cSVFormat6.DEFAULT.hashCode();
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals("\r\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertNull(cSVFormat6.getNullString());
      assertTrue(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals(QuoteMode.MINIMAL, cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      
      Character character0 = cSVFormat1.getCommentMarker();
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(character0);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      
      CSVFormat cSVFormat7 = cSVFormat4.MYSQL.withIgnoreSurroundingSpaces(true);
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertEquals('\t', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertNull(cSVFormat7.getQuoteMode());
      assertEquals('\\', (char)cSVFormat7.getEscapeCharacter());
      assertTrue(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertTrue(cSVFormat7.isNullStringSet());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertNull(cSVFormat7.getCommentMarker());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals(QuoteMode.MINIMAL, cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat8 = cSVFormat2.withIgnoreHeaderCase();
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals('\\', (char)cSVFormat8.getEscapeCharacter());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertNull(cSVFormat8.getQuoteMode());
      assertTrue(cSVFormat8.getTrailingDelimiter());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertTrue(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getTrim());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat8.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertEquals('|', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertNull(cSVFormat8.getNullString());
      assertFalse(cSVFormat8.isNullStringSet());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertTrue(cSVFormat8.isEscapeCharacterSet());
      assertNull(cSVFormat8.getCommentMarker());
      assertNotNull(cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      
      String[] stringArray0 = cSVFormat8.getHeaderComments();
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals('\\', (char)cSVFormat8.getEscapeCharacter());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertNull(cSVFormat8.getQuoteMode());
      assertTrue(cSVFormat8.getTrailingDelimiter());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertTrue(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getTrim());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat8.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertEquals('|', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertNull(cSVFormat8.getNullString());
      assertFalse(cSVFormat8.isNullStringSet());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertTrue(cSVFormat8.isEscapeCharacterSet());
      assertNull(cSVFormat8.getCommentMarker());
      assertNull(stringArray0);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertTrue(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      
      boolean boolean0 = cSVFormat8.isNullStringSet();
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals('\\', (char)cSVFormat8.getEscapeCharacter());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertNull(cSVFormat8.getQuoteMode());
      assertTrue(cSVFormat8.getTrailingDelimiter());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertTrue(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getTrim());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat8.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertEquals('|', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertNull(cSVFormat8.getNullString());
      assertFalse(cSVFormat8.isNullStringSet());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertTrue(cSVFormat8.isEscapeCharacterSet());
      assertNull(cSVFormat8.getCommentMarker());
      assertFalse(boolean0);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertTrue(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      
      String[] stringArray1 = cSVFormat6.getHeader();
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals("\r\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertNull(cSVFormat6.getNullString());
      assertTrue(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals(QuoteMode.MINIMAL, cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat8);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat8));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat8));
      
      CSVFormat cSVFormat9 = cSVFormat5.withTrailingDelimiter();
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals(QuoteMode.MINIMAL, cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat9.getNullString());
      assertEquals('\"', (char)cSVFormat9.getQuoteCharacter());
      assertEquals("\n", cSVFormat9.getRecordSeparator());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertFalse(cSVFormat9.isEscapeCharacterSet());
      assertEquals(',', cSVFormat9.getDelimiter());
      assertTrue(cSVFormat9.getIgnoreEmptyLines());
      assertNull(cSVFormat9.getQuoteMode());
      assertNull(cSVFormat9.getCommentMarker());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat9.getEscapeCharacter());
      assertFalse(cSVFormat9.getTrim());
      assertFalse(cSVFormat9.isNullStringSet());
      assertTrue(cSVFormat9.getTrailingDelimiter());
      assertNotNull(cSVFormat9);
      assertEquals(8, objectArray0.length);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat9);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat9);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertFalse(cSVFormat5.equals((Object)cSVFormat8));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertTrue(cSVFormat9.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNotNull(cSVFormat0);
      
      boolean boolean0 = cSVFormat0.isNullStringSet();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('v');
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("v", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      String string0 = cSVFormat0.format(objectArray0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      
      boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(boolean1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = cSVFormat0.isNullStringSet();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(boolean2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Character character0 = cSVFormat0.getCommentMarker();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(character0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNotNull(cSVFormat0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      Character character0 = Character.valueOf('B');
      assertEquals('B', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('B', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertNotNull(cSVParser0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNotNull(cSVFormat0);
      
      boolean boolean0 = cSVFormat0.isQuoteCharacterSet();
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(boolean0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withFirstRecordAsHeader();
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter(true);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      
      MockFile mockFile0 = new MockFile("v-NCY:mjea>lF^.e:Mb", "v-NCY:mjea>lF^.e:Mb");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("FQ1", "");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Path path0 = mockFile1.toPath();
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/experiment/FQ1", mockFile1.toString());
      assertEquals("FQ1", mockFile1.getName());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canRead());
      assertEquals("/experiment", mockFile1.getParent());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.exists());
      assertNotNull(path0);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      Path path1 = mockFile1.toPath();
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/experiment/FQ1", mockFile1.toString());
      assertEquals("FQ1", mockFile1.getName());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canRead());
      assertEquals("/experiment", mockFile1.getParent());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.exists());
      assertNotNull(path1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(path1, path0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(path1, charset0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/experiment/FQ1", mockFile1.toString());
      assertEquals("FQ1", mockFile1.getName());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals("/experiment", mockFile1.getParent());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.exists());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(cSVPrinter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(mockFile1, mockFile0);
      assertSame(path1, path0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      cSVFormat2.getQuoteMode();
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      cSVFormat2.println(mockPrintWriter0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/experiment/FQ1", mockFile1.toString());
      assertEquals("FQ1", mockFile1.getName());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals("/experiment", mockFile1.getParent());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.exists());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(mockFile1, mockFile0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      CSVPrinter cSVPrinter1 = cSVFormat3.print((Appendable) mockPrintWriter0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/experiment/FQ1", mockFile1.toString());
      assertEquals("FQ1", mockFile1.getName());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals("/experiment", mockFile1.getParent());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.exists());
      assertNotNull(cSVPrinter1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('@');
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('@', cSVFormat0.getDelimiter());
      assertNotNull(cSVFormat0);
      
      cSVFormat0.hashCode();
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('@', cSVFormat0.getDelimiter());
      
      boolean boolean0 = cSVFormat0.getSkipHeaderRecord();
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('@', cSVFormat0.getDelimiter());
      assertFalse(boolean0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('@', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('@', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("IYm:NShLv%fTWa;L4p");
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('@', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('@', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('@', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("IYm:NShLv%fTWa;L4p", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('@', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('@', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getTrim());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNotNull(cSVFormat0);
      
      char char0 = 'M';
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('M');
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('M', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('M', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('M', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('M');
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('M', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('M', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('M', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals("M", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteMode());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      
      String string0 = null;
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator((String) null);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('M', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('M', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('M', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals("M", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertNull(cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertEquals('M', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getNullString());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      cSVFormat2.INFORMIX_UNLOAD_CSV.hashCode();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('M', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('M', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('M', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('M', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('M', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals("M", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertNull(cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertEquals('M', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals('M', (char)cSVFormat5.getQuoteCharacter());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertTrue(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getNullString());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      
      boolean boolean0 = true;
      CSVFormat cSVFormat6 = cSVFormat4.withAllowMissingColumnNames(true);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('M', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('M', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('M', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals("M", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertNull(cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertEquals('M', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertEquals('M', (char)cSVFormat6.getQuoteCharacter());
      assertTrue(cSVFormat6.getIgnoreHeaderCase());
      assertNull(cSVFormat6.getNullString());
      assertTrue(cSVFormat6.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat6.getQuoteMode());
      assertFalse(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertNull(cSVFormat6.getCommentMarker());
      assertNull(cSVFormat6.getRecordSeparator());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertTrue(cSVFormat6.equals((Object)cSVFormat4));
      
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("The escape character cannot be a line break");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.The escape character cannot be a line break
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNotNull(cSVFormat0);
      
      Character character0 = cSVFormat0.getCommentMarker();
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(character0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = cSVFormat0.MYSQL.format(objectArray0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('>');
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(">", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(">", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentMarker());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withHeader(resultSet0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(">", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentMarker());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertTrue(cSVFormat4.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat5 = cSVFormat2.RFC4180.withIgnoreSurroundingSpaces(false);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(">", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      
      CSVFormat cSVFormat6 = cSVFormat5.INFORMIX_UNLOAD.withTrailingDelimiter(true);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(">", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals('|', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertTrue(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      
      CSVFormat cSVFormat7 = cSVFormat1.withQuote('>');
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat7.getNullString());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.isNullStringSet());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertEquals('\t', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertNull(cSVFormat7.getQuoteMode());
      assertEquals(">", cSVFormat7.getRecordSeparator());
      assertNull(cSVFormat7.getCommentMarker());
      assertTrue(cSVFormat7.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertEquals('>', (char)cSVFormat7.getQuoteCharacter());
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      
      CSVFormat cSVFormat8 = cSVFormat1.MYSQL.withIgnoreSurroundingSpaces(true);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.isQuoteCharacterSet());
      assertFalse(cSVFormat8.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat8.getRecordSeparator());
      assertTrue(cSVFormat8.isNullStringSet());
      assertNull(cSVFormat8.getQuoteCharacter());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertEquals("\\N", cSVFormat8.getNullString());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertTrue(cSVFormat8.isEscapeCharacterSet());
      assertNull(cSVFormat8.getCommentMarker());
      assertTrue(cSVFormat8.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat8.getQuoteMode());
      assertEquals('\\', (char)cSVFormat8.getEscapeCharacter());
      assertEquals('\t', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getTrim());
      assertNotNull(cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      
      boolean boolean0 = cSVFormat2.getIgnoreSurroundingSpaces();
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(">", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(boolean0);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertTrue(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      
      CSVFormat cSVFormat9 = cSVFormat5.withSkipHeaderRecord(false);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(">", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals('\"', (char)cSVFormat9.getQuoteCharacter());
      assertNull(cSVFormat9.getNullString());
      assertFalse(cSVFormat9.isNullStringSet());
      assertFalse(cSVFormat9.isEscapeCharacterSet());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertFalse(cSVFormat9.getTrim());
      assertFalse(cSVFormat9.getIgnoreEmptyLines());
      assertNull(cSVFormat9.getCommentMarker());
      assertEquals("\r\n", cSVFormat9.getRecordSeparator());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertNull(cSVFormat9.getQuoteMode());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat9.getEscapeCharacter());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat9.getDelimiter());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      assertNotNull(cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat9);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertTrue(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat8));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertTrue(cSVFormat9.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      
      cSVFormat9.DEFAULT.hashCode();
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(">", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals('\"', (char)cSVFormat9.getQuoteCharacter());
      assertNull(cSVFormat9.getNullString());
      assertFalse(cSVFormat9.isNullStringSet());
      assertFalse(cSVFormat9.isEscapeCharacterSet());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertFalse(cSVFormat9.getTrim());
      assertFalse(cSVFormat9.getIgnoreEmptyLines());
      assertNull(cSVFormat9.getCommentMarker());
      assertEquals("\r\n", cSVFormat9.getRecordSeparator());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertNull(cSVFormat9.getQuoteMode());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat9.getEscapeCharacter());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat9.getDelimiter());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat9);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertTrue(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      
      CSVFormat cSVFormat10 = cSVFormat9.withIgnoreSurroundingSpaces(true);
      assertFalse(cSVFormat10.getTrailingDelimiter());
      assertFalse(cSVFormat10.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat10.getQuoteCharacter());
      assertFalse(cSVFormat10.isCommentMarkerSet());
      assertFalse(cSVFormat10.getTrim());
      assertFalse(cSVFormat10.isNullStringSet());
      assertFalse(cSVFormat10.getAllowMissingColumnNames());
      assertNull(cSVFormat10.getNullString());
      assertNull(cSVFormat10.getEscapeCharacter());
      assertFalse(cSVFormat10.isEscapeCharacterSet());
      assertEquals(',', cSVFormat10.getDelimiter());
      assertFalse(cSVFormat10.getSkipHeaderRecord());
      assertNull(cSVFormat10.getQuoteMode());
      assertNull(cSVFormat10.getCommentMarker());
      assertTrue(cSVFormat10.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat10.getRecordSeparator());
      assertFalse(cSVFormat10.getIgnoreHeaderCase());
      assertTrue(cSVFormat10.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(">", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals('\"', (char)cSVFormat9.getQuoteCharacter());
      assertNull(cSVFormat9.getNullString());
      assertFalse(cSVFormat9.isNullStringSet());
      assertFalse(cSVFormat9.isEscapeCharacterSet());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertFalse(cSVFormat9.getTrim());
      assertFalse(cSVFormat9.getIgnoreEmptyLines());
      assertNull(cSVFormat9.getCommentMarker());
      assertEquals("\r\n", cSVFormat9.getRecordSeparator());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertNull(cSVFormat9.getQuoteMode());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat9.getEscapeCharacter());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat9.getDelimiter());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      assertNotNull(cSVFormat10);
      assertNotSame(cSVFormat10, cSVFormat9);
      assertNotSame(cSVFormat10, cSVFormat8);
      assertNotSame(cSVFormat10, cSVFormat0);
      assertNotSame(cSVFormat10, cSVFormat7);
      assertNotSame(cSVFormat10, cSVFormat5);
      assertNotSame(cSVFormat10, cSVFormat1);
      assertNotSame(cSVFormat10, cSVFormat3);
      assertNotSame(cSVFormat10, cSVFormat4);
      assertNotSame(cSVFormat10, cSVFormat2);
      assertNotSame(cSVFormat10, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat9);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat10);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat10);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat8);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(13);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat6.print((Appendable) charArrayWriter0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(">", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals('|', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertTrue(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertNotNull(cSVPrinter0);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat9);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat10);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat10);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat8);
      assertNotSame(cSVFormat6, cSVFormat9);
      
      boolean boolean1 = cSVFormat1.getSkipHeaderRecord();
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(boolean1);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat9);
      
      CSVFormat cSVFormat11 = cSVFormat6.EXCEL.withTrailingDelimiter();
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat11.getSkipHeaderRecord());
      assertNull(cSVFormat11.getCommentMarker());
      assertEquals('\"', (char)cSVFormat11.getQuoteCharacter());
      assertEquals("\r\n", cSVFormat11.getRecordSeparator());
      assertTrue(cSVFormat11.isQuoteCharacterSet());
      assertFalse(cSVFormat11.isEscapeCharacterSet());
      assertFalse(cSVFormat11.getIgnoreEmptyLines());
      assertFalse(cSVFormat11.isCommentMarkerSet());
      assertFalse(cSVFormat11.getIgnoreHeaderCase());
      assertTrue(cSVFormat11.getTrailingDelimiter());
      assertEquals(',', cSVFormat11.getDelimiter());
      assertNull(cSVFormat11.getQuoteMode());
      assertNull(cSVFormat11.getNullString());
      assertTrue(cSVFormat11.getAllowMissingColumnNames());
      assertFalse(cSVFormat11.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat11.getTrim());
      assertFalse(cSVFormat11.isNullStringSet());
      assertNull(cSVFormat11.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(">", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals('|', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertTrue(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat11, cSVFormat9);
      assertNotSame(cSVFormat11, cSVFormat0);
      assertNotSame(cSVFormat11, cSVFormat7);
      assertNotSame(cSVFormat11, cSVFormat1);
      assertNotSame(cSVFormat11, cSVFormat5);
      assertNotSame(cSVFormat11, cSVFormat4);
      assertNotSame(cSVFormat11, cSVFormat10);
      assertNotSame(cSVFormat11, cSVFormat8);
      assertNotSame(cSVFormat11, cSVFormat3);
      assertNotSame(cSVFormat11, cSVFormat6);
      assertNotSame(cSVFormat11, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat11);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat9);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat10);
      assertNotSame(cSVFormat5, cSVFormat11);
      assertNotSame(cSVFormat6, cSVFormat11);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat10);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat8);
      assertNotSame(cSVFormat6, cSVFormat9);
      
      CSVFormat cSVFormat12 = cSVFormat1.withRecordSeparator('>');
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat12.getIgnoreHeaderCase());
      assertNull(cSVFormat12.getEscapeCharacter());
      assertTrue(cSVFormat12.isQuoteCharacterSet());
      assertFalse(cSVFormat12.getTrim());
      assertTrue(cSVFormat12.getIgnoreEmptyLines());
      assertFalse(cSVFormat12.getTrailingDelimiter());
      assertFalse(cSVFormat12.isEscapeCharacterSet());
      assertEquals(">", cSVFormat12.getRecordSeparator());
      assertFalse(cSVFormat12.isCommentMarkerSet());
      assertNull(cSVFormat12.getCommentMarker());
      assertFalse(cSVFormat12.isNullStringSet());
      assertEquals('\"', (char)cSVFormat12.getQuoteCharacter());
      assertFalse(cSVFormat12.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat12.getDelimiter());
      assertFalse(cSVFormat12.getSkipHeaderRecord());
      assertNull(cSVFormat12.getNullString());
      assertNull(cSVFormat12.getQuoteMode());
      assertTrue(cSVFormat12.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat12);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat12, cSVFormat5);
      assertNotSame(cSVFormat12, cSVFormat10);
      assertNotSame(cSVFormat12, cSVFormat7);
      assertNotSame(cSVFormat12, cSVFormat11);
      assertNotSame(cSVFormat12, cSVFormat2);
      assertNotSame(cSVFormat12, cSVFormat4);
      assertNotSame(cSVFormat12, cSVFormat6);
      assertNotSame(cSVFormat12, cSVFormat8);
      assertNotSame(cSVFormat12, cSVFormat3);
      assertNotSame(cSVFormat12, cSVFormat9);
      assertNotSame(cSVFormat12, cSVFormat0);
      assertNotSame(cSVFormat12, cSVFormat1);
      
      String string1 = cSVFormat9.toString();
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(">", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals('\"', (char)cSVFormat9.getQuoteCharacter());
      assertNull(cSVFormat9.getNullString());
      assertFalse(cSVFormat9.isNullStringSet());
      assertFalse(cSVFormat9.isEscapeCharacterSet());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertFalse(cSVFormat9.getTrim());
      assertFalse(cSVFormat9.getIgnoreEmptyLines());
      assertNull(cSVFormat9.getCommentMarker());
      assertEquals("\r\n", cSVFormat9.getRecordSeparator());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertNull(cSVFormat9.getQuoteMode());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat9.getEscapeCharacter());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat9.getDelimiter());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", string1);
      assertNotNull(string1);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat12);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat12);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat11);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat12);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat9);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat10);
      assertNotSame(cSVFormat5, cSVFormat11);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat11);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat12);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat10);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat8);
      
      CSVFormat cSVFormat13 = cSVFormat6.withIgnoreSurroundingSpaces(true);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(">", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat13.getNullString());
      assertEquals("\n", cSVFormat13.getRecordSeparator());
      assertEquals('|', cSVFormat13.getDelimiter());
      assertTrue(cSVFormat13.getTrailingDelimiter());
      assertFalse(cSVFormat13.getTrim());
      assertFalse(cSVFormat13.isNullStringSet());
      assertTrue(cSVFormat13.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat13.getQuoteMode());
      assertEquals('\\', (char)cSVFormat13.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat13.getQuoteCharacter());
      assertFalse(cSVFormat13.getSkipHeaderRecord());
      assertTrue(cSVFormat13.getIgnoreEmptyLines());
      assertFalse(cSVFormat13.getAllowMissingColumnNames());
      assertTrue(cSVFormat13.isQuoteCharacterSet());
      assertFalse(cSVFormat13.isCommentMarkerSet());
      assertNull(cSVFormat13.getCommentMarker());
      assertFalse(cSVFormat13.getIgnoreHeaderCase());
      assertTrue(cSVFormat13.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals('|', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertTrue(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat13);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat13);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat12);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat13);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat13);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat11);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat12);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat13, cSVFormat4);
      assertNotSame(cSVFormat13, cSVFormat7);
      assertNotSame(cSVFormat13, cSVFormat11);
      assertNotSame(cSVFormat13, cSVFormat3);
      assertNotSame(cSVFormat13, cSVFormat10);
      assertNotSame(cSVFormat13, cSVFormat2);
      assertNotSame(cSVFormat13, cSVFormat1);
      assertNotSame(cSVFormat13, cSVFormat9);
      assertNotSame(cSVFormat13, cSVFormat8);
      assertNotSame(cSVFormat13, cSVFormat6);
      assertNotSame(cSVFormat13, cSVFormat0);
      assertNotSame(cSVFormat13, cSVFormat12);
      assertNotSame(cSVFormat13, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat13);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat12);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat9);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat10);
      assertNotSame(cSVFormat5, cSVFormat11);
      assertNotSame(cSVFormat6, cSVFormat11);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat10);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat13);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat12);
      assertNotSame(cSVFormat6, cSVFormat8);
      assertNotSame(cSVFormat6, cSVFormat9);
      
      CSVFormat cSVFormat14 = cSVFormat8.withAllowMissingColumnNames(true);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat14.isCommentMarkerSet());
      assertFalse(cSVFormat14.getTrailingDelimiter());
      assertTrue(cSVFormat14.getAllowMissingColumnNames());
      assertFalse(cSVFormat14.getTrim());
      assertEquals("\\N", cSVFormat14.getNullString());
      assertEquals('\\', (char)cSVFormat14.getEscapeCharacter());
      assertTrue(cSVFormat14.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat14.getQuoteMode());
      assertFalse(cSVFormat14.getIgnoreEmptyLines());
      assertFalse(cSVFormat14.getSkipHeaderRecord());
      assertTrue(cSVFormat14.isNullStringSet());
      assertFalse(cSVFormat14.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat14.getRecordSeparator());
      assertNull(cSVFormat14.getQuoteCharacter());
      assertEquals('\t', cSVFormat14.getDelimiter());
      assertFalse(cSVFormat14.getIgnoreHeaderCase());
      assertTrue(cSVFormat14.isEscapeCharacterSet());
      assertNull(cSVFormat14.getCommentMarker());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.isQuoteCharacterSet());
      assertFalse(cSVFormat8.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat8.getRecordSeparator());
      assertTrue(cSVFormat8.isNullStringSet());
      assertNull(cSVFormat8.getQuoteCharacter());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertEquals("\\N", cSVFormat8.getNullString());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertTrue(cSVFormat8.isEscapeCharacterSet());
      assertNull(cSVFormat8.getCommentMarker());
      assertTrue(cSVFormat8.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat8.getQuoteMode());
      assertEquals('\\', (char)cSVFormat8.getEscapeCharacter());
      assertEquals('\t', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getTrim());
      assertNotNull(cSVFormat14);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat14);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat13);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat12);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat13);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat14);
      assertNotSame(cSVFormat14, cSVFormat2);
      assertNotSame(cSVFormat14, cSVFormat4);
      assertNotSame(cSVFormat14, cSVFormat1);
      assertNotSame(cSVFormat14, cSVFormat10);
      assertNotSame(cSVFormat14, cSVFormat3);
      assertNotSame(cSVFormat14, cSVFormat7);
      assertNotSame(cSVFormat14, cSVFormat9);
      assertNotSame(cSVFormat14, cSVFormat11);
      assertNotSame(cSVFormat14, cSVFormat6);
      assertNotSame(cSVFormat14, cSVFormat0);
      assertNotSame(cSVFormat14, cSVFormat13);
      assertNotSame(cSVFormat14, cSVFormat12);
      assertNotSame(cSVFormat14, cSVFormat5);
      assertNotSame(cSVFormat14, cSVFormat8);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat12);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat9);
      assertNotSame(cSVFormat8, cSVFormat14);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat13);
      assertNotSame(cSVFormat8, cSVFormat10);
      assertNotSame(cSVFormat8, cSVFormat11);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat2);
      
      CSVFormat cSVFormat15 = cSVFormat1.withIgnoreEmptyLines();
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(">", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat15.isCommentMarkerSet());
      assertFalse(cSVFormat15.getTrailingDelimiter());
      assertFalse(cSVFormat15.getIgnoreHeaderCase());
      assertNull(cSVFormat15.getQuoteMode());
      assertTrue(cSVFormat15.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat15.getDelimiter());
      assertNull(cSVFormat15.getEscapeCharacter());
      assertNull(cSVFormat15.getNullString());
      assertFalse(cSVFormat15.getTrim());
      assertFalse(cSVFormat15.isNullStringSet());
      assertFalse(cSVFormat15.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat15.getQuoteCharacter());
      assertTrue(cSVFormat15.getIgnoreEmptyLines());
      assertEquals(">", cSVFormat15.getRecordSeparator());
      assertNull(cSVFormat15.getCommentMarker());
      assertFalse(cSVFormat15.getSkipHeaderRecord());
      assertFalse(cSVFormat15.isEscapeCharacterSet());
      assertTrue(cSVFormat15.isQuoteCharacterSet());
      assertNotNull(cSVFormat15);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat14);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat13);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat15);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat12);
      assertNotSame(cSVFormat1, cSVFormat15);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat13);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat14);
      assertNotSame(cSVFormat15, cSVFormat1);
      assertNotSame(cSVFormat15, cSVFormat12);
      assertNotSame(cSVFormat15, cSVFormat8);
      assertNotSame(cSVFormat15, cSVFormat13);
      assertNotSame(cSVFormat15, cSVFormat10);
      assertNotSame(cSVFormat15, cSVFormat9);
      assertNotSame(cSVFormat15, cSVFormat2);
      assertNotSame(cSVFormat15, cSVFormat6);
      assertNotSame(cSVFormat15, cSVFormat14);
      assertNotSame(cSVFormat15, cSVFormat11);
      assertNotSame(cSVFormat15, cSVFormat3);
      assertNotSame(cSVFormat15, cSVFormat5);
      assertNotSame(cSVFormat15, cSVFormat7);
      assertNotSame(cSVFormat15, cSVFormat0);
      assertNotSame(cSVFormat15, cSVFormat4);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('>', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('>', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('>', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('>', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('>', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('>', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      
      String string0 = cSVFormat2.getNullString();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('>', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('>', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('>', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(string0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withHeaderComments(objectArray0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('>', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('>', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('>', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNotNull(cSVFormat3);
      assertEquals(5, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withAllowMissingColumnNames();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('>', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('>', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('>', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNotNull(cSVFormat4);
      assertEquals(5, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat5 = cSVFormat1.INFORMIX_UNLOAD.withHeaderComments(objectArray0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('>', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('>', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat5.getNullString());
      assertEquals('|', cSVFormat5.getDelimiter());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getQuoteMode());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertNotNull(cSVFormat5);
      assertEquals(5, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      
      String string1 = cSVFormat1.RFC4180.toString();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('>', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('>', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", string1);
      assertNotNull(string1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) cSVFormat1;
      objectArray1[1] = (Object) cSVFormat0;
      objectArray1[2] = (Object) cSVFormat2;
      objectArray1[3] = (Object) null;
      objectArray1[4] = (Object) cSVFormat1;
      String string2 = cSVFormat1.format(objectArray1);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('>', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('>', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNotNull(string2);
      assertEquals(5, objectArray1.length);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape('>');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('>')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNotNull(cSVFormat0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Default";
      stringArray0[1] = "";
      stringArray0[2] = "bN/)$e5+wVc`Y{";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = " &s'P)";
      stringArray0[7] = "!`ADifRPO:I1";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [Default, , bN/)$e5+wVc`Y{, , , ,  &s'P), !`ADifRPO:I1]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('J');
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('J', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('F');
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('J', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('J', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('F', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      // Undeclared exception!
      try { 
        cSVFormat1.withDelimiter('F');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('F')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withNullString((String) null);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat4 = cSVFormat1.withAllowMissingColumnNames(true);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertTrue(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat5 = cSVFormat4.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('|', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat5.getEscapeCharacter());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertTrue(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertTrue(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      
      CSVFormat cSVFormat6 = cSVFormat1.TDF.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertNull(cSVFormat6.getCommentMarker());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null, 10, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNotNull(cSVFormat0);
      
      boolean boolean0 = cSVFormat0.isQuoteCharacterSet();
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(boolean0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withFirstRecordAsHeader();
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withHeader(stringArray0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNotNull(cSVFormat3);
      assertEquals(0, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat4 = cSVFormat3.RFC4180.withQuote('n');
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals('n', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNotNull(cSVFormat4);
      assertEquals(0, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat5 = cSVFormat4.DEFAULT.withIgnoreHeaderCase();
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals('n', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertNull(cSVFormat5.getNullString());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertTrue(cSVFormat5.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertNotNull(cSVFormat5);
      assertEquals(0, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      
      CSVFormat cSVFormat6 = cSVFormat5.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals('n', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertNull(cSVFormat5.getNullString());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertTrue(cSVFormat5.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertNull(cSVFormat6.getQuoteMode());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertNull(cSVFormat6.getNullString());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat6);
      assertEquals(0, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      
      CSVFormat cSVFormat7 = cSVFormat0.withHeaderComments((Object[]) null);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat7.getDelimiter());
      assertNull(cSVFormat7.getQuoteMode());
      assertEquals("\r\n", cSVFormat7.getRecordSeparator());
      assertNull(cSVFormat7.getCommentMarker());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertTrue(cSVFormat7.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertNull(cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.isNullStringSet());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertTrue(cSVFormat7.equals((Object)cSVFormat1));
      assertTrue(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      
      int int0 = 65;
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("(2[#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.(2[#
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNotNull(cSVFormat0);
      
      Character character0 = Character.valueOf('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('o', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('o', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertEquals('o', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('o', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertEquals('o', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('o', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat4 = cSVFormat1.TDF.withQuote(character0);
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('o', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals('o', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase();
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('o', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertEquals('o', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('o', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertEquals("\\N", cSVFormat5.getNullString());
      assertNull(cSVFormat5.getCommentMarker());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertEquals('o', (char)cSVFormat5.getEscapeCharacter());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertNull(cSVFormat5.getQuoteCharacter());
      assertTrue(cSVFormat5.isNullStringSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getTrim());
      assertNull(cSVFormat5.getQuoteMode());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertTrue(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(resultSet0);
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('o', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertEquals('o', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('o', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertEquals("\\N", cSVFormat5.getNullString());
      assertNull(cSVFormat5.getCommentMarker());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertEquals('o', (char)cSVFormat5.getEscapeCharacter());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertNull(cSVFormat5.getQuoteCharacter());
      assertTrue(cSVFormat5.isNullStringSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getTrim());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertTrue(cSVFormat6.getIgnoreHeaderCase());
      assertEquals('o', (char)cSVFormat6.getEscapeCharacter());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertEquals("\\N", cSVFormat6.getNullString());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertNull(cSVFormat6.getCommentMarker());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertNull(cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.getTrim());
      assertNull(cSVFormat6.getQuoteMode());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertTrue(cSVFormat6.isNullStringSet());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertTrue(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertTrue(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertTrue(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertTrue(cSVFormat6.equals((Object)cSVFormat3));
      
      MockFile mockFile0 = new MockFile("v0Tbms&uK2/");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      assertNotNull(mockFileWriter0);
      
      cSVFormat6.println(mockFileWriter0);
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('o', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertEquals('o', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('o', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertEquals("\\N", cSVFormat5.getNullString());
      assertNull(cSVFormat5.getCommentMarker());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertEquals('o', (char)cSVFormat5.getEscapeCharacter());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertNull(cSVFormat5.getQuoteCharacter());
      assertTrue(cSVFormat5.isNullStringSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getTrim());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertTrue(cSVFormat6.getIgnoreHeaderCase());
      assertEquals('o', (char)cSVFormat6.getEscapeCharacter());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertEquals("\\N", cSVFormat6.getNullString());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertNull(cSVFormat6.getCommentMarker());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertNull(cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.getTrim());
      assertNull(cSVFormat6.getQuoteMode());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertTrue(cSVFormat6.isNullStringSet());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals("v0Tbms&uK2", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("v0Tbms&uK2", mockFile0.getName());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertTrue(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertTrue(cSVFormat5.equals((Object)cSVFormat3));
      assertTrue(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertTrue(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertTrue(cSVFormat6.equals((Object)cSVFormat3));
      
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat7 = cSVFormat1.withHeader(class0);
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('o', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals('o', (char)cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertTrue(cSVFormat7.isNullStringSet());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat7.getDelimiter());
      assertEquals("\\N", cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getTrim());
      assertNull(cSVFormat7.getCommentMarker());
      assertNull(cSVFormat7.getQuoteMode());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('N');
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals('N', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('{');
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals('N', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals('N', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals("{", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals('N', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals('N', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals("{", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertEquals('N', (char)cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertEquals("{", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('@');
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('@', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNotNull(cSVFormat0);
      
      cSVFormat0.hashCode();
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('@', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      
      boolean boolean0 = cSVFormat0.getSkipHeaderRecord();
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('@', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("Vz+X");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      String[] stringArray0 = cSVFormat0.getHeaderComments();
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('@', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(stringArray0);
      
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('@', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('@', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals(QuoteMode.MINIMAL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("Vz+X", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Vz+X", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      cSVFormat1.println(mockPrintWriter0);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('@', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("Vz+X", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Vz+X", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals('@', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals(QuoteMode.MINIMAL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertSame(mockPrintWriter0, printWriter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      QuoteMode quoteMode1 = QuoteMode.NONE;
      assertEquals(QuoteMode.NONE, quoteMode1);
      assertNotSame(quoteMode1, quoteMode0);
      assertFalse(quoteMode1.equals((Object)quoteMode0));
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("Vz+X", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Vz+X", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNotNull(bufferedWriter0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('@', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('@', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals(QuoteMode.MINIMAL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertEquals('@', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(QuoteMode.MINIMAL, cSVFormat2.getQuoteMode());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(quoteMode0, quoteMode1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(quoteMode0.equals((Object)quoteMode1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('@');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('@')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('_');
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals('_', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNotNull(cSVFormat0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals('_', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals('_', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      boolean boolean0 = false;
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals('_', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals('_', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('_', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker('_');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('_')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) quoteMode0;
      objectArray0[3] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('!');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(')');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat5.withHeader(class0);
      QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
      cSVFormat5.withQuoteMode(quoteMode1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(79);
      CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord(true);
      assertFalse(cSVFormat6.getTrim());
      
      String string0 = cSVFormat3.toString();
      assertEquals("Delimiter=<,> Escape=<!> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
      
      cSVFormat2.hashCode();
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat7 = cSVFormat4.withEscape(character0);
      cSVFormat7.withNullString("org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000004,org.apache.commons.csv.QuoteMode@0000000005,org.apache.commons.csv.CSVFormat@0000000001");
      CSVFormat cSVFormat8 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat9 = cSVFormat2.withHeader((ResultSet) null);
      assertTrue(cSVFormat9.getAllowMissingColumnNames());
      
      cSVFormat7.getQuoteCharacter();
      boolean boolean0 = cSVFormat5.getIgnoreEmptyLines();
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('?');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.EXCEL.withHeader(class0);
      cSVFormat3.INFORMIX_UNLOAD_CSV.withQuote('?');
      cSVFormat2.RFC4180.withHeaderComments(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat4.withEscape('?');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('?')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('');
      cSVFormat1.RFC4180.withDelimiter('');
      char char0 = 'w';
      Character character0 = new Character('w');
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withQuote(character0);
      cSVFormat2.INFORMIX_UNLOAD.withQuote('(');
      MockFile mockFile0 = new MockFile("/", "c");
      MockFile mockFile1 = new MockFile(mockFile0, "/");
      mockFile1.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("Excel");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Excel
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.INFORMIX_UNLOAD.withIgnoreEmptyLines(false);
      boolean boolean0 = false;
      cSVFormat0.EXCEL.withSkipHeaderRecord(false);
      URI uRI0 = MockURI.URI("ALL");
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      // Undeclared exception!
      try { 
        MockURI.resolve(uRI1, "0'=iV+^0z(5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 6: 0'=iV+^0z(5
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withTrailingDelimiter(false);
      MockFile mockFile0 = new MockFile("FQ1", "FQ1");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat1.RFC4180.print(path0, charset0);
      cSVFormat0.getQuoteMode();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      cSVFormat0.println(mockPrintWriter0);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Byte byte0 = new Byte((byte)109);
      boolean boolean0 = cSVFormat2.equals(byte0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(boolean0);
      assertEquals('q', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.RFC4180.withTrim(false);
      CSVFormat.newFormat('!');
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat6 = cSVFormat2.withHeader(class0);
      cSVFormat0.TDF.withEscape('!');
      CSVFormat cSVFormat7 = CSVFormat.valueOf("InformixUnloadCsv");
      MockFile mockFile0 = new MockFile("InformixUnloadCsv");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[0];
      cSVFormat6.INFORMIX_UNLOAD.printRecord(mockPrintStream0, objectArray0);
      cSVFormat4.getHeaderComments();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.withQuoteMode(quoteMode0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("InformixUnloadCsv", (Object[]) null);
      cSVFormat5.println(printWriter0);
      QuoteMode quoteMode1 = QuoteMode.NONE;
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      cSVFormat2.print((Object) quoteMode1, (Appendable) bufferedWriter0, false);
      assertSame(cSVFormat0, cSVFormat7);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
  }
}
