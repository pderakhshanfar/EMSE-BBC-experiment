/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 06:35:05 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("H%a9oF5)S*HN54=", "H%a9oF5)S*HN54=");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('L');
      cSVFormat2.print((Object) cSVFormat0, (Appendable) mockFileWriter0, false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat3.getHeaderComments();
      cSVFormat1.getHeader();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Character.valueOf('{');
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character.valueOf('{');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');
      Object[] objectArray0 = new Object[1];
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.format(objectArray0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      cSVFormat1.getCommentMarker();
      cSVFormat1.withNullString("");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreEmptyLines(false);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat0.withNullString("");
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = '.';
      charArray0[2] = 'a';
      charArray0[3] = 'U';
      charArray0[4] = 'A';
      cSVFormat1.EXCEL.withQuote('a');
      charArray0[5] = 'G';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.equals(charBuffer0);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.withHeader(class0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) charBuffer1, (Appendable) charBuffer0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(';');
      cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat1.withSkipHeaderRecord(false);
      Locale.getISOLanguages();
      Character character0 = Character.valueOf(';');
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same (';')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat.valueOf("MySQL");
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "g";
      cSVFormat0.format(stringArray0);
      cSVFormat1.withCommentMarker('6');
      cSVFormat1.getDelimiter();
      cSVFormat0.withNullString("MySQL");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('*');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      cSVFormat1.equals(cSVFormat0);
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat1.equals(character0);
      Class<Token.Type> class0 = Token.Type.class;
      Class<QuoteMode> class1 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class1);
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.allocate(35);
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      String[] stringArray0 = new String[3];
      Character character0 = Character.valueOf('b');
      cSVFormat0.EXCEL.withEscape(character0);
      stringArray0[0] = "g";
      stringArray0[1] = "Default";
      cSVFormat1.format(stringArray0);
      Short short0 = new Short((short)114);
      cSVFormat1.equals(short0);
      cSVFormat1.withTrailingDelimiter(false);
      cSVFormat1.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      String string0 = "#s)Z,j3|~,Hv";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("#s)Z,j3|~,Hv");
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat5.withTrim();
      String string1 = "pdR00uy{!2lK";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("pdR00uy{!2lK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.pdR00uy{!2lK
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('(');
      Character character0 = new Character('P');
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote('(');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('(')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat2.getNullString();
      // Undeclared exception!
      try { 
        MockURI.URI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.format(stringArray0);
      cSVFormat0.getNullString();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("N\tN\tN\tN\tN\tN\tN\tN", false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, "(startline ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // (startline 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('_');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('_');
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withEscape(character0);
      Character character1 = new Character('-');
      cSVFormat3.INFORMIX_UNLOAD_CSV.withCommentMarker(character1);
      Character character2 = new Character('q');
      cSVFormat1.withEscape(character2);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Delimiter=<";
      stringArray0[4] = "e8tyEe@$qbq7;-~";
      stringArray0[2] = "\r\n";
      stringArray0[3] = "";
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.EXCEL.parse(pipedReader0);
      stringArray0[4] = "z=RE'+MJ0B)ra";
      stringArray0[5] = "+eD/";
      stringArray0[6] = "5\" in ";
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.withHeader(class0);
      cSVFormat1.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('*');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.equals(cSVFormat0);
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat2.withNullString("");
      cSVFormat1.equals(character0);
      Class<Token.Type> class0 = Token.Type.class;
      Class<QuoteMode> class1 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class1);
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('*');
      Character.valueOf('*');
      Integer integer0 = new Integer(575);
      cSVFormat0.equals(integer0);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('#');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("");
      cSVFormat3.withCommentMarker('+');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat4.equals(quoteMode0);
      cSVFormat0.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) quoteMode0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) quoteMode0;
      objectArray0[3] = object0;
      Object object2 = new Object();
      objectArray0[4] = object2;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.valueOf("InformixUnload");
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("InformixUnload");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      Character character0 = new Character('o');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("InformixUnload");
      cSVFormat5.toString();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Delimiter=<|> Escape=<> QuoteChar=<\"> CommentStart=<o> NullString=<InformixUnload> RecordSeparator=<InformixUnload> EmptyLines:ignored SkipHeaderRecord:true", ":{C@");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // :{C@
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\r\n");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      cSVFormat0.println(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.equals(cSVFormat2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat2.equals(cSVFormat3);
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      cSVFormat4.withTrailingDelimiter(true);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('*');
      Character character1 = Character.valueOf('*');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character1);
      cSVFormat1.equals(cSVFormat0);
      PipedReader pipedReader0 = new PipedReader();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('*');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "[_O";
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) character1;
      objectArray0[4] = (Object) "[_O";
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) character0;
      objectArray0[7] = (Object) character1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "f?C)!", objectArray0);
      cSVFormat1.DEFAULT.println(printWriter0);
      StringReader stringReader0 = new StringReader("[_O");
      cSVFormat0.parse(stringReader0);
      Object[] objectArray1 = new Object[0];
      cSVFormat1.format(objectArray1);
      CSVFormat.valueOf("RFC4180");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('+');
      Character character1 = Character.valueOf('+');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character1);
      Object object0 = new Object();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) character0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = CSVFormat.MYSQL;
      cSVFormat4.format(objectArray0);
      Long long0 = Long.valueOf(0L);
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.lang.Character@0000000004");
      cSVFormat2.print((Object) long0, (Appendable) mockPrintStream0, false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('g');
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      File file0 = MockFile.createTempFile("org.apache.commons.csv.Lexer", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      Double double0 = new Double((-974.67373));
      cSVFormat2.print((Object) double0, (Appendable) mockFileWriter0, true);
      cSVFormat2.withIgnoreEmptyLines(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      cSVFormat0.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("J");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('.');
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(true);
      cSVFormat5.withQuote('l');
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat3;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat1.toString();
      cSVFormat5.getEscapeCharacter();
      cSVFormat5.withNullString("f");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "J";
      stringArray0[2] = "M0,_O8{Af";
      stringArray0[2] = "f";
      stringArray0[3] = ".";
      cSVFormat3.withHeader(stringArray0);
      Character.valueOf('x');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      cSVFormat4.format(stringArray0);
      cSVFormat5.withTrailingDelimiter(true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(';');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-118);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("Z");
      cSVFormat3.equals(cSVFormat1);
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker('P');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat4.format(objectArray0);
      cSVFormat4.hashCode();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.INFORMIX_UNLOAD.print((Object) cSVFormat1, (Appendable) pipedWriter0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) resultSet0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat2;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      cSVFormat2.withIgnoreEmptyLines();
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[6] = (Object) cSVFormat_Predefined0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat3.RFC4180.withFirstRecordAsHeader();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat4.EXCEL.hashCode();
      CSVFormat cSVFormat5 = cSVFormat4.RFC4180.withCommentMarker('_');
      cSVFormat2.getTrailingDelimiter();
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat5.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('+');
      Character character1 = Character.valueOf('+');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character1);
      Character character2 = new Character('o');
      Character character3 = Character.valueOf('Z');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-57);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("Z");
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      cSVFormat4.equals(cSVFormat3);
      CSVFormat cSVFormat5 = cSVFormat2.withCommentMarker('8');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)10;
      objectArray0[1] = (Object) (byte)61;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) character3;
      objectArray0[5] = (Object) (byte)61;
      objectArray0[7] = (Object) cSVFormat5;
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(';');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-118);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("Z");
      cSVFormat3.equals(cSVFormat1);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat4.withCommentMarker('d');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) (byte)1;
      cSVFormat1.format(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat2.withQuoteMode(quoteMode0);
      Character character1 = Character.valueOf('d');
      cSVFormat5.INFORMIX_UNLOAD_CSV.withCommentMarker(character1);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat5.withHeader(resultSet0);
      cSVFormat4.withQuote(';');
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(';');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(';');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat3.withNullString("Z");
      cSVFormat3.equals(cSVFormat0);
      cSVFormat2.withCommentMarker('P');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Z";
      objectArray0[1] = (Object) (byte)1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.hashCode();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withFirstRecordAsHeader();
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(stringArray0);
      cSVFormat1.INFORMIX_UNLOAD_CSV.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      cSVFormat2.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1277);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) stringWriter0;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.hashCode();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      cSVFormat3.isNullStringSet();
      Character character0 = new Character('E');
      cSVFormat3.withEscape(character0);
      cSVFormat2.isEscapeCharacterSet();
      cSVFormat3.withIgnoreEmptyLines(false);
      cSVFormat2.withDelimiter('x');
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Character character0 = new Character('A');
      Character.valueOf('c');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      Character character1 = new Character('c');
      Character.valueOf('h');
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      Character character2 = Character.valueOf('B');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character2);
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat5 = cSVFormat2.withQuote(character2);
      cSVFormat5.parse(pipedReader0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) character2;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) character2;
      objectArray0[8] = (Object) cSVFormat4;
      cSVFormat1.format(objectArray0);
      cSVFormat0.withRecordSeparator("E( )5");
      cSVFormat1.withQuote('#');
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      String[] stringArray0 = new String[3];
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat0.equals(cSVFormat2);
      Object object0 = new Object();
      cSVFormat1.format(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat3.equals(cSVFormat4);
      cSVFormat1.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      cSVFormat4.equals(cSVFormat2);
      Object object0 = new Object();
      CSVFormat cSVFormat5 = cSVFormat2.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat3;
      cSVFormat5.format(objectArray0);
      cSVFormat4.equals("org.apache.commons.csv.CSVFormat@0000000007,org.apache.commons.csv.CSVFormat@0000000002,java.lang.Object@0000000008,org.apache.commons.csv.CSVFormat@0000000007");
      CSVFormat.Predefined.values();
      cSVFormat5.withIgnoreEmptyLines();
      cSVFormat5.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter(true);
      MockFile mockFile0 = new MockFile("The escape character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("J");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "J";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFile0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat1;
      cSVFormat4.withHeaderComments(objectArray0);
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("(line ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // (line 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('}');
      Character character0 = new Character('}');
      cSVFormat1.DEFAULT.withQuote(character0);
      cSVFormat1.INFORMIX_UNLOAD_CSV.withIgnoreHeaderCase(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("?lVoyr=F");
      CSVFormat cSVFormat6 = cSVFormat0.withTrailingDelimiter();
      cSVFormat4.withRecordSeparator("\r\n");
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreEmptyLines();
      cSVFormat7.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat8 = cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat8.withFirstRecordAsHeader();
      cSVFormat8.getIgnoreEmptyLines();
      cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat2.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withFirstRecordAsHeader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "g";
      stringArray0[1] = "Default";
      stringArray0[2] = "' must not be null!";
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('D');
      cSVFormat0.format(stringArray0);
      cSVFormat1.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('g');
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) character0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD.withIgnoreEmptyLines();
      cSVFormat4.INFORMIX_UNLOAD_CSV.withEscape('Q');
      cSVFormat3.withQuote('G');
      cSVFormat2.getTrailingDelimiter();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat4.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('_');
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character1 = Character.valueOf('K');
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      cSVFormat4.withCommentMarker(character1);
      cSVFormat4.withCommentMarker(character0);
      cSVFormat2.isNullStringSet();
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator('k');
      CSVFormat cSVFormat6 = CSVFormat.EXCEL;
      cSVFormat4.withNullString("j");
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat7 = cSVFormat5.withQuoteMode(quoteMode0);
      cSVFormat7.withCommentMarker('_');
      cSVFormat7.MYSQL.withRecordSeparator('E');
      QuoteMode quoteMode1 = QuoteMode.ALL;
      cSVFormat7.equals(quoteMode1);
      // Undeclared exception!
      try { 
        cSVFormat2.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String string0 = ") invalid parse sequence";
      Object object0 = new Object();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "g";
      stringArray0[1] = "Default";
      stringArray0[2] = "' must not be null!";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
      Character.valueOf('I');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat3.isNullStringSet();
      cSVFormat2.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("org.apache.commons.csv.Constants");
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(':');
      cSVFormat2.INFORMIX_UNLOAD.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('$');
      Character character0 = new Character('(');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      cSVFormat5.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('N');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD;
      Object object0 = new Object();
      cSVFormat3.equals(object0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = object0;
      cSVFormat0.format(objectArray0);
      Character character0 = Character.valueOf('N');
      cSVFormat3.withQuote(character0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('l');
      cSVFormat2.equals(cSVFormat1);
      Object object0 = new Object();
      String string0 = "The delimiter cannot be a line break";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("The delimiter cannot be a line break");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.The delimiter cannot be a line break
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat2.withTrailingDelimiter(true);
      MockFile mockFile0 = new MockFile("X(%//T_2\"");
      CSVFormat cSVFormat3 = cSVFormat0.EXCEL.withRecordSeparator("X(%//T_2\"");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) mockFile0;
      cSVFormat3.withHeaderComments(objectArray0);
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("X(%//T_2\"");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // X(%//T_2\"
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(true);
      char char0 = 'N';
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('N');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-118);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat2.withNullString(">2Lh@");
      cSVFormat2.equals(cSVFormat0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Z", false);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("\rj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.\rj
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = new Object();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringWriter0;
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) "Delimiter=<";
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "Default";
      objectArray0[4] = (Object) "Default";
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat1.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      Character.valueOf('Z');
      cSVFormat2.withCommentMarker(character0);
      cSVFormat1.withCommentMarker('m');
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat4 = cSVFormat2.MYSQL.withRecordSeparator('Z');
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat5;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat3;
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(';');
      cSVFormat0.withEscape('');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-118);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("Z");
      cSVFormat3.equals(cSVFormat1);
      MockFileWriter mockFileWriter0 = new MockFileWriter("\rj", true);
      boolean boolean0 = true;
      cSVFormat0.print((Object) cSVFormat2, (Appendable) mockFileWriter0, true);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.V
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      String[] stringArray0 = new String[0];
      cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('D');
      cSVFormat0.isNullStringSet();
      Object object0 = new Object();
      cSVFormat3.format(stringArray0);
      cSVFormat2.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
      cSVFormat0.TDF.withTrim(false);
      Character character0 = new Character('^');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.RFC4180.format(objectArray0);
      cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreHeaderCase(false);
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withTrim();
      cSVFormat0.withRecordSeparator("XSH{@x5Y%,@tc8");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat3.withAllowMissingColumnNames();
      cSVFormat0.withHeader(class0);
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat1.withCommentMarker('w');
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("XSH{@x5Y%,@tc8", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "wRlj?XhR[";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wRlj?XhR[");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      char char0 = 'Z';
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('Z');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('p');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat5.withTrailingDelimiter();
      cSVFormat5.withIgnoreSurroundingSpaces();
      // Undeclared exception!
      try { 
        cSVFormat6.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('_');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('_');
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withEscape(character0);
      Character character1 = new Character('A');
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD_CSV.withCommentMarker(character1);
      Character character2 = new Character('q');
      CSVFormat cSVFormat5 = cSVFormat1.withEscape(character2);
      CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker(character1);
      CSVFormat cSVFormat7 = cSVFormat6.withQuote('_');
      cSVFormat7.toString();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.toString();
      CSVFormat cSVFormat8 = cSVFormat1.withCommentMarker('q');
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.isNullStringSet();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat8;
      objectArray0[2] = (Object) "Delimiter=<,> QuoteChar=<\"> CommentStart=<A> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) character2;
      objectArray0[5] = (Object) character0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase(true);
      Object[] objectArray1 = new Object[6];
      cSVFormat4.withHeaderComments(objectArray1);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat3.getIgnoreHeaderCase();
      cSVFormat3.getHeaderComments();
      cSVFormat4.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      char char0 = 'l';
      cSVFormat0.withEscape('l');
      cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.equals(cSVFormat0);
      String string0 = "J'v! YX-$L";
      MockFileWriter mockFileWriter0 = new MockFileWriter("J'v! YX-$L", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      cSVFormat0.print((Object) null, (Appendable) stringWriter1, true);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("J'v! YX-$L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.J'v! YX-$L
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Character character0 = new Character('+');
      Character character1 = Character.valueOf('I');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character1);
      Character character2 = new Character('o');
      Character.valueOf('Z');
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape('I');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('I')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char char0 = '&';
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Character character1 = Character.valueOf('Z');
      cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat1.equals(character1);
      String string0 = null;
      String string1 = null;
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) fileSystemHandling0;
      objectArray0[7] = (Object) fileSystemHandling0;
      objectArray0[8] = (Object) null;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      Object[] objectArray1 = new Object[0];
      cSVFormat1.TDF.withHeaderComments(objectArray1);
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray1);
      cSVFormat3.TDF.withTrim();
      Character character0 = Character.valueOf('!');
      cSVFormat2.withCommentMarker(character0);
      cSVFormat3.getNullString();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(']');
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat3.withQuoteMode(quoteMode0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVParser", "org.apache.commons.csv.CSVParser");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.csv.CSVParser
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase(true);
      Object[] objectArray1 = new Object[6];
      cSVFormat4.withHeaderComments(objectArray1);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat3.getIgnoreHeaderCase();
      cSVFormat3.getHeaderComments();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      cSVFormat5.toString();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('_');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('_');
      cSVFormat2.TDF.withEscape(character0);
      cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat3.equals(cSVFormat2);
      MockFileWriter mockFileWriter0 = new MockFileWriter("J'v! YX-$L", false);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'a';
      StringWriter stringWriter1 = stringWriter0.append('a');
      stringWriter1.append((CharSequence) "J'v! YX-$L");
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat4.print((Object) null, (Appendable) mockFileWriter0, true);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("=Nd}e-:h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.=Nd}e-:h
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      char char0 = 'l';
      cSVFormat1.withEscape('l');
      cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat1.equals(cSVFormat0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("J'v! YX-$L", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      cSVFormat0.print((Object) null, (Appendable) stringWriter1, false);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("J'v! YX-$L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.J'v! YX-$L
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withQuote('J');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('N');
      cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat1.equals(cSVFormat3);
      String string0 = null;
      MockFileWriter mockFileWriter0 = new MockFileWriter("TDF", false);
      cSVFormat2.print((Object) cSVFormat4, (Appendable) mockFileWriter0, false);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.Z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('_');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('_');
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withEscape(character0);
      Character character1 = new Character('A');
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD_CSV.withCommentMarker(character1);
      Character character2 = new Character('q');
      CSVFormat cSVFormat5 = cSVFormat1.withEscape(character2);
      cSVFormat1.toString();
      cSVFormat1.getEscapeCharacter();
      cSVFormat0.withNullString("\r\n");
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter('B');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\r\n";
      stringArray0[1] = "Delimiter=<\t> QuoteChar=<_> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      cSVFormat6.withHeader(stringArray0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat5.withHeader(class0);
      Character.valueOf('+');
      cSVFormat4.isNullStringSet();
      Object object0 = new Object();
      cSVFormat6.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat2.getSkipHeaderRecord();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)115;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat2.getHeader();
      cSVFormat0.getDelimiter();
      CSVFormat cSVFormat3 = CSVFormat.newFormat(',');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V");
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat5.TDF.withHeader(class0);
      CSVFormat cSVFormat6 = cSVFormat5.EXCEL.withHeader((String[]) null);
      cSVFormat6.MYSQL.hashCode();
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat0.withNullString("' must not be null!");
      cSVFormat6.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withIgnoreHeaderCase(false);
      cSVFormat1.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.getIgnoreEmptyLines();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD_CSV.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat1.INFORMIX_UNLOAD.withTrailingDelimiter(false);
      StringReader stringReader0 = new StringReader("p~!}l|eve");
      CSVParser cSVParser0 = cSVFormat1.MYSQL.parse(stringReader0);
      CSVFormat cSVFormat4 = cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat0.getDelimiter();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringReader0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVParser0;
      objectArray0[6] = (Object) cSVFormat3;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) stringReader0;
      cSVFormat4.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      char char0 = 'l';
      cSVFormat1.withEscape('l');
      cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat1.equals(cSVFormat0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("J'v! YX-$L", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      cSVFormat0.print((Object) null, (Appendable) stringWriter1, true);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("J'v! YX-$L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.J'v! YX-$L
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('_');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('_');
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withEscape(character0);
      Character character1 = new Character('A');
      cSVFormat3.INFORMIX_UNLOAD_CSV.withCommentMarker(character1);
      Character character2 = new Character('q');
      CSVFormat cSVFormat4 = cSVFormat1.withEscape(character2);
      cSVFormat1.toString();
      cSVFormat1.getEscapeCharacter();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter('g');
      cSVFormat6.withIgnoreHeaderCase(true);
      cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat5.TDF.withNullString("Delimiter=<\t> QuoteChar=<_> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      cSVFormat6.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[5] = objectArray0[0];
      cSVFormat0.MYSQL.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator('`');
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      cSVFormat3.withNullString("j");
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat5.withCommentMarker('U');
      cSVFormat5.equals(cSVFormat2);
      cSVFormat5.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "z}`-";
      stringArray0[1] = "\r\n";
      stringArray0[2] = "iysz[]o9Ch]d-nU";
      stringArray0[3] = "n'&GQ@Yu%O";
      cSVFormat0.RFC4180.withHeader(stringArray0);
      cSVFormat3.equals(cSVFormat2);
      String string0 = null;
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat1.format(objectArray0);
      cSVFormat0.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.DEFAULT.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class1);
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat2.toString();
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker('N');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('N')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("Smi");
      cSVFormat1.TDF.withQuote('J');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('J');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('W');
      cSVFormat3.toString();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      objectArray0[2] = (Object) cSVFormat3;
      // Undeclared exception!
      try { 
        cSVFormat2.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.withIgnoreEmptyLines(false);
      String string0 = "\r\n";
      MockFile mockFile0 = new MockFile("\r\n");
      mockFile0.toPath();
      cSVFormat1.MYSQL.withAllowMissingColumnNames(false);
      // Undeclared exception!
      try { 
        Charset.forName("]c ?&y1GE}r");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]c ?&y1GE}r
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char char0 = '&';
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat1.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat2.toString();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<,> QuoteChar=<\"> CommentStart=<&> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[]", 30, 30);
      // Undeclared exception!
      try { 
        cSVFormat2.TDF.print((Object) cSVFormat0, (Appendable) charBuffer0, false);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withQuote('J');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "TDF";
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) "TDF";
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) "TDF";
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat2;
      cSVFormat2.MYSQL.format(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.toString();
      cSVFormat1.getEscapeCharacter();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "M0,_O8{Af";
      stringArray0[1] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      stringArray0[2] = ".";
      cSVFormat1.INFORMIX_UNLOAD_CSV.withNullString(".");
      cSVFormat1.withHeader(stringArray0);
      Character.valueOf('x');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      cSVFormat1.format(stringArray0);
      cSVFormat1.withTrailingDelimiter(true);
      cSVFormat2.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      cSVFormat2.isCommentMarkerSet();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.toString();
      cSVFormat1.getEscapeCharacter();
      RowSetMetaDataImpl rowSetMetaDataImpl2 = new RowSetMetaDataImpl();
      cSVFormat4.toString();
      cSVFormat2.withCommentMarker('Y');
      CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator('Y');
      cSVFormat5.isNullStringSet();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withQuote('J');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat3.equals(cSVFormat1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("TDF");
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat5.println(mockPrintStream0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = "string";
      stringArray0[2] = "string";
      stringArray0[3] = "TDF";
      stringArray0[4] = ">b}k%c^";
      String string0 = "\n";
      stringArray0[5] = "\n";
      // Undeclared exception!
      try { 
        cSVFormat4.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'string' in [$VALUES, string, string, TDF, >b}k%c^, 
         // ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withQuote('J');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat1.MYSQL.withHeader(class0);
      cSVFormat2.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      cSVFormat3.getEscapeCharacter();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TDF";
      stringArray0[1] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<TDF> SkipHeaderRecord:false";
      Object object0 = new Object();
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat2.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Smi";
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('j');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('H');
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("Smi");
      cSVFormat4.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String string0 = "mj.Dg}V*$";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("mj.Dg}V*$");
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('%');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('%');
      Character character0 = Character.valueOf('E');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat5;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat4;
      cSVFormat4.MYSQL.withDelimiter('R');
      objectArray0[5] = (Object) character0;
      cSVFormat5.format(objectArray0);
      cSVFormat4.withIgnoreEmptyLines(false);
      cSVFormat0.withIgnoreSurroundingSpaces();
      MockFile mockFile0 = new MockFile((String) null, "V");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "V");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // V
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      cSVFormat1.TDF.withQuote('J');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat1.MYSQL.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat2.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      Character character0 = Character.valueOf('J');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat5 = cSVFormat3.withCommentMarker(character0);
      CSVFormat cSVFormat6 = cSVFormat4.withCommentMarker('Z');
      cSVFormat3.isNullStringSet();
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat8 = cSVFormat7.withRecordSeparator(',');
      cSVFormat5.withSkipHeaderRecord(true);
      cSVFormat4.withNullString("Header:");
      cSVFormat8.withCommentMarker('Z');
      Byte byte0 = new Byte((byte)124);
      cSVFormat7.equals(byte0);
      // Undeclared exception!
      try { 
        cSVFormat8.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = CSVFormat.newFormat('&');
      Character.valueOf('Z');
      cSVFormat1.getEscapeCharacter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('Z');
      cSVFormat0.isNullStringSet();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = objectArray0[0];
      objectArray0[5] = (Object) stringWriter0;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();
      cSVFormat0.MYSQL.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat3.printRecord(stringWriter0, objectArray0);
      cSVFormat2.getIgnoreHeaderCase();
      cSVFormat1.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("\r\n", false);
      Character character0 = Character.valueOf('/');
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) character0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat3;
      cSVFormat1.printRecord(mockFileWriter0, objectArray0);
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat4.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat3.printRecord(mockFileWriter0, objectArray0);
      cSVFormat0.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withQuote('J');
      Character character0 = new Character('+');
      cSVFormat2.withCommentMarker(character0);
      Character character1 = new Character('J');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader("zC7Bk$Bbh");
      cSVFormat0.parse(stringReader0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Default";
      stringArray0[1] = "\" in ";
      cSVFormat2.withHeader(stringArray0);
      cSVFormat0.withCommentMarker('+');
      cSVFormat3.isNullStringSet();
      Object object0 = new Object();
      cSVFormat1.format(stringArray0);
      cSVFormat2.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TF");
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withQuote('J');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "TF";
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) "TF";
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) "TF";
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat2;
      cSVFormat2.MYSQL.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      cSVFormat0.toString();
      cSVFormat1.getEscapeCharacter();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "M0,_O8{Af";
      stringArray0[1] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('J');
      cSVFormat4.withHeader(stringArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.withCommentMarker('~');
      cSVFormat2.isNullStringSet();
      Object object0 = new Object();
      CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat6.format(stringArray0);
      cSVFormat0.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withQuote('J');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat1.MYSQL.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat2.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      cSVFormat3.getEscapeCharacter();
      cSVFormat0.DEFAULT.withIgnoreHeaderCase();
      cSVFormat4.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat6 = cSVFormat3.withCommentMarker('>');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      CSVFormat cSVFormat7 = cSVFormat6.withHeaderComments(objectArray0);
      cSVFormat7.isNullStringSet();
      Object object0 = new Object();
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat8 = cSVFormat7.withRecordSeparator("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<TDF> SkipHeaderRecord:false");
      cSVFormat8.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.MYSQL.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      Object object1 = new Object();
      cSVFormat2.printRecord(stringWriter0, objectArray0);
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat2.withRecordSeparator("M<(!!iI~]_gE");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString((String) null);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('!');
      cSVFormat5.withEscape('i');
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)90;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      File file0 = MockFile.createTempFile("InformixUnload", "InformixUnload", (File) null);
      MockFile mockFile0 = new MockFile(file0, "InformixUnload");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat0.print(path0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('_');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('_');
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withEscape(character0);
      Character character1 = new Character('A');
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD_CSV.withCommentMarker(character1);
      Character character2 = new Character('q');
      cSVFormat1.withEscape(character2);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Delimiter=<";
      stringArray0[1] = "e8tyExe@$qbq7;-b";
      stringArray0[2] = "\r\n";
      stringArray0[3] = "";
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat5.withTrailingDelimiter();
      // Undeclared exception!
      try { 
        cSVFormat6.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [Delimiter=<, e8tyExe@$qbq7;-b, \r
         // , , null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat0.equals(cSVFormat2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Z");
      cSVFormat0.println(mockPrintStream0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("format", true);
      cSVFormat0.print((Object) "string", (Appendable) mockPrintStream0, true);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf(")w7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.)w7
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('&');
      Character character1 = new Character('V');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character1);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat2.RFC4180.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      Character.valueOf('I');
      Character character2 = Character.valueOf('Z');
      CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker(character2);
      cSVFormat4.withCommentMarker('f');
      cSVFormat4.isNullStringSet();
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator('0');
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord(false);
      CSVFormat cSVFormat7 = cSVFormat6.withNullString("Excel");
      cSVFormat0.INFORMIX_UNLOAD.withTrim();
      CSVFormat cSVFormat8 = cSVFormat7.withCommentMarker('Z');
      Double double0 = new Double((-1.0));
      cSVFormat1.equals(double0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat7.RFC4180.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat9 = cSVFormat8.withTrim();
      // Undeclared exception!
      try { 
        cSVFormat9.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char char0 = '&';
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat2.withNullString("$VALUES");
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".";
      stringArray0[1] = ".";
      stringArray0[2] = "$VALUES";
      stringArray0[3] = "J";
      String string0 = "org.apache.commons.csv.QuoteMode";
      stringArray0[4] = "org.apache.commons.csv.QuoteMode";
      stringArray0[5] = ".";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '.' in [., ., $VALUES, J, org.apache.commons.csv.QuoteMode, .]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Character character0 = new Character('k');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character1 = Character.valueOf('0');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character1);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('Y');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character1);
      Character character2 = new Character('A');
      cSVFormat0.withCommentMarker(character1);
      Character character3 = new Character('A');
      Character character4 = Character.valueOf('`');
      cSVFormat3.withEscape(character4);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.parse(pipedReader0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "z=RE'+MJ0B)ra";
      stringArray0[1] = "+eD/";
      cSVFormat2.withHeader(stringArray0);
      cSVFormat0.withCommentMarker('K');
      cSVFormat0.isNullStringSet();
      Object object0 = new Object();
      cSVFormat0.format(stringArray0);
      cSVFormat2.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      cSVFormat3.withSkipHeaderRecord();
      Character.valueOf('Z');
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker('m');
      cSVFormat5.withIgnoreSurroundingSpaces(true);
      cSVFormat0.isNullStringSet();
      cSVFormat2.MYSQL.withRecordSeparator('Z');
      cSVFormat5.withSkipHeaderRecord(true);
      CSVFormat cSVFormat6 = cSVFormat0.withNullString("j");
      CSVFormat cSVFormat7 = cSVFormat1.withCommentMarker('Z');
      cSVFormat4.equals(cSVFormat7);
      cSVFormat1.getQuoteMode();
      // Undeclared exception!
      try { 
        cSVFormat6.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.csv.QuoteMode";
      stringArray0[1] = "= UUlk={}:";
      cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('m');
      cSVFormat0.isNullStringSet();
      Object object0 = new Object();
      Character.valueOf('1');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat0.withHeader(resultSet0);
      Character character1 = Character.valueOf('4');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(character1);
      CSVFormat cSVFormat6 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat6.withCommentMarker('4');
      CSVFormat cSVFormat7 = cSVFormat5.withAllowMissingColumnNames();
      CSVFormat cSVFormat8 = cSVFormat7.withEscape('B');
      cSVFormat8.isNullStringSet();
      Object object1 = new Object();
      cSVFormat3.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      Character.valueOf('Z');
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('m');
      cSVFormat5.isNullStringSet();
      cSVFormat3.withRecordSeparator('m');
      CSVFormat cSVFormat6 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat6.withNullString((String) null);
      cSVFormat3.withCommentMarker('c');
      cSVFormat2.equals(cSVFormat1);
      // Undeclared exception!
      try { 
        cSVFormat6.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "V";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.withTrailingDelimiter(false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("?U'MX%0#o3Z0");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.getIgnoreSurroundingSpaces();
      char char0 = '{';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?U'MX%0#o3Z0");
      Character character0 = new Character('{');
      cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      boolean boolean0 = false;
      cSVFormat3.withIgnoreHeaderCase(false);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("?U'MX%0#o3Z0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.?U'MX%0#o3Z0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(true);
      cSVFormat0.withEscape('N');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat3.equals(cSVFormat2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("string");
      cSVFormat2.RFC4180.println(mockPrintStream0);
      String string0 = null;
      boolean boolean0 = true;
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Character character0 = Character.valueOf('l');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.getDelimiter();
      Character character1 = Character.valueOf('4');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      mockPrintStream0.append((CharSequence) "\"Rb  O]oRX'");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVFormat2.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      cSVFormat1.TDF.withQuote('J');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('J');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat2.INFORMIX_UNLOAD.withQuoteMode(quoteMode0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat1.MYSQL.withHeader(class0);
      cSVFormat2.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      cSVFormat3.getEscapeCharacter();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TDF";
      stringArray0[1] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<TDF> SkipHeaderRecord:false";
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat1.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker('m');
      cSVFormat4.MYSQL.withDelimiter('d');
      cSVFormat1.isNullStringSet();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat3.equals(cSVFormat2);
      String string0 = null;
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('N');
      cSVFormat2.withIgnoreHeaderCase(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      cSVFormat2.getEscapeCharacter();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat3.toString();
      CSVFormat cSVFormat5 = cSVFormat3.withCommentMarker('K');
      CSVFormat cSVFormat6 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat6.isNullStringSet();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = object0;
      cSVFormat5.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      Character.valueOf('l');
      Object object0 = new Object();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat4.TDF.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat0.withCommentMarker('l');
      CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat6.isNullStringSet();
      Object object1 = new Object();
      cSVFormat5.format(objectArray0);
      cSVFormat3.isQuoteCharacterSet();
      cSVFormat6.getQuoteMode();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = objectArray0[0];
      cSVFormat0.MYSQL.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withTrailingDelimiter(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "qK}srLy[";
      stringArray0[1] = "ts8L:EOi2yD|<";
      stringArray0[2] = "j";
      stringArray0[3] = "?fUo";
      stringArray0[4] = "g/gzeLae5g";
      stringArray0[5] = "o";
      stringArray0[6] = "MySQL";
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('F');
      cSVFormat3.isNullStringSet();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object0 = new Object();
      cSVFormat1.format(objectArray0);
      cSVFormat0.printRecord(stringWriter0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      cSVFormat1.TDF.withQuote('J');
      cSVFormat0.withRecordSeparator('J');
      cSVFormat0.toString();
      cSVFormat1.getEscapeCharacter();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "M0,_O8{Af";
      stringArray0[1] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      stringArray0[2] = ".";
      cSVFormat1.INFORMIX_UNLOAD_CSV.withNullString(".");
      cSVFormat1.withHeader(stringArray0);
      Character.valueOf('x');
      cSVFormat0.isNullStringSet();
      Object object0 = new Object();
      cSVFormat1.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) stringWriter0;
      cSVFormat0.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat0.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      Long long0 = new Long(0L);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("(9ZpJ)!FGZ5t\"k");
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        cSVFormat2.print(object1, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('u');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat1.getCommentMarker();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVFormat$1");
      cSVFormat3.EXCEL.parse(stringReader0);
      CSVFormat.Predefined.valueOf("InformixUnload");
      cSVFormat1.withTrim();
      cSVFormat2.withQuote('&');
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.DEFAULT.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      cSVFormat3.equals(cSVFormat2);
      String string0 = null;
      boolean boolean0 = true;
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      cSVFormat1.TDF.withQuote('J');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat1.MYSQL.withHeader(class0);
      cSVFormat2.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      cSVFormat3.getEscapeCharacter();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TDF";
      stringArray0[1] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<TDF> SkipHeaderRecord:false";
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat1.INFORMIX_UNLOAD.toString();
      cSVFormat0.withCommentMarker('m');
      cSVFormat1.isNullStringSet();
      Object object0 = new Object();
      cSVFormat1.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      cSVFormat4.EXCEL.withHeaderComments(objectArray0);
      Character character0 = Character.valueOf('c');
      CSVFormat cSVFormat5 = cSVFormat4.MYSQL.withCommentMarker(character0);
      Object object1 = new Object();
      cSVFormat2.format(objectArray0);
      cSVFormat5.withIgnoreSurroundingSpaces(true);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      cSVFormat1.TDF.withQuote('J');
      char char0 = 'Z';
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('Z');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      ResultSetMetaData resultSetMetaData0 = null;
      cSVFormat2.withHeader((ResultSetMetaData) null);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat1.withQuote('l');
      cSVFormat0.withQuoteMode(quoteMode0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("EORECORD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.EORECORD
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character.valueOf('');
      CSVFormat cSVFormat4 = cSVFormat2.withSkipHeaderRecord();
      Character character0 = new Character('');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(character0);
      CSVFormat cSVFormat6 = cSVFormat1.withTrailingDelimiter();
      cSVFormat6.withCommentMarker('A');
      cSVFormat5.isNullStringSet();
      Object object1 = new Object();
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('&');
      Character character1 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character1);
      cSVFormat1.TDF.withEscape('@');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      Character.valueOf('N');
      cSVFormat3.withCommentMarker('Z');
      cSVFormat4.isNullStringSet();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVFormat4.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(9);
      Object object0 = new Object();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat4 = cSVFormat2.withEscape('T');
      cSVFormat4.TDF.withSkipHeaderRecord();
      cSVFormat4.withCommentMarker('r');
      cSVFormat1.isNullStringSet();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[4] = object2;
      cSVFormat4.format(objectArray0);
      cSVFormat4.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      Character character0 = Character.valueOf('c');
      cSVFormat4.MYSQL.withCommentMarker(character0);
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat6 = cSVFormat5.withCommentMarker('S');
      cSVFormat0.isNullStringSet();
      Object object1 = new Object();
      Character character1 = new Character('c');
      CSVFormat cSVFormat7 = cSVFormat6.withCommentMarker(character1);
      cSVFormat7.format(objectArray0);
      cSVFormat2.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat.newFormat('l');
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat3.withTrim();
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat4 = CSVFormat.MYSQL;
      cSVFormat4.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Character character0 = Character.valueOf('l');
      cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"Rb  O]oRX'";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('m');
      cSVFormat3.isNullStringSet();
      cSVFormat2.getAllowMissingColumnNames();
      cSVFormat0.getTrim();
      cSVFormat3.withTrailingDelimiter(false);
      cSVFormat2.isQuoteCharacterSet();
      CSVFormat.newFormat('2');
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      cSVFormat5.equals("\"Rb  O]oRX'");
      cSVFormat0.getEscapeCharacter();
      cSVFormat5.withAllowMissingColumnNames(false);
      cSVFormat2.withRecordSeparator('l');
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreEmptyLines(false);
      String string0 = "";
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withRecordSeparator('$');
      cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat0.RFC4180.withFirstRecordAsHeader();
      String string1 = "";
      String string2 = "";
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "Da8 uV>\"f_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.withTrim();
      Character.valueOf('Z');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker('m');
      cSVFormat0.isNullStringSet();
      cSVFormat2.MYSQL.withRecordSeparator('Z');
      cSVFormat4.withSkipHeaderRecord(true);
      cSVFormat0.withNullString("j");
      CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker('Z');
      cSVFormat3.equals(cSVFormat5);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("\u2029");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.\u2029
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      cSVFormat1.TDF.withQuote('J');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat1.MYSQL.withHeader(class0);
      cSVFormat2.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      cSVFormat3.getEscapeCharacter();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TDF";
      stringArray0[1] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<TDF> SkipHeaderRecord:false";
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      cSVFormat1.getTrim();
      File file0 = MockFile.createTempFile("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<TDF> SkipHeaderRecord:false", "}:");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      cSVFormat1.EXCEL.withSkipHeaderRecord(false);
      cSVFormat3.print((Object) "TDF", (Appendable) outputStreamWriter0, false);
      CSVFormat cSVFormat4 = cSVFormat0.withFirstRecordAsHeader();
      Character character0 = new Character('J');
      cSVFormat4.MYSQL.withCommentMarker(character0);
      cSVFormat4.withSkipHeaderRecord(false);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('&');
      Character character0 = new Character('&');
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('&')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      char char0 = '&';
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("\n");
      cSVFormat2.withIgnoreHeaderCase(true);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Character character0 = Character.valueOf('l');
      cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"Rb  O]oRX'";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('m');
      cSVFormat3.isNullStringSet();
      Object object0 = new Object();
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) character0;
      objectArray1[2] = (Object) cSVFormat3;
      objectArray1[3] = object0;
      objectArray1[4] = (Object) "\"Rb  O]oRX'";
      cSVFormat2.format(objectArray1);
      cSVFormat3.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat0.getEscapeCharacter();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet0);
      cSVFormat3.getTrim();
      boolean boolean0 = false;
      String string0 = "_v^Iy|h3?cA";
      File file0 = MockFile.createTempFile("_v^Iy|h3?cA", "}:");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.CHINA;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(locale1, "", objectArray0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(printStream0);
      cSVFormat2.print((Object) "}:", (Appendable) printStream0, true);
      cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withSkipHeaderRecord(false);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("}:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.}:
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('+');
      Character character1 = Character.valueOf('+');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character1);
      PipedReader pipedReader0 = new PipedReader();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat2.parse(pipedReader0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{ZIQBc@e\"$/7";
      stringArray0[1] = "\r\n";
      stringArray0[2] = "R_xFSh";
      stringArray0[3] = "Delimiter=<";
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('q');
      cSVFormat4.DEFAULT.withIgnoreSurroundingSpaces(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      cSVFormat3.format(stringArray0);
      MockFile mockFile0 = new MockFile("V", "Pk4ISGRT,}G");
      MockFile mockFile1 = new MockFile(mockFile0, "Delimiter=<");
      try { 
        MockFile.createTempFile("R_xFSh", "EOF whilst processing escape sequence", (File) mockFile1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withQuote('J');
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat1.MYSQL.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      CSVFormat cSVFormat5 = cSVFormat2.withTrim();
      Character.valueOf('7');
      Character character0 = new Character('L');
      CSVFormat cSVFormat6 = cSVFormat5.withCommentMarker(character0);
      cSVFormat0.withCommentMarker('Z');
      CSVFormat cSVFormat7 = cSVFormat4.withNullString("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<TDF> SkipHeaderRecord:false");
      cSVFormat7.isNullStringSet();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVFormat6.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.toPath();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      Character character0 = Character.valueOf('~');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      String[] stringArray0 = new String[0];
      cSVFormat1.INFORMIX_UNLOAD_CSV.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('~');
      cSVFormat3.getHeaderComments();
      cSVFormat1.withRecordSeparator('y');
      CSVFormat cSVFormat4 = cSVFormat1.withNullString("28V.");
      PipedReader pipedReader0 = new PipedReader(39);
      cSVFormat0.parse(pipedReader0);
      cSVFormat4.hashCode();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.csv.CSVFormat$Predefined");
      cSVFormat0.DEFAULT.withRecordSeparator("org.apache.commons.csv.Token");
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('%');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "org.apache.commons.csv.Token";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVFormat1;
      cSVFormat1.MYSQL.format(objectArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a&Yz~2Fn");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      cSVFormat1.TDF.withQuote('J');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat1.MYSQL.withHeader(class0);
      cSVFormat2.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      cSVFormat3.getEscapeCharacter();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TDF";
      stringArray0[1] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<TDF> SkipHeaderRecord:false";
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      cSVFormat1.getTrim();
      File file0 = MockFile.createTempFile("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<TDF> SkipHeaderRecord:false", "}:");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      cSVFormat3.print((Object) "TDF", (Appendable) outputStreamWriter0, false);
      CSVFormat cSVFormat4 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat4.withSkipHeaderRecord(false);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.withTrim();
      Character.valueOf('Z');
      cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('m');
      cSVFormat0.isNullStringSet();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVFormat3.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withQuote('J');
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat1.MYSQL.withHeader(class0);
      cSVFormat3.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      cSVFormat4.getEscapeCharacter();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TDF";
      stringArray0[1] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<TDF> SkipHeaderRecord:false";
      stringArray0[2] = "";
      cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat0.withCommentMarker('J');
      cSVFormat5.withAllowMissingColumnNames();
      cSVFormat4.getHeader();
      PipedReader pipedReader0 = new PipedReader(44);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 44);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char char0 = '&';
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      Character character0 = new Character('&');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('O');
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter('L');
      Character character1 = new Character('_');
      Character character2 = new Character('L');
      // Undeclared exception!
      try { 
        cSVFormat6.withCommentMarker(character2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('L')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('x');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withTrailingDelimiter(true);
      cSVFormat1.getRecordSeparator();
      cSVFormat2.withQuote('x');
      cSVFormat2.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withTrim(false);
      cSVFormat3.withTrailingDelimiter(false);
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat2.MYSQL.withQuoteMode(quoteMode0);
      cSVFormat4.TDF.withIgnoreHeaderCase();
      cSVFormat1.MYSQL.withTrailingDelimiter(false);
      objectArray0[4] = (Object) cSVFormat1;
      CSVFormat cSVFormat5 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat5.getIgnoreHeaderCase();
      cSVFormat0.RFC4180.withQuote('2');
      cSVFormat5.getCommentMarker();
      String string0 = "6hBvLN3b?nt3";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("6hBvLN3b?nt3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.6hBvLN3b?nt3
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVFormat1.TDF.withCommentMarker('#');
      objectArray0[1] = (Object) cSVFormat2;
      cSVFormat1.EXCEL.withAllowMissingColumnNames(true);
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat3;
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD.withSkipHeaderRecord();
      objectArray0[6] = (Object) cSVFormat1;
      CSVFormat cSVFormat5 = cSVFormat3.withHeaderComments(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(ES.Gny<^IiV<";
      CSVFormat cSVFormat7 = cSVFormat6.TDF.withHeader(stringArray0);
      cSVFormat6.getTrailingDelimiter();
      Float float0 = new Float((-130.70100353));
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      cSVFormat7.isEscapeCharacterSet();
      cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat2.withDelimiter('#');
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.DEFAULT.hashCode();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      cSVFormat2.withHeader(stringArray0);
      cSVFormat4.isNullStringSet();
      CSVFormat cSVFormat6 = cSVFormat5.withEscape('%');
      Character character0 = new Character('(');
      Character character1 = new Character('E');
      cSVFormat6.withCommentMarker(character1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      cSVFormat2.isCommentMarkerSet();
      cSVFormat0.TDF.toString();
      cSVFormat0.getEscapeCharacter();
      String[] stringArray0 = new String[1];
      cSVFormat1.hashCode();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      cSVFormat2.withHeader(stringArray0);
      cSVFormat3.isNullStringSet();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat2.withDelimiter('w');
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withRecordSeparator('V');
      cSVFormat1.TDF.hashCode();
      Character character0 = Character.valueOf('l');
      cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"Rb  O]oRX'";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker('m');
      cSVFormat4.isNullStringSet();
      Object object0 = new Object();
      cSVFormat2.RFC4180.toString();
      cSVFormat0.withCommentMarker('l');
      cSVFormat0.isNullStringSet();
      Object object1 = new Object();
      cSVFormat0.format(stringArray0);
      cSVFormat3.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      CSVFormat cSVFormat4 = cSVFormat1.TDF.withCommentMarker('#');
      objectArray0[1] = (Object) cSVFormat2;
      cSVFormat1.EXCEL.withAllowMissingColumnNames(true);
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat3;
      cSVFormat3.INFORMIX_UNLOAD.withSkipHeaderRecord();
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat4.withSkipHeaderRecord();
      CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker('^');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(ES.Gny<^IiV<";
      stringArray0[1] = "EOF";
      stringArray0[2] = "HZI8yRhSNbYh";
      stringArray0[3] = "(ES.Gny<^IiV<";
      // Undeclared exception!
      try { 
        cSVFormat5.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '(ES.Gny<^IiV<' in [(ES.Gny<^IiV<, EOF, HZI8yRhSNbYh, (ES.Gny<^IiV<]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet0);
      cSVFormat1.isCommentMarkerSet();
      cSVFormat3.toString();
      cSVFormat2.getEscapeCharacter();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      stringArray0[2] = "";
      stringArray0[3] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      stringArray0[4] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "NON_NUMERIC";
      // Undeclared exception!
      try { 
        cSVFormat3.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r
         // > SkipHeaderRecord:false, , Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r
         // > SkipHeaderRecord:false, Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r
         // > SkipHeaderRecord:false, , , NON_NUMERIC]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      cSVFormat2.isCommentMarkerSet();
      cSVFormat0.TDF.toString();
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("w%k(4^lL=/+Jg");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-<F";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(true);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) stringWriter0;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.hashCode();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      cSVFormat3.isNullStringSet();
      Character character0 = new Character('E');
      cSVFormat3.withEscape(character0);
      cSVFormat2.isEscapeCharacterSet();
      cSVFormat3.withIgnoreEmptyLines(false);
      cSVFormat2.withDelimiter('x');
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = objectArray0[0];
      objectArray0[5] = (Object) stringWriter0;
      cSVFormat0.MYSQL.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      Character character0 = new Character(']');
      cSVFormat2.withEscape(character0);
      cSVFormat2.isEscapeCharacterSet();
      cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat1.withDelimiter('N');
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      cSVFormat2.isCommentMarkerSet();
      cSVFormat0.TDF.toString();
      cSVFormat0.getEscapeCharacter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker('F');
      cSVFormat1.isNullStringSet();
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[2] = (Object) "";
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat4.INFORMIX_UNLOAD.withHeader(resultSet1);
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) "";
      cSVFormat3.format(objectArray0);
      cSVFormat3.toString();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char char0 = '&';
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat2.toString();
      cSVFormat2.getEscapeCharacter();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, RFC4180, TDF]";
      stringArray0[1] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, RFC4180, TDF]";
      stringArray0[2] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, RFC4180, TDF]";
      stringArray0[3] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, RFC4180, TDF]";
      stringArray0[4] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, RFC4180, TDF]";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, RFC4180, TDF]";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r
         // > SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, RFC4180, TDF]' in [Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r
         // > SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, RFC4180, TDF], Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r
         // > SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, RFC4180, TDF], Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r
         // > SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, RFC4180, TDF], Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r
         // > SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, RFC4180, TDF], Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r
         // > SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, RFC4180, TDF], , , , Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r
         // > SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, RFC4180, TDF]]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('k');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      boolean boolean0 = true;
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat3.INFORMIX_UNLOAD.withTrim();
      MockFile.createTempFile("J'?S2wP3X3", "J'?S2wP3X3");
      MockFile.createTempFile("J'?S2wP3X3", "J'?S2wP3X3");
      Charset charset0 = Charset.defaultCharset();
      String string0 = "Delimiter=<";
      MockFile mockFile0 = new MockFile("Delimiter=<");
      cSVFormat4.print((File) mockFile0, charset0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat5.withHeader(resultSet0);
      cSVFormat5.getTrim();
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        cSVFormat1.withDelimiter('k');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('k')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      cSVFormat2.isCommentMarkerSet();
      cSVFormat0.TDF.toString();
      cSVFormat0.getEscapeCharacter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker('F');
      cSVFormat1.isNullStringSet();
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) "";
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("K'PZ-\"!#1>)1]E[");
      cSVFormat2.withSkipHeaderRecord();
      cSVFormat2.format(stringArray0);
      cSVFormat1.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('j');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-<F";
      stringArray0[1] = "org.apache.commons.csv.Token$Type";
      stringArray0[2] = "Wo";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[5] = "\r\n";
      cSVFormat1.withHeader(stringArray0);
      cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withTrailingDelimiter(true);
      cSVFormat3.withIgnoreSurroundingSpaces(true);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.withAllowMissingColumnNames(false);
      Object object1 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat3.withSkipHeaderRecord();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(ES.Gny<^IiV<";
      stringArray0[1] = "(ES.Gny<^IiV<";
      stringArray0[2] = "(ES.Gny<^IiV<";
      stringArray0[3] = "(ES.Gny<^IiV<";
      stringArray0[4] = "(ES.Gny<^IiV<";
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '(ES.Gny<^IiV<' in [(ES.Gny<^IiV<, (ES.Gny<^IiV<, (ES.Gny<^IiV<, (ES.Gny<^IiV<, (ES.Gny<^IiV<]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = objectArray0[0];
      objectArray0[5] = (Object) stringWriter0;
      cSVFormat0.MYSQL.printRecord(stringWriter0, objectArray0);
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withTrailingDelimiter(true);
      cSVFormat1.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('7');
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape(character0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(") invalid parse sequence");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      mockPrintStream0.println(objectArray0[0]);
      Object object0 = new Object();
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('P');
      cSVFormat1.getDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('\t');
      cSVFormat3.withQuote('5');
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      cSVFormat2.isCommentMarkerSet();
      cSVFormat0.TDF.toString();
      cSVFormat0.getEscapeCharacter();
      String[] stringArray0 = new String[1];
      Object object0 = new Object();
      cSVFormat0.format(stringArray0);
      cSVFormat1.withDelimiter('<');
      cSVFormat0.getDelimiter();
      cSVFormat1.withQuote('<');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(8);
      charArrayWriter0.append('x');
      cSVFormat2.println(charArrayWriter0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("M0,_O8{Af", "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r
         // > EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('k');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat3.INFORMIX_UNLOAD.withTrim();
      File file0 = MockFile.createTempFile("J'?S2wP3X3", "J'?S2wP3X3");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat5.print(file0, charset0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.TDF.withHeader(resultSet0);
      cSVFormat3.getTrim();
      CSVFormat cSVFormat6 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat6.getQuoteCharacter();
      cSVFormat6.equals(cSVFormat_Predefined0);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("N:YXgfVkNuBDn[}RV1Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.N:YXgfVkNuBDn[}RV1Q
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('&');
      Character character0 = new Character('U');
      cSVFormat1.withCommentMarker(character0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "The escape character cannot be a line break";
      stringArray0[3] = "Wo";
      stringArray0[4] = "Default";
      cSVFormat1.getDelimiter();
      char char0 = '(';
      cSVFormat1.withQuote('(');
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1745));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1745
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      Character character0 = Character.valueOf('c');
      cSVFormat4.MYSQL.withCommentMarker(character0);
      cSVFormat4.DEFAULT.withSkipHeaderRecord(false);
      File file0 = MockFile.createTempFile("J'?S2wP3X3", "J'?S2wP3X3");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.print(file0, charset0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      cSVFormat2.getTrim();
      cSVFormat2.print((Object) stringWriter0, (Appendable) stringWriter0, false);
      cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat5.DEFAULT.withNullString("uT!]");
      cSVFormat5.equals(objectArray0[1]);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("$VALUES");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.$VALUES
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      Character.valueOf('c');
      CSVFormat cSVFormat4 = CSVFormat.newFormat('2');
      Object object1 = new Object();
      cSVFormat4.equals(object1);
      cSVFormat3.getHeader();
      PipedReader pipedReader0 = new PipedReader(271);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 116);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(54);
      Object object0 = new Object();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf('E');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      cSVFormat4.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat4.withTrim();
      Character character1 = Character.valueOf('c');
      Character character2 = Character.valueOf('E');
      cSVFormat1.withCommentMarker(character2);
      CSVFormat.newFormat('c');
      cSVFormat4.withCommentMarker('n');
      cSVFormat0.isNullStringSet();
      Object object1 = new Object();
      QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat6 = cSVFormat5.withQuoteMode(quoteMode1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) character1;
      cSVFormat6.format(objectArray0);
      cSVFormat5.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.DEFAULT.hashCode();
      cSVFormat4.withHeader(class0);
      String[] stringArray0 = new String[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "";
      String string0 = "";
      cSVFormat3.withTrim();
      // Undeclared exception!
      try { 
        cSVFormat1.INFORMIX_UNLOAD.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.DEFAULT.hashCode();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      cSVFormat2.withHeader(stringArray0);
      cSVFormat4.isNullStringSet();
      Character character0 = new Character('E');
      CSVFormat cSVFormat6 = cSVFormat5.withEscape(character0);
      cSVFormat6.isEscapeCharacterSet();
      CSVFormat cSVFormat7 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat7.withDelimiter('w');
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat1.print((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("OsBqQzDuPHOQ$<");
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      cSVFormat5.withNullString("MINIMAL");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      Character character0 = Character.valueOf('c');
      cSVFormat4.MYSQL.withCommentMarker(character0);
      CSVFormat cSVFormat5 = cSVFormat2.withCommentMarker('F');
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat2.MYSQL.hashCode();
      Object object1 = new Object();
      cSVFormat5.format(objectArray0);
      cSVFormat3.withHeader((ResultSetMetaData) null);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Object[] objectArray0 = null;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments((Object[]) null);
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withTrailingDelimiter();
      char char0 = 'd';
      Character character0 = Character.valueOf('d');
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withQuote(character0);
      cSVFormat3.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      boolean boolean0 = false;
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat0.hashCode();
      PipedReader pipedReader0 = new PipedReader(32);
      cSVFormat1.parse(pipedReader0);
      cSVFormat0.isNullStringSet();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat4.withHeader(resultSet0);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1663));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1663
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      objectArray0[4] = (Object) "\"Rb  O]oRX'";
      stringArray0[1] = "\"Rb  O]oRX'";
      stringArray0[2] = "j";
      cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('d');
      cSVFormat0.isNullStringSet();
      Object object1 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      cSVFormat2.format(stringArray0);
      cSVFormat2.isQuoteCharacterSet();
      cSVFormat1.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withQuote('J');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('u');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = CSVFormat.RFC4180;
      cSVFormat5.toString();
      cSVFormat2.getEscapeCharacter();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat4.toString();
      cSVFormat3.withCommentMarker('M');
      cSVFormat1.isNullStringSet();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) rowSetMetaDataImpl1;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[3] = (Object) rowSetMetaDataImpl1;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat5;
      objectArray0[7] = (Object) cSVFormat2;
      Object object1 = new Object();
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD.withCommentMarker('*');
      cSVFormat1.getAllowMissingColumnNames();
      String string0 = "out";
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker(':');
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) "out";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "out";
      cSVFormat2.RFC4180.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat2.withDelimiter('*');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('*')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Character character0 = new Character('+');
      Character character1 = Character.valueOf('I');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character1);
      Character character2 = new Character('o');
      Character character3 = Character.valueOf('Z');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character3);
      PipedReader pipedReader0 = new PipedReader();
      PipedReader pipedReader1 = new PipedReader();
      cSVFormat2.parse(pipedReader1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "3fu";
      stringArray0[1] = "\" in ";
      stringArray0[2] = "org.apache.commons.csv.CSVFormat$Predefined";
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.withCommentMarker('^');
      cSVFormat1.isNullStringSet();
      Object object0 = new Object();
      cSVFormat3.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Character character0 = Character.valueOf('`');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker('m');
      cSVFormat3.isNullStringSet();
      Object object0 = new Object();
      Character.valueOf('u');
      Character character1 = Character.valueOf('2');
      cSVFormat1.withCommentMarker(character1);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(false);
      Object object1 = new Object();
      cSVFormat5.INFORMIX_UNLOAD.print(object1, (Appendable) stringWriter0, false);
      cSVFormat5.withCommentMarker('p');
      CSVFormat cSVFormat6 = CSVFormat.DEFAULT;
      cSVFormat6.isNullStringSet();
      Object object2 = new Object();
      cSVFormat6.format(objectArray0);
      cSVFormat5.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      cSVFormat2.isCommentMarkerSet();
      cSVFormat0.TDF.toString();
      cSVFormat0.getEscapeCharacter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "M0,_O8{Af";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker('F');
      cSVFormat1.isNullStringSet();
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[2] = (Object) "M0,_O8{Af";
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) "M0,_O8{Af";
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withQuote('J');
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat1.MYSQL.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat3.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      cSVFormat4.getEscapeCharacter();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TDF";
      stringArray0[1] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<TDF> SkipHeaderRecord:false";
      stringArray0[2] = "";
      cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat6 = cSVFormat0.withCommentMarker('J');
      CSVFormat cSVFormat7 = cSVFormat6.withAllowMissingColumnNames();
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreEmptyLines();
      cSVFormat8.isNullStringSet();
      Object object0 = new Object();
      cSVFormat5.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withQuote('J');
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat1.MYSQL.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat3.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      cSVFormat4.getEscapeCharacter();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TDF";
      stringArray0[1] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<TDF> SkipHeaderRecord:false";
      stringArray0[2] = "";
      cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat6 = cSVFormat0.withCommentMarker('J');
      cSVFormat6.withAllowMissingColumnNames();
      cSVFormat2.format(stringArray0);
      cSVFormat5.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Character character0 = Character.valueOf('l');
      cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"Rb  O]oRX'";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('m');
      cSVFormat3.isNullStringSet();
      Object object0 = new Object();
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) cSVFormat0;
      cSVFormat2.TDF.toString();
      objectArray1[1] = (Object) character0;
      objectArray1[2] = (Object) cSVFormat3;
      objectArray1[3] = object0;
      objectArray1[4] = (Object) "\"Rb  O]oRX'";
      cSVFormat2.format(objectArray1);
      cSVFormat3.isQuoteCharacterSet();
      cSVFormat1.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char char0 = 'j';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('j');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("The comment start marker character cannot be a line break");
      int int0 = 6;
      Character character0 = new Character('P');
      CSVFormat cSVFormat2 = cSVFormat0.EXCEL.withCommentMarker(character0);
      cSVFormat2.RFC4180.withQuote('j');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat1.RFC4180.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(']');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('J');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat2.TDF.withTrim(true);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat5.EXCEL.withQuoteMode(quoteMode0);
      cSVFormat5.withTrailingDelimiter();
      cSVFormat3.withSkipHeaderRecord();
      String string0 = ">4A|0_~<eY6_q\\";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(">4A|0_~<eY6_q", ">4A|0_~<eY6_q");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // >4A|0_~<eY6_q
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.getIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      cSVFormat0.TDF.format(objectArray0);
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat.newFormat('M');
      char char0 = '!';
      CSVFormat.newFormat('!');
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("The comment start and the escape character cannot be the same ('");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.The comment start and the escape character cannot be the same ('
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat1.INFORMIX_UNLOAD_CSV.withTrim();
      cSVFormat4.EXCEL.withNullString("}OK61b|q{`.w2]V");
      cSVFormat4.withTrim();
      String string0 = "]";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("]", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("WH:g.U%~Nm+'gIm@?E");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.DEFAULT.withIgnoreEmptyLines();
      Character character0 = new Character('.');
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat3.withHeader(class0);
      // Undeclared exception!
      try { 
        cSVFormat3.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('.')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
      char char0 = 'Z';
      Character character0 = new Character('Y');
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('Y')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('&');
      Character character0 = new Character('U');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "The escape character cannot be a line break";
      stringArray0[2] = "|v=*B";
      stringArray0[3] = "Wo";
      stringArray0[4] = "Default";
      stringArray0[5] = "u=?-$l";
      stringArray0[6] = "b";
      stringArray0[7] = "-<F";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('L');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      Character character0 = Character.valueOf('L');
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('L')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withQuote((Character) null);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
      Character character0 = new Character('.');
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('.')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      Character character0 = new Character('7');
      cSVFormat2.withQuote(character0);
      MockFile mockFile0 = new MockFile("6?;A%&uzq", "6?;A%&uzq");
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("6?;A%&uzq");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 6?;A%&uzq
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      boolean boolean0 = true;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      char char0 = 'p';
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('p');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat4.EXCEL.withHeader(class0);
      CSVFormat cSVFormat6 = cSVFormat5.DEFAULT.withTrim();
      cSVFormat5.EXCEL.withEscape((Character) null);
      cSVFormat6.INFORMIX_UNLOAD_CSV.withIgnoreHeaderCase(true);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("'zP&7>B4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.'zP&7>B4
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('_');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('q');
      cSVFormat2.withEscape('_');
      Character character1 = new Character('q');
      cSVFormat2.withCommentMarker(character1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('K');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("Rppok.?>J4");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("9*lhZW[8%4tm^P>K");
      cSVFormat2.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      Character character0 = Character.valueOf('i');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      cSVFormat1.TDF.withTrim(false);
      cSVFormat2.TDF.withIgnoreHeaderCase(true);
      cSVFormat0.INFORMIX_UNLOAD.withTrim();
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('s');
      cSVFormat5.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
      cSVFormat0.withDelimiter('Z');
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1237);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = objectArray0[0];
      cSVFormat0.MYSQL.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withTrailingDelimiter(true);
      cSVFormat1.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      Long long0 = new Long((-4208L));
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) long0, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('k');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD.withTrim();
      File file0 = MockFile.createTempFile("J'?S2wP3X3", "J'?S2wP3X3");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat4.print(file0, charset0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.TDF.withHeader(resultSet0);
      cSVFormat3.getTrim();
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) quoteMode0, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Character character0 = new Character('L');
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat2.withEscape('~');
      File file0 = null;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat4.EXCEL.print((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = Character.valueOf('S');
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
      cSVFormat1.EXCEL.withNullString("d\"z_|+O`Y*");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("J");
      cSVFormat0.print((Appendable) mockPrintWriter0);
      cSVFormat0.EXCEL.hashCode();
      cSVFormat0.getNullString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.withHeader(class0);
      cSVFormat1.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat0.getIgnoreEmptyLines();
      Character character0 = Character.valueOf('L');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[2];
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat0.INFORMIX_UNLOAD.withQuoteMode(quoteMode0);
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArrayWriter0.write(charArray0);
      cSVFormat0.println(charArrayWriter0);
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat0.getNullString();
      cSVFormat3.withFirstRecordAsHeader();
      cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat0.withRecordSeparator((String) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      char char0 = 'k';
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
      char char1 = 'U';
      Character character0 = new Character('U');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat2.withTrailingDelimiter(true);
      cSVFormat0.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames(false);
      String string0 = "";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf(",nWg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.,nWg
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.DEFAULT.hashCode();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        cSVFormat5.DEFAULT.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("#", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("#", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertEquals("#", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      CSVFormat cSVFormat4 = cSVFormat1.TDF.withCommentMarker('#');
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals('#', (char)cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      
      objectArray0[1] = (Object) cSVFormat2;
      CSVFormat cSVFormat5 = cSVFormat1.EXCEL.withAllowMissingColumnNames(true);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getNullString());
      assertTrue(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getQuoteMode());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat3;
      CSVFormat cSVFormat6 = cSVFormat3.INFORMIX_UNLOAD.withSkipHeaderRecord();
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("#", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertEquals("#", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertEquals('|', cSVFormat6.getDelimiter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertNull(cSVFormat6.getQuoteMode());
      assertTrue(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertNull(cSVFormat6.getCommentMarker());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat1);
      
      objectArray0[6] = (Object) cSVFormat1;
      CSVFormat cSVFormat7 = cSVFormat3.withHeaderComments(objectArray0);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertNull(cSVFormat7.getNullString());
      assertEquals(',', cSVFormat7.getDelimiter());
      assertNull(cSVFormat7.getQuoteMode());
      assertFalse(cSVFormat7.isNullStringSet());
      assertTrue(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getTrim());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertNull(cSVFormat7.getCommentMarker());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertTrue(cSVFormat7.getSkipHeaderRecord());
      assertEquals("#", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("#", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertEquals("#", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals(7, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertTrue(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat4);
      
      CSVFormat cSVFormat8 = cSVFormat7.withSkipHeaderRecord();
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertNull(cSVFormat7.getNullString());
      assertEquals(',', cSVFormat7.getDelimiter());
      assertNull(cSVFormat7.getQuoteMode());
      assertFalse(cSVFormat7.isNullStringSet());
      assertTrue(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getTrim());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertNull(cSVFormat7.getCommentMarker());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertTrue(cSVFormat7.getSkipHeaderRecord());
      assertEquals("#", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.getTrim());
      assertEquals("#", cSVFormat8.getRecordSeparator());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertNull(cSVFormat8.getQuoteMode());
      assertFalse(cSVFormat8.isEscapeCharacterSet());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.isNullStringSet());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertTrue(cSVFormat8.getSkipHeaderRecord());
      assertNull(cSVFormat8.getNullString());
      assertTrue(cSVFormat8.getAllowMissingColumnNames());
      assertNull(cSVFormat8.getCommentMarker());
      assertEquals(',', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("#", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertEquals("#", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals(7, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertTrue(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertTrue(cSVFormat8.equals((Object)cSVFormat2));
      assertTrue(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertTrue(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat8);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat4);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(ES.Gny<^IiV<";
      CSVFormat cSVFormat9 = cSVFormat8.TDF.withHeader(stringArray0);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertNull(cSVFormat7.getNullString());
      assertEquals(',', cSVFormat7.getDelimiter());
      assertNull(cSVFormat7.getQuoteMode());
      assertFalse(cSVFormat7.isNullStringSet());
      assertTrue(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getTrim());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertNull(cSVFormat7.getCommentMarker());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertTrue(cSVFormat7.getSkipHeaderRecord());
      assertEquals("#", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.getTrim());
      assertEquals("#", cSVFormat8.getRecordSeparator());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertNull(cSVFormat8.getQuoteMode());
      assertFalse(cSVFormat8.isEscapeCharacterSet());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.isNullStringSet());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertTrue(cSVFormat8.getSkipHeaderRecord());
      assertNull(cSVFormat8.getNullString());
      assertTrue(cSVFormat8.getAllowMissingColumnNames());
      assertNull(cSVFormat8.getCommentMarker());
      assertEquals(',', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("#", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertEquals("#", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat9.isNullStringSet());
      assertEquals('\"', (char)cSVFormat9.getQuoteCharacter());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertNull(cSVFormat9.getCommentMarker());
      assertFalse(cSVFormat9.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat9.getRecordSeparator());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertFalse(cSVFormat9.getTrim());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertNull(cSVFormat9.getEscapeCharacter());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      assertTrue(cSVFormat9.getIgnoreEmptyLines());
      assertNull(cSVFormat9.getNullString());
      assertEquals('\t', cSVFormat9.getDelimiter());
      assertTrue(cSVFormat9.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat9.getQuoteMode());
      assertEquals(1, stringArray0.length);
      assertEquals(7, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertTrue(cSVFormat7.equals((Object)cSVFormat8));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertTrue(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertTrue(cSVFormat8.equals((Object)cSVFormat2));
      assertTrue(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertTrue(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertTrue(cSVFormat3.equals((Object)cSVFormat8));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertNotNull(cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat8);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat9);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat9);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat7);
      
      boolean boolean0 = cSVFormat8.getTrailingDelimiter();
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertNull(cSVFormat7.getNullString());
      assertEquals(',', cSVFormat7.getDelimiter());
      assertNull(cSVFormat7.getQuoteMode());
      assertFalse(cSVFormat7.isNullStringSet());
      assertTrue(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getTrim());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertNull(cSVFormat7.getCommentMarker());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertTrue(cSVFormat7.getSkipHeaderRecord());
      assertEquals("#", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.getTrim());
      assertEquals("#", cSVFormat8.getRecordSeparator());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertNull(cSVFormat8.getQuoteMode());
      assertFalse(cSVFormat8.isEscapeCharacterSet());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.isNullStringSet());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertTrue(cSVFormat8.getSkipHeaderRecord());
      assertNull(cSVFormat8.getNullString());
      assertTrue(cSVFormat8.getAllowMissingColumnNames());
      assertNull(cSVFormat8.getCommentMarker());
      assertEquals(',', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("#", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertEquals("#", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals(7, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertTrue(cSVFormat7.equals((Object)cSVFormat8));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertTrue(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertTrue(cSVFormat8.equals((Object)cSVFormat2));
      assertTrue(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat9));
      assertTrue(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat9));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat9));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertTrue(cSVFormat3.equals((Object)cSVFormat8));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(boolean0);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat8);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat9);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat9);
      assertNotSame(cSVFormat3, cSVFormat4);
      
      Float float0 = new Float((-130.70100353));
      assertEquals((-130.701F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = '#';
      charArray0[5] = '#';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("######", charBuffer0.toString());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(6, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertArrayEquals(new char[] {'#', '#', '#', '#', '#', '#'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        cSVFormat4.print((Object) float0, (Appendable) charBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNotNull(cSVFormat0);
      
      URI uRI0 = MockURI.aFileURI;
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(path0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(charset0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.RFC4180.print(path0, charset0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(cSVPrinter0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      Character character0 = Character.valueOf('~');
      assertEquals('~', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('~', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat1.INFORMIX_UNLOAD_CSV.withHeader(stringArray0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals(0, stringArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      
      CSVFormat cSVFormat4 = cSVFormat2.withEscape('~');
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('~', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals('~', (char)cSVFormat4.getEscapeCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertTrue(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      
      String[] stringArray1 = cSVFormat4.getHeaderComments();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('~', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals('~', (char)cSVFormat4.getEscapeCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertTrue(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNull(stringArray1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      
      CSVFormat cSVFormat5 = cSVFormat1.withRecordSeparator('y');
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals("y", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat3);
      
      CSVFormat cSVFormat6 = cSVFormat1.withNullString("28V.");
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertNull(cSVFormat6.getCommentMarker());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNull(cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertEquals("28V.", cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.isNullStringSet());
      assertNull(cSVFormat6.getQuoteMode());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat5);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNotNull(cSVFormat0);
      
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withTrailingDelimiter();
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "", 44, 44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("TDF");
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals("TDF", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withQuote('J');
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals("TDF", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertEquals('J', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator('j');
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals("j", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat1.MYSQL.withHeader(class0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals("TDF", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertEquals("\\N", cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      
      CSVFormat cSVFormat5 = cSVFormat3.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals("j", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals('\\', (char)cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertEquals('|', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getNullString());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat6 = cSVFormat3.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals("j", cSVFormat3.getRecordSeparator());
      assertEquals("j", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertNull(cSVFormat6.getCommentMarker());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertNull(cSVFormat6.getQuoteMode());
      assertNull(cSVFormat6.getNullString());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat2);
      
      CSVFormat cSVFormat7 = cSVFormat0.DEFAULT.withQuoteMode(quoteMode0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.isNullStringSet());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertEquals(QuoteMode.MINIMAL, cSVFormat7.getQuoteMode());
      assertEquals(',', cSVFormat7.getDelimiter());
      assertNull(cSVFormat7.getCommentMarker());
      assertEquals("\r\n", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getTrim());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertNull(cSVFormat7.getNullString());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat2);
      
      CSVFormat cSVFormat8 = CSVFormat.valueOf("TDF");
      assertFalse(cSVFormat8.isEscapeCharacterSet());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertNull(cSVFormat8.getCommentMarker());
      assertEquals("\r\n", cSVFormat8.getRecordSeparator());
      assertNull(cSVFormat8.getQuoteMode());
      assertTrue(cSVFormat8.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat8.isNullStringSet());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertFalse(cSVFormat8.getTrim());
      assertNull(cSVFormat8.getNullString());
      assertNull(cSVFormat8.getEscapeCharacter());
      assertEquals('\t', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertNotNull(cSVFormat8);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat7);
      
      CSVFormat cSVFormat9 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces(false);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat9.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat9.getRecordSeparator());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat9.isNullStringSet());
      assertFalse(cSVFormat9.getIgnoreEmptyLines());
      assertNull(cSVFormat9.getQuoteCharacter());
      assertEquals("\\N", cSVFormat9.getNullString());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat9.getDelimiter());
      assertNull(cSVFormat9.getCommentMarker());
      assertTrue(cSVFormat9.isEscapeCharacterSet());
      assertEquals('\\', (char)cSVFormat9.getEscapeCharacter());
      assertNull(cSVFormat9.getQuoteMode());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertFalse(cSVFormat9.getTrim());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertNotNull(cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat5);
      
      CSVFormat cSVFormat10 = cSVFormat7.withQuote('j');
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.isNullStringSet());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertEquals(QuoteMode.MINIMAL, cSVFormat7.getQuoteMode());
      assertEquals(',', cSVFormat7.getDelimiter());
      assertNull(cSVFormat7.getCommentMarker());
      assertEquals("\r\n", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getTrim());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertNull(cSVFormat7.getNullString());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat10.getAllowMissingColumnNames());
      assertFalse(cSVFormat10.isNullStringSet());
      assertEquals('j', (char)cSVFormat10.getQuoteCharacter());
      assertFalse(cSVFormat10.getSkipHeaderRecord());
      assertNull(cSVFormat10.getNullString());
      assertTrue(cSVFormat10.isQuoteCharacterSet());
      assertNull(cSVFormat10.getEscapeCharacter());
      assertFalse(cSVFormat10.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat10.getTrim());
      assertFalse(cSVFormat10.getTrailingDelimiter());
      assertTrue(cSVFormat10.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat10.getDelimiter());
      assertNull(cSVFormat10.getCommentMarker());
      assertEquals("\r\n", cSVFormat10.getRecordSeparator());
      assertFalse(cSVFormat10.isEscapeCharacterSet());
      assertFalse(cSVFormat10.isCommentMarkerSet());
      assertEquals(QuoteMode.MINIMAL, cSVFormat10.getQuoteMode());
      assertFalse(cSVFormat10.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat8));
      assertFalse(cSVFormat7.equals((Object)cSVFormat9));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat10.equals((Object)cSVFormat8));
      assertFalse(cSVFormat10.equals((Object)cSVFormat5));
      assertFalse(cSVFormat10.equals((Object)cSVFormat9));
      assertFalse(cSVFormat10.equals((Object)cSVFormat7));
      assertFalse(cSVFormat10.equals((Object)cSVFormat4));
      assertFalse(cSVFormat10.equals((Object)cSVFormat6));
      assertFalse(cSVFormat10.equals((Object)cSVFormat1));
      assertFalse(cSVFormat10.equals((Object)cSVFormat2));
      assertFalse(cSVFormat10.equals((Object)cSVFormat0));
      assertFalse(cSVFormat10.equals((Object)cSVFormat3));
      assertNotNull(cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat8);
      assertNotSame(cSVFormat7, cSVFormat9);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat10);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat10, cSVFormat8);
      assertNotSame(cSVFormat10, cSVFormat5);
      assertNotSame(cSVFormat10, cSVFormat9);
      assertNotSame(cSVFormat10, cSVFormat7);
      assertNotSame(cSVFormat10, cSVFormat4);
      assertNotSame(cSVFormat10, cSVFormat6);
      assertNotSame(cSVFormat10, cSVFormat1);
      assertNotSame(cSVFormat10, cSVFormat2);
      assertNotSame(cSVFormat10, cSVFormat0);
      assertNotSame(cSVFormat10, cSVFormat3);
      
      CSVFormat cSVFormat11 = CSVFormat.valueOf("TDF");
      assertFalse(cSVFormat11.getIgnoreHeaderCase());
      assertTrue(cSVFormat11.isQuoteCharacterSet());
      assertNull(cSVFormat11.getEscapeCharacter());
      assertNull(cSVFormat11.getCommentMarker());
      assertTrue(cSVFormat11.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat11.getRecordSeparator());
      assertTrue(cSVFormat11.getIgnoreEmptyLines());
      assertFalse(cSVFormat11.getSkipHeaderRecord());
      assertFalse(cSVFormat11.getTrailingDelimiter());
      assertEquals('\t', cSVFormat11.getDelimiter());
      assertNull(cSVFormat11.getNullString());
      assertFalse(cSVFormat11.getTrim());
      assertNull(cSVFormat11.getQuoteMode());
      assertFalse(cSVFormat11.isNullStringSet());
      assertEquals('\"', (char)cSVFormat11.getQuoteCharacter());
      assertFalse(cSVFormat11.getAllowMissingColumnNames());
      assertFalse(cSVFormat11.isCommentMarkerSet());
      assertFalse(cSVFormat11.isEscapeCharacterSet());
      assertFalse(cSVFormat11.equals((Object)cSVFormat2));
      assertFalse(cSVFormat11.equals((Object)cSVFormat4));
      assertFalse(cSVFormat11.equals((Object)cSVFormat10));
      assertFalse(cSVFormat11.equals((Object)cSVFormat6));
      assertFalse(cSVFormat11.equals((Object)cSVFormat9));
      assertFalse(cSVFormat11.equals((Object)cSVFormat5));
      assertFalse(cSVFormat11.equals((Object)cSVFormat3));
      assertFalse(cSVFormat11.equals((Object)cSVFormat7));
      assertFalse(cSVFormat11.equals((Object)cSVFormat0));
      assertFalse(cSVFormat11.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat11);
      assertNotSame(cSVFormat11, cSVFormat2);
      assertNotSame(cSVFormat11, cSVFormat4);
      assertNotSame(cSVFormat11, cSVFormat10);
      assertNotSame(cSVFormat11, cSVFormat6);
      assertNotSame(cSVFormat11, cSVFormat9);
      assertNotSame(cSVFormat11, cSVFormat5);
      assertNotSame(cSVFormat11, cSVFormat3);
      assertNotSame(cSVFormat11, cSVFormat7);
      assertNotSame(cSVFormat11, cSVFormat0);
      assertSame(cSVFormat11, cSVFormat8);
      assertNotSame(cSVFormat11, cSVFormat1);
      
      CSVFormat cSVFormat12 = cSVFormat11.INFORMIX_UNLOAD.withAllowMissingColumnNames(false);
      assertFalse(cSVFormat11.getIgnoreHeaderCase());
      assertTrue(cSVFormat11.isQuoteCharacterSet());
      assertNull(cSVFormat11.getEscapeCharacter());
      assertNull(cSVFormat11.getCommentMarker());
      assertTrue(cSVFormat11.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat11.getRecordSeparator());
      assertTrue(cSVFormat11.getIgnoreEmptyLines());
      assertFalse(cSVFormat11.getSkipHeaderRecord());
      assertFalse(cSVFormat11.getTrailingDelimiter());
      assertEquals('\t', cSVFormat11.getDelimiter());
      assertNull(cSVFormat11.getNullString());
      assertFalse(cSVFormat11.getTrim());
      assertNull(cSVFormat11.getQuoteMode());
      assertFalse(cSVFormat11.isNullStringSet());
      assertEquals('\"', (char)cSVFormat11.getQuoteCharacter());
      assertFalse(cSVFormat11.getAllowMissingColumnNames());
      assertFalse(cSVFormat11.isCommentMarkerSet());
      assertFalse(cSVFormat11.isEscapeCharacterSet());
      assertFalse(cSVFormat12.getAllowMissingColumnNames());
      assertTrue(cSVFormat12.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat12.getQuoteCharacter());
      assertFalse(cSVFormat12.isNullStringSet());
      assertNull(cSVFormat12.getNullString());
      assertNull(cSVFormat12.getCommentMarker());
      assertFalse(cSVFormat12.getTrailingDelimiter());
      assertFalse(cSVFormat12.getTrim());
      assertFalse(cSVFormat12.getIgnoreHeaderCase());
      assertFalse(cSVFormat12.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat12.isQuoteCharacterSet());
      assertFalse(cSVFormat12.isCommentMarkerSet());
      assertEquals('\\', (char)cSVFormat12.getEscapeCharacter());
      assertNull(cSVFormat12.getQuoteMode());
      assertFalse(cSVFormat12.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat12.getRecordSeparator());
      assertEquals('|', cSVFormat12.getDelimiter());
      assertTrue(cSVFormat12.getIgnoreEmptyLines());
      assertFalse(cSVFormat11.equals((Object)cSVFormat2));
      assertFalse(cSVFormat11.equals((Object)cSVFormat4));
      assertFalse(cSVFormat11.equals((Object)cSVFormat10));
      assertFalse(cSVFormat11.equals((Object)cSVFormat6));
      assertFalse(cSVFormat11.equals((Object)cSVFormat9));
      assertFalse(cSVFormat11.equals((Object)cSVFormat5));
      assertFalse(cSVFormat11.equals((Object)cSVFormat3));
      assertFalse(cSVFormat11.equals((Object)cSVFormat7));
      assertFalse(cSVFormat11.equals((Object)cSVFormat0));
      assertFalse(cSVFormat11.equals((Object)cSVFormat1));
      assertFalse(cSVFormat12.equals((Object)cSVFormat8));
      assertFalse(cSVFormat12.equals((Object)cSVFormat11));
      assertFalse(cSVFormat12.equals((Object)cSVFormat1));
      assertFalse(cSVFormat12.equals((Object)cSVFormat0));
      assertFalse(cSVFormat12.equals((Object)cSVFormat2));
      assertFalse(cSVFormat12.equals((Object)cSVFormat3));
      assertFalse(cSVFormat12.equals((Object)cSVFormat10));
      assertFalse(cSVFormat12.equals((Object)cSVFormat7));
      assertFalse(cSVFormat12.equals((Object)cSVFormat6));
      assertFalse(cSVFormat12.equals((Object)cSVFormat4));
      assertFalse(cSVFormat12.equals((Object)cSVFormat5));
      assertFalse(cSVFormat12.equals((Object)cSVFormat9));
      assertNotNull(cSVFormat12);
      assertNotSame(cSVFormat11, cSVFormat2);
      assertNotSame(cSVFormat11, cSVFormat4);
      assertNotSame(cSVFormat11, cSVFormat10);
      assertNotSame(cSVFormat11, cSVFormat6);
      assertNotSame(cSVFormat11, cSVFormat9);
      assertNotSame(cSVFormat11, cSVFormat5);
      assertNotSame(cSVFormat11, cSVFormat3);
      assertNotSame(cSVFormat11, cSVFormat7);
      assertNotSame(cSVFormat11, cSVFormat0);
      assertNotSame(cSVFormat11, cSVFormat12);
      assertSame(cSVFormat11, cSVFormat8);
      assertNotSame(cSVFormat11, cSVFormat1);
      assertNotSame(cSVFormat12, cSVFormat8);
      assertNotSame(cSVFormat12, cSVFormat11);
      assertNotSame(cSVFormat12, cSVFormat1);
      assertNotSame(cSVFormat12, cSVFormat0);
      assertNotSame(cSVFormat12, cSVFormat2);
      assertNotSame(cSVFormat12, cSVFormat3);
      assertNotSame(cSVFormat12, cSVFormat10);
      assertNotSame(cSVFormat12, cSVFormat7);
      assertNotSame(cSVFormat12, cSVFormat6);
      assertNotSame(cSVFormat12, cSVFormat4);
      assertNotSame(cSVFormat12, cSVFormat5);
      assertNotSame(cSVFormat12, cSVFormat9);
      
      boolean boolean0 = cSVFormat3.getSkipHeaderRecord();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals("j", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat12));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat11));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat3.equals((Object)cSVFormat8));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat11));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat10));
      assertFalse(cSVFormat3.equals((Object)cSVFormat9));
      assertFalse(cSVFormat3.equals((Object)cSVFormat12));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(boolean0);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat11);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat10);
      assertNotSame(cSVFormat3, cSVFormat9);
      assertNotSame(cSVFormat3, cSVFormat12);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat6);
      
      boolean boolean1 = cSVFormat0.equals(cSVFormat3);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals("j", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat12));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat11));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertTrue(boolean1 == boolean0);
      assertFalse(cSVFormat3.equals((Object)cSVFormat8));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat11));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat10));
      assertFalse(cSVFormat3.equals((Object)cSVFormat9));
      assertFalse(cSVFormat3.equals((Object)cSVFormat12));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(boolean1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat11);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat10);
      assertNotSame(cSVFormat3, cSVFormat9);
      assertNotSame(cSVFormat3, cSVFormat12);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat6);
      
      boolean boolean2 = cSVFormat1.getAllowMissingColumnNames();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals("TDF", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat12));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat11));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat11));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat10));
      assertFalse(cSVFormat1.equals((Object)cSVFormat12));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat12);
      assertNotSame(cSVFormat1, cSVFormat5);
      
      boolean boolean3 = cSVFormat1.getTrim();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals("TDF", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat12));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat11));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat11));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat10));
      assertFalse(cSVFormat1.equals((Object)cSVFormat12));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat12);
      assertNotSame(cSVFormat1, cSVFormat5);
      
      CSVFormat cSVFormat13 = cSVFormat9.TDF.withTrailingDelimiter(false);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat13.getNullString());
      assertFalse(cSVFormat13.isNullStringSet());
      assertFalse(cSVFormat13.getAllowMissingColumnNames());
      assertFalse(cSVFormat13.getTrailingDelimiter());
      assertFalse(cSVFormat13.getTrim());
      assertEquals('\"', (char)cSVFormat13.getQuoteCharacter());
      assertTrue(cSVFormat13.getIgnoreEmptyLines());
      assertNull(cSVFormat13.getQuoteMode());
      assertNull(cSVFormat13.getCommentMarker());
      assertTrue(cSVFormat13.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat13.getRecordSeparator());
      assertEquals('\t', cSVFormat13.getDelimiter());
      assertFalse(cSVFormat13.getSkipHeaderRecord());
      assertFalse(cSVFormat13.isEscapeCharacterSet());
      assertNull(cSVFormat13.getEscapeCharacter());
      assertFalse(cSVFormat13.isCommentMarkerSet());
      assertTrue(cSVFormat13.isQuoteCharacterSet());
      assertFalse(cSVFormat13.getIgnoreHeaderCase());
      assertFalse(cSVFormat9.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat9.getRecordSeparator());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat9.isNullStringSet());
      assertFalse(cSVFormat9.getIgnoreEmptyLines());
      assertNull(cSVFormat9.getQuoteCharacter());
      assertEquals("\\N", cSVFormat9.getNullString());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat9.getDelimiter());
      assertNull(cSVFormat9.getCommentMarker());
      assertTrue(cSVFormat9.isEscapeCharacterSet());
      assertEquals('\\', (char)cSVFormat9.getEscapeCharacter());
      assertNull(cSVFormat9.getQuoteMode());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertFalse(cSVFormat9.getTrim());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat12));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat11));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat13.equals((Object)cSVFormat6));
      assertFalse(cSVFormat13.equals((Object)cSVFormat7));
      assertFalse(cSVFormat13.equals((Object)cSVFormat9));
      assertFalse(cSVFormat13.equals((Object)cSVFormat2));
      assertTrue(cSVFormat13.equals((Object)cSVFormat8));
      assertFalse(cSVFormat13.equals((Object)cSVFormat3));
      assertFalse(cSVFormat13.equals((Object)cSVFormat4));
      assertFalse(cSVFormat13.equals((Object)cSVFormat10));
      assertFalse(cSVFormat13.equals((Object)cSVFormat5));
      assertFalse(cSVFormat13.equals((Object)cSVFormat1));
      assertFalse(cSVFormat13.equals((Object)cSVFormat0));
      assertTrue(cSVFormat13.equals((Object)cSVFormat11));
      assertFalse(cSVFormat13.equals((Object)cSVFormat12));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat12));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat11));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat10));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertNotNull(cSVFormat13);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat13);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat13, cSVFormat6);
      assertNotSame(cSVFormat13, cSVFormat11);
      assertNotSame(cSVFormat13, cSVFormat7);
      assertNotSame(cSVFormat13, cSVFormat9);
      assertNotSame(cSVFormat13, cSVFormat2);
      assertNotSame(cSVFormat13, cSVFormat3);
      assertNotSame(cSVFormat13, cSVFormat4);
      assertNotSame(cSVFormat13, cSVFormat10);
      assertNotSame(cSVFormat13, cSVFormat8);
      assertNotSame(cSVFormat13, cSVFormat5);
      assertNotSame(cSVFormat13, cSVFormat1);
      assertNotSame(cSVFormat13, cSVFormat0);
      assertNotSame(cSVFormat13, cSVFormat12);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat11);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat10);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat12);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat13);
      assertNotSame(cSVFormat9, cSVFormat5);
      
      boolean boolean4 = cSVFormat5.isQuoteCharacterSet();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals("j", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals('\\', (char)cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertEquals('|', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getNullString());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat12));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat13));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat11));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat3.equals((Object)cSVFormat11));
      assertFalse(cSVFormat3.equals((Object)cSVFormat12));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat13));
      assertFalse(cSVFormat3.equals((Object)cSVFormat8));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat10));
      assertFalse(cSVFormat3.equals((Object)cSVFormat9));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat10));
      assertFalse(cSVFormat5.equals((Object)cSVFormat12));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat9));
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat11));
      assertFalse(cSVFormat5.equals((Object)cSVFormat13));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat8));
      assertTrue(boolean4);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat13);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat3, cSVFormat11);
      assertNotSame(cSVFormat3, cSVFormat12);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat13);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat10);
      assertNotSame(cSVFormat3, cSVFormat9);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat10);
      assertNotSame(cSVFormat5, cSVFormat12);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat9);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat11);
      assertNotSame(cSVFormat5, cSVFormat13);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat8);
      
      CSVFormat cSVFormat14 = CSVFormat.newFormat('E');
      assertFalse(cSVFormat14.isNullStringSet());
      assertEquals('E', cSVFormat14.getDelimiter());
      assertFalse(cSVFormat14.getAllowMissingColumnNames());
      assertNull(cSVFormat14.getQuoteCharacter());
      assertNull(cSVFormat14.getNullString());
      assertNull(cSVFormat14.getQuoteMode());
      assertFalse(cSVFormat14.getTrailingDelimiter());
      assertFalse(cSVFormat14.getIgnoreEmptyLines());
      assertNull(cSVFormat14.getEscapeCharacter());
      assertFalse(cSVFormat14.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat14.getTrim());
      assertNull(cSVFormat14.getRecordSeparator());
      assertFalse(cSVFormat14.isCommentMarkerSet());
      assertFalse(cSVFormat14.getIgnoreHeaderCase());
      assertNull(cSVFormat14.getCommentMarker());
      assertFalse(cSVFormat14.getSkipHeaderRecord());
      assertFalse(cSVFormat14.isQuoteCharacterSet());
      assertFalse(cSVFormat14.isEscapeCharacterSet());
      assertFalse(cSVFormat14.equals((Object)cSVFormat11));
      assertFalse(cSVFormat14.equals((Object)cSVFormat0));
      assertFalse(cSVFormat14.equals((Object)cSVFormat13));
      assertFalse(cSVFormat14.equals((Object)cSVFormat8));
      assertFalse(cSVFormat14.equals((Object)cSVFormat5));
      assertFalse(cSVFormat14.equals((Object)cSVFormat1));
      assertFalse(cSVFormat14.equals((Object)cSVFormat3));
      assertFalse(cSVFormat14.equals((Object)cSVFormat4));
      assertFalse(cSVFormat14.equals((Object)cSVFormat12));
      assertFalse(cSVFormat14.equals((Object)cSVFormat2));
      assertFalse(cSVFormat14.equals((Object)cSVFormat7));
      assertFalse(cSVFormat14.equals((Object)cSVFormat6));
      assertFalse(cSVFormat14.equals((Object)cSVFormat9));
      assertFalse(cSVFormat14.equals((Object)cSVFormat10));
      assertNotNull(cSVFormat14);
      assertNotSame(cSVFormat14, cSVFormat11);
      assertNotSame(cSVFormat14, cSVFormat0);
      assertNotSame(cSVFormat14, cSVFormat13);
      assertNotSame(cSVFormat14, cSVFormat8);
      assertNotSame(cSVFormat14, cSVFormat5);
      assertNotSame(cSVFormat14, cSVFormat1);
      assertNotSame(cSVFormat14, cSVFormat3);
      assertNotSame(cSVFormat14, cSVFormat4);
      assertNotSame(cSVFormat14, cSVFormat12);
      assertNotSame(cSVFormat14, cSVFormat2);
      assertNotSame(cSVFormat14, cSVFormat7);
      assertNotSame(cSVFormat14, cSVFormat6);
      assertNotSame(cSVFormat14, cSVFormat9);
      assertNotSame(cSVFormat14, cSVFormat10);
      
      boolean boolean5 = cSVFormat9.equals((Object) null);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat9.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat9.getRecordSeparator());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat9.isNullStringSet());
      assertFalse(cSVFormat9.getIgnoreEmptyLines());
      assertNull(cSVFormat9.getQuoteCharacter());
      assertEquals("\\N", cSVFormat9.getNullString());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat9.getDelimiter());
      assertNull(cSVFormat9.getCommentMarker());
      assertTrue(cSVFormat9.isEscapeCharacterSet());
      assertEquals('\\', (char)cSVFormat9.getEscapeCharacter());
      assertNull(cSVFormat9.getQuoteMode());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertFalse(cSVFormat9.getTrim());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat12));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat13));
      assertFalse(cSVFormat0.equals((Object)cSVFormat14));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat11));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat11));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat14));
      assertFalse(cSVFormat9.equals((Object)cSVFormat10));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat12));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat13));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertFalse(boolean5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat13);
      assertNotSame(cSVFormat0, cSVFormat14);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat11);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat14);
      assertNotSame(cSVFormat9, cSVFormat10);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat12);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat13);
      assertNotSame(cSVFormat9, cSVFormat5);
      
      String[] stringArray0 = cSVFormat1.getHeader();
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals("TDF", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat12));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat13));
      assertFalse(cSVFormat0.equals((Object)cSVFormat14));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat11));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat13));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat12));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat11));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat14));
      assertFalse(cSVFormat1.equals((Object)cSVFormat10));
      assertNull(stringArray0);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat13);
      assertNotSame(cSVFormat0, cSVFormat14);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat13);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat12);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat14);
      assertNotSame(cSVFormat1, cSVFormat10);
      
      PipedReader pipedReader0 = new PipedReader(44);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 44);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNotNull(cSVFormat0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withHeader(resultSet0);
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals(0, stringArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      Character character0 = cSVFormat0.getCommentMarker();
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertNull(character0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals(0, stringArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      
      File file0 = MockFile.createTempFile("Wt^O", "Wt^O");
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/Wt^O0Wt^O", file0.toString());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("Wt^O0Wt^O", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "Wt^O");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Wt^O
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreEmptyLines(false);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      String string0 = "";
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withRecordSeparator('$');
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals("$", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVFormat cSVFormat3 = cSVFormat0.RFC4180.withFirstRecordAsHeader();
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      String string1 = "";
      String string2 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "Da8 uV>\"f_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      char char0 = '*';
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD.withCommentMarker('*');
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('*', (char)cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(boolean0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      
      boolean boolean1 = cSVFormat1.getAllowMissingColumnNames();
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      
      String string0 = "out";
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("out");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.out
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNotNull(cSVFormat0);
      
      Character character0 = Character.valueOf('7');
      assertEquals('7', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape(character0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('7', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(") invalid parse sequence");
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[5];
      mockPrintStream0.println((Object) character0);
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker('7');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('7')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNotNull(cSVFormat0);
      
      Character character0 = Character.valueOf('7');
      assertEquals('7', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(") invalid parse sequence");
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      mockPrintStream0.println(objectArray0[0]);
      assertEquals(5, objectArray0.length);
      
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) mockPrintStream0;
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withCommentMarker('7');
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('7', (char)cSVFormat2.getCommentMarker());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      cSVFormat2.TDF.printRecord(mockPrintStream0, objectArray0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('7', (char)cSVFormat2.getCommentMarker());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(5, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      objectArray0[4] = (Object) mockPrintStream0;
      cSVFormat0.EXCEL.printRecord(mockPrintStream0, objectArray0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals(5, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      
      Character character1 = cSVFormat0.getEscapeCharacter();
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertNull(character1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      Character character2 = new Character('7');
      assertTrue(character2.equals((Object)character0));
      assertEquals('7', (char)character2);
      assertNotNull(character2);
      
      // Undeclared exception!
      try { 
        cSVFormat2.withQuote(character2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('7')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNotNull(cSVFormat0);
      
      StringWriter stringWriter0 = new StringWriter(1237);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) stringWriter0;
      cSVFormat0.MYSQL.printRecord(stringWriter0, objectArray0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(6, objectArray0.length);
      
      char char0 = ',';
      Character character0 = Character.valueOf(',');
      assertEquals(',', (char)character0);
      assertNotNull(character0);
      
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.EXCEL;
          CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
          Character character0 = null;
          CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
          CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
          CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSet) null);
          CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
          CSVFormat cSVFormat6 = cSVFormat5.RFC4180.withHeader((ResultSet) null);
          cSVFormat6.INFORMIX_UNLOAD.withAllowMissingColumnNames();
          PipedReader pipedReader0 = new PipedReader(1212);
          cSVFormat5.parse(pipedReader0);
          CSVFormat cSVFormat7 = cSVFormat5.withIgnoreHeaderCase();
          CSVFormat cSVFormat8 = cSVFormat7.withNullString((String) null);
          cSVFormat8.MYSQL.withRecordSeparator("");
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor70.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      char char0 = '=';
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('=');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat3.RFC4180.withQuoteMode(quoteMode0);
      cSVFormat3.DEFAULT.withTrailingDelimiter();
      Character character0 = new Character('~');
      cSVFormat3.withEscape(character0);
      String string0 = "\\Nyx{f6O}";
      String string1 = "!'KH<M.vRx)nDk";
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("O,9XQV}g$gSE**", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      char char0 = 'R';
      CSVFormat.newFormat('R');
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('7');
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape(character0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(") invalid parse sequence");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      mockPrintStream0.println(objectArray0[0]);
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withCommentMarker('7');
      cSVFormat2.TDF.printRecord(mockPrintStream0, objectArray0);
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('7', (char)cSVFormat2.getCommentMarker());
      
      objectArray0[4] = (Object) mockPrintStream0;
      cSVFormat0.EXCEL.printRecord(mockPrintStream0, objectArray0);
      cSVFormat0.getEscapeCharacter();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat3.withIgnoreEmptyLines();
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('0');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      cSVFormat4.withIgnoreEmptyLines(false);
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      char char0 = 't';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker('t');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('t')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }
}
