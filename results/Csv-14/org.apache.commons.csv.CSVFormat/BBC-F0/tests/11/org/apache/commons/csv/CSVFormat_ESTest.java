/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 06:38:58 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Locale;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.withDelimiter(']');
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat0.getRecordSeparator();
      cSVFormat0.equals(cSVFormat3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.newFormat(']');
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter(']');
      cSVFormat4.toString();
      CSVFormat cSVFormat5 = cSVFormat2.withTrim(false);
      cSVFormat5.withNullString("");
      cSVFormat2.format(objectArray0);
      cSVFormat2.format(objectArray0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat3.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat5.withIgnoreSurroundingSpaces(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("pu~Z5", false);
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, "({;o|[Lv");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('G');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ",#Ke<^SU%f";
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) ",#Ke<^SU%f";
      objectArray0[7] = (Object) ",#Ke<^SU%f";
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(']');
      cSVFormat1.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("Yol6=@FI\"<FRkvV%C");
      CSVFormat.newFormat('Z');
      String[] stringArray0 = new String[1];
      stringArray0[0] = "qfV{MGL:u>vAC7iC,0";
      cSVFormat2.withHeader(stringArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      cSVFormat3.withHeaderComments(objectArray0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet1).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet1);
      cSVFormat4.getRecordSeparator();
      cSVFormat4.equals(cSVFormat2);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('G');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter();
      cSVFormat2.format(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      cSVFormat4.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(true);
      String[] stringArray0 = new String[2];
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat2.print(path0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('N');
      cSVFormat3.toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(resultSet0);
      cSVFormat4.withTrim(true);
      CSVFormat cSVFormat5 = cSVFormat2.withNullString("_;)$&8");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^BJKZ!";
      stringArray0[1] = "_;)$&8";
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(stringArray0);
      cSVFormat5.format(stringArray0);
      cSVFormat3.format(stringArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat6.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      cSVFormat3.MYSQL.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreEmptyLines(true);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) cSVFormat6;
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) cSVFormat2;
      objectArray1[3] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray1[4] = (Object) cSVFormat2;
      objectArray1[5] = (Object) cSVFormat5;
      objectArray1[6] = (Object) cSVFormat5;
      cSVFormat4.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(']');
      cSVFormat2.toString();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      cSVFormat0.withNullString("Eqt$T7ue(");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Delimiter=<]> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      stringArray0[1] = "";
      cSVFormat2.withHeader(stringArray0);
      cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter();
      cSVFormat4.format(stringArray0);
      cSVFormat3.withAllowMissingColumnNames();
      cSVFormat4.withIgnoreEmptyLines(true);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("Unexpected Quote value: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.Unexpected Quote value: 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('G');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ",#Ke<^SU%f";
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) ",#Ke<^SU%f";
      objectArray0[7] = (Object) ",#Ke<^SU%f";
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(']');
      cSVFormat1.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("Yol6=@FI\"<FRkvV%C");
      CSVFormat.newFormat('Z');
      String[] stringArray0 = new String[1];
      stringArray0[0] = "qfV{MGL:u>vAC7iC,0";
      cSVFormat2.withHeader(stringArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      cSVFormat3.withHeaderComments(objectArray0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet1);
      cSVFormat4.getRecordSeparator();
      cSVFormat4.equals(cSVFormat2);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('G');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ",#Ke<^SU%f";
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) ",#Ke<^SU%f";
      objectArray0[7] = (Object) ",#Ke<^SU%f";
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter(']');
      cSVFormat2.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat.newFormat('Z');
      String[] stringArray0 = new String[1];
      stringArray0[0] = "qfV{MGL:u>vAC7iC,0";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat3.withHeader(resultSet0);
      cSVFormat4.withEscape(character0);
      cSVFormat3.format(stringArray0);
      cSVFormat0.format(objectArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      // Undeclared exception!
      try { 
        cSVFormat5.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('&');
      Character character0 = new Character('[');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker('[');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('[')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      byte[] byteArray0 = new byte[2];
      cSVFormat5.hashCode();
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat6 = cSVFormat5.withTrim();
      cSVFormat6.EXCEL.withTrim();
      Character character0 = Character.valueOf('[');
      CSVFormat cSVFormat7 = cSVFormat1.withCommentMarker(character0);
      cSVFormat7.EXCEL.withIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        cSVFormat1.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("The comment start marker character cannot be a line break");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The comment start marker character cannot be a line break";
      cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      cSVFormat1.withTrailingDelimiter();
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) "";
      objectArray1[1] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray1);
      cSVFormat2.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(true);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat5.withEscape((Character) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('G');
      String[] stringArray0 = null;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.withQuoteMode(quoteMode0);
      Object object0 = new Object();
      char char0 = 'E';
      // Undeclared exception!
      try { 
        cSVFormat2.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      cSVFormat3.MYSQL.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat5 = cSVFormat0.withHeader(stringArray0);
      MockFile mockFile0 = new MockFile("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false", "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat5.EXCEL.print((File) mockFile0, charset0);
      CSVFormat cSVFormat6 = cSVFormat1.withTrailingDelimiter();
      cSVFormat4.format(objectArray0);
      cSVFormat6.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('C');
      cSVFormat0.toString();
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(true);
      cSVFormat3.TDF.hashCode();
      cSVFormat0.withNullString("NONE");
      CSVFormat cSVFormat4 = CSVFormat.newFormat(']');
      cSVFormat0.format(objectArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      stringArray0[1] = "";
      cSVFormat2.MYSQL.withCommentMarker((Character) null);
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      cSVFormat5.withTrailingDelimiter();
      cSVFormat4.format(objectArray0);
      cSVFormat2.format(objectArray0);
      cSVFormat3.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('N');
      cSVFormat3.toString();
      cSVFormat0.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat0.withNullString("");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Delimiter=<N> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      stringArray0[1] = "^BJKZ!";
      cSVFormat0.withHeader(stringArray0);
      cSVFormat1.format(stringArray0);
      cSVFormat4.withFirstRecordAsHeader();
      cSVFormat0.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      CSVFormat cSVFormat4 = cSVFormat2.withDelimiter(']');
      cSVFormat0.toString();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.withTrim(true);
      CSVFormat cSVFormat6 = CSVFormat.MYSQL;
      CSVFormat cSVFormat7 = cSVFormat6.withNullString("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      String[] stringArray0 = new String[0];
      cSVFormat7.withHeader(stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat3.toString();
      cSVFormat4.getHeaderComments();
      cSVFormat1.format(objectArray0);
      cSVFormat3.format(objectArray0);
      cSVFormat7.withIgnoreSurroundingSpaces(true);
      cSVFormat0.getIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('G');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      Object object1 = new Object();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(']');
      cSVFormat2.toString();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      cSVFormat0.withNullString("string");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "string";
      stringArray0[1] = "E^qt$The(";
      stringArray0[2] = "Delimiter=<]> QuoteChar=<\"> CommentStart=<G> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      stringArray0[3] = ",#Ke<^SU%f";
      stringArray0[4] = ",#Ke<^SU%f";
      stringArray0[5] = "Delimiter=<]> QuoteChar=<\"> CommentStart=<G> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      stringArray0[6] = "";
      // Undeclared exception!
      try { 
        cSVFormat3.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: ',#Ke<^SU%f' in [string, E^qt$The(, Delimiter=<]> QuoteChar=<\"> CommentStart=<G> RecordSeparator=<\r
         // > EmptyLines:ignored SkipHeaderRecord:false, ,#Ke<^SU%f, ,#Ke<^SU%f, Delimiter=<]> QuoteChar=<\"> CommentStart=<G> RecordSeparator=<\r
         // > EmptyLines:ignored SkipHeaderRecord:false, ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('N');
      cSVFormat4.toString();
      cSVFormat0.withTrim(false);
      cSVFormat0.withNullString("");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Delimiter=<N> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      stringArray0[1] = "^BJKZ!";
      cSVFormat0.withHeader(stringArray0);
      cSVFormat4.format(stringArray0);
      cSVFormat2.format(stringArray0);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) "Delimiter=<N> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray1[1] = (Object) cSVFormat3;
      objectArray1[2] = (Object) "\"Delimiter=<N> QuoteChar=<\"\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"N^BJKZ!";
      objectArray1[3] = (Object) "INVALID,TOKEN,EOF,EORECORD,COMMENT\r\n\"Delimiter=<N> QuoteChar=<\"\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\",^BJKZ!";
      Object object0 = new Object();
      objectArray1[4] = object0;
      Object object1 = new Object();
      objectArray1[5] = object1;
      cSVFormat4.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      cSVFormat3.MYSQL.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      String[] stringArray0 = new String[1];
      cSVFormat1.EXCEL.withNullString("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      stringArray0[0] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      cSVFormat0.withHeader(stringArray0);
      cSVFormat0.format(objectArray0);
      cSVFormat3.getTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<
         // > SkipHeaderRecord:false
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withEscape(character0);
      cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator(':');
      cSVFormat3.withTrim(true);
      CSVFormat cSVFormat6 = cSVFormat2.withNullString("");
      CSVFormat cSVFormat7 = cSVFormat6.withNullString("");
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat8 = cSVFormat6.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) character0;
      objectArray0[7] = (Object) cSVFormat5;
      Character character1 = new Character(':');
      cSVFormat0.EXCEL.withQuote(character1);
      cSVFormat8.format(objectArray0);
      cSVFormat3.format(objectArray0);
      cSVFormat5.getTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat7.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter(';');
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat1.withNullString("EOF");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "EOF";
      cSVFormat3.withHeader(stringArray0);
      String[] stringArray1 = cSVFormat1.getHeaderComments();
      cSVFormat3.format(stringArray1);
      cSVFormat4.withFirstRecordAsHeader();
      cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      cSVFormat1.toString();
      cSVFormat0.withTrim(false);
      cSVFormat3.withNullString("E^qt$The(");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat4 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter();
      cSVFormat4.format(stringArray0);
      cSVFormat0.format(objectArray0);
      cSVFormat5.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      Character character0 = Character.valueOf('/');
      cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator(':');
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker('S');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) character0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat3.getNullString();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces(false);
      cSVFormat5.getRecordSeparator();
      cSVFormat5.equals(cSVFormat6);
      MockFileWriter mockFileWriter0 = new MockFileWriter("k&o", true);
      cSVFormat2.print((Object) null, (Appendable) mockFileWriter0, false);
      CSVFormat cSVFormat7 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat4.printRecord(mockFileWriter0, objectArray0);
      Character.valueOf('S');
      cSVFormat7.withQuote((Character) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      cSVFormat3.MYSQL.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      cSVFormat1.EXCEL.withNullString("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      cSVFormat4.withQuote('m');
      cSVFormat3.getRecordSeparator();
      cSVFormat0.equals((Object) null);
      Float float0 = new Float(1606.85);
      Short short0 = new Short((short)1237);
      cSVFormat1.equals(short0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      cSVFormat3.MYSQL.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      String[] stringArray0 = new String[1];
      cSVFormat1.EXCEL.withNullString("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      stringArray0[0] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      CSVFormat cSVFormat5 = cSVFormat0.withHeader(stringArray0);
      cSVFormat2.format(stringArray0);
      cSVFormat5.format(objectArray0);
      cSVFormat4.getTrailingDelimiter();
      Character character0 = Character.valueOf(']');
      // Undeclared exception!
      try { 
        cSVFormat4.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same (']')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("");
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
      cSVFormat5.getNullString();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('I');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat0.getCommentMarker();
      cSVFormat2.getHeaderComments();
      CSVFormat cSVFormat3 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments((Object[]) null);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat0.withHeader(class0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat4.print((Object) cSVFormat3, (Appendable) pipedWriter0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.INFORMIX_UNLOAD.hashCode();
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat0.getDelimiter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat.Predefined.values();
      String string0 = "2:X*I";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(35);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true, "2:X*I");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 2:X*I
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      Character character1 = new Character(':');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) character1;
      objectArray0[3] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat0.getNullString();
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(':');
      cSVFormat0.getRecordSeparator();
      cSVFormat2.equals(quoteMode0);
      Float float0 = new Float(372.81754156);
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = 'E';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 90, 90);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat1.withHeaderComments((Object[]) null);
      cSVFormat3.withDelimiter('h');
      cSVFormat2.toString();
      cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("fK,[w9I='");
      String[] stringArray0 = null;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((String[]) null);
      // Undeclared exception!
      try { 
        cSVFormat5.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      cSVFormat2.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      cSVFormat3.withNullString("NONE");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NONE";
      stringArray0[1] = "";
      CSVFormat cSVFormat5 = cSVFormat0.withHeader(stringArray0);
      cSVFormat5.format(objectArray0);
      cSVFormat1.format(objectArray0);
      cSVFormat4.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      cSVFormat3.MYSQL.toString();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(']');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat6 = cSVFormat5.withQuoteMode(quoteMode0);
      cSVFormat6.getNullString();
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat6.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD_CSV.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat3;
      cSVFormat1.DEFAULT.format(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(resultSet0);
      cSVFormat6.getHeaderComments();
      cSVFormat0.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      cSVFormat3.MYSQL.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      Character.valueOf('g');
      Character character0 = new Character('N');
      Character character1 = new Character('g');
      cSVFormat2.withQuote(character1);
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat1.getHeaderComments();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((Class<? extends Enum<?>>) null);
      cSVFormat5.format(objectArray0);
      cSVFormat5.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('I');
      CSVFormat cSVFormat3 = cSVFormat1.withHeaderComments((Object[]) null);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
      cSVFormat5.withDelimiter('}');
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat6.toString();
      cSVFormat1.withTrim(true);
      cSVFormat3.withNullString("skmvn9Ow");
      CSVFormat cSVFormat7 = cSVFormat6.withRecordSeparator("skmvn9Ow");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "skmvn9Ow";
      stringArray0[1] = "skmvn9Ow";
      stringArray0[2] = "skmvn9Ow";
      stringArray0[3] = "Delimiter=<,> QuoteChar=<I> RecordSeparator=<\n> EmptyLines:ignored SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false Header:[]";
      stringArray0[4] = "skmvn9Ow";
      stringArray0[5] = "Delimiter=<,> QuoteChar=<I> RecordSeparator=<\n> EmptyLines:ignored SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false Header:[]";
      stringArray0[6] = "skmvn9Ow";
      stringArray0[7] = "Delimiter=<,> QuoteChar=<I> RecordSeparator=<\n> EmptyLines:ignored SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false Header:[]";
      stringArray0[8] = "skmvn9Ow";
      // Undeclared exception!
      try { 
        cSVFormat7.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'skmvn9Ow' in [skmvn9Ow, skmvn9Ow, skmvn9Ow, Delimiter=<,> QuoteChar=<I> RecordSeparator=<
         // > EmptyLines:ignored SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false Header:[], skmvn9Ow, Delimiter=<,> QuoteChar=<I> RecordSeparator=<
         // > EmptyLines:ignored SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false Header:[], skmvn9Ow, Delimiter=<,> QuoteChar=<I> RecordSeparator=<
         // > EmptyLines:ignored SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false Header:[], skmvn9Ow]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      cSVFormat4.withIgnoreHeaderCase(false);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(resultSet0);
      cSVFormat5.format(objectArray0);
      cSVFormat0.getCommentMarker();
      cSVFormat2.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat2.RFC4180.withRecordSeparator('S');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('-');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) cSVFormat5;
      objectArray0[3] = (Object) cSVFormat3;
      cSVFormat4.format(objectArray0);
      cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat5.getNullString();
      cSVFormat5.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withQuote('0');
      cSVFormat1.getRecordSeparator();
      cSVFormat4.equals(cSVFormat3);
      Float float0 = new Float(0.0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = '-';
      charArray0[2] = '-';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-472), (-472));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) rowSetMetaDataImpl0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) rowSetMetaDataImpl0;
      objectArray0[6] = (Object) rowSetMetaDataImpl0;
      objectArray0[7] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[8] = object0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter(']');
      cSVFormat2.toString();
      cSVFormat0.withTrim(false);
      cSVFormat3.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, java.lang.Object@0000000004] Header:[]");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, java.lang.Object@0000000004] Header:[]";
      stringArray0[1] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, java.lang.Object@0000000004] Header:[]";
      stringArray0[2] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, java.lang.Object@0000000004] Header:[]";
      stringArray0[3] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, java.lang.Object@0000000004] Header:[]";
      stringArray0[4] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, java.lang.Object@0000000004] Header:[]";
      stringArray0[5] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, java.lang.Object@0000000004] Header:[]";
      stringArray0[6] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, java.lang.Object@0000000004] Header:[]";
      // Undeclared exception!
      try { 
        cSVFormat3.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'Delimiter=<,> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, java.lang.Object@0000000004] Header:[]' in [Delimiter=<,> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, java.lang.Object@0000000004] Header:[], Delimiter=<,> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, java.lang.Object@0000000004] Header:[], Delimiter=<,> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, java.lang.Object@0000000004] Header:[], Delimiter=<,> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, java.lang.Object@0000000004] Header:[], Delimiter=<,> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, java.lang.Object@0000000004] Header:[], Delimiter=<,> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, java.lang.Object@0000000004] Header:[], Delimiter=<,> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, javax.sql.rowset.RowSetMetaDataImpl@0000000003, javax.sql.rowset.RowSetMetaDataImpl@0000000003, org.apache.commons.csv.CSVFormat@0000000001, java.lang.Object@0000000004] Header:[]]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('I');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) rowSetMetaDataImpl0;
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      cSVFormat1.withRecordSeparator('7');
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      CSVFormat cSVFormat6 = cSVFormat3.withCommentMarker('I');
      cSVFormat5.format(objectArray0);
      cSVFormat4.withIgnoreEmptyLines(false);
      cSVFormat6.getNullString();
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat7 = cSVFormat6.withQuote('B');
      cSVFormat3.getRecordSeparator();
      cSVFormat0.equals(object0);
      Float float0 = new Float(0.0);
      cSVFormat7.equals(cSVFormat6);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      cSVFormat3.MYSQL.toString();
      cSVFormat3.withTrim(false);
      cSVFormat3.format(objectArray0);
      cSVFormat0.getCommentMarker();
      cSVFormat2.withTrailingDelimiter();
      String[] stringArray0 = cSVFormat3.getHeaderComments();
      CSVFormat cSVFormat4 = cSVFormat2.withTrim();
      Character character0 = Character.valueOf('n');
      cSVFormat4.withEscape(character0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat1.withHeader(class0);
      cSVFormat5.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = new Character('\"');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      cSVFormat3.withIgnoreHeaderCase(false);
      cSVFormat2.withRecordSeparator('\"');
      cSVFormat3.withTrim();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[3];
      Object object3 = new Object();
      objectArray0[0] = object3;
      Object object4 = new Object();
      objectArray0[1] = object4;
      objectArray0[2] = object2;
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('Q');
      cSVFormat4.withIgnoreSurroundingSpaces(false);
      cSVFormat2.getRecordSeparator();
      cSVFormat1.withIgnoreHeaderCase(false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Character character1 = new Character(':');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      Object object0 = new Object();
      cSVFormat1.withCommentMarker('@');
      cSVFormat0.withRecordSeparator("NON_NUMERIC");
      Character character2 = new Character('D');
      Character.valueOf('+');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('+');
      Character character3 = Character.valueOf(':');
      // Undeclared exception!
      try { 
        cSVFormat3.withEscape(character3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same (':')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      Character character0 = new Character('I');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat0.withTrim();
      cSVFormat5.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat6 = cSVFormat0.withRecordSeparator('I');
      cSVFormat6.INFORMIX_UNLOAD.withSkipHeaderRecord(true);
      CSVFormat cSVFormat7 = cSVFormat4.withTrim();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
      cSVFormat0.getCommentMarker();
      cSVFormat7.withTrailingDelimiter();
      CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('I');
      cSVFormat8.equals(object1);
      Float float0 = new Float(0.0);
      CSVFormat cSVFormat9 = CSVFormat.newFormat('I');
      cSVFormat9.equals(objectArray0[2]);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('(');
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('(');
      Character character1 = new Character('(');
      Character character2 = Character.valueOf('(');
      cSVFormat1.withEscape(character2);
      Character.valueOf('t');
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat1.getHeaderComments();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      cSVFormat3.withHeaderComments((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Class<Token.Type> class0 = Token.Type.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) character0;
      cSVFormat0.withHeaderComments(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.withDelimiter(':');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same (':')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.RFC4180.withRecordSeparator('S');
      CSVFormat cSVFormat5 = cSVFormat4.TDF.withTrim();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat3;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ",#Ke<^SU%f";
      objectArray0[6] = (Object) class0;
      Object object2 = new Object();
      cSVFormat0.format(objectArray0);
      cSVFormat2.withEscape('$');
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat5.getRecordSeparator();
      cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat2.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat0.RFC4180.print((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVFormat0.hashCode();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) null;
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('2');
      cSVFormat4.toString();
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(true);
      CSVFormat cSVFormat6 = cSVFormat2.withNullString("4ppEk~tD");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Delimiter=<2> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      CSVFormat cSVFormat7 = cSVFormat5.withHeader(stringArray0);
      cSVFormat7.format(objectArray0);
      cSVFormat7.format(objectArray0);
      CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces();
      cSVFormat8.getCommentMarker();
      cSVFormat6.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('n');
      Class<QuoteMode> class0 = QuoteMode.class;
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class1);
      Character character0 = new Character('n');
      Character.valueOf('.');
      Character character1 = Character.valueOf('w');
      cSVFormat3.withEscape(character1);
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat6.withIgnoreEmptyLines(true);
      cSVFormat0.withRecordSeparator(';');
      CSVFormat cSVFormat7 = cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat7.withTrim();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) cSVFormat3;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat8 = cSVFormat6.withDelimiter('}');
      cSVFormat8.withEscape(';');
      cSVFormat5.getNullString();
      cSVFormat4.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      cSVFormat3.MYSQL.toString();
      cSVFormat3.withTrim(true);
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat4 = cSVFormat1.EXCEL.withNullString("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      stringArray0[0] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      cSVFormat0.withHeader(stringArray0);
      cSVFormat4.getHeaderComments();
      cSVFormat4.format(stringArray0);
      cSVFormat2.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVFormat0.hashCode();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat1.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) resultSet0;
      objectArray0[3] = (Object) null;
      cSVFormat1.format(objectArray0);
      cSVFormat2.getTrailingDelimiter();
      cSVFormat1.getIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat0.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      Character character0 = new Character('I');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat0.withTrim();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat7 = cSVFormat0.withRecordSeparator('I');
      cSVFormat7.INFORMIX_UNLOAD.withSkipHeaderRecord(true);
      CSVFormat cSVFormat8 = cSVFormat4.withTrim();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
      cSVFormat0.getCommentMarker();
      CSVFormat cSVFormat9 = cSVFormat8.withTrailingDelimiter();
      cSVFormat9.getHeaderComments();
      CSVFormat cSVFormat10 = cSVFormat6.withEscape(character0);
      Class<QuoteMode> class1 = QuoteMode.class;
      cSVFormat10.withHeader(class1);
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = new Character('(');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
      Object object0 = new Object();
      cSVFormat0.withCommentMarker('(');
      cSVFormat1.withRecordSeparator("NON_NUMERIC");
      Character character1 = new Character('(');
      Character character2 = Character.valueOf('(');
      cSVFormat1.withEscape(character2);
      Character.valueOf('t');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character2);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('7');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "NON_NUMERIC");
      cSVFormat3.print((Object) cSVFormat0, (Appendable) stringWriter2, false);
      cSVFormat3.equals(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.withCommentMarker('B');
      Character character0 = new Character('a');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape((Character) null);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat4 = cSVFormat0.withQuoteMode(quoteMode0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      Object object1 = new Object();
      objectArray0[0] = object1;
      cSVFormat4.format(objectArray0);
      cSVFormat4.getAllowMissingColumnNames();
      cSVFormat3.withIgnoreHeaderCase();
      cSVFormat1.hashCode();
      MockFile mockFile0 = new MockFile((String) null, "java.lang.Object@0000000007");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockFileWriter mockFileWriter1 = null;
      try {
        mockFileWriter1 = new MockFileWriter((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withEscape(character0);
      cSVFormat0.toString();
      cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat1.withNullString((String) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      cSVFormat3.format(stringArray0);
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces(false);
      cSVFormat6.format(stringArray0);
      cSVFormat2.getCommentMarker();
      cSVFormat1.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withIgnoreEmptyLines();
      Character character0 = new Character('-');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat2.format(objectArray0);
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat2.withRecordSeparator('-');
      cSVFormat2.withTrim();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('-');
      cSVFormat3.format(objectArray0);
      cSVFormat2.withEscape('0');
      cSVFormat0.getNullString();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat1.getRecordSeparator();
      cSVFormat3.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('I');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat0.getCommentMarker();
      cSVFormat2.getHeaderComments();
      cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments((Object[]) null);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.RFC4180.withRecordSeparator('S');
      cSVFormat4.TDF.withTrim();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat3;
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same (':')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.RFC4180.withRecordSeparator('S');
      CSVFormat cSVFormat5 = cSVFormat4.TDF.withTrim();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ",#Ke<^SU%f";
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat5.withEscape(':');
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('l');
      stringWriter0.append((CharSequence) ",#Ke<^SU%f");
      Byte byte0 = new Byte((byte)0);
      cSVFormat5.print((Object) byte0, (Appendable) stringWriter1, true);
      cSVFormat6.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat1.INFORMIX_UNLOAD.withNullString("");
      cSVFormat2.withIgnoreHeaderCase(true);
      boolean boolean0 = false;
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      cSVFormat3.withRecordSeparator(':');
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat2.withHeader(class0);
      Character character0 = new Character('O');
      CSVFormat cSVFormat3 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      cSVFormat4.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator('O');
      cSVFormat5.INFORMIX_UNLOAD.withSkipHeaderRecord(true);
      cSVFormat3.withTrim();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      CSVFormat cSVFormat6 = cSVFormat2.withDelimiter('V');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) character0;
      cSVFormat6.format(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat3.withEscape('');
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('');
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "org.apache.commons.csv.CSVFormat@0000000004Vjava.lang.Character@0000000012");
      CSVFormat cSVFormat8 = cSVFormat6.withNullString("");
      Long.getLong("org.apache.commons.csv.CSVFormat@0000000004Vjava.lang.Character@0000000012");
      cSVFormat8.print((Object) null, (Appendable) stringWriter1, true);
      CSVFormat cSVFormat9 = cSVFormat7.withTrim();
      cSVFormat9.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.withSkipHeaderRecord();
      char char0 = '(';
      Character character0 = new Character('(');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat3.withRecordSeparator('M');
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat4.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = new Character('(');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('(');
      cSVFormat1.withRecordSeparator("NON_NUMERIC");
      Character character1 = new Character('(');
      Character character2 = Character.valueOf('(');
      cSVFormat1.withEscape(character2);
      Character.valueOf('t');
      cSVFormat2.withQuote(character2);
      cSVFormat0.getNullString();
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
      cSVFormat4.withFirstRecordAsHeader();
      cSVFormat0.getRecordSeparator();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      int int0 = 57;
      String string0 = "InformixUnload";
      // Undeclared exception!
      try { 
        Charset.forName("InformixUnload");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // InformixUnload
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      Character character0 = new Character('I');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat0.withTrim();
      cSVFormat5.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat6 = cSVFormat0.withRecordSeparator('I');
      cSVFormat6.INFORMIX_UNLOAD.withSkipHeaderRecord(true);
      cSVFormat4.withTrim();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat0.withEscape(',');
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('I');
      stringWriter1.append((CharSequence) "ALL\tMINIMAL\tNON_NUMERIC\tNONE\njava.lang.Object@0000000011\torg.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000001");
      cSVFormat2.print((Object) null, (Appendable) stringWriter1, false);
      cSVFormat7.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Character character0 = new Character('6');
      Character character1 = Character.valueOf('');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character1);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat3.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat2.withTrim();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      CSVFormat cSVFormat6 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat6.format(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat4.withEscape('6');
      CSVFormat cSVFormat8 = cSVFormat4.withTrailingDelimiter(true);
      cSVFormat8.getNullString();
      cSVFormat7.withIgnoreSurroundingSpaces(true);
      cSVFormat8.withFirstRecordAsHeader();
      cSVFormat5.getRecordSeparator();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "org.apache.commons.csv.CSVFormat@0000000009", 57, (-1083));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('S');
      cSVFormat4.withTrim();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      CSVFormat cSVFormat6 = cSVFormat0.withTrim();
      Object[] objectArray0 = new Object[8];
      Object object3 = new Object();
      objectArray0[0] = object3;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat5;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = object1;
      cSVFormat1.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces(true);
      objectArray0[7] = (Object) cSVFormat4;
      cSVFormat6.format(objectArray0);
      cSVFormat2.withEscape('$');
      cSVFormat6.withIgnoreSurroundingSpaces(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat7 = cSVFormat_Predefined0.getFormat();
      cSVFormat7.getRecordSeparator();
      cSVFormat4.withIgnoreHeaderCase(true);
      cSVFormat1.getIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('O');
      cSVFormat0.RFC4180.withEscape(character0);
      Character character1 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character1);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter();
      cSVFormat0.INFORMIX_UNLOAD_CSV.withQuote(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.DEFAULT.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat1.withNullString("a_;Jx4Bi{M;;p$C");
      cSVFormat4.isCommentMarkerSet();
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat5.toString();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.withQuote('I');
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      Character character0 = new Character('6');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat0.withTrim();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase(false);
      cSVFormat0.withRecordSeparator('6');
      CSVFormat cSVFormat7 = cSVFormat4.withTrim();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat8 = cSVFormat0.withEscape(',');
      cSVFormat8.getNullString();
      CSVFormat cSVFormat9 = cSVFormat6.withIgnoreSurroundingSpaces(false);
      cSVFormat9.RFC4180.withFirstRecordAsHeader();
      cSVFormat8.getRecordSeparator();
      cSVFormat6.withHeader(class0);
      CSVFormat cSVFormat10 = cSVFormat7.withTrailingDelimiter(false);
      cSVFormat10.format(objectArray0);
      cSVFormat3.withCommentMarker(character0);
      cSVFormat3.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      cSVFormat0.withTrim(true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('S');
      cSVFormat0.withTrim();
      Object object0 = new Object();
      CSVFormat.newFormat('S');
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat3.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat3;
      cSVFormat2.format(objectArray0);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("A! 2,qK[&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.A! 2,qK[&
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withQuote('I');
      cSVFormat0.withQuote('H');
      cSVFormat1.withIgnoreEmptyLines();
      String string0 = "";
      cSVFormat0.withCommentMarker('H');
      cSVFormat2.getAllowMissingColumnNames();
      cSVFormat0.withIgnoreHeaderCase();
      cSVFormat3.hashCode();
      MockFile mockFile0 = new MockFile("", "");
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = new Character('(');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
      Object object0 = new Object();
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('(');
      cSVFormat1.withRecordSeparator("NON_NUMERIC");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-14);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[2] = (Object) (byte) (-14);
      objectArray0[3] = (Object) (byte)75;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) (byte) (-14);
      cSVFormat1.format(objectArray0);
      cSVFormat3.getCommentMarker();
      cSVFormat1.getTrailingDelimiter();
      cSVFormat2.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      cSVFormat3.MYSQL.toString();
      cSVFormat0.withRecordSeparator("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      CSVFormat cSVFormat4 = cSVFormat2.withTrim();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      cSVFormat1.format(objectArray0);
      cSVFormat4.withEscape('{');
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat5 = cSVFormat2.withHeader(class0);
      cSVFormat5.getNullString();
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat2.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVFormat0.hashCode();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) resultSet0;
      objectArray0[3] = (Object) null;
      cSVFormat1.format(objectArray0);
      cSVFormat0.getCommentMarker();
      CSVFormat.newFormat(',');
      cSVFormat2.getTrailingDelimiter();
      cSVFormat1.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      char char0 = 'B';
      Character character0 = Character.valueOf('B');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      Character character1 = new Character('B');
      // Undeclared exception!
      try { 
        cSVFormat4.withCommentMarker(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('B')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote(':');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same (':')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = new Character('(');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
      Object object0 = new Object();
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('(');
      cSVFormat1.withRecordSeparator("NON_NUMERIC");
      Character character1 = new Character('(');
      Character character2 = Character.valueOf('(');
      cSVFormat1.withEscape(character2);
      Character.valueOf('t');
      CSVFormat cSVFormat4 = cSVFormat2.withQuote(character2);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('7');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "NON_NUMERIC");
      cSVFormat4.print((Object) cSVFormat0, (Appendable) stringWriter2, false);
      cSVFormat3.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim(true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      CSVFormat cSVFormat4 = cSVFormat1.TDF.withAllowMissingColumnNames(true);
      objectArray0[4] = (Object) cSVFormat_Predefined0;
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      cSVFormat1.format(objectArray0);
      cSVFormat2.withEscape('[');
      cSVFormat3.getNullString();
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat5.getRecordSeparator();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1897);
      cSVFormat4.printRecord(charArrayWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) resultSet0;
      objectArray0[1] = (Object) cSVFormat2;
      Character.valueOf('A');
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      cSVFormat3.withEscape((Character) null);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat5.format(objectArray0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat5.withHeader(class0);
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreEmptyLines();
      cSVFormat6.format(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat4.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat8 = cSVFormat7.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat8.withRecordSeparator("inputStream");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.withQuote('I');
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      Character character0 = new Character('6');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat0.withTrim();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase(false);
      cSVFormat0.withRecordSeparator('6');
      cSVFormat4.withTrim();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat0.withEscape(',');
      cSVFormat7.getNullString();
      CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(false);
      cSVFormat8.RFC4180.withFirstRecordAsHeader();
      cSVFormat7.getRecordSeparator();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "ALL\tMINIMAL\tNON_NUMERIC\tNONE\njava.lang.Object@0000000011\torg.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000001", (-1083), 57);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Character character0 = Character.valueOf('%');
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object object4 = new Object();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.getAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.hashCode();
      MockFile mockFile0 = new MockFile("3C<ke#77*eVX[poHNIT", "");
      cSVFormat2.withFirstRecordAsHeader();
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockFileWriter mockFileWriter1 = new MockFileWriter("org.apache.commons.csv.CSVFormat$1", false);
      Double double0 = new Double(1125.646868);
      cSVFormat2.print((Object) double0, (Appendable) mockFileWriter0, false);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat3.isQuoteCharacterSet();
      CSVFormat cSVFormat4 = cSVFormat1.withEscape(character0);
      cSVFormat4.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = Character.valueOf('(');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Object[] objectArray0 = new Object[8];
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
      objectArray0[1] = (Object) cSVFormat0;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat0.withHeader(class0);
      cSVFormat3.withEscape('(');
      Character character1 = Character.valueOf('X');
      CSVFormat cSVFormat5 = cSVFormat2.withQuote(character1);
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord(true);
      cSVFormat6.format(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat7 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat8 = cSVFormat7.withEscape('(');
      CSVFormat cSVFormat9 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat8.getNullString();
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      cSVFormat3.getRecordSeparator();
      CSVFormat cSVFormat10 = cSVFormat9.withIgnoreHeaderCase();
      cSVFormat10.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVFormat0.hashCode();
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat2.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      char char0 = '(';
      cSVFormat1.INFORMIX_UNLOAD.withSkipHeaderRecord(true);
      Character character0 = new Character('(');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat1.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      Character character0 = new Character('!');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape((Character) null);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.withQuoteMode(quoteMode0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withEscape('-');
      cSVFormat3.getNullString();
      CSVFormat.newFormat('w');
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat2.getRecordSeparator();
      cSVFormat3.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat4.isNullStringSet();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Character character0 = new Character('(');
      Object[] objectArray0 = new Object[8];
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      objectArray0[4] = (Object) cSVFormat_Predefined0;
      objectArray0[5] = (Object) character0;
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat0.withCommentMarker('(');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("NON_NUMERIC");
      Character character1 = new Character('(');
      Character character2 = Character.valueOf('(');
      CSVFormat cSVFormat3 = cSVFormat0.withEscape(character2);
      MockFile mockFile0 = new MockFile("NON_NUMERIC", "NON_NUMERIC");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.FRANCE;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "NON_NUMERIC", objectArray0);
      cSVFormat3.INFORMIX_UNLOAD.println(printStream0);
      Character.valueOf('S');
      cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat2.withSkipHeaderRecord(false);
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat2.TDF.print((Appendable) stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append('(');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "NON_NUMERIC");
      cSVFormat1.print((Object) "NON_NUMERIC", (Appendable) stringWriter2, false);
      cSVFormat4.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVFormat0.hashCode();
      Character character0 = new Character('G');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator('@');
      CSVFormat cSVFormat6 = cSVFormat4.withTrim();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object2;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat6;
      objectArray0[3] = object2;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVFormat3;
      cSVFormat1.format(objectArray0);
      cSVFormat0.withEscape('o');
      cSVFormat2.getNullString();
      cSVFormat6.withIgnoreSurroundingSpaces(false);
      cSVFormat4.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(']');
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("E^qt$The(");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      cSVFormat3.withNullString("S\"=bLB[C8gS");
      cSVFormat2.format(objectArray0);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) "N]N]org.apache.commons.csv.CSVFormat@0000000007]org.apache.commons.csv.CSVFormat@0000000007]N]N]N]N";
      cSVFormat4.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[19];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat3.MYSQL.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      CSVFormat cSVFormat5 = cSVFormat0.withHeader(stringArray0);
      Character character0 = Character.valueOf(']');
      CSVFormat cSVFormat6 = cSVFormat5.EXCEL.withEscape(character0);
      cSVFormat3.withTrim(true);
      CSVFormat cSVFormat7 = cSVFormat5.withFirstRecordAsHeader();
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) cSVFormat3;
      objectArray1[1] = (Object) cSVFormat7;
      objectArray1[2] = (Object) cSVFormat3;
      objectArray1[3] = (Object) cSVFormat6;
      objectArray1[4] = (Object) cSVFormat7;
      objectArray1[5] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      cSVFormat4.format(objectArray1);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat4.withHeader(class0);
      cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat8 = cSVFormat2.withRecordSeparator("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      cSVFormat8.withIgnoreHeaderCase();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) charBuffer0, 288, 288);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      cSVFormat3.MYSQL.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      String[] stringArray0 = new String[1];
      cSVFormat1.EXCEL.withNullString("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      stringArray0[0] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      CSVFormat cSVFormat5 = cSVFormat0.withHeader(stringArray0);
      cSVFormat2.format(stringArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(resultSet0);
      CSVFormat cSVFormat7 = cSVFormat6.withEscape('O');
      cSVFormat4.getNullString();
      CSVFormat.newFormat('j');
      cSVFormat5.withIgnoreSurroundingSpaces(false);
      cSVFormat7.getRecordSeparator();
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat4.isNullStringSet();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      cSVFormat0.withTrim(true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      cSVFormat1.TDF.withAllowMissingColumnNames(true);
      objectArray0[4] = (Object) cSVFormat_Predefined0;
      objectArray0[5] = (Object) cSVFormat2;
      cSVFormat1.format(objectArray0);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("E-uyE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.E-uyE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      cSVFormat3.MYSQL.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      CSVFormat cSVFormat5 = cSVFormat0.withHeader(stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3n$M6");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      cSVFormat0.RFC4180.printRecord(printWriter0, objectArray0);
      Character character0 = Character.valueOf(']');
      CSVFormat cSVFormat6 = cSVFormat5.EXCEL.withEscape(character0);
      cSVFormat3.withTrim(true);
      CSVFormat cSVFormat7 = cSVFormat5.withFirstRecordAsHeader();
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) cSVFormat3;
      objectArray1[1] = (Object) cSVFormat7;
      objectArray1[2] = (Object) cSVFormat3;
      objectArray1[3] = (Object) cSVFormat6;
      objectArray1[4] = (Object) cSVFormat7;
      objectArray1[5] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      cSVFormat4.format(objectArray1);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat4.withHeader(class0);
      cSVFormat3.format(objectArray0);
      cSVFormat2.withRecordSeparator("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character.valueOf('%');
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat1 = CSVFormat.newFormat('!');
      cSVFormat1.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('!');
      cSVFormat0.print((Appendable) charArrayWriter1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withQuote('I');
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat0.withHeader(class0);
      Character character0 = new Character('6');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('1');
      cSVFormat4.withTrim();
      CSVFormat.newFormat('1');
      cSVFormat1.isEscapeCharacterSet();
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      cSVFormat5.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withQuote('I');
      Character character0 = Character.valueOf('o');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("e9|q|iNz");
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      cSVFormat0.getAllowMissingColumnNames();
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.hashCode();
      MockFile mockFile0 = new MockFile("3C<ke#77*eVX[poHNIT", ",xZ1XrJ]@yfiECX");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockFileWriter mockFileWriter1 = new MockFileWriter("zn-Fc", false);
      CharBuffer charBuffer0 = CharBuffer.allocate(65534);
      // Undeclared exception!
      cSVFormat5.print((Object) charBuffer0, (Appendable) charBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withQuote('I');
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat0.withHeader(class0);
      Character character0 = new Character('6');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat.newFormat('@');
      cSVFormat1.isEscapeCharacterSet();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat4.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      char char0 = '(';
      Character character0 = new Character('(');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Object[] objectArray0 = new Object[8];
      QuoteMode quoteMode0 = QuoteMode.ALL;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat2.INFORMIX_UNLOAD_CSV.print((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.INFORMIX_UNLOAD.withSkipHeaderRecord();
      Character character0 = Character.valueOf('%');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat1.TDF.withNullString("");
      CSVFormat cSVFormat4 = cSVFormat2.TDF.withHeader(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat5 = cSVFormat2.withQuote(character0);
      cSVFormat3.getAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreHeaderCase();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat7 = cSVFormat6.withHeader(resultSet0);
      CSVFormat cSVFormat8 = cSVFormat7.withFirstRecordAsHeader();
      cSVFormat5.withNullString((String) null);
      cSVFormat4.isCommentMarkerSet();
      CSVFormat cSVFormat9 = cSVFormat2.withTrailingDelimiter();
      cSVFormat9.withIgnoreSurroundingSpaces();
      cSVFormat8.withTrim();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVFormat0.hashCode();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) resultSet0;
      objectArray0[3] = (Object) null;
      cSVFormat1.format(objectArray0);
      cSVFormat0.getCommentMarker();
      cSVFormat2.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.hashCode();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD_CSV.withNullString("");
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.getCommentMarker();
      cSVFormat1.getTrailingDelimiter();
      cSVFormat2.DEFAULT.withHeaderComments(objectArray0);
      cSVFormat0.getCommentMarker();
      cSVFormat2.getQuoteMode();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = Character.valueOf('(');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Object[] objectArray0 = new Object[8];
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      QuoteMode quoteMode1 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode1);
      cSVFormat4.getAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat4.hashCode();
      MockFile mockFile0 = new MockFile("3C<ke#77*eVX[poHNIT", "3C<ke#77*eVX[poHNIT");
      cSVFormat3.RFC4180.withFirstRecordAsHeader();
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockFileWriter mockFileWriter1 = new MockFileWriter("The quoteChar character and the delimiter cannot be the same ('", true);
      cSVFormat4.print(object0, (Appendable) mockFileWriter0, false);
      cSVFormat5.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("SQJb)>f!X@0!fUe.tn");
      cSVFormat0.isCommentMarkerSet();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat4.withHeader(class0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat4.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character.valueOf('(');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat1.withTrailingDelimiter();
      cSVFormat0.withNullString("!j!Y2GGZj9$%#");
      cSVFormat0.isCommentMarkerSet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat2.withHeader(class0);
      cSVFormat2.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withQuote('I');
      Character character0 = Character.valueOf('o');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("e9|q|iNz");
      cSVFormat4.withQuote(character0);
      cSVFormat0.getAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.hashCode();
      MockFile mockFile0 = new MockFile("VfY3i4", "3C<ke#77*eVX[poHNIT");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockFileWriter mockFileWriter1 = new MockFileWriter("zn-Fc", true);
      cSVFormat3.print((Object) null, (Appendable) mockFileWriter1, false);
      cSVFormat5.print((Appendable) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("Ah=@#>");
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat4 = cSVFormat_Predefined1.getFormat();
      cSVFormat4.isCommentMarkerSet();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
      cSVFormat3.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat3.withNullString("SQJb)>f!X@0!fUe.tn");
      cSVFormat0.isCommentMarkerSet();
      cSVFormat0.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = Character.valueOf('(');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Object[] objectArray0 = new Object[8];
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      cSVFormat3.format(objectArray0);
      cSVFormat2.withEscape('%');
      cSVFormat0.getNullString();
      CSVFormat.newFormat('*');
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat4.getRecordSeparator();
      cSVFormat3.isNullStringSet();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[5];
      cSVFormat0.RFC4180.hashCode();
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      cSVFormat3.withCommentMarker('~');
      cSVFormat3.withRecordSeparator("EOF whilst processing escape sequence");
      Character character0 = new Character('w');
      Character character1 = new Character('~');
      cSVFormat0.withEscape(character1);
      Character.valueOf('~');
      Character character2 = Character.valueOf('~');
      cSVFormat2.withQuote(character2);
      boolean boolean0 = false;
      cSVFormat2.withSkipHeaderRecord(false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "NON_NUMERIC");
      StringWriter stringWriter2 = stringWriter1.append('~');
      stringWriter2.append((CharSequence) "NON_NUMERIC");
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Character.valueOf('l');
      Character character0 = Character.valueOf('4');
      cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat0.withNullString("FX$;");
      cSVFormat0.withQuote(character0);
      cSVFormat2.getAllowMissingColumnNames();
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat3.hashCode();
      MockFile mockFile0 = new MockFile("VfY3i4", "3C<ke#77*eVX[poHNIT");
      MockFile mockFile1 = new MockFile(mockFile0, "7RZRnyxP&?@Gb");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1);
      MockFileWriter mockFileWriter1 = new MockFileWriter("/Pjz~*", false);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase();
      Long long0 = new Long((-461L));
      cSVFormat4.print((Object) long0, (Appendable) mockFileWriter1, true);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Character character0 = Character.valueOf('O');
      Character character1 = Character.valueOf('o');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character1);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines();
      String string0 = "e9|q|iNz";
      cSVFormat1.withNullString("e9|q|iNz");
      cSVFormat4.withQuote(character0);
      cSVFormat1.getAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat5.hashCode();
      String string1 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withQuote('I');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat1.getCommentMarker();
      cSVFormat0.getHeaderComments();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      // Undeclared exception!
      try { 
        cSVFormat3.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('J');
      Character character0 = Character.valueOf('_');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat3.withNullString("UFGCUB|H=;?b9");
      Character character1 = new Character('J');
      cSVFormat3.withQuote(character1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat3.hashCode();
      MockFile mockFile0 = new MockFile("", "e9|q|iNz");
      MockFile mockFile1 = new MockFile("");
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter(mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withQuote('I');
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      Character character0 = new Character('6');
      CSVFormat cSVFormat4 = cSVFormat2.withEscape(character0);
      cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('1');
      CSVFormat cSVFormat6 = cSVFormat5.withTrim();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      cSVFormat3.format(objectArray0);
      cSVFormat6.withEscape('[');
      cSVFormat3.getNullString();
      CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(false);
      cSVFormat7.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Character character1 = Character.valueOf('o');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character1);
      cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat0.withNullString("fTg(\"ijy4");
      Character character2 = new Character('q');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character2);
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat1.hashCode();
      MockFile mockFile0 = new MockFile("e9|q|iNz", "3C<ke#77*eVX[poHNIT");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockFileWriter mockFileWriter1 = new MockFileWriter("zn-Fc", false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat5.print((Object) character2, (Appendable) mockFileWriter0, false);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "inputStream";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "inputStream";
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) "/GBQWBO>`}.1j m";
      cSVFormat0.EXCEL.withHeaderComments(objectArray0);
      cSVFormat0.INFORMIX_UNLOAD.withRecordSeparator('7');
      MockFile mockFile0 = new MockFile("/GBQWBO>`}.1j m", "inputStream");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.print(path0, charset0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte) (-40);
      byteArray0[8] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("SQJb)>f!X@0!fUe.tn");
      cSVFormat4.withSkipHeaderRecord(true);
      cSVFormat0.isCommentMarkerSet();
      cSVFormat0.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat1.EXCEL.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.RFC4180.withRecordSeparator('S');
      cSVFormat4.TDF.withTrim();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ",#Ke<^SU%f";
      objectArray0[6] = (Object) class0;
      Object object2 = new Object();
      cSVFormat1.withNullString(",#Ke<^SU%f");
      CSVFormat.newFormat('W');
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      CSVFormat cSVFormat5 = cSVFormat2.withNullString("e9|q|iNz");
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat4.withHeader(class0);
      Character character0 = new Character('M');
      CSVFormat cSVFormat6 = cSVFormat5.withQuote(character0);
      CSVFormat cSVFormat7 = cSVFormat2.withHeader((String[]) null);
      cSVFormat7.getAllowMissingColumnNames();
      cSVFormat4.withIgnoreHeaderCase();
      cSVFormat6.hashCode();
      MockFile mockFile0 = new MockFile("3C<ke#77*eVX[poHNIT", "3C<ke#77*eVX[poHNIT");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockFileWriter mockFileWriter1 = null;
      try {
        mockFileWriter1 = new MockFileWriter("3C<ke#77*eVX[poHNIT", true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      cSVFormat2.withFirstRecordAsHeader();
      cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat.newFormat('X');
      Object[] objectArray0 = new Object[0];
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      Object object0 = new Object();
      cSVFormat2.format(objectArray0);
      cSVFormat1.withEscape('V');
      cSVFormat1.getNullString();
      CSVFormat.newFormat('%');
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat2.isNullStringSet();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Character character0 = Character.valueOf('%');
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) character0;
      Object object2 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat0.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      String string0 = "";
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat2.withNullString("");
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat2.withHeader(class0);
      Character character0 = new Character('s');
      CSVFormat cSVFormat4 = cSVFormat1.withQuote(character0);
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat3.withIgnoreHeaderCase();
      cSVFormat3.hashCode();
      String string1 = "=gqGAL=.^;,w;T9\"N";
      String string2 = "XKYX";
      MockFile mockFile0 = new MockFile("=gqGAL=.^;,w;T9\"N", "XKYX");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      cSVFormat1.format(objectArray0);
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat4.getIgnoreHeaderCase();
      String string3 = "";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      boolean boolean0 = true;
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)5;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat1.withHeader((String[]) null);
      String string0 = "3n$M6";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withSkipHeaderRecord();
      Character character0 = Character.valueOf('%');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat2.EXCEL.withSkipHeaderRecord();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      cSVFormat1.format(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.withEscape('!');
      cSVFormat0.getNullString();
      CSVFormat cSVFormat6 = CSVFormat.newFormat('%');
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat4.getRecordSeparator();
      cSVFormat2.isNullStringSet();
      cSVFormat6.getRecordSeparator();
      CSVFormat.newFormat('7');
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      objectArray0[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("l&kW8zt4cntlR");
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat3.withHeader(class0);
      Character character0 = Character.valueOf('9');
      cSVFormat2.withQuote(character0);
      cSVFormat2.getAllowMissingColumnNames();
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.hashCode();
      MockFile mockFile0 = new MockFile((String) null, "VfY3i4");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      // Undeclared exception!
      try { 
        cSVFormat2.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      cSVFormat1.RFC4180.hashCode();
      cSVFormat0.withHeaderComments(objectArray0);
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3n$M6");
      mockPrintWriter0.append((CharSequence) "3n$M6");
      // Undeclared exception!
      try { 
        cSVFormat1.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat0.getCommentMarker();
      cSVFormat0.getHeaderComments();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat1.withHeader(class0);
      String string0 = "";
      File file0 = MockFile.createTempFile("The escape character cannot be a line break", "");
      try { 
        MockFile.createTempFile("The escape character cannot be a line break", "The escape character cannot be a line break", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = Character.valueOf('i');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      cSVFormat3.withIgnoreEmptyLines(false);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat4 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat5 = cSVFormat1.withNullString("");
      CSVFormat cSVFormat6 = cSVFormat3.withEscape('i');
      CSVFormat cSVFormat7 = cSVFormat6.withQuote(character0);
      cSVFormat7.withHeader(class0);
      Character character1 = Character.valueOf('i');
      cSVFormat7.withQuote(character1);
      cSVFormat6.getAllowMissingColumnNames();
      cSVFormat5.withIgnoreHeaderCase();
      cSVFormat4.hashCode();
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.Token$Type", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVFormat cSVFormat8 = CSVFormat.RFC4180;
      cSVFormat8.print((Object) cSVFormat0, (Appendable) mockFileWriter0, false);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('%');
      cSVFormat2.getNullString();
      CSVFormat.newFormat('*');
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat0.getRecordSeparator();
      cSVFormat3.isNullStringSet();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Y@9o");
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      Character character0 = new Character('=');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat3.hashCode();
      MockFile mockFile0 = new MockFile("", "(line ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      cSVFormat5.print((Object) cSVFormat0, (Appendable) mockFileWriter0, true);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat5 = cSVFormat4.RFC4180.withRecordSeparator('S');
      CSVFormat cSVFormat6 = cSVFormat5.TDF.withTrim();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ",#Ke<^SU%f";
      objectArray0[6] = (Object) class0;
      Object object2 = new Object();
      objectArray0[7] = object2;
      cSVFormat3.format(objectArray0);
      cSVFormat2.withEscape('$');
      cSVFormat1.getNullString();
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat6.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat0.MYSQL.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      cSVFormat3.TDF.withSkipHeaderRecord();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat5.EXCEL.withIgnoreEmptyLines(true);
      cSVFormat6.DEFAULT.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat7 = cSVFormat4.withTrim(false);
      cSVFormat0.getNullString();
      Character.valueOf('Z');
      Character character0 = new Character('_');
      cSVFormat7.withEscape(character0);
      cSVFormat7.withRecordSeparator('e');
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('N');
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("");
      cSVFormat4.MYSQL.withIgnoreHeaderCase();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat6 = cSVFormat5.INFORMIX_UNLOAD.withQuote('N');
      CSVFormat cSVFormat7 = cSVFormat6.MYSQL.withTrailingDelimiter(true);
      CSVFormat cSVFormat8 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat5.EXCEL.withIgnoreHeaderCase();
      CSVFormat cSVFormat9 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat8.getRecordSeparator();
      cSVFormat9.withIgnoreHeaderCase();
      cSVFormat3.withCommentMarker(':');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat0.withRecordSeparator("vD+H=5LB]1");
      Character character1 = Character.valueOf('<');
      cSVFormat7.withEscape(character1);
      Character.valueOf(' ');
      CSVFormat cSVFormat10 = cSVFormat3.withQuote(character0);
      cSVFormat10.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.INFORMIX_UNLOAD_CSV.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('N');
      cSVFormat4.MYSQL.withIgnoreHeaderCase();
      cSVFormat2.getTrim();
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat5 = cSVFormat4.RFC4180.withQuote(character0);
      CSVFormat cSVFormat6 = cSVFormat5.INFORMIX_UNLOAD.withQuote('N');
      cSVFormat6.MYSQL.withTrailingDelimiter(false);
      CSVFormat cSVFormat7 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat2.EXCEL.withIgnoreHeaderCase();
      cSVFormat0.withIgnoreHeaderCase();
      cSVFormat7.getRecordSeparator();
      cSVFormat2.toString();
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.getQuoteMode();
      cSVFormat1.withTrim(false);
      cSVFormat7.getNullString();
      Character character1 = Character.valueOf('N');
      cSVFormat2.withEscape(character1);
      cSVFormat2.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withQuote('I');
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withTrailingDelimiter(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVFormat2;
      cSVFormat0.format(objectArray0);
      cSVFormat2.withEscape('_');
      cSVFormat3.getNullString();
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat0.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = new Character('(');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Object[] objectArray0 = new Object[8];
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      objectArray0[4] = (Object) cSVFormat_Predefined0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) character0;
      Object object0 = new Object();
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat0.withCommentMarker('(');
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator("NON_NUMERIC");
      Character character1 = new Character('~');
      Character character2 = Character.valueOf('~');
      cSVFormat1.withEscape(character2);
      Character.valueOf('S');
      cSVFormat3.withQuote(character0);
      cSVFormat4.withSkipHeaderRecord(false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('~');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "NON_NUMERIC");
      cSVFormat3.print((Object) "NON_NUMERIC", (Appendable) stringWriter2, false);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      cSVFormat3.MYSQL.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      CSVFormat cSVFormat5 = cSVFormat0.withHeader(stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3n$M6");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      cSVFormat0.RFC4180.printRecord(printWriter0, objectArray0);
      Character character0 = Character.valueOf(']');
      CSVFormat cSVFormat6 = cSVFormat5.EXCEL.withEscape(character0);
      cSVFormat3.withTrim(true);
      CSVFormat cSVFormat7 = cSVFormat5.withFirstRecordAsHeader();
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) cSVFormat3;
      objectArray1[1] = (Object) cSVFormat7;
      objectArray1[2] = (Object) cSVFormat3;
      objectArray1[3] = (Object) cSVFormat6;
      objectArray1[4] = (Object) cSVFormat7;
      objectArray1[5] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      cSVFormat4.format(objectArray1);
      cSVFormat5.withEscape('5');
      cSVFormat3.getNullString();
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat2.getRecordSeparator();
      cSVFormat1.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = CSVFormat.newFormat('X');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat1.withQuote('i');
      cSVFormat5.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.RFC4180.withQuote('I');
      cSVFormat1.withSkipHeaderRecord(true);
      PipedWriter pipedWriter0 = null;
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat1.hashCode();
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator("RecordSeparator=<");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray0[4] = object1;
      cSVFormat4.withHeaderComments(objectArray0);
      MockFile mockFile0 = new MockFile("oCs<$r");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat2.print((File) mockFile0, charset0);
      cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat2.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      cSVFormat3.MYSQL.toString();
      cSVFormat3.withTrim(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      CSVFormat cSVFormat4 = cSVFormat0.withHeader(stringArray0);
      Character character0 = Character.valueOf(']');
      CSVFormat cSVFormat5 = cSVFormat4.EXCEL.withEscape(character0);
      cSVFormat3.withTrim(false);
      CSVFormat cSVFormat6 = cSVFormat4.withFirstRecordAsHeader();
      CSVFormat cSVFormat7 = cSVFormat2.withHeaderComments(stringArray0);
      CSVFormat cSVFormat8 = cSVFormat7.EXCEL.withCommentMarker(':');
      cSVFormat5.withFirstRecordAsHeader();
      CSVFormat cSVFormat9 = cSVFormat5.withDelimiter(':');
      cSVFormat9.withRecordSeparator("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      Character character1 = new Character('G');
      CSVFormat cSVFormat10 = cSVFormat8.withEscape(character1);
      Character.valueOf(':');
      Character character2 = new Character('G');
      cSVFormat10.withQuote(character2);
      cSVFormat6.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      cSVFormat2.withFirstRecordAsHeader();
      cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat.newFormat('a');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withQuote('I');
      Character character0 = Character.valueOf('o');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("e9|q|iNz");
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.withHeader(class0);
      cSVFormat4.withQuote(character0);
      cSVFormat0.getAllowMissingColumnNames();
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.hashCode();
      MockFile mockFile0 = new MockFile("VfY3i4", "3C<ke#77*eVX[poHNIT");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockFileWriter mockFileWriter1 = new MockFileWriter("zn-Fc", true);
      cSVFormat3.print((Object) null, (Appendable) mockFileWriter1, false);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      Object object0 = new Object();
      cSVFormat0.format(objectArray0);
      cSVFormat1.withEscape('\"');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.csv.CSVFormat@0000000004\torg.apache.commons.csv.CSVFormat@0000000001\tN\tN\tN\tN\tN\tN";
      stringArray0[1] = "org.apache.commons.csv.CSVFormat@0000000004\torg.apache.commons.csv.CSVFormat@0000000001\tN\tN\tN\tN\tN\tN";
      stringArray0[2] = "org.apache.commons.csv.CSVFormat@0000000004\torg.apache.commons.csv.CSVFormat@0000000001\tN\tN\tN\tN\tN\tN";
      stringArray0[3] = "org.apache.commons.csv.CSVFormat@0000000004\torg.apache.commons.csv.CSVFormat@0000000001\tN\tN\tN\tN\tN\tN";
      cSVFormat2.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = new Character('(');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Object[] objectArray0 = new Object[8];
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      objectArray0[4] = (Object) cSVFormat_Predefined0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) character0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat2.format(objectArray0);
      cSVFormat0.withEscape('5');
      cSVFormat1.getNullString();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat2.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.TDF.hashCode();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      char[] charArray0 = new char[1];
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
      charArray0[0] = '!';
      cSVFormat0.INFORMIX_UNLOAD.withSkipHeaderRecord(true);
      pipedWriter0.write(charArray0);
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat2.INFORMIX_UNLOAD.withQuote(character0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 57);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      MockFile mockFile0 = new MockFile("OHrs0zP7&l~DbR");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      cSVFormat2.println(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      cSVFormat1.RFC4180.hashCode();
      cSVFormat0.withHeaderComments(objectArray0);
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      MockFile mockFile0 = new MockFile("=._qF>REv-");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.print((File) mockFile0, charset0);
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      cSVFormat1.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Y@9o");
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(false);
      cSVFormat5.withRecordSeparator('a');
      Character character0 = Character.valueOf('=');
      cSVFormat4.withQuote(character0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char char0 = ':';
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      cSVFormat0.isCommentMarkerSet();
      MockFileWriter mockFileWriter0 = new MockFileWriter("Unexpected Quote value: ");
      cSVFormat0.INFORMIX_UNLOAD.withIgnoreEmptyLines();
      String string0 = "#7#V%'mA;";
      // Undeclared exception!
      try { 
        mockFileWriter0.write("#7#V%'mA;", 1614, (-1319));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat0.INFORMIX_UNLOAD_CSV.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withNullString("");
      cSVFormat3.EXCEL.withNullString("");
      cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat0.withIgnoreHeaderCase(true);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 31);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('N');
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("");
      cSVFormat4.MYSQL.withIgnoreHeaderCase();
      cSVFormat5.getTrim();
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat6 = cSVFormat4.RFC4180.withQuote(character0);
      CSVFormat cSVFormat7 = cSVFormat6.INFORMIX_UNLOAD.withQuote('N');
      cSVFormat7.MYSQL.withTrailingDelimiter(true);
      CSVFormat cSVFormat8 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat5.EXCEL.withIgnoreHeaderCase();
      CSVFormat cSVFormat9 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat8.getRecordSeparator();
      cSVFormat9.withIgnoreHeaderCase();
      cSVFormat2.toString();
      cSVFormat5.withSkipHeaderRecord();
      cSVFormat1.getHeader();
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.getQuoteMode();
      cSVFormat5.withTrim(false);
      cSVFormat8.getNullString();
      Character character1 = Character.valueOf('N');
      cSVFormat2.withEscape(character1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('b');
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withRecordSeparator('`');
      cSVFormat4.MYSQL.withDelimiter('m');
      boolean boolean0 = false;
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.getTrim();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.INFORMIX_UNLOAD.withSkipHeaderRecord();
      Character character0 = Character.valueOf('%');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat1.EXCEL.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat1.TDF.withNullString("");
      CSVFormat cSVFormat4 = cSVFormat2.TDF.withHeader(class0);
      cSVFormat2.withQuote(character0);
      cSVFormat3.getAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat4.hashCode();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat6 = cSVFormat5.withQuote('V');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat6;
      objectArray0[1] = (Object) cSVFormat6;
      objectArray0[2] = (Object) "";
      cSVFormat6.format(objectArray0);
      cSVFormat6.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.INFORMIX_UNLOAD.withSkipHeaderRecord();
      Character character0 = Character.valueOf('%');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat1.EXCEL.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat1.TDF.withNullString("");
      CSVFormat cSVFormat4 = cSVFormat2.TDF.withHeader(class0);
      cSVFormat2.withQuote(character0);
      cSVFormat3.getAllowMissingColumnNames();
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat4.hashCode();
      MockFile mockFile0 = new MockFile("", "VfY3i4");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      // Undeclared exception!
      try { 
        cSVFormat4.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('N');
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("");
      cSVFormat3.MYSQL.withIgnoreHeaderCase();
      cSVFormat4.getTrim();
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat5 = cSVFormat3.RFC4180.withQuote(character0);
      CSVFormat cSVFormat6 = cSVFormat5.INFORMIX_UNLOAD.withQuote('N');
      cSVFormat6.MYSQL.withTrailingDelimiter(true);
      CSVFormat cSVFormat7 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat4.EXCEL.withIgnoreHeaderCase();
      CSVFormat cSVFormat8 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat7.getRecordSeparator();
      CSVFormat.newFormat('N');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat1;
      cSVFormat8.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("InformixUnloadCsv");
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "InformixUnloadCsv";
      stringArray0[1] = "InformixUnloadCsv";
      stringArray0[2] = "InformixUnloadCsv";
      stringArray0[3] = "InformixUnloadCsv";
      stringArray0[4] = "InformixUnloadCsv";
      stringArray0[5] = "InformixUnloadCsv";
      stringArray0[6] = "InformixUnloadCsv";
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'InformixUnloadCsv' in [InformixUnloadCsv, InformixUnloadCsv, InformixUnloadCsv, InformixUnloadCsv, InformixUnloadCsv, InformixUnloadCsv, InformixUnloadCsv]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withFirstRecordAsHeader();
      cSVFormat2.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
      CSVFormat.newFormat('X');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) resultSet0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = ".JEZX9d$hXPQ>c[\"";
      String string0 = "85?C.qG=wX-";
      stringArray0[2] = "85?C.qG=wX-";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.withHeader(stringArray0);
      String string1 = "MTqC:irM.nW}8~+l*~$";
      try { 
        MockURI.URI("85?C.qG=wX-", "org.apache.commons.csv.Constants", "MTqC:irM.nW}8~+l*~$", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 85?C.qG=wX-://org.apache.commons.csv.ConstantsMTqC:irM.nW%7D8~+l*~$
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreHeaderCase();
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat1.withTrailingDelimiter();
      cSVFormat1.RFC4180.withCommentMarker('@');
      String string0 = "NONE";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("NONE", "NONE");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // NONE
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat1.INFORMIX_UNLOAD_CSV.hashCode();
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat.Predefined.values();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      String string0 = "3me'de/U'k?9\"y";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("3me'de/U'k?9\"y");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      boolean boolean0 = false;
      cSVFormat3.INFORMIX_UNLOAD.withNullString("3me'de/U'k?9\"y");
      cSVFormat0.TDF.withAllowMissingColumnNames();
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object object0 = new Object();
      String string1 = "";
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      char char0 = 'I';
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('I');
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      Character character0 = new Character('I');
      Character character1 = Character.valueOf('.');
      cSVFormat0.withEscape(character1);
      CSVFormat cSVFormat4 = cSVFormat2.withTrim();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class0;
      cSVFormat4.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat3.withEscape(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      cSVFormat0.toString();
      cSVFormat1.getCommentMarker();
      cSVFormat0.withNullString("q}zmqa`8n-.%L4dBIh");
      CSVFormat.newFormat('F');
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      char char0 = ']';
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      cSVFormat3.MYSQL.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      CSVFormat cSVFormat5 = cSVFormat0.withHeader(stringArray0);
      Character character0 = Character.valueOf(']');
      cSVFormat5.EXCEL.withEscape(character0);
      cSVFormat3.withTrim(true);
      cSVFormat5.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = cSVFormat0.withCommentMarker(character0);
      cSVFormat6.EXCEL.withCommentMarker(':');
      cSVFormat5.withRecordSeparator("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      Character character1 = new Character(']');
      // Undeclared exception!
      try { 
        cSVFormat4.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (']')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      Character character0 = Character.valueOf('.');
      cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      Character character1 = null;
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
      Character character2 = Character.valueOf('0');
      cSVFormat2.EXCEL.withEscape(character2);
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape('0');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('0')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat2.withHeader(class0);
      Character character0 = Character.valueOf('I');
      CSVFormat cSVFormat3 = cSVFormat0.withEscape(character0);
      // Undeclared exception!
      try { 
        cSVFormat3.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('I')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('\\');
      // Undeclared exception!
      try { 
        cSVFormat0.INFORMIX_UNLOAD.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat1.EXCEL.withEscape(character0);
      boolean boolean0 = false;
      Character character1 = Character.valueOf(':');
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same (':')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('/');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.TDF.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('?');
      cSVFormat4.withTrim(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat1.EXCEL.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.RFC4180.withRecordSeparator('S');
      CSVFormat cSVFormat5 = cSVFormat4.TDF.withTrim();
      CSVFormat cSVFormat6 = cSVFormat0.withQuote(character0);
      cSVFormat6.withQuote(':');
      CSVFormat cSVFormat7 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat4.withIgnoreEmptyLines(false);
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat3.withIgnoreHeaderCase();
      cSVFormat7.getRecordSeparator();
      cSVFormat5.withIgnoreHeaderCase();
      CSVFormat cSVFormat8 = cSVFormat2.withTrailingDelimiter();
      cSVFormat8.toString();
      CSVFormat cSVFormat9 = cSVFormat8.withSkipHeaderRecord();
      cSVFormat5.getHeader();
      cSVFormat8.withSkipHeaderRecord();
      cSVFormat6.getQuoteMode();
      cSVFormat3.withTrim(true);
      cSVFormat6.getNullString();
      Character.valueOf('^');
      Character character1 = Character.valueOf('C');
      cSVFormat9.withEscape(character1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.EXCEL.toString();
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      Character character0 = Character.valueOf('q');
      cSVFormat1.DEFAULT.withCommentMarker(character0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1743);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = new Character('(');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1439);
      cSVFormat3.parse(pipedReader0);
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker('+');
      cSVFormat4.getTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.withEscape('+');
      String string0 = "\\ilhoS5A~&\"";
      String[] stringArray0 = new String[0];
      cSVFormat5.TDF.withHeader(stringArray0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("ilhoS5A~&\"", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat0.MYSQL.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      cSVFormat3.TDF.withSkipHeaderRecord();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat5.EXCEL.withIgnoreEmptyLines(true);
      cSVFormat5.getIgnoreSurroundingSpaces();
      cSVFormat3.withQuote('i');
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat0.MYSQL.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      cSVFormat3.TDF.withSkipHeaderRecord();
      Object[] objectArray1 = new Object[0];
      cSVFormat4.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      char char0 = '}';
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('}');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote('}');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('}')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jIOjH";
      stringArray0[1] = "";
      stringArray0[2] = "')";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(true);
      cSVFormat3.EXCEL.hashCode();
      CSVFormat cSVFormat6 = cSVFormat5.withTrim(false);
      CSVFormat cSVFormat7 = cSVFormat6.TDF.withIgnoreEmptyLines();
      Character character0 = new Character('q');
      cSVFormat7.INFORMIX_UNLOAD_CSV.withEscape(character0);
      cSVFormat0.withTrim(false);
      cSVFormat0.toString();
      cSVFormat7.withEscape(character0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('a');
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("");
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat2.getTrim();
      Character character0 = Character.valueOf('W');
      cSVFormat2.withQuote(character0);
      Character character1 = Character.valueOf('W');
      CSVFormat cSVFormat5 = cSVFormat3.withEscape(character1);
      CSVFormat cSVFormat6 = cSVFormat5.withQuote('u');
      cSVFormat3.withTrailingDelimiter(false);
      cSVFormat6.withIgnoreEmptyLines(false);
      cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreHeaderCase();
      cSVFormat3.getRecordSeparator();
      CSVFormat cSVFormat8 = cSVFormat5.withIgnoreHeaderCase();
      cSVFormat1.toString();
      cSVFormat8.withSkipHeaderRecord();
      cSVFormat7.getHeader();
      cSVFormat4.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.withTrim(true);
      cSVFormat1.getNullString();
      Character.valueOf('e');
      cSVFormat6.withEscape(character0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "hZh`WIoRs)1";
      CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withAllowMissingColumnNames(false);
      cSVFormat4.TDF.withTrim(true);
      CSVFormat cSVFormat5 = cSVFormat0.INFORMIX_UNLOAD_CSV.withDelimiter('b');
      cSVFormat5.EXCEL.toString();
      stringArray0[1] = "";
      stringArray0[2] = "JL:B?%](BU";
      cSVFormat2.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines();
      stringArray0[3] = "2N+l<BK%";
      CSVFormat cSVFormat6 = cSVFormat3.withHeader(stringArray0);
      CSVFormat cSVFormat7 = cSVFormat6.withTrailingDelimiter();
      CSVFormat cSVFormat8 = cSVFormat7.INFORMIX_UNLOAD.withEscape('s');
      cSVFormat7.getAllowMissingColumnNames();
      cSVFormat1.getIgnoreSurroundingSpaces();
      StringReader stringReader0 = new StringReader("hZh`WIoRs)1");
      cSVFormat7.parse(stringReader0);
      CSVFormat cSVFormat9 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat9.withHeader(class0);
      Character character0 = new Character('b');
      cSVFormat8.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      char char0 = 'q';
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      boolean boolean0 = true;
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[2];
      QuoteMode quoteMode0 = QuoteMode.ALL;
      // Undeclared exception!
      try { 
        cSVFormat3.RFC4180.print((Object) quoteMode0, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat1.EXCEL.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.RFC4180.withRecordSeparator('S');
      cSVFormat4.TDF.withTrim();
      cSVFormat3.withRecordSeparator(",#Ke<^SU%f");
      cSVFormat1.EXCEL.withAllowMissingColumnNames(false);
      MockFile mockFile0 = new MockFile(",#Ke<^SU%f");
      File file0 = MockFile.createTempFile("')f9GPVA@", "org.apache.commons.csv.CSVParser", (File) mockFile0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "Excel");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Excel
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("y\"VS{KH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.y\"VS{KH
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withSkipHeaderRecord();
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      Character character0 = Character.valueOf('%');
      assertNotNull(character0);
      assertEquals('%', (char)character0);
      
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      assertNotNull(cSVFormat2);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('%', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      assertNotNull(cSVFormat3);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('%', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals('%', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat4 = cSVFormat2.EXCEL.withSkipHeaderRecord();
      assertNotNull(cSVFormat4);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('%', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat4.getTrim());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      
      CSVFormat cSVFormat5 = cSVFormat2.TDF.withNullString("");
      assertNotNull(cSVFormat5);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('%', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals("", cSVFormat5.getNullString());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getTrim());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getCommentMarker());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      
      CSVFormat cSVFormat6 = cSVFormat3.TDF.withHeader(class0);
      assertNotNull(cSVFormat6);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('%', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals('%', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getTrim());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals("\r\n", cSVFormat6.getRecordSeparator());
      assertNull(cSVFormat6.getQuoteMode());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat3);
      
      CSVFormat cSVFormat7 = cSVFormat3.withQuote(character0);
      assertNotNull(cSVFormat7);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('%', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals('%', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat7.getNullString());
      assertEquals('%', (char)cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat7.getRecordSeparator());
      assertNull(cSVFormat7.getCommentMarker());
      assertEquals(',', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertNull(cSVFormat7.getQuoteMode());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertFalse(cSVFormat7.isNullStringSet());
      assertEquals('%', (char)cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat2);
      
      boolean boolean0 = cSVFormat5.getAllowMissingColumnNames();
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('%', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals("", cSVFormat5.getNullString());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getTrim());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getCommentMarker());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertFalse(boolean0);
      
      CSVFormat cSVFormat8 = cSVFormat3.withIgnoreHeaderCase();
      assertNotNull(cSVFormat8);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('%', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals('%', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat8.isNullStringSet());
      assertNull(cSVFormat8.getNullString());
      assertFalse(cSVFormat8.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertEquals(',', cSVFormat8.getDelimiter());
      assertTrue(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertNull(cSVFormat8.getQuoteMode());
      assertFalse(cSVFormat8.getTrim());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertEquals('%', (char)cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertTrue(cSVFormat8.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat8.getRecordSeparator());
      assertNull(cSVFormat8.getCommentMarker());
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertTrue(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat0);
      
      cSVFormat6.hashCode();
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('%', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals('%', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getTrim());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals("\r\n", cSVFormat6.getRecordSeparator());
      assertNull(cSVFormat6.getQuoteMode());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertTrue(cSVFormat3.equals((Object)cSVFormat8));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat8));
      assertFalse(cSVFormat6.equals((Object)cSVFormat7));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat8);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat3);
      
      MockFile mockFile0 = new MockFile("", "VfY3i4");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      cSVFormat5.print((Object) cSVFormat4, (Appendable) mockFileWriter0, false);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('%', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat4.getTrim());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals("", cSVFormat5.getNullString());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getTrim());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getCommentMarker());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/VfY3i4", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("VfY3i4", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat8));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat7);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(']');
      String string0 = cSVFormat3.MYSQL.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
      
      cSVFormat3.withTrim(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      CSVFormat cSVFormat4 = cSVFormat0.withHeader(stringArray0);
      Character character0 = Character.valueOf(']');
      cSVFormat4.EXCEL.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat3.withTrim(true);
      CSVFormat cSVFormat6 = cSVFormat4.withFirstRecordAsHeader();
      CSVFormat cSVFormat7 = cSVFormat2.withHeaderComments(stringArray0);
      CSVFormat cSVFormat8 = cSVFormat7.EXCEL.withCommentMarker(':');
      assertEquals(':', (char)cSVFormat8.getCommentMarker());
      
      CSVFormat cSVFormat9 = cSVFormat7.INFORMIX_UNLOAD.withRecordSeparator("NON_NUMERIC");
      assertTrue(cSVFormat9.getIgnoreEmptyLines());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      
      Character character1 = new Character('H');
      cSVFormat5.withEscape(character1);
      Character character2 = Character.valueOf('\'');
      cSVFormat6.withQuote(character2);
      CSVFormat cSVFormat10 = cSVFormat5.withSkipHeaderRecord(true);
      assertTrue(cSVFormat10.getTrim());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat10.getIgnoreSurroundingSpaces());
      assertEquals(']', cSVFormat10.getDelimiter());
      assertFalse(cSVFormat10.getTrailingDelimiter());
      assertFalse(cSVFormat10.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat10.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(" SurroundingSpaces:ignored");
      String[] stringArray0 = new String[6];
      stringArray0[0] = " SurroundingSpaces:ignored";
      stringArray0[1] = " SurroundingSpaces:ignored";
      stringArray0[2] = " SurroundingSpaces:ignored";
      stringArray0[3] = " SurroundingSpaces:ignored";
      stringArray0[4] = " SurroundingSpaces:ignored";
      stringArray0[5] = " SurroundingSpaces:ignored";
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: ' SurroundingSpaces:ignored' in [ SurroundingSpaces:ignored,  SurroundingSpaces:ignored,  SurroundingSpaces:ignored,  SurroundingSpaces:ignored,  SurroundingSpaces:ignored,  SurroundingSpaces:ignored]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.getRecordSeparator();
      cSVFormat0.getDelimiter();
      cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat1.getTrailingDelimiter();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat0.withHeader(class0);
      cSVFormat2.withAllowMissingColumnNames(false);
      MockFile mockFile0 = new MockFile("\r\n", "kV\"NG17;/;)Ri$");
      MockFile mockFile1 = new MockFile(mockFile0, "\r\n");
      mockFile1.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withQuote('I');
      cSVFormat2.EXCEL.withTrailingDelimiter(true);
      PipedWriter pipedWriter0 = null;
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('p');
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertTrue(cSVFormat4.getTrim());
      assertEquals('p', (char)cSVFormat5.getQuoteCharacter());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD.withRecordSeparator('W');
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("W", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((String[]) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat3.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase();
      CSVFormat cSVFormat7 = cSVFormat1.withTrim();
      assertTrue(cSVFormat7.getTrim());
      
      cSVFormat6.getIgnoreSurroundingSpaces();
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertTrue(cSVFormat6.getIgnoreHeaderCase());
      
      CSVFormat cSVFormat8 = cSVFormat1.withTrim(true);
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      
      cSVFormat0.getAllowMissingColumnNames();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat4));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('3');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('Q');
      cSVFormat4.withFirstRecordAsHeader();
      cSVFormat3.DEFAULT.withTrailingDelimiter(false);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NONE";
      CSVFormat cSVFormat6 = cSVFormat5.MYSQL.withHeader(stringArray0);
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      
      boolean boolean0 = cSVFormat5.getIgnoreEmptyLines();
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.getTrim());
      assertEquals('3', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertEquals("Q", cSVFormat5.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("SQJb)>f!X@0!fUe.tn");
      boolean boolean0 = cSVFormat0.isCommentMarkerSet();
      assertFalse(boolean0);
      
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat6 = cSVFormat0.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
  }
}
