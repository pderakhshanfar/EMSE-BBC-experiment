/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 06:43:28 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Locale;
import java.util.UnknownFormatConversionException;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withQuote('r');
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.equals(cSVFormat0);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat1.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.toString();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat1 = cSVFormat_Predefined1.getFormat();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      cSVFormat1.format(objectArray0);
      Short short0 = new Short((short)688);
      cSVFormat1.equals(short0);
      cSVFormat1.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('|');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      File file0 = MockFile.createTempFile("lw^ju", "", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      cSVFormat1.println(mockPrintWriter0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      cSVFormat0.print((Object) mockPrintWriter0, (Appendable) mockPrintStream0, false);
      cSVFormat0.EXCEL.withRecordSeparator("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "Y2HD`(RyKV>~\"C[uu";
      stringArray0[2] = "lw^ju";
      cSVFormat0.withHeader(stringArray0);
      cSVFormat2.getIgnoreHeaderCase();
      cSVFormat1.hashCode();
      cSVFormat2.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.csv.CSVFormat";
      stringArray0[1] = "YGgdH1;+YCc|GR";
      stringArray0[2] = "";
      stringArray0[3] = "The comment start character and the delimiter cannot be the same ('";
      stringArray0[4] = "LR6Aqpt>W}y)2~jN-Hf";
      stringArray0[5] = "{L52MhZ8z\"\"/J6G0K* ";
      stringArray0[6] = "NullString=<";
      stringArray0[7] = ")";
      stringArray0[8] = "J1,JTzPVuIv";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat5 = cSVFormat4.withQuote('N');
      Character character0 = Character.valueOf('N');
      cSVFormat5.withEscape(character0);
      cSVFormat3.toString();
      cSVFormat3.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = "org.apache.commons.csv.Assertions";
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.Assertions");
      Object object0 = new Object();
      Long long0 = new Long(912L);
      boolean boolean0 = true;
      cSVFormat0.print((Object) long0, (Appendable) mockFileWriter0, true);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.Assertions", "org.apache.commons.csv.Assertions");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat0.print(path0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('B');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(';');
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[4] = object2;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat3.equals(cSVFormat2);
      cSVFormat2.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(' ');
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat3.getQuoteMode();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('B');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('^');
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat2.equals(cSVFormat1);
      cSVFormat3.getHeaderComments();
      cSVFormat2.withQuote('B');
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      MockFileWriter mockFileWriter0 = new MockFileWriter("O[F3j,{Gx7H'G0V/7-");
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.allocate(1951);
      cSVFormat1.print((Object) charBuffer0, (Appendable) mockFileWriter0, true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      MockFileWriter mockFileWriter0 = new MockFileWriter("OF3j,{Gx7H~'G0V/7-");
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.allocate(1951);
      cSVFormat1.print((Object) charBuffer0, (Appendable) mockFileWriter0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`";
      stringArray0[1] = "\n";
      stringArray0[2] = "wbIWsC-}&~p";
      cSVFormat2.EXCEL.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      Character character0 = new Character('-');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(character0);
      cSVFormat5.withRecordSeparator("#DQxj$Py\"O|r/]9Y");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('-');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      char char0 = 'S';
      cSVFormat3.withDelimiter('S');
      // Undeclared exception!
      try { 
        CSVFormat.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat.valueOf("InformixUnload");
      cSVFormat0.getSkipHeaderRecord();
      MockFileWriter mockFileWriter0 = new MockFileWriter("N");
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('q');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Z");
      cSVFormat5.EXCEL.withRecordSeparator('C');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Z";
      objectArray0[1] = (Object) "Z";
      objectArray0[2] = (Object) cSVFormat4;
      cSVFormat5.printRecord(mockPrintWriter0, objectArray0);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("\"\"!BrJ,JVg\"9g8}~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.\"\"!BrJ,JVg\"9g8}~
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat2 = cSVFormat_Predefined0.getFormat();
      Character character0 = new Character('+');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      cSVFormat2.format(objectArray0);
      PipedReader pipedReader0 = new PipedReader(1702);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat2.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat4.TDF.withEscape('R');
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat0.withTrim(false);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) quoteMode0;
      cSVFormat1.format(objectArray0);
      cSVFormat3.format(objectArray0);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ",\"org.apache.commons.csv.QuoteMode@0000000009\",");
      // Undeclared exception!
      try { 
        cSVFormat5.printRecord(charBuffer0, cSVFormat_PredefinedArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withTrim();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat2.format(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat2 = cSVFormat_Predefined1.getFormat();
      Character character0 = new Character('+');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000003,\"Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false\"");
      Integer integer0 = new Integer(844);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat3.print((Object) integer0, (Appendable) pipedWriter0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withTrim();
      Character character0 = Character.valueOf('~');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat5 = cSVFormat3.MYSQL.withCommentMarker((Character) null);
      CSVFormat cSVFormat6 = cSVFormat4.RFC4180.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat7 = cSVFormat4.withSkipHeaderRecord();
      cSVFormat1.getQuoteMode();
      cSVFormat2.getCommentMarker();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("n+x$#Re*rXZi");
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat7.INFORMIX_UNLOAD.withHeader(class0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      cSVFormat2.print((Appendable) mockPrintStream0);
      cSVFormat2.getRecordSeparator();
      cSVFormat6.getNullString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\n";
      CSVFormat cSVFormat8 = cSVFormat7.withHeader(stringArray0);
      cSVFormat8.INFORMIX_UNLOAD.withQuote('~');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      cSVFormat0.INFORMIX_UNLOAD.printRecord(mockPrintStream0, stringArray0);
      cSVFormat_Predefined0.getFormat();
      cSVFormat1.withEscape('D');
      cSVFormat4.getIgnoreHeaderCase();
      cSVFormat3.getQuoteMode();
      cSVFormat5.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(')');
      Character character0 = new Character('~');
      cSVFormat2.format(cSVFormat_PredefinedArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('H');
      cSVFormat3.withNullString("org.apache.commons.csv.CSVFormat$Predefined@0000000004,org.apache.commons.csv.CSVFormat$Predefined@0000000005,org.apache.commons.csv.CSVFormat$Predefined@0000000006,org.apache.commons.csv.CSVFormat$Predefined@0000000007,org.apache.commons.csv.CSVFormat$Predefined@0000000008,org.apache.commons.csv.CSVFormat$Predefined@0000000009,org.apache.commons.csv.CSVFormat$Predefined@0000000010)");
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat3.withRecordSeparator("org.apache.commons.csv.CSVFormat$Predefined@0000000004,org.apache.commons.csv.CSVFormat$Predefined@0000000005,org.apache.commons.csv.CSVFormat$Predefined@0000000006,org.apache.commons.csv.CSVFormat$Predefined@0000000007,org.apache.commons.csv.CSVFormat$Predefined@0000000008,org.apache.commons.csv.CSVFormat$Predefined@0000000009,org.apache.commons.csv.CSVFormat$Predefined@0000000010)");
      String string0 = "7&/E]ac_";
      String string1 = "";
      try { 
        MockURI.URI("", "#g", "\r\n", "x}Jb}K2tZ_", "\r\n");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://%23g%0D%0A?x%7DJb%7DK2tZ_#%0D%0A
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.withEscape((Character) null);
      Character character0 = new Character('h');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('h');
      cSVFormat3.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(')');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('r');
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(cSVFormat_PredefinedArray0);
      cSVFormat4.equals(cSVFormat1);
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)124;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        cSVFormat2.print((Object) cSVFormat4, (Appendable) charBuffer1, false);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(' ');
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat0;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat0.equals(objectArray0[0]);
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat4.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(')');
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord();
      Character character0 = Character.valueOf(')');
      cSVFormat3.withQuote(character0);
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat2.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("(line ");
      Object object0 = new Object();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat1 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat1.TDF.hashCode();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat.newFormat('C');
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "(line ";
      objectArray0[4] = (Object) "N";
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat2;
      cSVFormat1.format(objectArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = new Character('p');
      cSVFormat1.withCommentMarker(character0);
      cSVFormat1.getEscapeCharacter();
      cSVFormat2.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      Object object0 = new Object();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat1 = cSVFormat_Predefined0.getFormat();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.println(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.toString();
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray1[1] = (Object) "No header mapping was specified, the record values can't be accessed by name";
      cSVFormat2.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      MockFileWriter mockFileWriter0 = new MockFileWriter("N");
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat1.print(object1, (Appendable) mockFileWriter0, false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileWriter mockFileWriter0 = new MockFileWriter("N");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('r');
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "N";
      objectArray0[5] = (Object) mockFileWriter0;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat2.MYSQL.print((Appendable) mockFileWriter0);
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      Long long0 = new Long(0L);
      cSVFormat0.equals(long0);
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat3.getHeaderComments();
      cSVFormat3.printRecord(mockFileWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('a');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Character character1 = new Character('L');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) character1;
      objectArray0[5] = (Object) character0;
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      Character character2 = new Character('K');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape(character2);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('L');
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter('K');
      Character character3 = new Character('a');
      CSVFormat cSVFormat7 = cSVFormat5.withCommentMarker(character3);
      cSVFormat7.format(objectArray0);
      cSVFormat3.getQuoteMode();
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat5.getIgnoreEmptyLines();
      cSVFormat6.getDelimiter();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat8 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat9 = cSVFormat8.withAllowMissingColumnNames();
      cSVFormat9.toString();
      cSVFormat2.withRecordSeparator('L');
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("(line ");
      Object object0 = new Object();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat1 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat1.TDF.hashCode();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "(line ";
      objectArray0[4] = (Object) "N";
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat2;
      cSVFormat1.format(objectArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = new Character('p');
      cSVFormat1.withCommentMarker(character0);
      cSVFormat1.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withTrim();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('3');
      Character character0 = Character.valueOf('D');
      CSVFormat cSVFormat3 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = (Object) cSVFormat4;
      cSVFormat4.withHeaderComments(objectArray0);
      Character character1 = Character.valueOf('r');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(character1);
      MockFile mockFile0 = new MockFile("=t'HeUNh`%e:r[vsW", "=t'HeUNh`%e:r[vsW");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat5.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines(true);
      cSVFormat5.MYSQL.print((File) mockFile0, charset0);
      cSVFormat5.equals(cSVFormat1);
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withEscape((Character) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator('|');
      cSVFormat1.withCommentMarker('r');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat4.equals(cSVFormat5);
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = new Character('4');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B.KMh");
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat6 = cSVFormat5.DEFAULT.withQuote('<');
      CSVFormat cSVFormat7 = cSVFormat6.TDF.withFirstRecordAsHeader();
      CSVFormat cSVFormat8 = cSVFormat7.DEFAULT.withAllowMissingColumnNames(false);
      cSVFormat5.withSkipHeaderRecord(true);
      QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat9 = cSVFormat1.withQuoteMode(quoteMode1);
      CSVFormat cSVFormat10 = cSVFormat9.EXCEL.withCommentMarker(character0);
      cSVFormat10.EXCEL.withQuote(character0);
      cSVFormat9.withQuoteMode(quoteMode0);
      cSVFormat6.getNullString();
      cSVFormat9.getHeaderComments();
      cSVFormat8.getNullString();
      Character character1 = new Character('r');
      cSVFormat2.withQuote(character1);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("YV", "YV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('.');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat5.MYSQL.withSkipHeaderRecord(true);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat5.MYSQL.withQuoteMode(quoteMode0);
      Character character0 = new Character('7');
      cSVFormat5.withCommentMarker(character0);
      cSVFormat0.getHeaderComments();
      cSVFormat3.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = cSVFormat4.withRecordSeparator("Excel");
      cSVFormat6.hashCode();
      cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat3.withIgnoreSurroundingSpaces();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{T()0+H9=E)o";
      stringArray0[1] = null;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      cSVFormat4.getSkipHeaderRecord();
      Object object0 = new Object();
      CSVFormat cSVFormat5 = cSVFormat2.withTrim(true);
      cSVFormat5.withIgnoreHeaderCase(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat6 = cSVFormat_Predefined1.getFormat();
      Character character0 = new Character('/');
      cSVFormat6.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.getEscapeCharacter();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      Character character0 = Character.valueOf('o');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      // Undeclared exception!
      try { 
        cSVFormat5.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[3] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      MockFile mockFile0 = new MockFile("\n");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat3.print((File) mockFile0, charset0);
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[1] = ' ';
      charArray0[2] = 'z';
      charArray0[3] = '`';
      charArray0[4] = 'd';
      charArray0[5] = 'w';
      charArray0[6] = 'B';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat2.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.getSkipHeaderRecord();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      cSVFormat_Predefined0.getFormat();
      Character character0 = new Character('+');
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '+';
      charArray0[4] = '+';
      charArray0[5] = '+';
      charArray0[6] = '+';
      charArray0[7] = '+';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("qJc\"");
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("\r\n");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) "\r\n";
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) "qJc\"";
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) "qJc\"";
      cSVFormat1.printRecord(mockFileWriter0, objectArray0);
      cSVFormat3.toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFileWriter mockFileWriter0 = new MockFileWriter(" uLBK^MI\"X");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("No header mapping was specified, the record values can't be accessed by name");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) " uLBK^MI\"X";
      objectArray0[1] = (Object) "No header mapping was specified, the record values can't be accessed by name";
      objectArray0[2] = (Object) " uLBK^MI\"X";
      objectArray0[3] = (Object) " uLBK^MI\"X";
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      cSVFormat0.withTrim(false);
      cSVFormat0.withTrailingDelimiter(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat1 = cSVFormat_Predefined1.getFormat();
      Character character0 = new Character('+');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      cSVFormat0.withNullString("}YDKRXOW,");
      cSVFormat1.isEscapeCharacterSet();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.csv.CSVFormat@0000000004,,org.apache.commons.csv.CSVFormat@0000000004,org.apache.commons.csv.CSVFormat@0000000004";
      stringArray0[1] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      stringArray0[2] = "}YDKRXOW,";
      stringArray0[3] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      stringArray0[4] = "}YDKRXOW,";
      // Undeclared exception!
      try { 
        cSVFormat1.MYSQL.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[3] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat1.withTrim(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.Default;
      cSVFormat_Predefined1.getFormat();
      Character character0 = new Character('+');
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFileWriter mockFileWriter0 = new MockFileWriter(",GaY");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("No header mapping was specified, the record values can't be accessed by name");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ",GaY";
      objectArray0[5] = (Object) ",GaY";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) ",GaY";
      objectArray0[4] = (Object) mockFileWriter0;
      objectArray0[5] = (Object) "No header mapping was specified, the record values can't be accessed by name";
      cSVFormat1.printRecord(mockFileWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("", "hP,N<S#KVm;.h~&");
      MockFile mockFile1 = new MockFile(mockFile0, "<+|gW9PZujq:9Hq;3i");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\n";
      stringArray0[1] = "hP,N<S#KVm;.h~&";
      stringArray0[2] = "<+|gW9PZujq:9Hq;3i";
      stringArray0[3] = ") EOF reached before encapsulated token finished";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      cSVFormat3.INFORMIX_UNLOAD.withTrim(false);
      cSVFormat1.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.getSkipHeaderRecord();
      String string0 = "\\N";
      Object object0 = new Object();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.RFC4180;
      cSVFormat_Predefined1.getFormat();
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat1.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withTrim(true);
      File file0 = MockFile.createTempFile("<+|gW9PZujq:9Hq;3i", "_CDDVy*g+J\"O6+M[,>\"");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.ENGLISH;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.withTrim(true);
      cSVFormat0.withRecordSeparator(')');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('S');
      Object[] objectArray0 = new Object[0];
      cSVFormat2.withHeaderComments(objectArray0);
      Long long0 = new Long(1L);
      cSVFormat1.equals(long0);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('`');
      CSVFormat cSVFormat5 = cSVFormat3.withCommentMarker('N');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat5;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) cSVFormat0;
      CSVFormat cSVFormat6 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat4.equals(objectArray0[0]);
      cSVFormat6.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat5 = cSVFormat_Predefined1.getFormat();
      Character character0 = new Character('+');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      cSVFormat5.format(objectArray0);
      cSVFormat4.withNullString("org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000004,\"Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> IgnoreHeaderCase:ignored SkipHeaderRecord:false\"");
      cSVFormat4.withTrailingDelimiter(true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      cSVFormat_Predefined0.getFormat();
      Character character0 = new Character('+');
      cSVFormat4.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", recordNumber=");
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, ", recordNumber=", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      cSVFormat1.print((Appendable) mockPrintWriter1);
      cSVFormat4.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.toString();
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) mockFileWriter0;
      cSVFormat1.printRecord(mockFileWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat0.format(objectArray0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) "org.apache.commons.csv.CSVFormat@0000000002\torg.apache.commons.csv.CSVFormat@0000000001\tN\tN\tN\tN\tN";
      objectArray1[1] = (Object) cSVFormat0;
      objectArray1[2] = (Object) cSVFormat2;
      objectArray1[3] = (Object) "org.apache.commons.csv.CSVFormat@0000000002\torg.apache.commons.csv.CSVFormat@0000000001\tN\tN\tN\tN\tN";
      Object object2 = new Object();
      objectArray1[4] = object2;
      cSVFormat0.MYSQL.toString();
      objectArray1[5] = (Object) cSVFormat2;
      objectArray1[6] = (Object) cSVFormat2;
      objectArray1[7] = (Object) "org.apache.commons.csv.CSVFormat@0000000002\torg.apache.commons.csv.CSVFormat@0000000001\tN\tN\tN\tN\tN";
      Object object3 = new Object();
      objectArray1[8] = object3;
      cSVFormat0.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      MockFile mockFile0 = new MockFile("", "hP,N<S#KVm;.h~&");
      MockFile mockFile1 = new MockFile(mockFile0, "<+|gW9PZujq:9Hq;3i");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<+|gW9PZujq:9Hq;3i");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.ENGLISH;
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('.');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) resultSet0;
      cSVFormat2.format(objectArray0);
      cSVFormat3.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('0');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      cSVFormat3.MYSQL.withEscape('6');
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat5.withNullString("");
      cSVFormat2.getTrim();
      Class<QuoteMode> class1 = QuoteMode.class;
      cSVFormat2.withHeader(class1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(')');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('r');
      CSVFormat cSVFormat5 = cSVFormat4.withHeaderComments(cSVFormat_PredefinedArray0);
      cSVFormat5.equals(cSVFormat1);
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      cSVFormat0.getSkipHeaderRecord();
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object object0 = new Object();
      CSVFormat cSVFormat1 = CSVFormat.newFormat('/');
      cSVFormat1.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat1;
      cSVFormat1.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = new Character('');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      File file0 = MockFile.createTempFile("lw^ju", "lw^ju", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      cSVFormat2.println(mockPrintWriter0);
      cSVFormat1.print((Object) cSVFormat2, (Appendable) mockPrintWriter0, false);
      cSVFormat0.format(cSVFormat_PredefinedArray0);
      cSVFormat0.getQuoteMode();
      cSVFormat0.toString();
      // Undeclared exception!
      try { 
        cSVFormat0.print((File) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat1.withSkipHeaderRecord(false);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat2.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = new Character('');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = ") EOF reached before encapsulated token finished";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat3.getSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(true);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat5.withHeader(resultSet1);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      Character character1 = new Character('w');
      cSVFormat0.format(stringArray0);
      cSVFormat5.equals("");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.getSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat1.withHeader(class0);
      cSVFormat0.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(true);
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines(false);
      Character character0 = new Character('[');
      Object[] objectArray0 = new Object[18];
      objectArray0[0] = (Object) cSVFormat4;
      cSVFormat1.format(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat4.withHeader(resultSet0);
      MockFile mockFile0 = new MockFile("v", "org.apache.commons.csv.CSVFormat@0000000006\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat3.print(path0, charset0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.equals(cSVFormat0);
      cSVFormat0.getSkipHeaderRecord();
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      MockFile mockFile0 = new MockFile((String) null, "");
      MockFile mockFile1 = new MockFile(mockFile0, "<+|gW9PZujq:9Hq;3i");
      Locale locale0 = Locale.ENGLISH;
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat3.withEscape('?');
      cSVFormat2.withTrim(false);
      cSVFormat2.withNullString("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      Object object1 = new Object();
      objectArray0[6] = object1;
      cSVFormat0.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.toString();
      MockFileWriter mockFileWriter0 = new MockFileWriter(";qm>Ms3 &kX");
      cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      cSVFormat3.equals(";qm>Ms3 &kX");
      cSVFormat2.getSkipHeaderRecord();
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat4.withQuote('\u008E');
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      File file0 = MockFile.createTempFile("7]k^.Pn6q^oT", "");
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withTrailingDelimiter(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.equals(cSVFormat2);
      cSVFormat1.withTrim(true);
      cSVFormat1.withNullString("");
      Character character0 = Character.valueOf('u');
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) "7]k^.Pn6q^oT";
      objectArray0[7] = (Object) file0;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat4.format(objectArray0);
      cSVFormat3.withNullString("");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@qL7v";
      stringArray0[1] = "qJ/i";
      stringArray0[2] = "\r\n";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      cSVFormat5.toString();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      MockFile mockFile0 = new MockFile("", "hP,N<S#KVm;.h~&");
      MockFile mockFile1 = new MockFile(mockFile0, "<+|gW9PZujq:9Hq;3i");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.ENGLISH;
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('.');
      CSVFormat cSVFormat4 = cSVFormat1.withTrim(true);
      cSVFormat4.withNullString("");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "hP,N<S#KVm;.h~&";
      cSVFormat3.printRecord(mockPrintStream0, objectArray0);
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat2.getHeader();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.toString();
      MockFileWriter mockFileWriter0 = new MockFileWriter(";qm>Ms3 &kX");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      cSVFormat1.withRecordSeparator("n68u");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.toString();
      MockFileWriter mockFileWriter0 = new MockFileWriter(";qm>Ms3 &kX");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ";qm>Ms3 &kX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat1 = cSVFormat_Predefined0.getFormat();
      Character character0 = new Character('v');
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.getSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockFileWriter mockFileWriter0 = new MockFileWriter("N");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "N";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat_Predefined1.getFormat();
      Character character0 = new Character('+');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      cSVFormat0.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      cSVFormat4.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.MySQL;
      cSVFormat_Predefined1.getFormat();
      Character character0 = new Character('+');
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.getHeader();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.getSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      File file0 = MockFile.createTempFile("7]k^.Pn6q^oT", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      cSVFormat0.printRecord(mockFileWriter0, objectArray0);
      PipedReader pipedReader0 = new PipedReader(52);
      cSVFormat0.parse(pipedReader0);
      cSVFormat0.getNullString();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('');
      Character character1 = Character.valueOf('Z');
      cSVFormat0.withCommentMarker(character1);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      File file0 = MockFile.createTempFile("lw^ju", "", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat3.println(mockPrintWriter0);
      cSVFormat2.print((Object) null, (Appendable) mockPrintWriter0, true);
      Character character2 = new Character('');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) character2;
      objectArray0[5] = (Object) "lw^ju";
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) cSVFormat3;
      objectArray0[8] = (Object) mockPrintWriter0;
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      Object object0 = new Object();
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class1);
      cSVFormat2.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat3.withHeaderComments(cSVFormat_PredefinedArray0);
      cSVFormat5.withTrim(false);
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreEmptyLines(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.TDF;
      cSVFormat_Predefined1.getFormat();
      Character character0 = new Character('l');
      cSVFormat6.format(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockFileWriter mockFileWriter0 = new MockFileWriter("N");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "N";
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      Object object2 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat1.getNullString();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = 'a';
      charArray0[3] = '>';
      charArray0[4] = 'a';
      charArray0[5] = '(';
      charArray0[6] = '3';
      charArray0[7] = '3';
      charArray0[8] = 'S';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) cSVFormat1, (Appendable) charBuffer0, true);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.getSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockFileWriter mockFileWriter0 = new MockFileWriter("N");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "N";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = object1;
      cSVFormat0.printRecord(mockFileWriter0, objectArray0);
      cSVFormat1.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('5');
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      cSVFormat4.withIgnoreHeaderCase();
      cSVFormat4.toString();
      MockFileWriter mockFileWriter0 = new MockFileWriter("@*Feclk");
      Object object0 = new Object();
      cSVFormat0.print(object0, (Appendable) mockFileWriter0, true);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      MockFile mockFile0 = new MockFile("", "hP,N<S#KVm;.h~&");
      MockFile mockFile1 = new MockFile(mockFile0, "TDF");
      MockFile mockFile2 = new MockFile("", "");
      MockFile mockFile3 = new MockFile(mockFile2, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.ENGLISH;
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat4 = cSVFormat0.withEscape('.');
      CSVFormat cSVFormat5 = cSVFormat3.withTrim(true);
      cSVFormat5.withNullString("TDF");
      Character character0 = Character.valueOf('>');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) character0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) mockFile0;
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = ";qm>Ms3 &kX";
      cSVFormat0.withHeader(stringArray0);
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.getSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withAllowMissingColumnNames(false);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      File file0 = MockFile.createTempFile(";qm>Ms3 &kX", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      Object object0 = new Object();
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      cSVFormat3.printRecord(mockFileWriter0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockFile mockFile0 = new MockFile("", "hP,N<S#KVm;.h~&");
      MockFile.createTempFile("$VALUES", "hP,N<S#KVm;.h~&");
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat2.withTrailingDelimiter(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      Long long0 = new Long(0L);
      CSVFormat cSVFormat4 = cSVFormat2.withQuote('A');
      cSVFormat4.getSkipHeaderRecord();
      cSVFormat3.withQuote('A');
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      MockFile mockFile0 = new MockFile("", "hP,N<S#KVm;.h~&");
      MockFile mockFile1 = new MockFile(mockFile0, "TDF");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.ENGLISH;
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat2.withIgnoreHeaderCase(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.equals(quoteMode0);
      cSVFormat1.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('o');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "fsI-";
      stringArray0[1] = "";
      stringArray0[2] = ") EOF reached before encapsulated token finished";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat4.getSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat0.withAllowMissingColumnNames(false);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      File file0 = MockFile.createTempFile("[\")qBsJ}:", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      Object object0 = new Object();
      cSVFormat2.printRecord(mockFileWriter0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.getSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      File file0 = MockFile.createTempFile("7]k^.Pn6q^oT", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      cSVFormat0.printRecord(mockFileWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      char char0 = '';
      char char1 = 'z';
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('z');
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat2.withTrim(true);
      cSVFormat0.withAllowMissingColumnNames(false);
      // Undeclared exception!
      try { 
        cSVFormat2.withDelimiter('z');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('z')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      cSVFormat3.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat0.withEscape('H');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat4.EXCEL.format(objectArray0);
      Character character0 = new Character('H');
      cSVFormat4.INFORMIX_UNLOAD.withQuote(character0);
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "Index for header '%s' is %d but CSVRecord only has %d values!");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1, false);
      cSVFormat1.print((Object) "", (Appendable) mockFileWriter0, true);
      cSVFormat0.withDelimiter('f');
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('6');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("&Zxa-{tLnS[D");
      cSVFormat2.EXCEL.withIgnoreHeaderCase(true);
      Character character1 = new Character('{');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character1);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat.Predefined.values();
      cSVFormat0.getIgnoreHeaderCase();
      cSVFormat6.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      String[] stringArray0 = new String[0];
      cSVFormat1.MYSQL.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Path) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = objectArray0[0];
      MockFile mockFile0 = new MockFile((File) null, "<+|gW9PZujq:9Hq;3i");
      MockFile mockFile1 = new MockFile("<+|gW9PZujq:9Hq;3i");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.ENGLISH;
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat4 = cSVFormat1.withEscape('.');
      cSVFormat4.withTrim(true);
      cSVFormat2.withEscape('.');
      cSVFormat0.isCommentMarkerSet();
      cSVFormat4.withRecordSeparator("");
      // Undeclared exception!
      try { 
        cSVFormat3.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      MockFile mockFile0 = new MockFile("", "hP,N<S#KVm;.h~&");
      MockFile mockFile1 = new MockFile(mockFile0, "TDF");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.ENGLISH;
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat5 = cSVFormat3.withEscape('.');
      CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames();
      cSVFormat6.withTrim(false);
      cSVFormat6.withNullString("}R(@.v&N)Rqq");
      Character.valueOf('R');
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "}R(@.v&N)Rqq";
      objectArray0[4] = (Object) "TDF";
      cSVFormat6.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat2.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('J');
      cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('H');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat6 = cSVFormat5.withFirstRecordAsHeader();
      cSVFormat6.equals(cSVFormat2);
      cSVFormat5.getSkipHeaderRecord();
      cSVFormat6.withAllowMissingColumnNames(false);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      MockFile.createTempFile("7]k^.Pn6q^oT", "");
      cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat2.MYSQL.withTrailingDelimiter(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.equals(cSVFormat2);
      cSVFormat2.getSkipHeaderRecord();
      cSVFormat1.withQuote('|');
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.MYSQL.withAllowMissingColumnNames(true);
      Long long0 = new Long(1254L);
      cSVFormat0.EXCEL.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) long0, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withIgnoreHeaderCase(true);
      Character character0 = new Character(',');
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('Y');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(cSVFormat_PredefinedArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      cSVFormat5.withIgnoreSurroundingSpaces();
      MockFile mockFile0 = new MockFile((File) null, "<+|gW9PZujq:9Hq;3i");
      MockFile mockFile1 = new MockFile("e:P0vNy<A");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.ENGLISH;
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat3.withEscape(']');
      CSVFormat cSVFormat7 = cSVFormat6.withTrim(false);
      cSVFormat7.withNullString("");
      Character.valueOf('`');
      cSVFormat0.format(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = objectArray0[0];
      MockFile mockFile0 = new MockFile((File) null, "<+|gW9PZujq:9Hq;3i");
      MockFile mockFile1 = new MockFile("<+|gW9PZujq:9Hq;3i");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.ENGLISH;
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat4 = cSVFormat1.withEscape('.');
      cSVFormat4.withTrim(true);
      cSVFormat4.withNullString("<+|gW9PZujq:9Hq;3i");
      Character.valueOf('R');
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.toString();
      MockFileWriter mockFileWriter0 = new MockFileWriter(";qm>Ms3 &kX");
      cSVFormat1.print((Object) null, (Appendable) mockFileWriter0, true);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter();
      cSVFormat3.withHeader(class0);
      cSVFormat3.format(cSVFormat_PredefinedArray0);
      CSVFormat cSVFormat4 = cSVFormat0.withRecordSeparator(':');
      CSVFormat cSVFormat5 = cSVFormat3.withEscape(':');
      cSVFormat5.getEscapeCharacter();
      cSVFormat4.withEscape('F');
      cSVFormat5.isCommentMarkerSet();
      cSVFormat2.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object object0 = new Object();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
      Character character0 = new Character(')');
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      Character character1 = Character.valueOf(')');
      cSVFormat1.withQuote(character1);
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('V');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      Character.valueOf('c');
      cSVFormat0.format(cSVFormat_PredefinedArray0);
      Character character0 = new Character('W');
      cSVFormat3.format(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.getSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      File file0 = MockFile.createTempFile("7]k^.Pn6q^oT", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      cSVFormat0.printRecord(mockFileWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat0.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      Class<QuoteMode> class1 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat0.withHeader(class1);
      Character character0 = Character.valueOf('s');
      CSVFormat cSVFormat5 = cSVFormat2.withQuote(character0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat3;
      cSVFormat5.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator('^');
      cSVFormat6.withEscape('H');
      cSVFormat6.getEscapeCharacter();
      String string0 = "\u2028";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("\u2028");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.\u2028
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[0];
      try { 
        cSVFormat0.MYSQL.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('d');
      cSVFormat1.withCommentMarker(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(true);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat4 = cSVFormat0.withHeader(class0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat5 = cSVFormat_Predefined0.getFormat();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat5.format(objectArray0);
      Double double0 = new Double((-2083.0));
      CSVFormat.newFormat('d');
      cSVFormat4.equals(double0);
      cSVFormat5.getSkipHeaderRecord();
      cSVFormat1.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withIgnoreSurroundingSpaces();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      cSVFormat2.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat0.withEscape('H');
      cSVFormat3.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat_Predefined0.getFormat();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('H');
      cSVFormat5.equals(cSVFormat0);
      cSVFormat0.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat3.withFirstRecordAsHeader();
      char char0 = '9';
      MockFile mockFile0 = new MockFile(">");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        cSVFormat2.print(path0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.OutputStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      Character character0 = Character.valueOf('R');
      cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat2.TDF.withCommentMarker('&');
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat6;
      objectArray0[3] = (Object) cSVFormat5;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) class0;
      cSVFormat6.format(objectArray0);
      cSVFormat6.withHeader(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat5.print((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.toString();
      MockFileWriter mockFileWriter0 = new MockFileWriter(";qm>Ms3 WKkX");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ";qm>Ms3 WKkX";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      cSVFormat_Predefined0.getFormat();
      MockFile mockFile0 = new MockFile("lP");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat1.DEFAULT.print(path0, charset0);
      Character character0 = new Character('x');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.TDF.printRecord(mockFileWriter0, objectArray0);
      Object[] objectArray1 = new Object[0];
      cSVFormat2.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('u');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.withSkipHeaderRecord();
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.MYSQL.hashCode();
      MockFile mockFile0 = new MockFile((File) null, "");
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-121);
      byteArray0[8] = (byte) (-34);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = (Object) cSVFormat0;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      cSVFormat0.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      cSVFormat4.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      cSVFormat2.withIgnoreEmptyLines();
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.TDF;
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('a');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Character character1 = new Character('L');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) character1;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat0.withTrim(false);
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      Byte byte0 = new Byte((byte) (-73));
      cSVFormat1.equals(byte0);
      cSVFormat1.getSkipHeaderRecord();
      cSVFormat2.withAllowMissingColumnNames(false);
      cSVFormat3.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.InformixUnload;
      cSVFormat_Predefined1.getFormat();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.equals(cSVFormat0);
      cSVFormat3.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = objectArray0[0];
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      cSVFormat0.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      cSVFormat0.equals(cSVFormat2);
      cSVFormat5.getSkipHeaderRecord();
      cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat4.getDelimiter();
      cSVFormat4.isNullStringSet();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.withNullString("");
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withIgnoreSurroundingSpaces();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      cSVFormat2.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat0.withEscape('H');
      cSVFormat3.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.equals(cSVFormat1);
      cSVFormat1.getSkipHeaderRecord();
      cSVFormat4.withAllowMissingColumnNames(false);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('V');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      Character character0 = Character.valueOf('c');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      cSVFormat4.withTrim(false);
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.equals(cSVFormat0);
      cSVFormat1.getSkipHeaderRecord();
      cSVFormat5.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = objectArray0[0];
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      cSVFormat0.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat2.withTrim(false);
      Class<Token.Type> class1 = Token.Type.class;
      CSVFormat cSVFormat5 = cSVFormat1.withHeader(class1);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) cSVFormat1;
      objectArray1[1] = (Object) cSVFormat5;
      objectArray1[2] = (Object) cSVFormat4;
      objectArray1[3] = (Object) class1;
      cSVFormat5.format(objectArray1);
      CSVFormat cSVFormat6 = cSVFormat5.withRecordSeparator('i');
      cSVFormat2.withEscape('i');
      cSVFormat6.getEscapeCharacter();
      cSVFormat3.withEscape('i');
      cSVFormat5.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q*40>3$DV'");
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.equals(cSVFormat3);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat4.withAllowMissingColumnNames(false);
      cSVFormat2.isNullStringSet();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('a');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat2.isQuoteCharacterSet();
      cSVFormat1.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      cSVFormat3.DEFAULT.withDelimiter('a');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat1.withHeader((ResultSetMetaData) null);
      cSVFormat4.hashCode();
      cSVFormat2.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character.valueOf('');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.equals((Object) null);
      cSVFormat0.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('a');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat2.isQuoteCharacterSet();
      cSVFormat1.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      cSVFormat3.DEFAULT.withDelimiter('a');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat1.getEscapeCharacter();
      String[] stringArray0 = new String[1];
      cSVFormat3.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = objectArray0[0];
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      cSVFormat0.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.equals(cSVFormat2);
      cSVFormat5.getSkipHeaderRecord();
      cSVFormat3.withAllowMissingColumnNames(false);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat.Predefined.values();
      URI uRI0 = MockURI.aHttpURI;
      Object object0 = new Object();
      Locale locale0 = Locale.ENGLISH;
      boolean boolean0 = false;
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('(');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote('(');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('(')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.DEFAULT.toString();
      Character character0 = new Character('a');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Character character1 = new Character('L');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat0.withTrailingDelimiter(true);
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat4 = cSVFormat_Predefined1.getFormat();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.equals(cSVFormat4);
      cSVFormat1.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.INFORMIX_UNLOAD_CSV.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.Excel;
      cSVFormat_Predefined1.getFormat();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      Short short0 = new Short((short)426);
      cSVFormat3.equals(short0);
      CSVFormat cSVFormat5 = cSVFormat3.withFirstRecordAsHeader();
      cSVFormat5.getSkipHeaderRecord();
      cSVFormat4.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      MockFile mockFile0 = new MockFile("", "hP,N<S#KVm;.h~&");
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('O');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      Character character0 = Character.valueOf('V');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      CSVFormat cSVFormat5 = cSVFormat1.withTrim(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat6 = cSVFormat4.withHeader(class0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) cSVFormat6;
      objectArray0[2] = (Object) "hP,N<S#KVm;.h~&";
      objectArray0[3] = (Object) "hP,N<S#KVm;.h~&";
      objectArray0[4] = (Object) "hP,N<S#KVm;.h~&";
      objectArray0[5] = (Object) cSVFormat5;
      objectArray0[6] = (Object) mockFile0;
      cSVFormat5.format(objectArray0);
      cSVFormat1.withRecordSeparator('c');
      CSVFormat cSVFormat7 = cSVFormat4.withQuote(character0);
      cSVFormat7.withEscape('c');
      cSVFormat2.withHeader((ResultSetMetaData) null);
      cSVFormat4.hashCode();
      cSVFormat4.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      cSVFormat0.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      cSVFormat4.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.MySQL;
      cSVFormat_Predefined1.getFormat();
      Character character0 = new Character('+');
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat0.withQuote('W');
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter(']');
      cSVFormat6.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat6;
      objectArray0[1] = (Object) null;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat4.withHeader(class0);
      cSVFormat7.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      cSVFormat3.withIgnoreHeaderCase(false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('V');
      cSVFormat1.withIgnoreHeaderCase();
      Character character0 = new Character('c');
      CSVFormat cSVFormat3 = cSVFormat0.withQuote(character0);
      cSVFormat2.withTrim(false);
      cSVFormat1.withHeader(class0);
      cSVFormat3.format(cSVFormat_PredefinedArray0);
      cSVFormat0.withRecordSeparator('c');
      CSVFormat cSVFormat4 = cSVFormat1.withEscape('<');
      cSVFormat4.withHeader((ResultSetMetaData) null);
      cSVFormat1.hashCode();
      cSVFormat2.withTrim(false);
      cSVFormat0.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('V');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      Character character0 = Character.valueOf('c');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(false);
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(class0);
      cSVFormat6.format(cSVFormat_PredefinedArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat7 = cSVFormat3.withRecordSeparator('c');
      cSVFormat7.withEscape('c');
      cSVFormat2.withHeader((ResultSetMetaData) null);
      cSVFormat6.hashCode();
      cSVFormat0.withTrim(false);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = Character.valueOf('G');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = objectArray0[1];
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) character0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withTrailingDelimiter();
      cSVFormat0.getQuoteMode();
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat1.getDelimiter();
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat4.withHeader(class0);
      Class<Token.Type> class1 = Token.Type.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class1);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) cSVFormat3;
      objectArray1[1] = (Object) cSVFormat1;
      objectArray1[2] = (Object) cSVFormat5;
      objectArray1[3] = (Object) cSVFormat1;
      objectArray1[4] = (Object) cSVFormat2;
      objectArray1[1] = (Object) character0;
      objectArray1[6] = (Object) character0;
      objectArray1[7] = (Object) cSVFormat5;
      objectArray1[8] = (Object) "java.lang.Character@0000000003|java.lang.Character@0000000003|java.lang.Character@0000000003|org.apache.commons.csv.CSVFormat@0000000004|java.lang.Character@0000000003|java.lang.Character@0000000003";
      cSVFormat1.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      CSVFormat cSVFormat3 = cSVFormat0.withHeaderComments(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      cSVFormat0.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.MySQL;
      cSVFormat_Predefined1.getFormat();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.equals(cSVFormat2);
      cSVFormat5.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat0.withQuote('');
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.Excel;
      cSVFormat_Predefined1.getFormat();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.equals(cSVFormat0);
      cSVFormat3.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('2');
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) null);
      cSVFormat1.hashCode();
      cSVFormat2.withTrim(true);
      PipedReader pipedReader0 = new PipedReader(931);
      cSVFormat1.parse(pipedReader0);
      Character character0 = new Character('2');
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('2')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character.valueOf('');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      Character character0 = new Character('c');
      Character character1 = new Character('&');
      cSVFormat2.withQuote(character1);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CSVFormat.Predefined.values();
      URI uRI0 = MockURI.aHttpURI;
      Object object0 = new Object();
      Locale locale0 = Locale.ENGLISH;
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat4 = cSVFormat_Predefined1.getFormat();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.equals(cSVFormat3);
      cSVFormat4.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("zR[LJVFc");
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      cSVFormat4.withAllowMissingColumnNames(false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.Excel;
      cSVFormat_Predefined1.getFormat();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.equals(cSVFormat0);
      cSVFormat3.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = new Character('J');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat4 = CSVFormat.newFormat('J');
      cSVFormat4.EXCEL.withNullString("#m5B(*nryf");
      cSVFormat1.withDelimiter('W');
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = CSVFormat.RFC4180;
      cSVFormat1.format(cSVFormat_PredefinedArray0);
      cSVFormat2.getSkipHeaderRecord();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.format(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      cSVFormat2.withCommentMarker('f');
      cSVFormat2.withHeader((ResultSetMetaData) null);
      cSVFormat2.hashCode();
      cSVFormat0.withTrim(false);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.getEscapeCharacter();
      cSVFormat0.getDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('&');
      CSVFormat cSVFormat5 = cSVFormat1.withTrim();
      CSVFormat cSVFormat6 = cSVFormat4.withTrim(true);
      CSVFormat.Predefined.valueOf("InformixUnload");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) cSVFormat6;
      objectArray0[4] = (Object) cSVFormat6;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) "InformixUnload";
      objectArray0[7] = (Object) cSVFormat5;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character.valueOf('O');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      Character character0 = new Character('O');
      Character character1 = Character.valueOf('G');
      cSVFormat0.withQuote(character1);
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      CSVFormat cSVFormat5 = CSVFormat.newFormat('W');
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter(']');
      cSVFormat6.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat6;
      objectArray0[1] = (Object) null;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat4.withHeader(class0);
      cSVFormat7.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withIgnoreSurroundingSpaces();
      Character character0 = new Character('I');
      cSVFormat1.withQuote(character0);
      cSVFormat0.MYSQL.withTrailingDelimiter();
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat1.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('a');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Character character1 = new Character('L');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      Locale locale0 = Locale.ENGLISH;
      boolean boolean0 = true;
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat3.RFC4180.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      MockFile mockFile0 = new MockFile("", "hP,N<S#KVm;.h~&");
      MockFile mockFile1 = new MockFile(mockFile0, "<+|gW9PZujq:9Hq;3i");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.ENGLISH;
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat1.withEscape('.');
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(true);
      cSVFormat3.withNullString("");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "hP,N<S#KVm;.h~&";
      objectArray0[1] = (Object) "hP,N<S#KVm;.h~&";
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) mockPrintStream0;
      cSVFormat2.printRecord(mockPrintStream0, objectArray0);
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      cSVFormat4.toString();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.DEFAULT.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object object0 = new Object();
      Object object1 = new Object();
      CSVFormat cSVFormat5 = CSVFormat.MYSQL;
      cSVFormat5.MYSQL.withIgnoreSurroundingSpaces(false);
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat5.withHeader(class0);
      cSVFormat1.format(cSVFormat_PredefinedArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl1).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      cSVFormat2.withCommentMarker('9');
      cSVFormat1.withHeader((ResultSetMetaData) null);
      cSVFormat1.hashCode();
      cSVFormat5.withTrim(false);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('a');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Character character1 = new Character('L');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) character1;
      objectArray0[5] = (Object) character0;
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      Character character2 = new Character('K');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape(character2);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('L');
      cSVFormat5.withDelimiter('K');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat4.withHeader(resultSet0);
      cSVFormat3.withCommentMarker('K');
      cSVFormat0.hashCode();
      cSVFormat2.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      cSVFormat1.EXCEL.withTrim();
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.EXCEL.withHeader(class0);
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('f');
      CSVFormat cSVFormat4 = cSVFormat1.withHeader((ResultSetMetaData) null);
      cSVFormat4.hashCode();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat3.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object object0 = new Object();
      Object object1 = new Object();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat5 = cSVFormat2.withHeader(class0);
      Object object2 = new Object();
      cSVFormat3.withCommentMarker('b');
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.hashCode();
      Character character0 = Character.valueOf('b');
      cSVFormat5.withEscape(character0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat5 = CSVFormat.newFormat('r');
      cSVFormat0.withDelimiter(']');
      Character character0 = new Character(']');
      CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker(character0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat5;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) resultSet0;
      objectArray0[4] = (Object) cSVFormat2;
      cSVFormat0.format(objectArray0);
      cSVFormat4.getQuoteMode();
      cSVFormat5.getIgnoreEmptyLines();
      cSVFormat6.getDelimiter();
      CSVFormat cSVFormat7 = CSVFormat.RFC4180;
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat6.withHeader(class0);
      CSVFormat cSVFormat8 = cSVFormat3.withEscape(character0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat8.withHeader(class1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('a');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat2.isQuoteCharacterSet();
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat0.withSkipHeaderRecord(true);
      File file0 = MockFile.createTempFile("gjGHm6vS!m<qd<>|32%", (String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      cSVFormat4.println(mockPrintWriter0);
      cSVFormat1.withDelimiter('M');
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase(true);
      cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat4.getAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat5.withCommentMarker('O');
      cSVFormat3.withHeader((ResultSetMetaData) null);
      cSVFormat4.hashCode();
      cSVFormat6.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      Character character0 = Character.valueOf('H');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat3.withIgnoreHeaderCase(true);
      MockFile.createTempFile("X1[h;Cf)^", "Bn", (File) null);
      Character character1 = new Character('&');
      Character character2 = Character.valueOf('&');
      cSVFormat0.withQuote(character2);
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      CSVFormat cSVFormat3 = cSVFormat1.withFirstRecordAsHeader();
      Character character0 = new Character('F');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat3.withEscape('I');
      cSVFormat4.withDelimiter('-');
      Character character1 = new Character('I');
      CSVFormat cSVFormat6 = cSVFormat0.withCommentMarker(character1);
      cSVFormat6.format(objectArray0);
      cSVFormat4.getQuoteMode();
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreEmptyLines();
      cSVFormat7.getIgnoreEmptyLines();
      cSVFormat5.getDelimiter();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat8 = cSVFormat2.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat4.withHeader(class1);
      cSVFormat8.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = Character.valueOf('G');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker('G');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('G')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      boolean boolean0 = false;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat2.withIgnoreHeaderCase();
      String string0 = "lw^ju";
      MockFile.createTempFile("lw^ju", "lw^ju", (File) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "lw^ju");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // lw^ju
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat3.withFirstRecordAsHeader();
      cSVFormat2.withCommentMarker('9');
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat3.parse(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withHeader(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      Object object0 = new Object();
      Class<QuoteMode> class1 = QuoteMode.class;
      cSVFormat1.withHeader(class1);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVFormat2.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('?');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat3.withFirstRecordAsHeader();
      boolean boolean0 = false;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) stringBuffer0, (-739), 57);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Character character0 = new Character('^');
      cSVFormat2.RFC4180.withEscape(character0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.withTrim();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat3.withTrailingDelimiter();
      CSVFormat cSVFormat4 = CSVFormat.newFormat('W');
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter(']');
      cSVFormat5.withSkipHeaderRecord(true);
      MockFile mockFile0 = new MockFile("H 5R+", "Zbljh*obQ?Q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      cSVFormat4.println(mockPrintWriter0);
      cSVFormat5.withDelimiter('1');
      CSVFormat cSVFormat6 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat6.withIgnoreHeaderCase(true);
      cSVFormat4.getAllowMissingColumnNames();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.format("')", (Object[]) null);
      CSVFormat cSVFormat7 = cSVFormat4.withSkipHeaderRecord();
      cSVFormat7.print((Appendable) printWriter0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile("Header:");
      MockFile mockFile1 = new MockFile(mockFile0, "Header:");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      PrintStream printStream0 = mockPrintStream0.format("Header:", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, true);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = object0;
      objectArray1[1] = (Object) mockFile0;
      objectArray1[2] = (Object) cSVFormat0;
      objectArray1[3] = (Object) mockPrintStream2;
      objectArray1[4] = (Object) mockFileOutputStream0;
      mockPrintStream2.printf(locale0, "TDF", objectArray1);
      cSVFormat0.printRecord(mockPrintStream2, objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat1.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.InformixUnloadCsv;
      cSVFormat_Predefined1.getFormat();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.equals(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      CSVFormat.newFormat('t');
      cSVFormat1.withDelimiter('W');
      Character character0 = new Character(']');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(character0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat5;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat4.format(objectArray0);
      cSVFormat3.getQuoteMode();
      cSVFormat2.getIgnoreEmptyLines();
      cSVFormat0.getDelimiter();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat6 = CSVFormat.RFC4180;
      cSVFormat5.withHeader(class0);
      cSVFormat2.withHeader(class0);
      cSVFormat5.getTrailingDelimiter();
      cSVFormat2.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
      CSVFormat cSVFormat6 = CSVFormat.newFormat('W');
      CSVFormat cSVFormat7 = cSVFormat3.withDelimiter('W');
      CSVFormat cSVFormat8 = cSVFormat1.withRecordSeparator('W');
      CSVFormat cSVFormat9 = cSVFormat8.withAllowMissingColumnNames();
      CSVFormat cSVFormat10 = cSVFormat9.withSkipHeaderRecord(true);
      Character character0 = Character.valueOf('1');
      cSVFormat10.withCommentMarker(character0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat6;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) null;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat7;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      cSVFormat3.getQuoteMode();
      cSVFormat5.getIgnoreEmptyLines();
      cSVFormat7.getDelimiter();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat11 = CSVFormat.RFC4180;
      cSVFormat8.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat4.withHeader(class1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('&');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.withEscape('&');
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.getQuoteMode();
      cSVFormat0.getIgnoreEmptyLines();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat1.getDelimiter();
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat2.withHeader(class0);
      cSVFormat1.DEFAULT.withQuote('J');
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat1.withHeader(class1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('a');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Character character1 = new Character('L');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) character1;
      objectArray0[5] = (Object) character0;
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      Character character2 = new Character('K');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape(character2);
      Character character3 = Character.valueOf('$');
      cSVFormat0.EXCEL.withCommentMarker(character3);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('L');
      cSVFormat5.withDelimiter('K');
      Character character4 = new Character('a');
      CSVFormat cSVFormat6 = cSVFormat5.withCommentMarker(character4);
      cSVFormat6.format(objectArray0);
      cSVFormat0.INFORMIX_UNLOAD_CSV.toString();
      cSVFormat3.getQuoteMode();
      CSVFormat cSVFormat7 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat4.getIgnoreEmptyLines();
      cSVFormat7.getDelimiter();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat8 = cSVFormat6.withIgnoreHeaderCase(true);
      cSVFormat8.withHeader(class0);
      CSVFormat cSVFormat9 = CSVFormat.EXCEL;
      cSVFormat9.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile("Header:");
      MockFile mockFile1 = new MockFile(mockFile0, "Header:");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Character character0 = new Character('k');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.TDF;
      cSVFormat_Predefined1.getFormat();
      cSVFormat1.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      File file0 = MockFile.createTempFile("org.apache.commons.csv.Constants", (String) null);
      MockFile mockFile2 = new MockFile(file0, "org.apache.commons.csv.Constants");
      MockFile mockFile3 = new MockFile(mockFile2, "The delimiter cannot be a line break");
      MockFileOutputStream mockFileOutputStream1 = null;
      try {
        mockFileOutputStream1 = new MockFileOutputStream(mockFile3);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      MockFile.createTempFile("lw^ju", "lw^ju", (File) null);
      Character character1 = new Character('&');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character1);
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat3.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.EXCEL.withHeader(class0);
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      cSVFormat0.withCommentMarker('f');
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSetMetaData) null);
      cSVFormat3.hashCode();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Character character0 = new Character('L');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('L');
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat4.getTrim();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withIgnoreHeaderCase();
      Character character0 = new Character('%');
      Character character1 = new Character('#');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker(character1);
      cSVFormat3.withIgnoreHeaderCase(false);
      String string0 = "lw^ju";
      String string1 = "UY&B%FKu)";
      File file0 = MockFile.createTempFile("UY&B%FKu)", "UY&B%FKu)", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat4.println(mockPrintWriter0);
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[4] = '%';
      charArray0[5] = '%';
      charArray0[6] = '%';
      charArray0[7] = '%';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 20, 124);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      char char0 = 'r';
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.withSkipHeaderRecord(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[0];
      cSVFormat1.printRecord(charArrayWriter0, objectArray0);
      cSVFormat2.withNullString("+");
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat1.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('a');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Character character1 = new Character('L');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) character1;
      objectArray0[5] = (Object) character0;
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      Character character2 = new Character('K');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape(character2);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('L');
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter('K');
      Character character3 = new Character('a');
      CSVFormat cSVFormat7 = cSVFormat5.withCommentMarker(character3);
      cSVFormat7.format(objectArray0);
      cSVFormat3.getQuoteMode();
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat5.getIgnoreEmptyLines();
      cSVFormat6.getDelimiter();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat7.withHeader(class1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.withSkipHeaderRecord(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[0];
      cSVFormat1.printRecord(charArrayWriter0, objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("+");
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.parse(pipedReader0);
      cSVFormat0.getDelimiter();
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat3.withEscape('r');
      cSVFormat1.withTrim();
      cSVFormat1.withRecordSeparator("");
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = Character.valueOf('[');
      cSVFormat1.DEFAULT.withEscape(character0);
      cSVFormat1.withIgnoreSurroundingSpaces();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.format(stringArray0);
      cSVFormat1.getCommentMarker();
      CSVFormat.newFormat('[');
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      Character character0 = Character.valueOf('b');
      cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat2.withIgnoreEmptyLines();
      cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withCommentMarker('r');
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.hashCode();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat1.withDelimiter('r');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("O?W@VQ*h3(YT)s");
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        mockPrintStream0.printf(locale0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gvhpGBC%3%Bn ";
      stringArray0[1] = "4,w *dEUso_qt-42!";
      stringArray0[2] = "}KDy?&qF%ce%kGMn78'";
      stringArray0[3] = "j8Sk";
      stringArray0[4] = "h.eo29V'E5lK";
      cSVFormat2.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat3;
      objectArray0[8] = (Object) cSVFormat3;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat1.withEscape('r');
      CSVFormat cSVFormat5 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat5.withSkipHeaderRecord(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat5.printRecord(charArrayWriter0, objectArray0);
      CSVFormat cSVFormat6 = cSVFormat2.withNullString("CKIlm=fI");
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat3.parse(pipedReader0);
      cSVFormat5.getDelimiter();
      cSVFormat6.getAllowMissingColumnNames();
      cSVFormat0.withEscape('c');
      cSVFormat4.withTrim();
      cSVFormat5.withRecordSeparator("CKIlm=fI");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat.newFormat(';');
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat0.withQuote(';');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      cSVFormat1.withTrailingDelimiter(true);
      cSVFormat0.withCommentMarker((Character) null);
      cSVFormat1.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat0.withNullString("Escape=<");
      CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator('g');
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat5.withHeader(class0);
      cSVFormat4.withIgnoreEmptyLines(false);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = Character.valueOf('e');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withEscape('c');
      cSVFormat2.TDF.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withRecordSeparator('A');
      cSVFormat3.EXCEL.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(false);
      cSVFormat5.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      cSVFormat0.getAllowMissingColumnNames();
      cSVFormat0.getCommentMarker();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat1.getQuoteCharacter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      Character character0 = new Character('>');
      cSVFormat1.withEscape((Character) null);
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat0.withTrim(false);
      cSVFormat4.getIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat3.withTrim();
      cSVFormat5.EXCEL.withIgnoreSurroundingSpaces();
      Object object0 = new Object();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(756);
      cSVFormat1.print((Object) cSVFormat2, (Appendable) charArrayWriter0, true);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('R');
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat0.withCommentMarker('f');
      cSVFormat1.withHeader((ResultSetMetaData) null);
      cSVFormat5.toString();
      PipedReader pipedReader0 = new PipedReader(38);
      cSVFormat4.parse(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('U');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.toString();
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<U> SkipHeaderRecord:false");
      Object object0 = new Object();
      Object object1 = new Object();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat3 = cSVFormat_Predefined0.getFormat();
      Character character0 = new Character('B');
      cSVFormat3.format(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      MockFile mockFile0 = new MockFile("w7<V%", "w7<V%");
      cSVFormat1.MYSQL.withTrim(true);
      cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat1.toString();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat2.withHeader(resultSet1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withCommentMarker('g');
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat2.EXCEL.toString();
      cSVFormat2.hashCode();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile("' must not be null!", "' must not be null!");
      MockFile mockFile1 = new MockFile("' must not be null!");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFile1;
      objectArray0[0] = (Object) mockFile0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      cSVFormat0.printRecord(mockPrintStream0, objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat1.withIgnoreEmptyLines(false);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withCommentMarker('g');
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.hashCode();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat0.withNullString("\")|O^DRie$dzJOs");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.csv.CSVFormat@0000000002";
      cSVFormat0.INFORMIX_UNLOAD.format(stringArray0);
      stringArray0[1] = "f|q;v*|Ee4qnF8Ol";
      stringArray0[2] = "org.apache.commons.csv.CSVFormat@0000000002";
      stringArray0[3] = "\")|O^DRie$dzJOs";
      stringArray0[4] = "org.apache.commons.csv.CSVFormat@0000000002";
      stringArray0[5] = "org.apache.commons.csv.CSVFormat@0000000002";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'org.apache.commons.csv.CSVFormat@0000000002' in [org.apache.commons.csv.CSVFormat@0000000002, f|q;v*|Ee4qnF8Ol, org.apache.commons.csv.CSVFormat@0000000002, \")|O^DRie$dzJOs, org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('a');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Character character1 = new Character('L');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat2.isEscapeCharacterSet();
      cSVFormat0.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      MockFile mockFile0 = new MockFile("w7<V%", "w7<V%");
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('!');
      cSVFormat1.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile("Header:");
      MockFile mockFile1 = new MockFile(mockFile0, "Header:");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFile1;
      objectArray0[2] = (Object) mockFileOutputStream0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) mockFile0;
      Object object2 = new Object();
      objectArray0[5] = object2;
      mockPrintStream0.printf(locale0, "TDF", objectArray0);
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('j');
      cSVFormat2.printRecord(mockPrintStream0, objectArray0);
      cSVFormat1.withTrailingDelimiter(true);
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.Excel;
      cSVFormat_Predefined1.getFormat();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('C');
      cSVFormat2.getEscapeCharacter();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('_');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("COMMENT");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('.');
      cSVFormat5.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat3.withTrailingDelimiter();
      CSVFormat cSVFormat4 = CSVFormat.newFormat('W');
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter(']');
      cSVFormat0.withCommentMarker((Character) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat5;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat5;
      cSVFormat2.format(objectArray0);
      cSVFormat5.getQuoteMode();
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat5.getDelimiter();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat6 = CSVFormat.RFC4180;
      cSVFormat6.withHeader(class0);
      Class<Token.Type> class1 = Token.Type.class;
      cSVFormat2.withHeader(class1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      File file0 = MockFile.createTempFile("lw^ju", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      cSVFormat1.println(mockPrintStream0);
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('M');
      cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat2.getAllowMissingColumnNames();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.format("", (Object[]) cSVFormat_PredefinedArray0);
      cSVFormat3.print((Appendable) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat0.INFORMIX_UNLOAD.withHeader(class0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.RFC4180.withCommentMarker('^');
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat2.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("9?Ra`s|c(_c");
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      CSVFormat cSVFormat6 = CSVFormat.newFormat('M');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat5.withHeader(resultSet0);
      cSVFormat2.isQuoteCharacterSet();
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat8 = cSVFormat7.withSkipHeaderRecord(true);
      File file0 = MockFile.createTempFile("M%p0IxLDG'Nu-pb6", "M%p0IxLDG'Nu-pb6");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      cSVFormat8.INFORMIX_UNLOAD_CSV.println(mockPrintWriter0);
      cSVFormat8.withDelimiter('M');
      CSVFormat cSVFormat9 = cSVFormat6.withIgnoreHeaderCase(true);
      cSVFormat9.EXCEL.withIgnoreHeaderCase(true);
      cSVFormat6.getAllowMissingColumnNames();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.format("", (Object[]) null);
      cSVFormat4.print((Appendable) printWriter0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('r');
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat2.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) cSVFormat1;
      objectArray1[1] = (Object) cSVFormat4;
      cSVFormat2.printRecord(charArrayWriter0, objectArray1);
      CSVFormat cSVFormat6 = cSVFormat3.withNullString("+");
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat6.TDF.parse(pipedReader0);
      cSVFormat3.getDelimiter();
      cSVFormat3.getAllowMissingColumnNames();
      cSVFormat2.INFORMIX_UNLOAD_CSV.withEscape('2');
      cSVFormat3.withTrim();
      cSVFormat5.withRecordSeparator("+");
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = Character.valueOf('G');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      File file0 = MockFile.createTempFile("lw^ju", "lw^ju", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      cSVFormat2.println(mockPrintWriter0);
      cSVFormat1.print((Object) cSVFormat2, (Appendable) mockPrintWriter0, false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "lw^ju";
      stringArray0[1] = "lw^ju";
      stringArray0[2] = "lw^ju";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'lw^ju' in [lw^ju, lw^ju, lw^ju]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('a');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Class<Token.Type> class0 = Token.Type.class;
      Character character1 = new Character('L');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) character1;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) class0;
      cSVFormat2.RFC4180.format(objectArray0);
      cSVFormat1.TDF.withIgnoreSurroundingSpaces(false);
      cSVFormat0.TDF.withNullString("\")|O^DRie$dzJOs");
      cSVFormat1.TDF.withHeader(class0);
      cSVFormat1.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.isCommentMarkerSet();
      String string0 = "\r\n";
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("\r\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.\r
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "COMMENT";
      stringArray0[1] = "w=;";
      stringArray0[2] = " SurroundingSpaces:ignored";
      stringArray0[3] = "Fa'N+";
      stringArray0[4] = "";
      stringArray0[5] = "InformixUnloadCsv";
      stringArray0[6] = "Unexpected Token type: ";
      stringArray0[7] = "p?Q~heP7y]]:";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(';');
      Character character0 = Character.valueOf(';');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(true);
      cSVFormat5.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      MockFile mockFile0 = new MockFile("w7<V%", "w7<V%");
      MockFile mockFile1 = new MockFile(mockFile0, "Header:");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) resultSet0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "TDF", objectArray0);
      cSVFormat1.INFORMIX_UNLOAD_CSV.printRecord(printStream0, objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      cSVFormat_Predefined0.getFormat();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      char char0 = '%';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withIgnoreHeaderCase();
      Character character0 = new Character('%');
      cSVFormat2.INFORMIX_UNLOAD_CSV.withQuote(character0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      cSVFormat_Predefined0.getFormat();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("M7@MxZ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("6Tb|vR");
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "6Tb|vR";
      stringArray0[1] = "6Tb|vR";
      stringArray0[2] = "6Tb|vR";
      stringArray0[3] = "6Tb|vR";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        cSVFormat4.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '6Tb|vR' in [6Tb|vR, 6Tb|vR, 6Tb|vR, 6Tb|vR, ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('L');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      Character character0 = new Character('d');
      cSVFormat2.withEscape(character0);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.TDF.withCommentMarker('g');
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.hashCode();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('j');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker('j');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('j')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      char char0 = ',';
      CSVFormat cSVFormat0 = CSVFormat.newFormat(',');
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('W');
      cSVFormat2.withDelimiter('7');
      Character character0 = Character.valueOf('W');
      // Undeclared exception!
      try { 
        cSVFormat3.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('W')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('u');
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("Unexpected Token type: ");
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('d');
      cSVFormat5.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\"');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      cSVFormat0.getTrailingDelimiter();
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('C');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat2.withEscape((Character) null);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('F');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('F');
      cSVFormat3.getDelimiter();
      String string0 = "$VALUES";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$VALUES");
      cSVFormat1.RFC4180.println(mockPrintWriter0);
      cSVFormat2.getIgnoreHeaderCase();
      String string1 = "F7";
      cSVFormat2.withNullString("F7");
      MockFile.createTempFile("_B=glR=bk[", "_B=glR=bk[");
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('');
      File file0 = MockFile.createTempFile(">qn]8", "HpuieQa&\"");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.INFORMIX_UNLOAD.print(file0, charset0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      File file1 = MockFile.createTempFile("lw^ju", "lw^ju", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file1);
      cSVFormat2.println(mockPrintWriter0);
      cSVFormat1.print((Object) cSVFormat2, (Appendable) mockPrintWriter0, false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "lw^ju";
      stringArray0[1] = "lw^ju";
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      cSVFormat_Predefined0.getFormat();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.toString();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = Character.valueOf('e');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withEscape('c');
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat1.RFC4180.withRecordSeparator('A');
      CSVFormat cSVFormat5 = cSVFormat4.EXCEL.withIgnoreEmptyLines(false);
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat1.getCommentMarker();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase(false);
      cSVFormat6.getQuoteCharacter();
      cSVFormat6.withIgnoreHeaderCase(true);
      Character character1 = new Character('A');
      cSVFormat3.withEscape(character1);
      CSVFormat cSVFormat7 = cSVFormat3.withTrailingDelimiter(true);
      cSVFormat7.withTrim(true);
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat6.withTrim();
      Object object0 = new Object();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(756);
      cSVFormat5.print(object0, (Appendable) charArrayWriter0, true);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.RFC4180.withHeader(resultSet0);
      cSVFormat0.getDelimiter();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.getSkipHeaderRecord();
      MockFile mockFile0 = new MockFile("jwT@");
      cSVFormat1.DEFAULT.withAllowMissingColumnNames(false);
      MockFile mockFile1 = new MockFile(mockFile0, "jwT@");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat1.print((File) mockFile1, charset0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      cSVFormat2.toString();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.getIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('n');
      Character character0 = new Character('n');
      cSVFormat2.withCommentMarker(character0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "s,0`SrW'9j";
      stringArray0[1] = "HsZ,w18";
      stringArray0[2] = "NONE";
      stringArray0[3] = "\" in ";
      cSVFormat3.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord(false);
      stringArray0[4] = "TOKEN";
      stringArray0[5] = "The delimiter cannot be a line break";
      stringArray0[6] = "";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        cSVFormat3.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [s,0`SrW'9j, HsZ,w18, NONE, \" in , TOKEN, The delimiter cannot be a line break, , ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('N');
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat1.getTrim();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = Character.valueOf('`');
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withEscape(character0);
      cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withCommentMarker('\"');
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      Character character0 = new Character('S');
      cSVFormat2.withQuote(character0);
      Float float0 = new Float(0.0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(";6wMfg~*\"J,TF8Y]$Xg");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) ";6wMfg~*\"J,TF8Y]$Xg", 92, 759);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) character0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat0.getCommentMarker();
      cSVFormat3.hashCode();
      cSVFormat2.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('j');
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat1.RFC4180.withEscape('');
      assertEquals('', (char)cSVFormat4.getEscapeCharacter());
      
      cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat5 = cSVFormat2.DEFAULT.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat6 = cSVFormat5.EXCEL.withIgnoreSurroundingSpaces();
      cSVFormat1.getIgnoreEmptyLines();
      CSVFormat cSVFormat7 = cSVFormat0.withIgnoreEmptyLines(true);
      Character character1 = new Character('c');
      cSVFormat5.INFORMIX_UNLOAD.withEscape(character1);
      cSVFormat7.MYSQL.withIgnoreHeaderCase();
      Character character2 = Character.valueOf('j');
      CSVFormat.newFormat('j');
      CSVFormat cSVFormat8 = cSVFormat6.withEscape(character2);
      CSVFormat cSVFormat9 = cSVFormat8.withIgnoreEmptyLines();
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      
      CSVFormat cSVFormat10 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat10.EXCEL.withFirstRecordAsHeader();
      CSVFormat cSVFormat11 = CSVFormat.newFormat('}');
      cSVFormat11.getHeaderComments();
      assertFalse(cSVFormat11.getSkipHeaderRecord());
      assertFalse(cSVFormat11.getTrim());
      assertFalse(cSVFormat11.getIgnoreHeaderCase());
      assertFalse(cSVFormat11.getTrailingDelimiter());
      assertFalse(cSVFormat11.getAllowMissingColumnNames());
      assertEquals('}', cSVFormat11.getDelimiter());
      
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat12 = cSVFormat10.withTrim();
      assertTrue(cSVFormat12.getTrim());
      
      cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat13 = cSVFormat3.withIgnoreEmptyLines(true);
      assertEquals("\n", cSVFormat13.getRecordSeparator());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat13.getTrim());
      
      cSVFormat7.getCommentMarker();
      assertTrue(cSVFormat7.getAllowMissingColumnNames());
      
      Character character3 = new Character('j');
      CSVFormat cSVFormat14 = cSVFormat1.withEscape(character3);
      assertEquals('\"', (char)cSVFormat14.getQuoteCharacter());
      assertFalse(cSVFormat14.isNullStringSet());
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      Character character0 = null;
      cSVFormat0.MYSQL.withQuote((Character) null);
      cSVFormat2.EXCEL.withRecordSeparator("_&SY ><~nmyBsRjCT");
      Appendable appendable0 = null;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        cSVFormat0.TDF.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('a');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Class<Token.Type> class0 = Token.Type.class;
      Character character1 = new Character('L');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) character1;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) class0;
      cSVFormat2.RFC4180.format(objectArray0);
      cSVFormat1.withCommentMarker('f');
      cSVFormat2.withHeader((ResultSetMetaData) null);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      Character character0 = Character.valueOf('l');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      cSVFormat2.withHeader((ResultSet) null);
      MockFile mockFile0 = new MockFile("w7<V%", "w7<V%");
      MockFile mockFile1 = new MockFile("format");
      MockFile mockFile2 = new MockFile(mockFile1, "QuoteChar=<");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile2);
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.ENGLISH;
      MockPrintStream mockPrintStream1 = new MockPrintStream("w7<V%");
      // Undeclared exception!
      try { 
        mockPrintStream1.printf(locale0, "w7<V%", (Object[]) cSVFormat_PredefinedArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = Character.valueOf('@');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('@');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(resultSet0);
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = new Character('I');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      cSVFormat4.withIgnoreEmptyLines();
      String string0 = "LigCg[Of";
      try { 
        MockURI.URI("", "'ke.l1IB", "LigCg[Of", 4765, "", "LigCg[Of", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://'ke.l1IB@LigCg[Of:4765?LigCg[Of#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }
}
