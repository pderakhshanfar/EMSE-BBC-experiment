/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 06:39:20 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      char char0 = 'H';
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('H');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat1.INFORMIX_UNLOAD.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape('H');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('H')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      char char0 = 'L';
      Character character0 = Character.valueOf('L');
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('L')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Character character0 = Character.valueOf('L');
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("Default");
      CSVFormat cSVFormat4 = cSVFormat3.withNullString(";mv0xoY:2N m0j");
      cSVFormat4.withTrim();
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('Q');
      cSVFormat5.withTrailingDelimiter(true);
      cSVFormat5.hashCode();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) character0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      String[] stringArray0 = new String[1];
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      boolean boolean0 = true;
      cSVFormat1.EXCEL.format(stringArray0);
      cSVFormat2.withCommentMarker((Character) null);
      stringArray0[0] = "";
      cSVFormat1.DEFAULT.withHeaderComments(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat1.DEFAULT.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD.withIgnoreEmptyLines(true);
      cSVFormat3.TDF.toString();
      MockFile mockFile0 = new MockFile(":|QG*<6G", "");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat3.print(path0, charset0);
      cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat.Predefined.values();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat4;
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withEscape('`');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = new Character('r');
      Character character1 = new Character('m');
      cSVFormat2.withEscape(character1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(536);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = new Locale("2w@CXx%4f/k<78e8RK");
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      cSVFormat0.equals(cSVFormat3);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":!@:k)v0!EBt,~v)g[");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('`');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('`');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ":!@:k)v0!EBt,~v)g[";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) ":!@:k)v0!EBt,~v)g[";
      objectArray0[5] = (Object) rowSetMetaDataImpl0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat6 = cSVFormat5.withHeaderComments(objectArray0);
      String[] stringArray0 = new String[0];
      cSVFormat5.withHeader(stringArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\":!@:k)v0!EBt,~v)g[\"||org.apache.commons.csv.CSVFormat@0000000001|org.apache.commons.csv.CSVFormat@0000000004|:!@:k)v0!EBt,~v)g[|javax.sql.rowset.RowSetMetaDataImpl@0000000006", false);
      cSVFormat2.isCommentMarkerSet();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.printf("\":!@:k)v0!EBt,~v)g[\"||org.apache.commons.csv.CSVFormat@0000000001|org.apache.commons.csv.CSVFormat@0000000004|:!@:k)v0!EBt,~v)g[|javax.sql.rowset.RowSetMetaDataImpl@0000000006", objectArray0);
      cSVFormat1.EXCEL.printRecord(printWriter0, objectArray0);
      cSVFormat1.withIgnoreSurroundingSpaces();
      // Undeclared exception!
      try { 
        cSVFormat6.withCommentMarker('`');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('`')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Character.valueOf('L');
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withNullString("Nv #N>");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      Character.valueOf('');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat1.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat4.withHeader((String[]) null);
      cSVFormat4.withRecordSeparator("Y*Qfs_DRIRI=*");
      Object object0 = new Object();
      cSVFormat1.equals(quoteMode0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      QuoteMode quoteMode1 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode1);
      cSVFormat1.getNullString();
      Object object0 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "N";
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat3.withIgnoreEmptyLines();
      Character character0 = new Character('\u008B');
      Character character1 = Character.valueOf('@');
      cSVFormat0.withEscape(character1);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) character0;
      objectArray1[1] = (Object) quoteMode0;
      objectArray1[2] = (Object) cSVFormat2;
      objectArray1[3] = (Object) quoteMode0;
      objectArray1[4] = (Object) cSVFormat2;
      objectArray1[5] = (Object) cSVFormat3;
      objectArray1[6] = (Object) character1;
      // Undeclared exception!
      try { 
        cSVFormat2.printRecord((Appendable) null, objectArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat3 = cSVFormat0.DEFAULT.withEscape('`');
      stringArray0[0] = "2w@CXx%4f/k<78e8RK";
      stringArray0[1] = "W";
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('m');
      cSVFormat5.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat0.equals(cSVFormat6);
      cSVFormat6.getRecordSeparator();
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat7 = cSVFormat0.withRecordSeparator('`');
      cSVFormat7.format(stringArray0);
      Character.valueOf('m');
      CSVFormat cSVFormat8 = cSVFormat7.withTrim();
      cSVFormat3.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat9 = cSVFormat0.withHeaderComments(stringArray0);
      cSVFormat9.withHeader((String[]) null);
      cSVFormat4.withRecordSeparator("2w@CXx%4f/k<78e8RK`W`");
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat8.equals(object1);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.getNullString();
      Appendable appendable0 = null;
      Object object0 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "N";
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase();
      Character character0 = Character.valueOf('Z');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      cSVFormat4.format(objectArray0);
      cSVFormat1.withNullString("\"N\",org.apache.commons.csv.CSVFormat@0000000001");
      cSVFormat3.withHeaderComments(objectArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ZNZ\torg.apache.commons.csv.CSVFormat@0000000001";
      stringArray0[1] = "ZNZ\torg.apache.commons.csv.CSVFormat@0000000001";
      stringArray0[2] = "\"N\",org.apache.commons.csv.CSVFormat@0000000001";
      stringArray0[3] = "N";
      stringArray0[4] = "\"N\",org.apache.commons.csv.CSVFormat@0000000001";
      stringArray0[5] = "\"N\",org.apache.commons.csv.CSVFormat@0000000001";
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'ZNZ\torg.apache.commons.csv.CSVFormat@0000000001' in [ZNZ\torg.apache.commons.csv.CSVFormat@0000000001, ZNZ\torg.apache.commons.csv.CSVFormat@0000000001, \"N\",org.apache.commons.csv.CSVFormat@0000000001, N, \"N\",org.apache.commons.csv.CSVFormat@0000000001, \"N\",org.apache.commons.csv.CSVFormat@0000000001]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      String[] stringArray0 = new String[2];
      cSVFormat0.DEFAULT.withEscape('`');
      stringArray0[0] = "2w@CXx%4f/k<78e8RK";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('m');
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat.newFormat('m');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
      cSVFormat4.format(stringArray0);
      CSVFormat cSVFormat6 = cSVFormat5.withFirstRecordAsHeader();
      CSVFormat cSVFormat7 = cSVFormat6.withTrailingDelimiter(false);
      cSVFormat6.withHeaderComments(stringArray0);
      cSVFormat7.withHeader(stringArray0);
      cSVFormat6.withRecordSeparator("");
      cSVFormat6.equals(cSVFormat3);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      QuoteMode quoteMode1 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode1);
      cSVFormat1.getNullString();
      Object object0 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "N";
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase();
      Character character0 = new Character('\u008B');
      Character character1 = Character.valueOf('@');
      cSVFormat0.withEscape(character1);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) character0;
      objectArray1[1] = (Object) quoteMode0;
      objectArray1[2] = (Object) cSVFormat2;
      cSVFormat0.withAllowMissingColumnNames();
      QuoteMode quoteMode2 = QuoteMode.MINIMAL;
      cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "IW$+";
      cSVFormat0.format(objectArray0);
      cSVFormat0.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      StringWriter stringWriter0 = new StringWriter(26);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      cSVFormat1.equals(charBuffer0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat3 = cSVFormat0.DEFAULT.withEscape('`');
      stringArray0[0] = "2w@CXx%4f/k<78e8RK";
      stringArray0[1] = "W";
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('e');
      CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames();
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreSurroundingSpaces();
      cSVFormat5.equals(cSVFormat7);
      cSVFormat6.getRecordSeparator();
      CSVFormat cSVFormat8 = cSVFormat3.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "2w@CXx%4f/k<78e8RK";
      cSVFormat8.format(objectArray0);
      Character.valueOf('`');
      cSVFormat3.withTrim();
      cSVFormat4.DEFAULT.withNullString("");
      CSVFormat cSVFormat9 = cSVFormat5.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat10 = cSVFormat9.withHeaderComments(objectArray0);
      CSVFormat cSVFormat11 = cSVFormat1.withHeader((String[]) null);
      cSVFormat11.withRecordSeparator((String) null);
      CSVFormat cSVFormat12 = cSVFormat10.withTrim();
      cSVFormat12.withSkipHeaderRecord(false);
      cSVFormat12.equals("W");
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      String[] stringArray0 = new String[1];
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.TDF.withHeader(resultSet0);
      cSVFormat1.EXCEL.format(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(true);
      stringArray0[0] = "";
      cSVFormat1.DEFAULT.withHeaderComments(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat1.DEFAULT.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.INFORMIX_UNLOAD.withIgnoreEmptyLines(true);
      cSVFormat4.TDF.toString();
      MockFile mockFile0 = new MockFile(":|QG*<6G", "");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(path0, charset0);
      cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) ":|QG*<6G";
      objectArray0[2] = (Object) cSVPrinter0;
      cSVFormat2.format(cSVFormat_PredefinedArray0);
      cSVFormat3.withTrim();
      cSVFormat5.hashCode();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character.valueOf('j');
      cSVFormat1.withIgnoreEmptyLines(true);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("XE:a4/nmD");
      // Undeclared exception!
      try { 
        cSVFormat1.EXCEL.print((File) mockFile0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.OutputStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Character character0 = new Character('z');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(false);
      cSVFormat5.withRecordSeparator('z');
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("8gDAn[bHWHgv;cbn'", "Escape=<");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.print(path0, charset0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      Object object0 = new Object();
      cSVFormat3.format(cSVFormat_PredefinedArray0);
      cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat2.withCommentMarker('G');
      cSVFormat3.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('w');
      cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat0.toString();
      MockFile mockFile0 = new MockFile("KU", "\n");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat3.print(path0, charset0);
      cSVFormat3.withIgnoreHeaderCase(false);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      Object object0 = new Object();
      cSVFormat3.format(cSVFormat_PredefinedArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter();
      cSVFormat4.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat2.toString();
      MockFile mockFile0 = new MockFile("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", ".3@|v");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat1.print(path0, charset0);
      cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      Object object0 = new Object();
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      Class<QuoteMode> class1 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class1);
      cSVFormat4.format(cSVFormat_PredefinedArray0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat3.withTrailingDelimiter(false);
      cSVFormat5.withCommentMarker('i');
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.isNullStringSet();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      cSVFormat1.format(objectArray0);
      char char0 = '{';
      Character character0 = Character.valueOf('{');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "The quoteChar character and the delimiter cannot be the same ('";
      stringArray0[1] = null;
      cSVFormat2.RFC4180.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat3.withHeaderComments(objectArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = null;
      stringArray1[1] = "|org.apache.commons.csv.CSVFormat@0000000004|java.lang.Object@0000000005";
      stringArray1[2] = "|org.apache.commons.csv.CSVFormat@0000000004|java.lang.Object@0000000005";
      stringArray1[3] = null;
      stringArray1[4] = "|org.apache.commons.csv.CSVFormat@0000000004|java.lang.Object@0000000005";
      stringArray1[5] = "|org.apache.commons.csv.CSVFormat@0000000004|java.lang.Object@0000000005";
      stringArray1[6] = null;
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '|org.apache.commons.csv.CSVFormat@0000000004|java.lang.Object@0000000005' in [null, |org.apache.commons.csv.CSVFormat@0000000004|java.lang.Object@0000000005, |org.apache.commons.csv.CSVFormat@0000000004|java.lang.Object@0000000005, null, |org.apache.commons.csv.CSVFormat@0000000004|java.lang.Object@0000000005, |org.apache.commons.csv.CSVFormat@0000000004|java.lang.Object@0000000005, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      cSVFormat0.TDF.withCommentMarker('v');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withHeader(resultSet0);
      cSVFormat0.EXCEL.format(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(true);
      stringArray0[0] = "";
      cSVFormat0.DEFAULT.withHeaderComments(stringArray0);
      cSVFormat1.DEFAULT.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('v');
      cSVFormat3.printRecord(charArrayWriter1, stringArray0);
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat3.withQuote('k');
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat3.withAllowMissingColumnNames(true);
      cSVFormat4.getHeader();
      cSVFormat1.withHeader((String[]) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.withRecordSeparator("$VALUES");
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      boolean boolean0 = false;
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      Character character0 = new Character('J');
      cSVFormat4.withEscape(character0);
      cSVFormat2.withAllowMissingColumnNames();
      cSVFormat3.withCommentMarker('@');
      Object[] objectArray0 = null;
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        cSVFormat5.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(',');
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("J;/m3b");
      // Undeclared exception!
      try { 
        cSVFormat4.withQuote(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      cSVFormat0.withAllowMissingColumnNames();
      Character.valueOf('j');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(31);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat2.isNullStringSet();
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(false);
      cSVFormat3.hashCode();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charArrayWriter1;
      objectArray0[1] = (Object) null;
      cSVFormat3.format(objectArray0);
      cSVFormat3.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.toString();
      MockFile mockFile0 = new MockFile("8gDAn[bHWHgv;cbn'", "Escape=<");
      Object[] objectArray0 = new Object[0];
      cSVFormat2.format(objectArray0);
      Character character0 = new Character('y');
      cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      Object[] objectArray1 = new Object[0];
      cSVFormat0.withHeaderComments(objectArray1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8gDAn[bHWHgv;cbn'";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      String string0 = "en\\u];$b4";
      cSVFormat1.withRecordSeparator("Escape=<");
      Object object0 = new Object();
      cSVFormat3.equals(string0);
      CSVFormat.Predefined.values();
      cSVFormat4.withRecordSeparator('^');
      cSVFormat0.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      String[] stringArray0 = new String[2];
      cSVFormat0.DEFAULT.withEscape('`');
      stringArray0[0] = "2w@CXx%4f/k<78e8RK";
      String string0 = "W";
      stringArray0[1] = "W";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      char char0 = 'm';
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('m');
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      cSVFormat5.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat5.withHeaderComments(stringArray0);
      cSVFormat0.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('`');
      cSVFormat6.printRecord(charArrayWriter1, stringArray0);
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
      // Undeclared exception!
      try { 
        cSVFormat6.withQuote('`');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('`')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      cSVFormat1.getNullString();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[4] = (Object) cSVFormat0;
      Object object0 = new Object();
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.EXCEL.withIgnoreHeaderCase();
      Character character0 = new Character('@');
      cSVFormat1.withEscape(character0);
      cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      cSVFormat1.equals(cSVFormat_Predefined0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      MockFile mockFile0 = new MockFile("RecordSeparator=<", "RecordSeparator=<");
      MockFile mockFile1 = new MockFile("RecordSeparator=<");
      mockFile1.toPath();
      Charset.defaultCharset();
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      Object object0 = new Object();
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      CSVFormat cSVFormat4 = cSVFormat0.withTrim(true);
      cSVFormat4.withAllowMissingColumnNames();
      cSVFormat2.withNullString("Parameter '");
      CSVFormat cSVFormat5 = cSVFormat3.withTrim();
      cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreEmptyLines(true);
      cSVFormat6.format(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "charset");
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = object0;
      cSVFormat2.format(objectArray0);
      cSVFormat2.TDF.withCommentMarker((Character) null);
      cSVFormat1.withIgnoreHeaderCase();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Character character1 = new Character('@');
      cSVFormat0.withEscape(character0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(536);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = new Locale("org.apache.commons.csv.CSVFormat@0000000002\torg.apache.commons.csv.CSVFormat@0000000002\tjava.lang.Character@0000000004\tjava.lang.Object@0000000005");
      mockPrintStream0.printf(locale0, "", objectArray0);
      cSVFormat0.withCommentMarker('j');
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":!@:k)v0!EBt,~v)g[");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('`');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('`');
      CSVFormat cSVFormat4 = CSVFormat.newFormat('z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ":!@:k)v0!EBt,~v)g[";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) ":!@:k)v0!EBt,~v)g[";
      objectArray0[5] = (Object) rowSetMetaDataImpl0;
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat6 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat6.withQuote('V');
      cSVFormat1.withTrailingDelimiter(true);
      cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat7 = cSVFormat3.withRecordSeparator(":!@:k)v0!EBt,~v)g[");
      cSVFormat7.withSkipHeaderRecord(true);
      Double double0 = new Double(0.0);
      cSVFormat5.equals(double0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withRecordSeparator('=');
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = "";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('=');
      cSVFormat3.MYSQL.withTrim(true);
      try { 
        MockURI.URI("", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      char char0 = 'o';
      Character character0 = new Character('o');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "&-4e";
      stringArray0[1] = "QwOA";
      stringArray0[2] = "\n";
      cSVFormat2.RFC4180.withIgnoreSurroundingSpaces();
      cSVFormat2.RFC4180.withNullString("\n");
      stringArray0[3] = "wGk;z&diL\"PnSSrn";
      stringArray0[4] = "";
      stringArray0[5] = "3e*yfm&=YcvN6c~";
      stringArray0[6] = "";
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [&-4e, QwOA, 
         // , wGk;z&diL\"PnSSrn, , 3e*yfm&=YcvN6c~, ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "MySQL";
      CSVFormat cSVFormat0 = CSVFormat.valueOf("MySQL");
      cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
      boolean boolean0 = false;
      cSVFormat0.TDF.withIgnoreEmptyLines(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat0.TDF.withDelimiter('z');
      cSVFormat0.withFirstRecordAsHeader();
      try { 
        MockURI.URI("\n", "\n", "\n", "`xml", "'}");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 
         // ://%0A%0A?%60xml#'%7D
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      cSVFormat0.TDF.withCommentMarker('v');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withHeader(resultSet0);
      cSVFormat0.EXCEL.format(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(true);
      stringArray0[0] = "";
      CSVFormat cSVFormat4 = cSVFormat0.DEFAULT.withHeaderComments(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat1.DEFAULT.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('f');
      cSVFormat3.printRecord(charArrayWriter1, stringArray0);
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat3.withQuote('k');
      CSVFormat cSVFormat7 = cSVFormat4.withTrailingDelimiter(true);
      CSVFormat cSVFormat8 = cSVFormat5.withIgnoreEmptyLines();
      cSVFormat8.withIgnoreHeaderCase();
      CSVFormat cSVFormat9 = cSVFormat7.withRecordSeparator("");
      cSVFormat9.EXCEL.withSkipHeaderRecord(true);
      cSVFormat6.equals(cSVFormat9);
      CSVFormat.Predefined.values();
      Character character0 = Character.valueOf('I');
      cSVFormat6.withEscape(character0);
      cSVFormat7.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "IW$+";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('m');
      cSVFormat2.withAllowMissingColumnNames();
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      cSVFormat2.equals(cSVFormat_Predefined0);
      cSVFormat1.getRecordSeparator();
      cSVFormat2.withIgnoreEmptyLines(true);
      String string1 = "\n";
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat3 = cSVFormat0.DEFAULT.withEscape('`');
      stringArray0[0] = "2w@CXx%4f/k<78e8RK";
      Object object0 = new Object();
      cSVFormat2.format(stringArray0);
      cSVFormat3.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames(true);
      cSVFormat4.getHeader();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat1.toString();
      MockFile mockFile0 = new MockFile("", "8gDAn[bHWHgv;cbn'");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat2.print(path0, charset0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      Object object0 = new Object();
      cSVFormat1.format(cSVFormat_PredefinedArray0);
      cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat4.withTrailingDelimiter();
      cSVFormat3.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat1.toString();
      MockFile mockFile0 = new MockFile("", "8gDAn[bHWHgv;cbn'");
      Path path0 = mockFile0.toPath();
      cSVFormat0.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat2.toString();
      MockFile mockFile1 = new MockFile("", "");
      mockFile0.toPath();
      Charset.defaultCharset();
      cSVFormat1.print(path0, charset0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      Object object0 = new Object();
      cSVFormat4.format(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      String[] stringArray0 = new String[1];
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.TDF.withHeader(resultSet0);
      boolean boolean0 = true;
      cSVFormat1.EXCEL.format(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(true);
      stringArray0[0] = "";
      cSVFormat1.DEFAULT.withHeaderComments(stringArray0);
      cSVFormat1.DEFAULT.withHeader(stringArray0);
      Object object0 = new Object();
      cSVFormat3.format(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase();
      Character character0 = new Character('@');
      Character character1 = Character.valueOf('@');
      cSVFormat4.withEscape(character1);
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        cSVFormat5.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":!@:k)v0!EBt,~v)g[");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('`');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat0.withCommentMarker('`');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator(":!@:k)v0!EBt,~v)g[");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(resultSet0);
      Object[] objectArray0 = new Object[0];
      cSVFormat4.format(objectArray0);
      cSVFormat2.withTrailingDelimiter(false);
      cSVFormat2.withTrailingDelimiter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":!@:k)v0!EBt,~v)g[";
      CSVFormat cSVFormat6 = cSVFormat4.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1195);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) ":!@:k)v0!EBt,~v)g[");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('z');
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreEmptyLines(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      cSVFormat3.withRecordSeparator("cAUW'z97\"jfHC5xI#");
      Object object0 = new Object();
      cSVFormat7.equals(cSVFormat5);
      CSVFormat.Predefined.values();
      cSVFormat3.println(charArrayWriter2);
      cSVFormat1.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat1.getNullString();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) null;
      cSVFormat1.format(objectArray0);
      cSVFormat2.withIgnoreHeaderCase();
      Character character0 = new Character('u');
      cSVFormat1.withEscape(character0);
      // Undeclared exception!
      try { 
        cSVFormat2.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat1.toString();
      MockFile mockFile0 = new MockFile("", "8gDAn[bHWHgv;cbn'");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat2.print(path0, charset0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      Object object0 = new Object();
      cSVFormat2.format(cSVFormat_PredefinedArray0);
      cSVFormat3.withIgnoreSurroundingSpaces();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.csv.CSVFormat$Predefined@0000000006,org.apache.commons.csv.CSVFormat$Predefined@0000000007,org.apache.commons.csv.CSVFormat$Predefined@0000000008,org.apache.commons.csv.CSVFormat$Predefined@0000000009,org.apache.commons.csv.CSVFormat$Predefined@0000000010,org.apache.commons.csv.CSVFormat$Predefined@0000000011,org.apache.commons.csv.CSVFormat$Predefined@0000000012", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      cSVFormat0.withRecordSeparator("HeaderComments:");
      Object object1 = new Object();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat3.equals(quoteMode0);
      CSVFormat.Predefined.values();
      cSVFormat1.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":!@:k)v0!EBt,~v)g[");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('`');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('`');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ":!@:k)v0!EBt,~v)g[";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) ":!@:k)v0!EBt,~v)g[";
      objectArray0[5] = (Object) rowSetMetaDataImpl0;
      cSVFormat0.format(objectArray0);
      cSVFormat3.withTrailingDelimiter(false);
      CSVFormat cSVFormat4 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(false);
      cSVFormat5.withHeaderComments(objectArray0);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(stringArray0);
      String string0 = "en\\u];$b4";
      CSVFormat cSVFormat7 = cSVFormat6.withRecordSeparator(string0);
      Object object0 = new Object();
      cSVFormat7.equals(object0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat3 = cSVFormat0.DEFAULT.withEscape('`');
      stringArray0[0] = "2w@CXx%4f/k<78e8RK";
      stringArray0[1] = "W";
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('m');
      CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames();
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreSurroundingSpaces();
      cSVFormat5.equals(cSVFormat7);
      cSVFormat6.getRecordSeparator();
      CSVFormat cSVFormat8 = cSVFormat0.withIgnoreEmptyLines(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      cSVFormat8.print((Object) "2w@CXx%4f/k<78e8RK", (Appendable) mockPrintWriter0, false);
      Short short0 = new Short((short)31);
      cSVFormat3.EXCEL.withIgnoreHeaderCase(false);
      cSVFormat6.print((Object) cSVFormat4, (Appendable) mockFileWriter0, true);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("EORECORD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.EORECORD
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat1.toString();
      MockFile mockFile0 = new MockFile("", "8gDAn[bHWHgv;cbn'");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat2.print(path0, charset0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      Object object0 = new Object();
      cSVFormat2.format(cSVFormat_PredefinedArray0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withCommentMarker('Y');
      cSVFormat1.getHeaderComments();
      cSVFormat3.withCommentMarker('W');
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat3 = cSVFormat0.DEFAULT.withEscape('`');
      cSVFormat3.MYSQL.format(stringArray0);
      stringArray0[0] = "2w@CXx%4f/k<78e8RK";
      stringArray0[1] = "W";
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('m');
      CSVFormat cSVFormat6 = cSVFormat0.withCommentMarker('m');
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreSurroundingSpaces();
      cSVFormat5.equals(cSVFormat7);
      cSVFormat6.getRecordSeparator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat8 = cSVFormat0.withHeader(stringArray0);
      cSVFormat8.withRecordSeparator((String) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat7.withHeader(resultSet0);
      cSVFormat5.withNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "IW$+";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = null;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat2.RFC4180.hashCode();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat2.EXCEL.withQuoteMode(quoteMode0);
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat3 = cSVFormat1.TDF.withCommentMarker('z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat1.withNullString("(line ");
      cSVFormat4.format(stringArray0);
      cSVFormat1.withIgnoreHeaderCase();
      Character character1 = new Character('z');
      Character character2 = new Character('z');
      // Undeclared exception!
      try { 
        cSVFormat3.withEscape(character2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('z')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      cSVFormat1.TDF.withCommentMarker('v');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object object0 = new Object();
      cSVFormat1.format(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('v');
      cSVFormat3.withIgnoreHeaderCase();
      Character character0 = new Character('v');
      cSVFormat1.withEscape((Character) null);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat4.printRecord(charArrayWriter0, stringArray0);
      cSVFormat1.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat3 = cSVFormat1.TDF.withCommentMarker('v');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat2.TDF.withHeader(resultSet0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat3.withHeader(resultSet1);
      cSVFormat2.format(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      CSVFormat cSVFormat5 = cSVFormat3.withHeaderComments(stringArray0);
      cSVFormat5.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1195);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('h');
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreEmptyLines(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, false);
      CSVFormat cSVFormat7 = cSVFormat2.withEscape((Character) null);
      Float float0 = new Float((-111.9971F));
      cSVFormat7.print((Object) float0, (Appendable) charArrayWriter1, false);
      Short short0 = new Short((short)31);
      cSVFormat7.print((Object) cSVFormat6, (Appendable) mockPrintWriter0, true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat1.toString();
      MockFile mockFile0 = new MockFile("", "8gDAn[bHWHgv;cbn'");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat2.print(path0, charset0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat.Predefined.values();
      Character character0 = new Character(')');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      cSVFormat4.withTrailingDelimiter(false);
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat5.INFORMIX_UNLOAD.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat6 = cSVFormat4.withRecordSeparator((String) null);
      CSVFormat cSVFormat7 = cSVFormat6.withFirstRecordAsHeader();
      cSVFormat7.RFC4180.withCommentMarker(')');
      cSVFormat2.equals(class0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat3 = cSVFormat1.TDF.withCommentMarker('z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat2.TDF.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator("");
      CSVFormat cSVFormat6 = cSVFormat5.withHeaderComments(stringArray0);
      CSVFormat cSVFormat7 = cSVFormat6.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('{');
      cSVFormat5.printRecord(charArrayWriter0, stringArray0);
      CSVFormat cSVFormat8 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat9 = cSVFormat1.withQuote('{');
      cSVFormat2.withTrailingDelimiter(false);
      cSVFormat4.withIgnoreEmptyLines();
      CSVFormat cSVFormat10 = cSVFormat4.withAllowMissingColumnNames();
      cSVFormat10.withIgnoreHeaderCase();
      cSVFormat7.withRecordSeparator("jS/d[J}.+i>gD");
      CSVFormat cSVFormat11 = cSVFormat8.withSkipHeaderRecord(true);
      Short short0 = new Short((short)2673);
      cSVFormat9.equals(short0);
      CSVFormat.Predefined.values();
      cSVFormat11.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      String[] stringArray0 = new String[2];
      cSVFormat0.DEFAULT.withEscape('`');
      stringArray0[0] = "2w@CXx%4f/k<78e8RK";
      stringArray0[1] = "W";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('m');
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat4.equals(cSVFormat6);
      cSVFormat5.getRecordSeparator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat2.withRecordSeparator("_|zSKH8d(");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat6.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("gJBImi*'Z1*[W|wB");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      cSVFormat5.withNullString("\n");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character.valueOf('j');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(31);
      charArrayWriter0.append('#');
      cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.isNullStringSet();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(true);
      cSVFormat2.hashCode();
      cSVFormat1.getEscapeCharacter();
      cSVFormat2.getTrim();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat1.toString();
      MockFile mockFile0 = new MockFile("", "8gDAn[bHWHgv;cbn'");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat2.print(path0, charset0);
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      Object object0 = new Object();
      cSVFormat2.format(cSVFormat_PredefinedArray0);
      cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat1.withCommentMarker('Y');
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(':');
      cSVFormat1.getNullString();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      Character character0 = new Character('6');
      cSVFormat2.withEscape('@');
      // Undeclared exception!
      try { 
        cSVFormat1.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      cSVFormat2.withIgnoreHeaderCase(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader(resultSet0);
      cSVFormat1.EXCEL.format(stringArray0);
      cSVFormat3.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(false);
      stringArray0[0] = "";
      CSVFormat cSVFormat4 = cSVFormat1.DEFAULT.withHeaderComments(stringArray0);
      cSVFormat2.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1195);
      charArrayWriter0.append('z');
      CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat5.withIgnoreEmptyLines();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase();
      cSVFormat5.withRecordSeparator("t@F?M @?CZ}@y^vG(H");
      Object object0 = new Object();
      cSVFormat6.equals(object0);
      CSVFormat.Predefined.values();
      cSVFormat4.println(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat3 = cSVFormat1.TDF.withCommentMarker('z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat2.TDF.withHeader(resultSet0);
      cSVFormat1.EXCEL.format(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(true);
      stringArray0[0] = "";
      cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat6 = cSVFormat2.DEFAULT.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1195);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('z');
      cSVFormat6.INFORMIX_UNLOAD.withIgnoreEmptyLines(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, true);
      cSVFormat4.withRecordSeparator("XCQo-\u0000p");
      Object object0 = new Object();
      cSVFormat3.equals((Object) null);
      CSVFormat.Predefined.values();
      cSVFormat5.println(mockPrintWriter0);
      cSVFormat4.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      cSVFormat0.withRecordSeparator("IW$+");
      cSVFormat0.equals((Object) null);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat3 = cSVFormat1.TDF.withCommentMarker('z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat2.TDF.withHeader(resultSet0);
      cSVFormat1.EXCEL.format(stringArray0);
      cSVFormat4.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "";
      CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter();
      Character character0 = new Character('q');
      cSVFormat5.withEscape(character0);
      CSVFormat cSVFormat6 = cSVFormat2.DEFAULT.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1195);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('z');
      cSVFormat6.INFORMIX_UNLOAD.withIgnoreEmptyLines(true);
      cSVFormat6.RFC4180.withTrailingDelimiter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, false);
      cSVFormat6.MYSQL.print((Object) "", (Appendable) mockPrintWriter0, true);
      Short short0 = new Short((short)31);
      cSVFormat3.print((Object) short0, (Appendable) mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      cSVFormat1.TDF.withCommentMarker('z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader(resultSet0);
      cSVFormat1.EXCEL.format(stringArray0);
      cSVFormat3.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(false);
      stringArray0[0] = "";
      cSVFormat1.DEFAULT.withHeaderComments(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat2.DEFAULT.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1195);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('z');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cf)$");
      CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat5.withIgnoreEmptyLines();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase();
      CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator("t@F?M @?CZ}@y^vG(H");
      Object object0 = new Object();
      cSVFormat6.equals(object0);
      CSVFormat.Predefined.values();
      cSVFormat7.println(charArrayWriter1);
      cSVFormat4.withRecordSeparator('z');
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      MockFile mockFile0 = new MockFile("", "8gDAn[bHWHgv;cbn'");
      mockFile0.toPath();
      Charset.defaultCharset();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat.Predefined.values();
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat2.TDF.withRecordSeparator("UK{sa!xLO8E5`q6euaL");
      cSVFormat1.withTrim();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(resultSet0);
      Object[] objectArray0 = new Object[0];
      cSVFormat4.format(objectArray0);
      cSVFormat2.withTrailingDelimiter(false);
      cSVFormat4.withHeaderComments(objectArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      CSVFormat cSVFormat5 = cSVFormat3.withHeader(stringArray0);
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat2.toString();
      MockFile mockFile0 = new MockFile("Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false", "AI;2|_S^Z7g.[");
      mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      Path path0 = mockFile0.toPath();
      cSVFormat4.print(path0, charset0);
      cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat.Predefined.values();
      Object object0 = new Object();
      cSVFormat5.format(stringArray0);
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat6.withIgnoreSurroundingSpaces(true);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      String[] stringArray0 = new String[1];
      char char0 = 'v';
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('e');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
      cSVFormat2.format(stringArray0);
      cSVFormat1.withTrailingDelimiter(true);
      cSVFormat2.withHeaderComments(stringArray0);
      cSVFormat3.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1626));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1626
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.isNullStringSet();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1195);
      charArrayWriter0.append('1');
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.withRecordSeparator("`'&0hW");
      Object object0 = new Object();
      Short short0 = new Short((short) (-1534));
      cSVFormat3.equals(short0);
      CSVFormat.Predefined.values();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('1');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      cSVFormat3.println(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character.valueOf('j');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(31);
      charArrayWriter0.append('#');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      MockFile mockFile0 = new MockFile("8gDAn[bHWHgv;cbn'", "8gDAn[bHWHgv;cbn'");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.print(path0, charset0);
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      Object object0 = new Object();
      cSVFormat3.format(cSVFormat_PredefinedArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat4.RFC4180.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker('v');
      cSVFormat5.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat0.TDF.withHeader(class0);
      cSVFormat1.TDF.withCommentMarker('v');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader(resultSet0);
      cSVFormat1.EXCEL.format(stringArray0);
      cSVFormat3.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(true);
      stringArray0[0] = "";
      CSVFormat cSVFormat4 = cSVFormat1.DEFAULT.withHeaderComments(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat2.DEFAULT.withHeader(stringArray0);
      CSVFormat cSVFormat6 = cSVFormat5.INFORMIX_UNLOAD.withIgnoreEmptyLines(true);
      cSVFormat5.TDF.toString();
      MockFile mockFile0 = new MockFile(":|QG*<6G", "");
      mockFile0.toPath();
      Charset.defaultCharset();
      cSVFormat6.withTrailingDelimiter(false);
      cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreHeaderCase();
      cSVFormat7.withRecordSeparator("");
      Byte byte0 = new Byte((byte)32);
      cSVFormat5.equals(byte0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character.valueOf('j');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(31);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      Object[] objectArray0 = new Object[0];
      cSVFormat1.format(objectArray0);
      boolean boolean0 = false;
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat5 = cSVFormat3.withHeader(stringArray0);
      cSVFormat5.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat6 = cSVFormat4.withTrailingDelimiter();
      cSVFormat6.toString();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = object0;
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      Character character1 = new Character('@');
      Character character2 = Character.valueOf('@');
      cSVFormat0.withEscape(character2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(536);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = new Locale("org.apache.commons.csv.CSVFormat@0000000002\torg.apache.commons.csv.CSVFormat@0000000002\tjava.lang.Character@0000000004\tjava.lang.Object@0000000005");
      mockPrintStream0.printf(locale0, "", objectArray0);
      cSVFormat3.withRecordSeparator("6.Oa");
      cSVFormat3.equals(cSVFormat0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      cSVFormat1.TDF.withCommentMarker('v');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader(resultSet0);
      cSVFormat1.EXCEL.format(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(true);
      stringArray0[0] = "";
      CSVFormat cSVFormat5 = cSVFormat1.DEFAULT.withHeaderComments(stringArray0);
      CSVFormat cSVFormat6 = cSVFormat2.DEFAULT.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('f');
      cSVFormat4.printRecord(charArrayWriter1, stringArray0);
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat4.withQuote('k');
      CSVFormat cSVFormat8 = cSVFormat5.withTrailingDelimiter(true);
      CSVFormat cSVFormat9 = cSVFormat6.withIgnoreEmptyLines();
      cSVFormat9.withIgnoreHeaderCase();
      CSVFormat cSVFormat10 = cSVFormat8.withRecordSeparator("");
      cSVFormat10.EXCEL.withSkipHeaderRecord(true);
      cSVFormat7.equals(cSVFormat10);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('_');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      String[] stringArray0 = new String[2];
      cSVFormat0.DEFAULT.withEscape('_');
      stringArray0[0] = "2w@CXx%4f/k<78e8RK";
      stringArray0[1] = "W";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('m');
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat4.equals(cSVFormat6);
      cSVFormat5.getRecordSeparator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      cSVFormat5.format(stringArray0);
      cSVFormat3.withNullString("H c}(N*r8C?1fKN6)");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "format";
      stringArray0[1] = "";
      stringArray0[2] = "=|@";
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      cSVFormat5.withHeaderComments(stringArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      cSVFormat1.TDF.withCommentMarker('z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader(resultSet0);
      cSVFormat1.EXCEL.format(stringArray0);
      cSVFormat3.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(false);
      stringArray0[0] = "";
      CSVFormat cSVFormat4 = cSVFormat1.DEFAULT.withHeaderComments(stringArray0);
      cSVFormat2.DEFAULT.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1195);
      charArrayWriter0.append('z');
      CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat5.withIgnoreEmptyLines();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase();
      cSVFormat5.withRecordSeparator("t@F?M @?CZ}@y^vG(H");
      Object object0 = new Object();
      cSVFormat6.equals(object0);
      CSVFormat.Predefined.values();
      cSVFormat4.println(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      Character.valueOf('L');
      MockFile mockFile0 = new MockFile((String) null, "Default");
      mockFile0.toPath();
      Charset.defaultCharset();
      CSVFormat.Predefined.values();
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Nv #N>");
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) "Nv #N>";
      objectArray0[2] = (Object) null;
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      cSVFormat1.TDF.withCommentMarker('v');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader(resultSet0);
      cSVFormat1.EXCEL.format(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(true);
      stringArray0[0] = "";
      cSVFormat1.DEFAULT.withHeaderComments(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat2.DEFAULT.withHeader(stringArray0);
      cSVFormat5.INFORMIX_UNLOAD.withIgnoreEmptyLines(true);
      cSVFormat5.TDF.toString();
      MockFile mockFile0 = new MockFile(":|QG*<6G", "");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat6 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat6.print(path0, charset0);
      cSVFormat4.withIgnoreHeaderCase(false);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      Object object0 = new Object();
      cSVFormat4.format(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('j');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(31);
      charArrayWriter0.append('#');
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.isNullStringSet();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim(true);
      cSVFormat3.hashCode();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      cSVFormat2.format(objectArray0);
      cSVFormat1.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.isNullStringSet();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
      cSVFormat0.equals(cSVFormat2);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('j');
      StringWriter stringWriter0 = new StringWriter(625);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) stringWriter0;
      cSVFormat2.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('k');
      cSVFormat4.withTrailingDelimiter(false);
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat5.withIgnoreHeaderCase();
      cSVFormat4.hashCode();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat2 = cSVFormat0.withEscape((Character) null);
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.withCommentMarker('=');
      String string0 = "";
      boolean boolean0 = false;
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVFormat2.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat2 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.withCommentMarker('=');
      String string0 = "";
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      boolean boolean0 = false;
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVFormat2.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character.valueOf('j');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(31);
      charArrayWriter0.append('#');
      cSVFormat1.withIgnoreEmptyLines(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      cSVFormat0.INFORMIX_UNLOAD.withNullString("`J]NR+Vq");
      Byte byte0 = new Byte((byte)40);
      cSVFormat1.print((Object) "`J]NR+Vq", (Appendable) charArrayWriter0, true);
      cSVFormat0.getCommentMarker();
      CSVFormat cSVFormat2 = cSVFormat0.withQuote('4');
      cSVFormat1.withTrim(true);
      cSVFormat0.isNullStringSet();
      cSVFormat1.getQuoteCharacter();
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat3.getIgnoreEmptyLines();
      cSVFormat2.withTrim(false);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      StringWriter stringWriter0 = new StringWriter(2012);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      cSVFormat1.printRecord(stringWriter0, stringArray0);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat2.withQuote('v');
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(false);
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat4.withIgnoreHeaderCase();
      cSVFormat0.withRecordSeparator("&fH97S>");
      cSVFormat5.equals(cSVFormat1);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat1.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames();
      cSVFormat0.getNullString();
      cSVFormat0.getNullString();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat2.withTrailingDelimiter();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf(">s>sQ`D)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.>s>sQ`D)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW3$H");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      cSVFormat1.TDF.withCommentMarker('v');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD_CSV;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW3$H");
      cSVFormat3.hashCode();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character.valueOf('j');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(31);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('#');
      cSVFormat1.withIgnoreEmptyLines(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      Byte byte0 = new Byte((byte)40);
      cSVFormat1.print((Object) byte0, (Appendable) charArrayWriter1, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charArrayWriter1;
      cSVFormat2.printRecord(charArrayWriter0, objectArray0);
      cSVFormat2.withTrailingDelimiter(true);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('j');
      StringWriter stringWriter0 = new StringWriter(625);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) stringWriter0;
      cSVFormat2.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('k');
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(true);
      CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase();
      cSVFormat5.withRecordSeparator("&fH97S>");
      cSVFormat7.equals(objectArray0[0]);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat3 = cSVFormat1.TDF.withCommentMarker('v');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat2.TDF.withHeader(resultSet0);
      cSVFormat1.EXCEL.format(stringArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl2 = new RowSetMetaDataImpl();
      cSVFormat1.withRecordSeparator("IW$+");
      cSVFormat2.withTrailingDelimiter();
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('y');
      cSVFormat4.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.withQuote('X');
      // Undeclared exception!
      try { 
        cSVFormat0.print((Path) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat3 = cSVFormat1.TDF.withCommentMarker('v');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat2.TDF.withHeader(resultSet0);
      cSVFormat1.EXCEL.format(stringArray0);
      cSVFormat4.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(false);
      CSVFormat cSVFormat5 = cSVFormat1.withHeaderComments(stringArray0);
      cSVFormat4.withHeader(stringArray0);
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat6 = CSVFormat.DEFAULT;
      cSVFormat6.toString();
      MockFile mockFile0 = new MockFile((String) null, "K<h~7J46D^/'#Qr");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat7 = cSVFormat3.withSkipHeaderRecord();
      cSVFormat7.print(path0, charset0);
      cSVFormat5.withIgnoreHeaderCase(false);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      cSVFormat1.TDF.withCommentMarker('v');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader(resultSet0);
      boolean boolean0 = false;
      cSVFormat1.EXCEL.format(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(false);
      cSVFormat1.withHeaderComments(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat5.toString();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat3 = cSVFormat1.TDF.withCommentMarker('z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.format(stringArray0);
      Character character0 = Character.valueOf('z');
      CSVFormat cSVFormat4 = cSVFormat1.withQuote(character0);
      cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat0.withHeaderComments(stringArray0);
      cSVFormat4.withHeader(stringArray0);
      cSVFormat2.withRecordSeparator((String) null);
      Object object0 = new Object();
      cSVFormat4.equals((Object) null);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat2.getNullString();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.TDF.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
      StringReader stringReader0 = new StringReader("");
      cSVFormat0.EXCEL.parse(stringReader0);
      Long long0 = new Long(1995L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(821);
      stringWriter0.append((CharSequence) "");
      CSVFormat cSVFormat5 = cSVFormat2.withQuote('4');
      cSVFormat4.withTrailingDelimiter(true);
      cSVFormat5.withIgnoreHeaderCase();
      cSVFormat1.withRecordSeparator("");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat3 = cSVFormat0.DEFAULT.withEscape('`');
      stringArray0[0] = "2w@CXx%4f/k<78e8RK";
      stringArray0[1] = "W";
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('m');
      CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames();
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreSurroundingSpaces();
      cSVFormat5.equals(cSVFormat7);
      cSVFormat6.getRecordSeparator();
      CSVFormat cSVFormat8 = cSVFormat3.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "2w@CXx%4f/k<78e8RK";
      cSVFormat8.format(objectArray0);
      Character.valueOf('`');
      cSVFormat3.withTrim();
      CSVFormat cSVFormat9 = cSVFormat5.withAllowMissingColumnNames(false);
      cSVFormat9.withHeaderComments(objectArray0);
      CSVFormat cSVFormat10 = cSVFormat1.withHeader((String[]) null);
      cSVFormat10.withRecordSeparator((String) null);
      Object object0 = new Object();
      cSVFormat3.equals(cSVFormat4);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat1.toString();
      MockFile mockFile0 = new MockFile("", "8gDAn[bHWHgv;cbn'");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat2.print(path0, charset0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      Object object0 = new Object();
      cSVFormat2.format(cSVFormat_PredefinedArray0);
      cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat1.withCommentMarker('Y');
      cSVFormat1.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat2.getNullString();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.TDF.withQuoteMode(quoteMode0);
      cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.withTrailingDelimiter();
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat5 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.parse(stringReader0);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      cSVFormat1.TDF.withCommentMarker('v');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader(resultSet0);
      cSVFormat1.EXCEL.format(stringArray0);
      cSVFormat3.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(false);
      stringArray0[0] = "";
      cSVFormat1.DEFAULT.withHeaderComments(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat2.DEFAULT.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.INFORMIX_UNLOAD.withIgnoreEmptyLines(true);
      cSVFormat4.TDF.toString();
      MockFile mockFile0 = new MockFile(":|QG*<6G", "");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(path0, charset0);
      cSVFormat3.withIgnoreHeaderCase(false);
      CSVFormat.Predefined.values();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) ":|QG*<6G";
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[6] = (Object) rowSetMetaDataImpl0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "IW$+";
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.getQuoteMode();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat2.toString();
      MockFile mockFile0 = new MockFile("e", " +/3}H9VY.dBU=");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat2.print(path0, charset0);
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(':');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      cSVFormat4.withNullString("");
      cSVFormat4.withQuote('G');
      cSVFormat3.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(':');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat2.DEFAULT.withFirstRecordAsHeader();
      cSVFormat2.withTrim(true);
      cSVFormat0.withNullString("");
      cSVFormat1.withQuote('-');
      cSVFormat1.withTrailingDelimiter();
      cSVFormat0.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('j');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(625);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) stringWriter0;
      cSVFormat2.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('k');
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(false);
      CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase();
      cSVFormat5.withRecordSeparator("&fH97S>");
      cSVFormat7.equals(objectArray0[0]);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(1171);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "IW$+";
      objectArray0[3] = (Object) "IW$+";
      objectArray0[4] = (Object) stringWriter0;
      cSVFormat0.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('r');
      cSVFormat3.RFC4180.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat5.DEFAULT.print((Appendable) stringWriter0);
      cSVFormat5.withRecordSeparator("");
      cSVFormat4.withTrim();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('-');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat0.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.getCommentMarker();
      char char0 = new Character('-');
      cSVFormat1.getIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      CSVFormat cSVFormat4 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat3.isNullStringSet();
      cSVFormat4.hashCode();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withQuote('%');
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.TDF.hashCode();
      cSVFormat0.isNullStringSet();
      cSVFormat1.hashCode();
      cSVFormat1.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat2.getNullString();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.TDF.withQuoteMode(quoteMode0);
      cSVFormat1.withTrailingDelimiter();
      StringReader stringReader0 = new StringReader("");
      cSVFormat0.EXCEL.parse(stringReader0);
      Long long0 = new Long(1995L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(821);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      cSVFormat1.print((Object) long0, (Appendable) stringWriter1, true);
      Short short0 = new Short((short) (-1571));
      cSVFormat2.print((Object) cSVFormat0, (Appendable) stringWriter1, true);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      Character character0 = new Character('{');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat1.withFirstRecordAsHeader();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=c0/SGxp`i[;A}Y:%D";
      stringArray0[1] = "format";
      stringArray0[2] = "";
      stringArray0[3] = "Kau6Yh9:9U";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [=c0/SGxp`i[;A}Y:%D, format, , Kau6Yh9:9U, ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.getQuoteMode();
      String string0 = ")>k";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(")>k", ")>k");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // )>k
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.TDF.withCommentMarker('z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter();
      StringReader stringReader0 = new StringReader("");
      Character character0 = new Character('z');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(character0);
      cSVFormat5.parse(stringReader0);
      cSVFormat2.withQuote((Character) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat2.getNullString();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withTrailingDelimiter();
      StringReader stringReader0 = new StringReader("");
      cSVFormat0.EXCEL.parse(stringReader0);
      cSVFormat2.withQuote((Character) null);
      cSVFormat0.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat2.withCommentMarker('7');
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("");
      cSVFormat4.withCommentMarker('7');
      cSVFormat0.withQuote('e');
      Character character0 = Character.valueOf('X');
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(character0);
      cSVFormat5.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat7 = cSVFormat6.withRecordSeparator('7');
      cSVFormat7.getQuoteMode();
      MockFile mockFile0 = new MockFile("\u0006dqOtQ'=", "");
      MockFile mockFile1 = new MockFile("\u0006dqOtQ'=");
      mockFile1.toPath();
      Charset.defaultCharset();
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile2 = null;
      try {
        mockFile2 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat1 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat2.isNullStringSet();
      cSVFormat3.hashCode();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.EXCEL.withNullString(") invalid char between encapsulated token and delimiter");
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) null, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat3 = cSVFormat0.DEFAULT.withEscape('`');
      stringArray0[0] = "2w@CXx%4f/k<78e8RK";
      stringArray0[1] = "W";
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('m');
      CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames();
      cSVFormat6.withIgnoreSurroundingSpaces();
      cSVFormat4.equals(cSVFormat2);
      cSVFormat6.getRecordSeparator();
      cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreEmptyLines();
      cSVFormat7.format(stringArray0);
      Character.valueOf('2');
      cSVFormat5.withTrim();
      CSVFormat cSVFormat8 = cSVFormat5.withAllowMissingColumnNames(false);
      cSVFormat2.withHeaderComments(stringArray0);
      CSVFormat cSVFormat9 = cSVFormat5.withHeader((String[]) null);
      cSVFormat9.withRecordSeparator("~X1qR");
      Object object0 = new Object();
      Float float0 = new Float(2030.9454F);
      cSVFormat1.equals(float0);
      CSVFormat.Predefined.values();
      cSVFormat8.toString();
      cSVFormat0.withDelimiter('2');
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      QuoteMode quoteMode1 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode1);
      cSVFormat1.getNullString();
      Object object0 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "N";
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase();
      Character character0 = new Character('\u008B');
      Character character1 = Character.valueOf('@');
      cSVFormat0.withEscape(character1);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) character0;
      objectArray1[1] = (Object) quoteMode0;
      objectArray1[2] = (Object) cSVFormat2;
      objectArray1[3] = (Object) quoteMode0;
      objectArray1[4] = (Object) cSVFormat2;
      objectArray1[5] = (Object) cSVFormat3;
      objectArray1[6] = (Object) character1;
      // Undeclared exception!
      try { 
        cSVFormat2.printRecord((Appendable) null, objectArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('a');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("NON_NUMERIC");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "NON_NUMERIC";
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat3.DEFAULT.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat3.withDelimiter('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat2.getNullString();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withQuoteMode(quoteMode0);
      cSVFormat1.withTrailingDelimiter();
      StringReader stringReader0 = new StringReader("");
      cSVFormat2.withAllowMissingColumnNames();
      cSVFormat4.getQuoteMode();
      cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat4.toString();
      MockFile mockFile0 = new MockFile("X,", "");
      mockFile0.toPath();
      Charset.defaultCharset();
      cSVFormat4.withIgnoreHeaderCase(false);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('j');
      StringWriter stringWriter0 = new StringWriter(625);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) character0;
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat0.toString();
      MockFile mockFile0 = new MockFile("K9p%lQQ@`%", "kGkt+ 7S~(rd76lvc");
      mockFile0.toPath();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Charset.forName("K9p%lQQ@`%");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // K9p%lQQ@`%
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat2.getNullString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(625);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) quoteMode0;
      objectArray0[5] = (Object) quoteMode0;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat1.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withQuote('r');
      cSVFormat3.withTrailingDelimiter(false);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat4.withRecordSeparator((String) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = CSVFormat.newFormat('n');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat0.getCommentMarker();
      cSVFormat1.getDelimiter();
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("\u2028");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.\u2028
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withHeader(class0);
      cSVFormat0.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      cSVFormat1.TDF.withCommentMarker('z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat2.TDF.withHeader(resultSet0);
      cSVFormat1.EXCEL.format(stringArray0);
      stringArray0[0] = "";
      cSVFormat1.DEFAULT.withHeaderComments(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1195);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('z');
      cSVFormat3.INFORMIX_UNLOAD.withIgnoreEmptyLines(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, false);
      cSVFormat3.MYSQL.print((Object) "", (Appendable) mockPrintWriter0, true);
      cSVFormat1.getCommentMarker();
      CSVFormat cSVFormat4 = cSVFormat1.withQuote('r');
      cSVFormat4.DEFAULT.withTrim(true);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = true;
      cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      Character character0 = new Character('4');
      objectArray0[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withAllowMissingColumnNames();
      cSVFormat1.getQuoteMode();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)124;
      cSVFormat0.getCommentMarker();
      cSVFormat2.withQuote('W');
      cSVFormat0.withTrim(true);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      Character character1 = Character.valueOf('3');
      cSVFormat2.DEFAULT.withQuote(character1);
      cSVFormat0.TDF.withIgnoreEmptyLines();
      cSVFormat0.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat0.withDelimiter('j');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.withTrim(false);
      cSVFormat2.withTrailingDelimiter();
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat3.parse(stringReader0);
      Character character0 = new Character('F');
      cSVFormat1.withQuote(character0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat2.getNullString();
      Appendable appendable0 = null;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        cSVFormat1.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat1.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "format";
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      cSVFormat2.withAllowMissingColumnNames(true);
      cSVFormat1.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1291);
      cSVFormat0.parse(pipedReader0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat2.isNullStringSet();
      cSVFormat0.getQuoteCharacter();
      cSVFormat0.getIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.TDF.withTrim(false);
      String[] stringArray0 = new String[1];
      cSVFormat1.TDF.withCommentMarker('z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader(resultSet0);
      cSVFormat1.EXCEL.format(stringArray0);
      cSVFormat3.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(false);
      stringArray0[0] = "";
      cSVFormat1.DEFAULT.withHeaderComments(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat2.DEFAULT.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1195);
      charArrayWriter0.append('z');
      cSVFormat4.INFORMIX_UNLOAD.withIgnoreEmptyLines(true);
      cSVFormat3.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat3 = cSVFormat1.TDF.withCommentMarker('z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat2.TDF.withHeader(resultSet0);
      cSVFormat1.EXCEL.format(stringArray0);
      cSVFormat4.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(false);
      stringArray0[0] = "";
      cSVFormat1.DEFAULT.withHeaderComments(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat2.DEFAULT.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1195);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('z');
      cSVFormat5.INFORMIX_UNLOAD.withIgnoreEmptyLines(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, false);
      MockFile mockFile0 = new MockFile("6JbMy$Uw@W");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile0.toPath();
      cSVFormat3.withTrim();
      CSVFormat.newFormat('z');
      Charset.defaultCharset();
      cSVFormat5.withFirstRecordAsHeader();
      mockFile1.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "format";
      stringArray0[1] = "";
      stringArray0[2] = "=|@";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      cSVFormat1.withSkipHeaderRecord();
      cSVFormat3.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVFormat4.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "The header contains a duplicate entry: '";
      stringArray0[1] = "=|@";
      stringArray0[2] = "=|@";
      stringArray0[3] = "=|@";
      stringArray0[4] = "=|@";
      stringArray0[5] = "format";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '=|@' in [The header contains a duplicate entry: ', =|@, =|@, =|@, =|@, format]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      cSVFormat4.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char char0 = 'E';
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('E');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) stringWriter1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat1.INFORMIX_UNLOAD_CSV.printRecord(stringWriter1, objectArray0);
      cSVFormat1.withEscape('E');
      cSVFormat0.print((Appendable) stringWriter1);
      String string0 = "?m3(.";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("?m3(.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.?m3(.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      cSVFormat0.getNullString();
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('r');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = new Character('r');
      cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator((String) null);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(true);
      cSVFormat5.hashCode();
      cSVFormat3.withIgnoreSurroundingSpaces();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      Character character0 = new Character('4');
      cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withCommentMarker('e');
      cSVFormat1.MYSQL.withAllowMissingColumnNames();
      cSVFormat0.withTrailingDelimiter(false);
      cSVFormat2.withIgnoreHeaderCase();
      Character character1 = new Character('f');
      cSVFormat3.withQuote(character1);
      cSVFormat0.withDelimiter('b');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      cSVFormat2.print((Appendable) mockPrintStream0);
      cSVFormat0.withIgnoreEmptyLines(false);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      Character character0 = new Character('$');
      String string0 = "1T; U2!K";
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("1T; U2!K");
      Character character1 = Character.valueOf('w');
      cSVFormat3.withCommentMarker(character1);
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker('h');
      Object[] objectArray0 = new Object[0];
      cSVFormat3.format(objectArray0);
      cSVFormat2.withAllowMissingColumnNames();
      cSVFormat4.getQuoteMode();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("url", "1T; U2!K");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 1T; U2!K
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat1.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      cSVFormat0.getNullString();
      cSVFormat0.withDelimiter('!');
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      cSVFormat4.withTrailingDelimiter();
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.withQuoteMode(quoteMode0);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("_zojgR_)5]mEfzS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined._zojgR_)5]mEfzS
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      Character character0 = new Character('L');
      cSVFormat1.RFC4180.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.RFC4180.withQuote('|');
      cSVFormat1.isNullStringSet();
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      Character character0 = new Character('4');
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.MYSQL.withAllowMissingColumnNames();
      cSVFormat1.getQuoteMode();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)124;
      String string0 = "v(9yaUQ*D3C,W !";
      // Undeclared exception!
      try { 
        cSVFormat0.TDF.print((Object) cSVFormat2, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat1.withHeader(class0);
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withEscape('`');
      stringArray0[0] = "2w@CXx%4f/k<78e8RK";
      stringArray0[1] = "W";
      cSVFormat0.withHeader((String[]) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('v');
      cSVFormat2.withIgnoreEmptyLines(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, true);
      Short short0 = new Short((short)60);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat1.print((Object) cSVFormat3, (Appendable) charArrayWriter0, true);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("QuoteChar=<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.QuoteChar=<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.getNullString();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('C');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      CSVFormat cSVFormat3 = cSVFormat0.withTrim(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      cSVFormat3.withTrailingDelimiter();
      StringReader stringReader0 = new StringReader("p0r]J$");
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      cSVFormat4.parse(stringReader0);
      CSVFormat cSVFormat5 = cSVFormat4.withQuote((Character) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      objectArray0[2] = (Object) resultSet0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat3;
      cSVFormat5.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.getQuoteMode();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat0.toString();
      MockFile mockFile0 = new MockFile(":{]U]8k]T,x", "Escape=<");
      mockFile0.toPath();
      Charset.defaultCharset();
      cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withDelimiter('b');
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('b');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.TDF.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withQuoteMode(quoteMode0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withHeader(class0);
      cSVFormat1.TDF.withTrailingDelimiter(false);
      cSVFormat3.withCommentMarker('C');
      cSVFormat2.INFORMIX_UNLOAD_CSV.withRecordSeparator("");
      CSVFormat cSVFormat4 = cSVFormat2.INFORMIX_UNLOAD_CSV.withCommentMarker('%');
      cSVFormat4.INFORMIX_UNLOAD_CSV.withQuote('b');
      CSVFormat cSVFormat5 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat7 = cSVFormat6.withRecordSeparator('E');
      cSVFormat7.getQuoteMode();
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat7.print(path0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      char char0 = 'E';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('E');
      cSVFormat1.EXCEL.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) stringWriter1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat1.INFORMIX_UNLOAD_CSV.printRecord(stringWriter1, objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape('E');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('E')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      Character character0 = new Character('4');
      cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('%');
      Character.valueOf('%');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      Character character1 = new Character('4');
      cSVFormat4.withEscape(character1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      cSVFormat3.DEFAULT.hashCode();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.RFC4180.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withQuote('@');
      cSVFormat5.TDF.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withDelimiter('@');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      String string0 = "C4(su@%2";
      MockFile mockFile0 = new MockFile("C4(su@%2");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "C4(su@%2");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // C4(su@%2
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      cSVFormat1.withRecordSeparator("org.apache.commons.csv.CSVFormat");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withCommentMarker(character0);
      cSVFormat1.DEFAULT.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.withQuote(character0);
      cSVFormat2.withDelimiter('j');
      Object[] objectArray0 = new Object[0];
      cSVFormat2.withHeaderComments(objectArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      cSVFormat3.print((Appendable) printStream0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      cSVFormat2.getHeaderComments();
      cSVFormat0.getQuoteCharacter();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.DEFAULT.withHeader(resultSet0);
      QuoteMode quoteMode1 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode1);
      cSVFormat1.getHeaderComments();
      cSVFormat3.withTrim(true);
      String string0 = "3XA<<(95";
      try { 
        MockURI.URI("", " SkipHeaderRecord:", "3XA<<(95", "", "3XA<<(95");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://%20SkipHeaderRecord:3XA%3C%3C(95?#3XA%3C%3C(95
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.RFC4180.withNullString("En$P$=/{vQ&P");
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        Charset.forName("En$P$=/{vQ&P");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // En$P$=/{vQ&P
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("Delimiter=<");
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat2.TDF.withTrim(true);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat5.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape('\"');
      cSVFormat0.getQuoteMode();
      cSVFormat0.EXCEL.withAllowMissingColumnNames();
      cSVFormat1.MYSQL.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      String[] stringArray0 = new String[0];
      Character character0 = new Character('\"');
      cSVFormat2.MYSQL.withCommentMarker(character0);
      cSVFormat1.TDF.withHeader(stringArray0);
      cSVFormat1.withIgnoreSurroundingSpaces();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('-');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
      cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat2.getCommentMarker();
      cSVFormat2.getDelimiter();
      cSVFormat0.withRecordSeparator("Ch;uVz");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.withFirstRecordAsHeader();
      cSVFormat1.isNullStringSet();
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrailingDelimiter();
      cSVFormat1.RFC4180.withIgnoreHeaderCase();
      cSVFormat0.withNullString("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "");
      charArrayWriter1.append('p');
      int int0 = (-363);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-363));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('f');
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuote(character0);
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'A';
      charArray0[2] = 'f';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0, 62, 1063);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat1.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.RFC4180.withAllowMissingColumnNames(false);
      cSVFormat0.getTrim();
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("ud,RloQv5gi?k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.ud,RloQv5gi?k
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('/');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.RFC4180.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat0.withQuote('v');
      Object[] objectArray0 = new Object[3];
      cSVFormat2.RFC4180.withDelimiter('v');
      objectArray0[0] = (Object) cSVFormat0;
      Character character0 = Character.valueOf('v');
      cSVFormat1.INFORMIX_UNLOAD_CSV.withEscape(character0);
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat2;
      cSVFormat2.TDF.format(objectArray0);
      cSVFormat2.withEscape('m');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat0.TDF.println(pipedWriter0);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreHeaderCase();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        cSVFormat0.MYSQL.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.INFORMIX_UNLOAD.withDelimiter('%');
      Character character0 = Character.valueOf('G');
      cSVFormat0.withEscape(character0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('.');
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      cSVFormat4.withDelimiter('R');
      MockFile mockFile0 = new MockFile("|ns1h#jR;8~KPm\"", "$r9`Z>");
      MockFile.createTempFile("|ns1h#jR;8~KPm\"", "eZ<o2b\u00069T=oC?$$", (File) mockFile0);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ew-po]m~GiOB";
      stringArray0[1] = "HeaderComments:";
      stringArray0[2] = "";
      stringArray0[3] = "out";
      stringArray0[4] = "P690X";
      stringArray0[5] = "";
      stringArray0[6] = "";
      // Undeclared exception!
      try { 
        cSVFormat0.INFORMIX_UNLOAD.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [ew-po]m~GiOB, HeaderComments:, , out, P690X, , ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('s');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('2');
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      Path path0 = mockFile1.toPath();
      try { 
        cSVFormat2.RFC4180.print(path0, (Charset) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat2.getIgnoreHeaderCase();
      cSVFormat1.withRecordSeparator('o');
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('K');
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      CSVFormat cSVFormat5 = cSVFormat4.DEFAULT.withHeaderComments(objectArray0);
      MockFile mockFile0 = new MockFile("reader", "");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat5.DEFAULT.print((File) mockFile0, charset0);
      cSVFormat1.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withIgnoreHeaderCase(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat6.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IW$+");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "IW$+";
      cSVFormat0.format(objectArray0);
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.getQuoteMode();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("\u2029", "IW$+");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // IW$+
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat2.getNullString();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('r');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withTrim(true);
      cSVFormat1.withTrailingDelimiter();
      StringReader stringReader0 = new StringReader("");
      cSVFormat0.EXCEL.parse(stringReader0);
      cSVFormat2.withQuote((Character) null);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('j');
      cSVFormat0.withQuote(character0);
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character.valueOf('j');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(31);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('#');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      Byte byte0 = new Byte((byte)40);
      cSVFormat1.print((Object) byte0, (Appendable) charArrayWriter1, false);
      cSVFormat1.getCommentMarker();
      cSVFormat1.withQuote('|');
      cSVFormat2.withTrim(true);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat1.toString();
      MockFile mockFile0 = new MockFile("", "8gDAn[bHWHgv;cbn'");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat2.print(path0, charset0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      Object object0 = new Object();
      cSVFormat2.format(cSVFormat_PredefinedArray0);
      cSVFormat3.withIgnoreSurroundingSpaces();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.csv.CSVFormat$Predefined@0000000006,org.apache.commons.csv.CSVFormat$Predefined@0000000007,org.apache.commons.csv.CSVFormat$Predefined@0000000008,org.apache.commons.csv.CSVFormat$Predefined@0000000009,org.apache.commons.csv.CSVFormat$Predefined@0000000010,org.apache.commons.csv.CSVFormat$Predefined@0000000011,org.apache.commons.csv.CSVFormat$Predefined@0000000012", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      cSVFormat2.print((Object) "", (Appendable) mockPrintWriter0, false);
      Short short0 = new Short((short) (-1));
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      cSVFormat4.print((Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", (Appendable) mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf(",7Q0<*/U!Z@auJikOB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.,7Q0<*_/U!Z@auJikOB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) null, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "format";
      stringArray0[1] = "";
      stringArray0[2] = "=|@";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      cSVFormat5.withHeaderComments(stringArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char char0 = 'E';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('E');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat1.INFORMIX_UNLOAD_CSV.printRecord(stringWriter1, objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape('E');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('E')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      cSVFormat1.TDF.withCommentMarker('z');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader(resultSet0);
      cSVFormat1.EXCEL.format(stringArray0);
      cSVFormat3.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(false);
      stringArray0[0] = "";
      cSVFormat1.DEFAULT.withHeaderComments(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat2.DEFAULT.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1195);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('z');
      cSVFormat4.INFORMIX_UNLOAD.withIgnoreEmptyLines(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, false);
      cSVFormat4.MYSQL.print((Object) "", (Appendable) mockPrintWriter0, true);
      cSVFormat1.getCommentMarker();
      CSVFormat cSVFormat5 = cSVFormat1.withQuote('r');
      cSVFormat5.DEFAULT.withTrim(true);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("{y.qT}Q(ok]Mo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.{y.qT}Q(ok]Mo
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('u');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "M4lE4A#k1`$qz|2pz";
      stringArray0[1] = "3y};CLMb+2<g(Eu`CQ";
      stringArray0[2] = ")";
      stringArray0[3] = "op";
      stringArray0[4] = "";
      stringArray0[5] = "7|N.W~CfAl.c6tK8I";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
      cSVFormat5.withNullString("}(KQ|!$R3d8~|EGAdp");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      boolean boolean0 = true;
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      char char0 = '3';
      cSVFormat1.INFORMIX_UNLOAD_CSV.withEscape('3');
      cSVFormat4.withQuote('3');
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat1.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(':');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("");
      // Undeclared exception!
      try { 
        cSVFormat4.withQuote(':');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same (':')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote('{');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('{')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.csv.ExtendedBufferedReader", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)9;
      mockPrintStream0.write(byteArray0);
      cSVFormat2.print((Appendable) mockPrintStream0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      Double double0 = new Double((byte)124);
      cSVFormat3.print((Object) double0, (Appendable) mockPrintStream0, true);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(988);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Charset.defaultCharset();
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Character character0 = Character.valueOf('$');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.print((Appendable) charBuffer1);
      cSVFormat0.hashCode();
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat0.DEFAULT.print((Appendable) charBuffer0);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CSVFormat cSVFormat0 = CSVFormat.TDF;
          char char0 = '\"';
          CSVFormat cSVFormat1 = cSVFormat0.withQuote('\"');
          CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
          CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
          cSVFormat3.DEFAULT.withAllowMissingColumnNames();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor73.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('G');
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat3.getQuoteMode();
      String string0 = ")>k";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(")>k", ")>k");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // )>k
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('o');
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);
      char char0 = 'v';
      cSVFormat2.withQuote('N');
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('N');
      Character.valueOf('v');
      Character character0 = new Character('Z');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape(character0);
      Object[] objectArray0 = new Object[0];
      cSVFormat4.format(objectArray0);
      cSVFormat3.withEscape('m');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "");
      cSVFormat4.println(charArrayWriter1);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('b');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('%');
      Character character0 = Character.valueOf('b');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.TDF.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withQuoteMode(quoteMode0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat3.DEFAULT.withHeader(class0);
      cSVFormat2.TDF.withTrailingDelimiter(false);
      cSVFormat4.withCommentMarker('7');
      String string0 = "";
      cSVFormat3.INFORMIX_UNLOAD_CSV.withRecordSeparator("");
      CSVFormat cSVFormat5 = cSVFormat3.INFORMIX_UNLOAD_CSV.withCommentMarker('%');
      cSVFormat5.INFORMIX_UNLOAD_CSV.withQuote('b');
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('b')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat1.getCommentMarker();
      String string0 = "f`Z";
      MockPrintStream mockPrintStream0 = new MockPrintStream("f`Z");
      Locale locale0 = Locale.ITALY;
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD.withEscape('D');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 34);
      cSVFormat2.MYSQL.parse(pipedReader0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat3.RFC4180.withTrim();
      cSVFormat3.INFORMIX_UNLOAD.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "f`Z";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "f`Z", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      Locale.getISOLanguages();
      MockFile mockFile0 = new MockFile("f`Z", "f`Z");
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat1.INFORMIX_UNLOAD.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      boolean boolean0 = false;
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat3.withTrailingDelimiter();
      Reader reader0 = null;
      // Undeclared exception!
      try { 
        cSVFormat3.EXCEL.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char char0 = 'E';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('E');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) stringWriter1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat1.INFORMIX_UNLOAD_CSV.printRecord(stringWriter1, objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape('E');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('E')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      boolean boolean0 = true;
      cSVFormat0.MYSQL.withSkipHeaderRecord(true);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat1.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = true;
      cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      Character character0 = new Character('4');
      cSVFormat2.withCommentMarker(character0);
      cSVFormat2.EXCEL.withCommentMarker('e');
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat2.RFC4180.format(objectArray0);
      cSVFormat1.MYSQL.withAllowMissingColumnNames();
      cSVFormat1.getQuoteMode();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVFormat@0000000001", "-M13@M/1eV%Q0E");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -M13@M/1eV%Q0E
         //
         verifyException("java.io.PrintStream", e);
      }
  }
}
